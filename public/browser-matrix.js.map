{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "node_modules/@babel/runtime/helpers/assertThisInitialized.js",
    "node_modules/@babel/runtime/helpers/classCallCheck.js",
    "node_modules/@babel/runtime/helpers/construct.js",
    "node_modules/@babel/runtime/helpers/createClass.js",
    "node_modules/@babel/runtime/helpers/getPrototypeOf.js",
    "node_modules/@babel/runtime/helpers/inherits.js",
    "node_modules/@babel/runtime/helpers/interopRequireDefault.js",
    "node_modules/@babel/runtime/helpers/isNativeFunction.js",
    "node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js",
    "node_modules/@babel/runtime/helpers/possibleConstructorReturn.js",
    "node_modules/@babel/runtime/helpers/setPrototypeOf.js",
    "node_modules/@babel/runtime/helpers/typeof.js",
    "node_modules/@babel/runtime/helpers/wrapNativeSuper.js",
    "node_modules/another-json/another-json.js",
    "node_modules/base-x/src/index.js",
    "node_modules/base64-js/index.js",
    "node_modules/browser-request/index.js",
    "node_modules/browser-resolve/empty.js",
    "node_modules/browserify/node_modules/punycode/punycode.js",
    "node_modules/bs58/index.js",
    "node_modules/buffer/index.js",
    "node_modules/call-bind/callBound.js",
    "node_modules/call-bind/index.js",
    "node_modules/content-type/index.js",
    "node_modules/events/events.js",
    "node_modules/function-bind/implementation.js",
    "node_modules/function-bind/index.js",
    "node_modules/get-intrinsic/index.js",
    "node_modules/has-symbols/index.js",
    "node_modules/has-symbols/shams.js",
    "node_modules/has/src/index.js",
    "node_modules/ieee754/index.js",
    "node_modules/loglevel/lib/loglevel.js",
    "node_modules/matrix-events-sdk/lib/ExtensibleEvents.js",
    "node_modules/matrix-events-sdk/lib/IPartialEvent.js",
    "node_modules/matrix-events-sdk/lib/InvalidEventError.js",
    "node_modules/matrix-events-sdk/lib/NamespacedMap.js",
    "node_modules/matrix-events-sdk/lib/NamespacedValue.js",
    "node_modules/matrix-events-sdk/lib/events/EmoteEvent.js",
    "node_modules/matrix-events-sdk/lib/events/ExtensibleEvent.js",
    "node_modules/matrix-events-sdk/lib/events/MessageEvent.js",
    "node_modules/matrix-events-sdk/lib/events/NoticeEvent.js",
    "node_modules/matrix-events-sdk/lib/events/PollEndEvent.js",
    "node_modules/matrix-events-sdk/lib/events/PollResponseEvent.js",
    "node_modules/matrix-events-sdk/lib/events/PollStartEvent.js",
    "node_modules/matrix-events-sdk/lib/events/message_types.js",
    "node_modules/matrix-events-sdk/lib/events/poll_types.js",
    "node_modules/matrix-events-sdk/lib/events/relationship_types.js",
    "node_modules/matrix-events-sdk/lib/index.js",
    "node_modules/matrix-events-sdk/lib/interpreters/legacy/MRoomMessage.js",
    "node_modules/matrix-events-sdk/lib/interpreters/modern/MMessage.js",
    "node_modules/matrix-events-sdk/lib/interpreters/modern/MPoll.js",
    "node_modules/matrix-events-sdk/lib/types.js",
    "node_modules/matrix-events-sdk/lib/utility/MessageMatchers.js",
    "node_modules/matrix-events-sdk/lib/utility/events.js",
    "node_modules/object-inspect/index.js",
    "node_modules/p-retry/index.js",
    "node_modules/process/browser.js",
    "node_modules/qs/lib/formats.js",
    "node_modules/qs/lib/index.js",
    "node_modules/qs/lib/parse.js",
    "node_modules/qs/lib/stringify.js",
    "node_modules/qs/lib/utils.js",
    "node_modules/querystring-es3/decode.js",
    "node_modules/querystring-es3/encode.js",
    "node_modules/querystring-es3/index.js",
    "node_modules/retry/index.js",
    "node_modules/retry/lib/retry.js",
    "node_modules/retry/lib/retry_operation.js",
    "node_modules/safe-buffer/index.js",
    "node_modules/side-channel/index.js",
    "node_modules/unhomoglyph/data.json",
    "node_modules/unhomoglyph/index.js",
    "node_modules/url/url.js",
    "node_modules/url/util.js",
    "src/@types/PushRules.ts",
    "src/@types/beacon.ts",
    "src/@types/event.ts",
    "src/@types/extensible_events.ts",
    "src/@types/location.ts",
    "src/@types/partials.ts",
    "src/@types/requests.ts",
    "src/@types/search.ts",
    "src/NamespacedValue.ts",
    "src/ReEmitter.ts",
    "src/autodiscovery.ts",
    "src/browser-index.js",
    "src/client.ts",
    "src/content-helpers.ts",
    "src/content-repo.ts",
    "src/crypto/CrossSigning.ts",
    "src/crypto/DeviceList.ts",
    "src/crypto/EncryptionSetup.ts",
    "src/crypto/OlmDevice.ts",
    "src/crypto/OutgoingRoomKeyRequestManager.ts",
    "src/crypto/RoomList.ts",
    "src/crypto/SecretStorage.ts",
    "src/crypto/aes.ts",
    "src/crypto/algorithms/base.ts",
    "src/crypto/algorithms/index.ts",
    "src/crypto/algorithms/megolm.ts",
    "src/crypto/algorithms/olm.ts",
    "src/crypto/api.ts",
    "src/crypto/backup.ts",
    "src/crypto/dehydration.ts",
    "src/crypto/deviceinfo.ts",
    "src/crypto/index.ts",
    "src/crypto/key_passphrase.ts",
    "src/crypto/olmlib.ts",
    "src/crypto/recoverykey.ts",
    "src/crypto/store/indexeddb-crypto-store-backend.ts",
    "src/crypto/store/indexeddb-crypto-store.ts",
    "src/crypto/store/localStorage-crypto-store.ts",
    "src/crypto/store/memory-crypto-store.ts",
    "src/crypto/verification/Base.ts",
    "src/crypto/verification/Error.ts",
    "src/crypto/verification/IllegalMethod.ts",
    "src/crypto/verification/QRCode.ts",
    "src/crypto/verification/SAS.ts",
    "src/crypto/verification/request/InRoomChannel.ts",
    "src/crypto/verification/request/ToDeviceChannel.ts",
    "src/crypto/verification/request/VerificationRequest.ts",
    "src/errors.js",
    "src/event-mapper.ts",
    "src/filter-component.ts",
    "src/filter.ts",
    "src/http-api.ts",
    "src/indexeddb-helpers.ts",
    "src/interactive-auth.ts",
    "src/logger.ts",
    "src/matrix.ts",
    "src/models/MSC3089Branch.ts",
    "src/models/MSC3089TreeSpace.ts",
    "src/models/beacon.ts",
    "src/models/event-context.ts",
    "src/models/event-status.ts",
    "src/models/event-timeline-set.ts",
    "src/models/event-timeline.ts",
    "src/models/event.ts",
    "src/models/relations.ts",
    "src/models/room-member.ts",
    "src/models/room-state.ts",
    "src/models/room-summary.ts",
    "src/models/room.ts",
    "src/models/search-result.ts",
    "src/models/thread.ts",
    "src/models/typed-event-emitter.ts",
    "src/models/user.ts",
    "src/pushprocessor.ts",
    "src/randomstring.ts",
    "src/realtime-callbacks.ts",
    "src/scheduler.ts",
    "src/service-types.ts",
    "src/store/indexeddb-local-backend.ts",
    "src/store/indexeddb-remote-backend.ts",
    "src/store/indexeddb.ts",
    "src/store/memory.ts",
    "src/store/session/webstorage.js",
    "src/store/stub.ts",
    "src/sync-accumulator.ts",
    "src/sync.ts",
    "src/timeline-window.ts",
    "src/utils.ts",
    "src/webrtc/call.ts",
    "src/webrtc/callEventHandler.ts",
    "src/webrtc/callEventTypes.ts",
    "src/webrtc/callFeed.ts",
    "src/webrtc/mediaHandler.ts"
  ],
  "names": [],
  "mappings": "AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzvterhjvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfjfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1CA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5LA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpprKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClrNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClzrMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9RA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrxLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvvpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrFA;AACA;AACA;AACA;AACA;;ACJA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACplKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjxqMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACptBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AChBA;;;;;;;;;;;;;;EAcE;;;AAEF,4DAA4D;AAC5D,8BAA8B;AAE9B,IAAY,kBAIX;AAJD,WAAY,kBAAkB;IAC1B,gDAA0B,CAAA;IAC1B,uCAAiB,CAAA;IACjB,2CAAqB,CAAA;AACzB,CAAC,EAJW,kBAAkB,GAAlB,0BAAkB,KAAlB,0BAAkB,QAI7B;AAED,IAAY,SAGX;AAHD,WAAY,SAAS;IACjB,oCAAuB,CAAA;IACvB,4BAAe,CAAA;AACnB,CAAC,EAHW,SAAS,GAAT,iBAAS,KAAT,iBAAS,QAGpB;AAYD,IAAY,iBAMX;AAND,WAAY,iBAAiB;IACzB,uCAAkB,CAAA;IAClB,mCAAc,CAAA;IACd,sCAAiB,CAAA;IACjB,8CAAyB,CAAA;IACzB,2CAAsB,CAAA;AAC1B,CAAC,EANW,iBAAiB,GAAjB,yBAAiB,KAAjB,yBAAiB,QAM5B;AAUY,QAAA,sBAAsB,GAA4B,GAAG,CAAC;AAEnE,SAAgB,wBAAwB,CAAC,SAAkC;IACvE,OAAO,SAAS,KAAK,KAAK,IAAI,SAAS,KAAK,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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",
    "function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nmodule.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;",
    "function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;",
    "var setPrototypeOf = require(\"./setPrototypeOf.js\");\n\nvar isNativeReflectConstruct = require(\"./isNativeReflectConstruct.js\");\n\nfunction _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    module.exports = _construct = Reflect.construct, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  } else {\n    module.exports = _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nmodule.exports = _construct, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;",
    "function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nmodule.exports = _createClass, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;",
    "function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _getPrototypeOf(o);\n}\n\nmodule.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;",
    "var setPrototypeOf = require(\"./setPrototypeOf.js\");\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\n\nmodule.exports = _inherits, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;",
    "function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nmodule.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;",
    "function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\n\nmodule.exports = _isNativeFunction, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;",
    "function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nmodule.exports = _isNativeReflectConstruct, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;",
    "var _typeof = require(\"./typeof.js\")[\"default\"];\n\nvar assertThisInitialized = require(\"./assertThisInitialized.js\");\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return assertThisInitialized(self);\n}\n\nmodule.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;",
    "function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _setPrototypeOf(o, p);\n}\n\nmodule.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;",
    "function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return (module.exports = _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports), _typeof(obj);\n}\n\nmodule.exports = _typeof, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;",
    "var getPrototypeOf = require(\"./getPrototypeOf.js\");\n\nvar setPrototypeOf = require(\"./setPrototypeOf.js\");\n\nvar isNativeFunction = require(\"./isNativeFunction.js\");\n\nvar construct = require(\"./construct.js\");\n\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  module.exports = _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _wrapNativeSuper(Class);\n}\n\nmodule.exports = _wrapNativeSuper, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;",
    "/* Copyright 2015 Mark Haines\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'use strict';\n\nvar escaped = /[\\\\\\\"\\x00-\\x1F]/g;\nvar escapes = {};\nfor (var i = 0; i < 0x20; ++i) {\n    escapes[String.fromCharCode(i)] = (\n        '\\\\U' + ('0000' + i.toString(16)).slice(-4).toUpperCase()\n    );\n}\nescapes['\\b'] = '\\\\b';\nescapes['\\t'] = '\\\\t';\nescapes['\\n'] = '\\\\n';\nescapes['\\f'] = '\\\\f';\nescapes['\\r'] = '\\\\r';\nescapes['\\\"'] = '\\\\\\\"';\nescapes['\\\\'] = '\\\\\\\\';\n\nfunction escapeString(value) {\n    escaped.lastIndex = 0;\n    return value.replace(escaped, function(c) { return escapes[c]; });\n}\n\nfunction stringify(value) {\n    switch (typeof value) {\n        case 'string':\n            return '\"' + escapeString(value) + '\"';\n        case 'number':\n            return isFinite(value) ? value : 'null';\n        case 'boolean':\n            return value;\n        case 'object':\n            if (value === null) {\n                return 'null';\n            }\n            if (Array.isArray(value)) {\n                return stringifyArray(value);\n            }\n            return stringifyObject(value);\n        default:\n            throw new Error('Cannot stringify: ' + typeof value);\n    }\n}\n\nfunction stringifyArray(array) {\n    var sep = '[';\n    var result = '';\n    for (var i = 0; i < array.length; ++i) {\n        result += sep;\n        sep = ',';\n        result += stringify(array[i]);\n    }\n    if (sep != ',') {\n        return '[]';\n    } else {\n        return result + ']';\n    }\n}\n\nfunction stringifyObject(object) {\n    var sep = '{';\n    var result = '';\n    var keys = Object.keys(object);\n    keys.sort();\n    for (var i = 0; i < keys.length; ++i) {\n        var key = keys[i];\n        result += sep + '\"' + escapeString(key) + '\":';\n        sep = ',';\n        result += stringify(object[key]);\n    }\n    if (sep != ',') {\n        return '{}';\n    } else {\n        return result + '}';\n    }\n}\n\n/** */\nmodule.exports = {stringify: stringify};\n",
    "'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n",
    "'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n",
    "// Browser Request\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// UMD HEADER START \n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define([], factory);\n    } else if (typeof exports === 'object') {\n        // Node. Does not work with strict CommonJS, but\n        // only CommonJS-like enviroments that support module.exports,\n        // like Node.\n        module.exports = factory();\n    } else {\n        // Browser globals (root is window)\n        root.returnExports = factory();\n  }\n}(this, function () {\n// UMD HEADER END\n\nvar XHR = XMLHttpRequest\nif (!XHR) throw new Error('missing XMLHttpRequest')\nrequest.log = {\n  'trace': noop, 'debug': noop, 'info': noop, 'warn': noop, 'error': noop\n}\n\nvar DEFAULT_TIMEOUT = 3 * 60 * 1000 // 3 minutes\n\n//\n// request\n//\n\nfunction request(options, callback) {\n  // The entry-point to the API: prep the options object and pass the real work to run_xhr.\n  if(typeof callback !== 'function')\n    throw new Error('Bad callback given: ' + callback)\n\n  if(!options)\n    throw new Error('No options given')\n\n  var options_onResponse = options.onResponse; // Save this for later.\n\n  if(typeof options === 'string')\n    options = {'uri':options};\n  else\n    options = JSON.parse(JSON.stringify(options)); // Use a duplicate for mutating.\n\n  options.onResponse = options_onResponse // And put it back.\n\n  if (options.verbose) request.log = getLogger();\n\n  if(options.url) {\n    options.uri = options.url;\n    delete options.url;\n  }\n\n  if(!options.uri && options.uri !== \"\")\n    throw new Error(\"options.uri is a required argument\");\n\n  if(typeof options.uri != \"string\")\n    throw new Error(\"options.uri must be a string\");\n\n  var unsupported_options = ['proxy', '_redirectsFollowed', 'maxRedirects', 'followRedirect']\n  for (var i = 0; i < unsupported_options.length; i++)\n    if(options[ unsupported_options[i] ])\n      throw new Error(\"options.\" + unsupported_options[i] + \" is not supported\")\n\n  options.callback = callback\n  options.method = options.method || 'GET';\n  options.headers = options.headers || {};\n  options.body    = options.body || null\n  options.timeout = options.timeout || request.DEFAULT_TIMEOUT\n\n  if(options.headers.host)\n    throw new Error(\"Options.headers.host is not supported\");\n\n  if(options.json) {\n    options.headers.accept = options.headers.accept || 'application/json'\n    if(options.method !== 'GET')\n      options.headers['content-type'] = 'application/json'\n\n    if(typeof options.json !== 'boolean')\n      options.body = JSON.stringify(options.json)\n    else if(typeof options.body !== 'string')\n      options.body = JSON.stringify(options.body)\n  }\n  \n  //BEGIN QS Hack\n  var serialize = function(obj) {\n    var str = [];\n    for(var p in obj)\n      if (obj.hasOwnProperty(p)) {\n        str.push(encodeURIComponent(p) + \"=\" + encodeURIComponent(obj[p]));\n      }\n    return str.join(\"&\");\n  }\n  \n  if(options.qs){\n    var qs = (typeof options.qs == 'string')? options.qs : serialize(options.qs);\n    if(options.uri.indexOf('?') !== -1){ //no get params\n        options.uri = options.uri+'&'+qs;\n    }else{ //existing get params\n        options.uri = options.uri+'?'+qs;\n    }\n  }\n  //END QS Hack\n  \n  //BEGIN FORM Hack\n  var multipart = function(obj) {\n    //todo: support file type (useful?)\n    var result = {};\n    result.boundry = '-------------------------------'+Math.floor(Math.random()*1000000000);\n    var lines = [];\n    for(var p in obj){\n        if (obj.hasOwnProperty(p)) {\n            lines.push(\n                '--'+result.boundry+\"\\n\"+\n                'Content-Disposition: form-data; name=\"'+p+'\"'+\"\\n\"+\n                \"\\n\"+\n                obj[p]+\"\\n\"\n            );\n        }\n    }\n    lines.push( '--'+result.boundry+'--' );\n    result.body = lines.join('');\n    result.length = result.body.length;\n    result.type = 'multipart/form-data; boundary='+result.boundry;\n    return result;\n  }\n  \n  if(options.form){\n    if(typeof options.form == 'string') throw('form name unsupported');\n    if(options.method === 'POST'){\n        var encoding = (options.encoding || 'application/x-www-form-urlencoded').toLowerCase();\n        options.headers['content-type'] = encoding;\n        switch(encoding){\n            case 'application/x-www-form-urlencoded':\n                options.body = serialize(options.form).replace(/%20/g, \"+\");\n                break;\n            case 'multipart/form-data':\n                var multi = multipart(options.form);\n                //options.headers['content-length'] = multi.length;\n                options.body = multi.body;\n                options.headers['content-type'] = multi.type;\n                break;\n            default : throw new Error('unsupported encoding:'+encoding);\n        }\n    }\n  }\n  //END FORM Hack\n\n  // If onResponse is boolean true, call back immediately when the response is known,\n  // not when the full request is complete.\n  options.onResponse = options.onResponse || noop\n  if(options.onResponse === true) {\n    options.onResponse = callback\n    options.callback = noop\n  }\n\n  // XXX Browsers do not like this.\n  //if(options.body)\n  //  options.headers['content-length'] = options.body.length;\n\n  // HTTP basic authentication\n  if(!options.headers.authorization && options.auth)\n    options.headers.authorization = 'Basic ' + b64_enc(options.auth.username + ':' + options.auth.password);\n\n  return run_xhr(options)\n}\n\nvar req_seq = 0\nfunction run_xhr(options) {\n  var xhr = new XHR\n    , timed_out = false\n    , is_cors = is_crossDomain(options.uri)\n    , supports_cors = ('withCredentials' in xhr)\n\n  req_seq += 1\n  xhr.seq_id = req_seq\n  xhr.id = req_seq + ': ' + options.method + ' ' + options.uri\n  xhr._id = xhr.id // I know I will type \"_id\" from habit all the time.\n\n  if(is_cors && !supports_cors) {\n    var cors_err = new Error('Browser does not support cross-origin request: ' + options.uri)\n    cors_err.cors = 'unsupported'\n    return options.callback(cors_err, xhr)\n  }\n\n  xhr.timeoutTimer = setTimeout(too_late, options.timeout)\n  function too_late() {\n    timed_out = true\n    var er = new Error('ETIMEDOUT')\n    er.code = 'ETIMEDOUT'\n    er.duration = options.timeout\n\n    request.log.error('Timeout', { 'id':xhr._id, 'milliseconds':options.timeout })\n    return options.callback(er, xhr)\n  }\n\n  // Some states can be skipped over, so remember what is still incomplete.\n  var did = {'response':false, 'loading':false, 'end':false}\n\n  xhr.onreadystatechange = on_state_change\n  xhr.open(options.method, options.uri, true) // asynchronous\n  if(is_cors)\n    xhr.withCredentials = !! options.withCredentials\n  xhr.send(options.body)\n  return xhr\n\n  function on_state_change(event) {\n    if(timed_out)\n      return request.log.debug('Ignoring timed out state change', {'state':xhr.readyState, 'id':xhr.id})\n\n    request.log.debug('State change', {'state':xhr.readyState, 'id':xhr.id, 'timed_out':timed_out})\n\n    if(xhr.readyState === XHR.OPENED) {\n      request.log.debug('Request started', {'id':xhr.id})\n      for (var key in options.headers)\n        xhr.setRequestHeader(key, options.headers[key])\n    }\n\n    else if(xhr.readyState === XHR.HEADERS_RECEIVED)\n      on_response()\n\n    else if(xhr.readyState === XHR.LOADING) {\n      on_response()\n      on_loading()\n    }\n\n    else if(xhr.readyState === XHR.DONE) {\n      on_response()\n      on_loading()\n      on_end()\n    }\n  }\n\n  function on_response() {\n    if(did.response)\n      return\n\n    did.response = true\n    request.log.debug('Got response', {'id':xhr.id, 'status':xhr.status})\n    clearTimeout(xhr.timeoutTimer)\n    xhr.statusCode = xhr.status // Node request compatibility\n\n    // Detect failed CORS requests.\n    if(is_cors && xhr.statusCode == 0) {\n      var cors_err = new Error('CORS request rejected: ' + options.uri)\n      cors_err.cors = 'rejected'\n\n      // Do not process this request further.\n      did.loading = true\n      did.end = true\n\n      return options.callback(cors_err, xhr)\n    }\n\n    options.onResponse(null, xhr)\n  }\n\n  function on_loading() {\n    if(did.loading)\n      return\n\n    did.loading = true\n    request.log.debug('Response body loading', {'id':xhr.id})\n    // TODO: Maybe simulate \"data\" events by watching xhr.responseText\n  }\n\n  function on_end() {\n    if(did.end)\n      return\n\n    did.end = true\n    request.log.debug('Request done', {'id':xhr.id})\n\n    xhr.body = xhr.responseText\n    if(options.json) {\n      try        { xhr.body = JSON.parse(xhr.responseText) }\n      catch (er) { return options.callback(er, xhr)        }\n    }\n\n    options.callback(null, xhr, xhr.body)\n  }\n\n} // request\n\nrequest.withCredentials = false;\nrequest.DEFAULT_TIMEOUT = DEFAULT_TIMEOUT;\n\n//\n// defaults\n//\n\nrequest.defaults = function(options, requester) {\n  var def = function (method) {\n    var d = function (params, callback) {\n      if(typeof params === 'string')\n        params = {'uri': params};\n      else {\n        params = JSON.parse(JSON.stringify(params));\n      }\n      for (var i in options) {\n        if (params[i] === undefined) params[i] = options[i]\n      }\n      return method(params, callback)\n    }\n    return d\n  }\n  var de = def(request)\n  de.get = def(request.get)\n  de.post = def(request.post)\n  de.put = def(request.put)\n  de.head = def(request.head)\n  return de\n}\n\n//\n// HTTP method shortcuts\n//\n\nvar shortcuts = [ 'get', 'put', 'post', 'head' ];\nshortcuts.forEach(function(shortcut) {\n  var method = shortcut.toUpperCase();\n  var func   = shortcut.toLowerCase();\n\n  request[func] = function(opts) {\n    if(typeof opts === 'string')\n      opts = {'method':method, 'uri':opts};\n    else {\n      opts = JSON.parse(JSON.stringify(opts));\n      opts.method = method;\n    }\n\n    var args = [opts].concat(Array.prototype.slice.apply(arguments, [1]));\n    return request.apply(this, args);\n  }\n})\n\n//\n// CouchDB shortcut\n//\n\nrequest.couch = function(options, callback) {\n  if(typeof options === 'string')\n    options = {'uri':options}\n\n  // Just use the request API to do JSON.\n  options.json = true\n  if(options.body)\n    options.json = options.body\n  delete options.body\n\n  callback = callback || noop\n\n  var xhr = request(options, couch_handler)\n  return xhr\n\n  function couch_handler(er, resp, body) {\n    if(er)\n      return callback(er, resp, body)\n\n    if((resp.statusCode < 200 || resp.statusCode > 299) && body.error) {\n      // The body is a Couch JSON object indicating the error.\n      er = new Error('CouchDB error: ' + (body.error.reason || body.error.error))\n      for (var key in body)\n        er[key] = body[key]\n      return callback(er, resp, body);\n    }\n\n    return callback(er, resp, body);\n  }\n}\n\n//\n// Utility\n//\n\nfunction noop() {}\n\nfunction getLogger() {\n  var logger = {}\n    , levels = ['trace', 'debug', 'info', 'warn', 'error']\n    , level, i\n\n  for(i = 0; i < levels.length; i++) {\n    level = levels[i]\n\n    logger[level] = noop\n    if(typeof console !== 'undefined' && console && console[level])\n      logger[level] = formatted(console, level)\n  }\n\n  return logger\n}\n\nfunction formatted(obj, method) {\n  return formatted_logger\n\n  function formatted_logger(str, context) {\n    if(typeof context === 'object')\n      str += ' ' + JSON.stringify(context)\n\n    return obj[method].call(obj, str)\n  }\n}\n\n// Return whether a URL is a cross-domain request.\nfunction is_crossDomain(url) {\n  var rurl = /^([\\w\\+\\.\\-]+:)(?:\\/\\/([^\\/?#:]*)(?::(\\d+))?)?/\n\n  // jQuery #8138, IE may throw an exception when accessing\n  // a field from window.location if document.domain has been set\n  var ajaxLocation\n  try { ajaxLocation = location.href }\n  catch (e) {\n    // Use the href attribute of an A element since IE will modify it given document.location\n    ajaxLocation = document.createElement( \"a\" );\n    ajaxLocation.href = \"\";\n    ajaxLocation = ajaxLocation.href;\n  }\n\n  var ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || []\n    , parts = rurl.exec(url.toLowerCase() )\n\n  var result = !!(\n    parts &&\n    (  parts[1] != ajaxLocParts[1]\n    || parts[2] != ajaxLocParts[2]\n    || (parts[3] || (parts[1] === \"http:\" ? 80 : 443)) != (ajaxLocParts[3] || (ajaxLocParts[1] === \"http:\" ? 80 : 443))\n    )\n  )\n\n  //console.debug('is_crossDomain('+url+') -> ' + result)\n  return result\n}\n\n// MIT License from http://phpjs.org/functions/base64_encode:358\nfunction b64_enc (data) {\n    // Encodes string using MIME base64 algorithm\n    var b64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n    var o1, o2, o3, h1, h2, h3, h4, bits, i = 0, ac = 0, enc=\"\", tmp_arr = [];\n\n    if (!data) {\n        return data;\n    }\n\n    // assume utf8 data\n    // data = this.utf8_encode(data+'');\n\n    do { // pack three octets into four hexets\n        o1 = data.charCodeAt(i++);\n        o2 = data.charCodeAt(i++);\n        o3 = data.charCodeAt(i++);\n\n        bits = o1<<16 | o2<<8 | o3;\n\n        h1 = bits>>18 & 0x3f;\n        h2 = bits>>12 & 0x3f;\n        h3 = bits>>6 & 0x3f;\n        h4 = bits & 0x3f;\n\n        // use hexets to index into b64, and append result to encoded string\n        tmp_arr[ac++] = b64.charAt(h1) + b64.charAt(h2) + b64.charAt(h3) + b64.charAt(h4);\n    } while (i < data.length);\n\n    enc = tmp_arr.join('');\n\n    switch (data.length % 3) {\n        case 1:\n            enc = enc.slice(0, -2) + '==';\n        break;\n        case 2:\n            enc = enc.slice(0, -1) + '=';\n        break;\n    }\n\n    return enc;\n}\n    return request;\n//UMD FOOTER START\n}));\n//UMD FOOTER END\n",
    "",
    "/*! https://mths.be/punycode v1.4.1 by @mathias */\n;(function(root) {\n\n\t/** Detect free variables */\n\tvar freeExports = typeof exports == 'object' && exports &&\n\t\t!exports.nodeType && exports;\n\tvar freeModule = typeof module == 'object' && module &&\n\t\t!module.nodeType && module;\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (\n\t\tfreeGlobal.global === freeGlobal ||\n\t\tfreeGlobal.window === freeGlobal ||\n\t\tfreeGlobal.self === freeGlobal\n\t) {\n\t\troot = freeGlobal;\n\t}\n\n\t/**\n\t * The `punycode` object.\n\t * @name punycode\n\t * @type Object\n\t */\n\tvar punycode,\n\n\t/** Highest positive signed 32-bit float value */\n\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tbase = 36,\n\ttMin = 1,\n\ttMax = 26,\n\tskew = 38,\n\tdamp = 700,\n\tinitialBias = 72,\n\tinitialN = 128, // 0x80\n\tdelimiter = '-', // '\\x2D'\n\n\t/** Regular expressions */\n\tregexPunycode = /^xn--/,\n\tregexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\n\tregexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 3490 separators\n\n\t/** Error messages */\n\terrors = {\n\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t'invalid-input': 'Invalid input'\n\t},\n\n\t/** Convenience shortcuts */\n\tbaseMinusTMin = base - tMin,\n\tfloor = Math.floor,\n\tstringFromCharCode = String.fromCharCode,\n\n\t/** Temporary variable */\n\tkey;\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/**\n\t * A generic error utility function.\n\t * @private\n\t * @param {String} type The error type.\n\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t */\n\tfunction error(type) {\n\t\tthrow new RangeError(errors[type]);\n\t}\n\n\t/**\n\t * A generic `Array#map` utility function.\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} callback The function that gets called for every array\n\t * item.\n\t * @returns {Array} A new array of values returned by the callback function.\n\t */\n\tfunction map(array, fn) {\n\t\tvar length = array.length;\n\t\tvar result = [];\n\t\twhile (length--) {\n\t\t\tresult[length] = fn(array[length]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * A simple `Array#map`-like wrapper to work with domain name strings or email\n\t * addresses.\n\t * @private\n\t * @param {String} domain The domain name or email address.\n\t * @param {Function} callback The function that gets called for every\n\t * character.\n\t * @returns {Array} A new string of characters returned by the callback\n\t * function.\n\t */\n\tfunction mapDomain(string, fn) {\n\t\tvar parts = string.split('@');\n\t\tvar result = '';\n\t\tif (parts.length > 1) {\n\t\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t\t// the local part (i.e. everything up to `@`) intact.\n\t\t\tresult = parts[0] + '@';\n\t\t\tstring = parts[1];\n\t\t}\n\t\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\t\tstring = string.replace(regexSeparators, '\\x2E');\n\t\tvar labels = string.split('.');\n\t\tvar encoded = map(labels, fn).join('.');\n\t\treturn result + encoded;\n\t}\n\n\t/**\n\t * Creates an array containing the numeric code points of each Unicode\n\t * character in the string. While JavaScript uses UCS-2 internally,\n\t * this function will convert a pair of surrogate halves (each of which\n\t * UCS-2 exposes as separate characters) into a single code point,\n\t * matching UTF-16.\n\t * @see `punycode.ucs2.encode`\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode.ucs2\n\t * @name decode\n\t * @param {String} string The Unicode input string (UCS-2).\n\t * @returns {Array} The new array of code points.\n\t */\n\tfunction ucs2decode(string) {\n\t\tvar output = [],\n\t\t    counter = 0,\n\t\t    length = string.length,\n\t\t    value,\n\t\t    extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Creates a string based on an array of numeric code points.\n\t * @see `punycode.ucs2.decode`\n\t * @memberOf punycode.ucs2\n\t * @name encode\n\t * @param {Array} codePoints The array of numeric code points.\n\t * @returns {String} The new Unicode string (UCS-2).\n\t */\n\tfunction ucs2encode(array) {\n\t\treturn map(array, function(value) {\n\t\t\tvar output = '';\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t\treturn output;\n\t\t}).join('');\n\t}\n\n\t/**\n\t * Converts a basic code point into a digit/integer.\n\t * @see `digitToBasic()`\n\t * @private\n\t * @param {Number} codePoint The basic numeric code point value.\n\t * @returns {Number} The numeric value of a basic code point (for use in\n\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t * the code point does not represent a value.\n\t */\n\tfunction basicToDigit(codePoint) {\n\t\tif (codePoint - 48 < 10) {\n\t\t\treturn codePoint - 22;\n\t\t}\n\t\tif (codePoint - 65 < 26) {\n\t\t\treturn codePoint - 65;\n\t\t}\n\t\tif (codePoint - 97 < 26) {\n\t\t\treturn codePoint - 97;\n\t\t}\n\t\treturn base;\n\t}\n\n\t/**\n\t * Converts a digit/integer into a basic code point.\n\t * @see `basicToDigit()`\n\t * @private\n\t * @param {Number} digit The numeric value of a basic code point.\n\t * @returns {Number} The basic code point whose value (when used for\n\t * representing integers) is `digit`, which needs to be in the range\n\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t * used; else, the lowercase form is used. The behavior is undefined\n\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t */\n\tfunction digitToBasic(digit, flag) {\n\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t// 26..35 map to ASCII 0..9\n\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t}\n\n\t/**\n\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t * https://tools.ietf.org/html/rfc3492#section-3.4\n\t * @private\n\t */\n\tfunction adapt(delta, numPoints, firstTime) {\n\t\tvar k = 0;\n\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\tdelta += floor(delta / numPoints);\n\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t}\n\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t}\n\n\t/**\n\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t * @returns {String} The resulting string of Unicode symbols.\n\t */\n\tfunction decode(input) {\n\t\t// Don't use UCS-2\n\t\tvar output = [],\n\t\t    inputLength = input.length,\n\t\t    out,\n\t\t    i = 0,\n\t\t    n = initialN,\n\t\t    bias = initialBias,\n\t\t    basic,\n\t\t    j,\n\t\t    index,\n\t\t    oldi,\n\t\t    w,\n\t\t    k,\n\t\t    digit,\n\t\t    t,\n\t\t    /** Cached calculation results */\n\t\t    baseMinusT;\n\n\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t// the first basic code points to the output.\n\n\t\tbasic = input.lastIndexOf(delimiter);\n\t\tif (basic < 0) {\n\t\t\tbasic = 0;\n\t\t}\n\n\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t// if it's not a basic code point\n\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\terror('not-basic');\n\t\t\t}\n\t\t\toutput.push(input.charCodeAt(j));\n\t\t}\n\n\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t// points were copied; start at the beginning otherwise.\n\n\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t// value at the end to obtain `delta`.\n\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\terror('invalid-input');\n\t\t\t\t}\n\n\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\ti += digit * w;\n\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\t\tif (digit < t) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tbaseMinusT = base - t;\n\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tw *= baseMinusT;\n\n\t\t\t}\n\n\t\t\tout = output.length + 1;\n\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tn += floor(i / out);\n\t\t\ti %= out;\n\n\t\t\t// Insert `n` at position `i` of the output\n\t\t\toutput.splice(i++, 0, n);\n\n\t\t}\n\n\t\treturn ucs2encode(output);\n\t}\n\n\t/**\n\t * Converts a string of Unicode symbols (e.g. a domain name label) to a\n\t * Punycode string of ASCII-only symbols.\n\t * @memberOf punycode\n\t * @param {String} input The string of Unicode symbols.\n\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t */\n\tfunction encode(input) {\n\t\tvar n,\n\t\t    delta,\n\t\t    handledCPCount,\n\t\t    basicLength,\n\t\t    bias,\n\t\t    j,\n\t\t    m,\n\t\t    q,\n\t\t    k,\n\t\t    t,\n\t\t    currentValue,\n\t\t    output = [],\n\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t    inputLength,\n\t\t    /** Cached calculation results */\n\t\t    handledCPCountPlusOne,\n\t\t    baseMinusT,\n\t\t    qMinusT;\n\n\t\t// Convert the input in UCS-2 to Unicode\n\t\tinput = ucs2decode(input);\n\n\t\t// Cache the length\n\t\tinputLength = input.length;\n\n\t\t// Initialize the state\n\t\tn = initialN;\n\t\tdelta = 0;\n\t\tbias = initialBias;\n\n\t\t// Handle the basic code points\n\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\tcurrentValue = input[j];\n\t\t\tif (currentValue < 0x80) {\n\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t}\n\t\t}\n\n\t\thandledCPCount = basicLength = output.length;\n\n\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t// `basicLength` is the number of basic code points.\n\n\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\tif (basicLength) {\n\t\t\toutput.push(delimiter);\n\t\t}\n\n\t\t// Main encoding loop:\n\t\twhile (handledCPCount < inputLength) {\n\n\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t// larger one:\n\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\tm = currentValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t// but guard against overflow\n\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\tn = m;\n\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\n\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t);\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\t++handledCPCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t++delta;\n\t\t\t++n;\n\n\t\t}\n\t\treturn output.join('');\n\t}\n\n\t/**\n\t * Converts a Punycode string representing a domain name or an email address\n\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n\t * it doesn't matter if you call it on a string that has already been\n\t * converted to Unicode.\n\t * @memberOf punycode\n\t * @param {String} input The Punycoded domain name or email address to\n\t * convert to Unicode.\n\t * @returns {String} The Unicode representation of the given Punycode\n\t * string.\n\t */\n\tfunction toUnicode(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexPunycode.test(string)\n\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/**\n\t * Converts a Unicode string representing a domain name or an email address to\n\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n\t * i.e. it doesn't matter if you call it with a domain that's already in\n\t * ASCII.\n\t * @memberOf punycode\n\t * @param {String} input The domain name or email address to convert, as a\n\t * Unicode string.\n\t * @returns {String} The Punycode representation of the given domain name or\n\t * email address.\n\t */\n\tfunction toASCII(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/** Define the public API */\n\tpunycode = {\n\t\t/**\n\t\t * A string representing the current Punycode.js version number.\n\t\t * @memberOf punycode\n\t\t * @type String\n\t\t */\n\t\t'version': '1.4.1',\n\t\t/**\n\t\t * An object of methods to convert from JavaScript's internal character\n\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode\n\t\t * @type Object\n\t\t */\n\t\t'ucs2': {\n\t\t\t'decode': ucs2decode,\n\t\t\t'encode': ucs2encode\n\t\t},\n\t\t'decode': decode,\n\t\t'encode': encode,\n\t\t'toASCII': toASCII,\n\t\t'toUnicode': toUnicode\n\t};\n\n\t/** Expose `punycode` */\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine('punycode', function() {\n\t\t\treturn punycode;\n\t\t});\n\t} else if (freeExports && freeModule) {\n\t\tif (module.exports == freeExports) {\n\t\t\t// in Node.js, io.js, or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = punycode;\n\t\t} else {\n\t\t\t// in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (key in punycode) {\n\t\t\t\tpunycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// in Rhino or a web browser\n\t\troot.punycode = punycode;\n\t}\n\n}(this));\n",
    "var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n",
    "/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nvar K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  var buf = new Uint8Array(length)\n  buf.__proto__ = Buffer.prototype\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\n// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\nif (typeof Symbol !== 'undefined' && Symbol.species != null &&\n    Buffer[Symbol.species] === Buffer) {\n  Object.defineProperty(Buffer, Symbol.species, {\n    value: null,\n    configurable: true,\n    enumerable: false,\n    writable: false\n  })\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayLike(value)\n  }\n\n  if (value == null) {\n    throw TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  var valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  var b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(\n      value[Symbol.toPrimitive]('string'), encodingOrOffset, length\n    )\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nBuffer.prototype.__proto__ = Uint8Array.prototype\nBuffer.__proto__ = Uint8Array\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  var length = byteLength(string, encoding) | 0\n  var buf = createBuffer(length)\n\n  var actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  var buf = createBuffer(length)\n  for (var i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  var buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  buf.__proto__ = Buffer.prototype\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    var buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      buf = Buffer.from(buf)\n    }\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  var len = string.length\n  var mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  var strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n        : (firstByte > 0xBF) ? 2\n          : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  newBuf.__proto__ = Buffer.prototype\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (var i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    var len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n",
    "'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar callBind = require('./');\n\nvar $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));\n\nmodule.exports = function callBoundIntrinsic(name, allowMissing) {\n\tvar intrinsic = GetIntrinsic(name, !!allowMissing);\n\tif (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {\n\t\treturn callBind(intrinsic);\n\t}\n\treturn intrinsic;\n};\n",
    "'use strict';\n\nvar bind = require('function-bind');\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $apply = GetIntrinsic('%Function.prototype.apply%');\nvar $call = GetIntrinsic('%Function.prototype.call%');\nvar $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);\n\nvar $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);\nvar $defineProperty = GetIntrinsic('%Object.defineProperty%', true);\nvar $max = GetIntrinsic('%Math.max%');\n\nif ($defineProperty) {\n\ttry {\n\t\t$defineProperty({}, 'a', { value: 1 });\n\t} catch (e) {\n\t\t// IE 8 has a broken defineProperty\n\t\t$defineProperty = null;\n\t}\n}\n\nmodule.exports = function callBind(originalFunction) {\n\tvar func = $reflectApply(bind, $call, arguments);\n\tif ($gOPD && $defineProperty) {\n\t\tvar desc = $gOPD(func, 'length');\n\t\tif (desc.configurable) {\n\t\t\t// original length, plus the receiver, minus any additional arguments (after the receiver)\n\t\t\t$defineProperty(\n\t\t\t\tfunc,\n\t\t\t\t'length',\n\t\t\t\t{ value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }\n\t\t\t);\n\t\t}\n\t}\n\treturn func;\n};\n\nvar applyBind = function applyBind() {\n\treturn $reflectApply(bind, $apply, arguments);\n};\n\nif ($defineProperty) {\n\t$defineProperty(module.exports, 'apply', { value: applyBind });\n} else {\n\tmodule.exports.apply = applyBind;\n}\n",
    "/*!\n * content-type\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * RegExp to match *( \";\" parameter ) in RFC 7231 sec 3.1.1.1\n *\n * parameter     = token \"=\" ( token / quoted-string )\n * token         = 1*tchar\n * tchar         = \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" / \"*\"\n *               / \"+\" / \"-\" / \".\" / \"^\" / \"_\" / \"`\" / \"|\" / \"~\"\n *               / DIGIT / ALPHA\n *               ; any VCHAR, except delimiters\n * quoted-string = DQUOTE *( qdtext / quoted-pair ) DQUOTE\n * qdtext        = HTAB / SP / %x21 / %x23-5B / %x5D-7E / obs-text\n * obs-text      = %x80-FF\n * quoted-pair   = \"\\\" ( HTAB / SP / VCHAR / obs-text )\n */\nvar PARAM_REGEXP = /; *([!#$%&'*+.^_`|~0-9A-Za-z-]+) *= *(\"(?:[\\u000b\\u0020\\u0021\\u0023-\\u005b\\u005d-\\u007e\\u0080-\\u00ff]|\\\\[\\u000b\\u0020-\\u00ff])*\"|[!#$%&'*+.^_`|~0-9A-Za-z-]+) */g\nvar TEXT_REGEXP = /^[\\u000b\\u0020-\\u007e\\u0080-\\u00ff]+$/\nvar TOKEN_REGEXP = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+$/\n\n/**\n * RegExp to match quoted-pair in RFC 7230 sec 3.2.6\n *\n * quoted-pair = \"\\\" ( HTAB / SP / VCHAR / obs-text )\n * obs-text    = %x80-FF\n */\nvar QESC_REGEXP = /\\\\([\\u000b\\u0020-\\u00ff])/g\n\n/**\n * RegExp to match chars that must be quoted-pair in RFC 7230 sec 3.2.6\n */\nvar QUOTE_REGEXP = /([\\\\\"])/g\n\n/**\n * RegExp to match type in RFC 7231 sec 3.1.1.1\n *\n * media-type = type \"/\" subtype\n * type       = token\n * subtype    = token\n */\nvar TYPE_REGEXP = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+\\/[!#$%&'*+.^_`|~0-9A-Za-z-]+$/\n\n/**\n * Module exports.\n * @public\n */\n\nexports.format = format\nexports.parse = parse\n\n/**\n * Format object to media type.\n *\n * @param {object} obj\n * @return {string}\n * @public\n */\n\nfunction format (obj) {\n  if (!obj || typeof obj !== 'object') {\n    throw new TypeError('argument obj is required')\n  }\n\n  var parameters = obj.parameters\n  var type = obj.type\n\n  if (!type || !TYPE_REGEXP.test(type)) {\n    throw new TypeError('invalid type')\n  }\n\n  var string = type\n\n  // append parameters\n  if (parameters && typeof parameters === 'object') {\n    var param\n    var params = Object.keys(parameters).sort()\n\n    for (var i = 0; i < params.length; i++) {\n      param = params[i]\n\n      if (!TOKEN_REGEXP.test(param)) {\n        throw new TypeError('invalid parameter name')\n      }\n\n      string += '; ' + param + '=' + qstring(parameters[param])\n    }\n  }\n\n  return string\n}\n\n/**\n * Parse media type to object.\n *\n * @param {string|object} string\n * @return {Object}\n * @public\n */\n\nfunction parse (string) {\n  if (!string) {\n    throw new TypeError('argument string is required')\n  }\n\n  // support req/res-like objects as argument\n  var header = typeof string === 'object'\n    ? getcontenttype(string)\n    : string\n\n  if (typeof header !== 'string') {\n    throw new TypeError('argument string is required to be a string')\n  }\n\n  var index = header.indexOf(';')\n  var type = index !== -1\n    ? header.substr(0, index).trim()\n    : header.trim()\n\n  if (!TYPE_REGEXP.test(type)) {\n    throw new TypeError('invalid media type')\n  }\n\n  var obj = new ContentType(type.toLowerCase())\n\n  // parse parameters\n  if (index !== -1) {\n    var key\n    var match\n    var value\n\n    PARAM_REGEXP.lastIndex = index\n\n    while ((match = PARAM_REGEXP.exec(header))) {\n      if (match.index !== index) {\n        throw new TypeError('invalid parameter format')\n      }\n\n      index += match[0].length\n      key = match[1].toLowerCase()\n      value = match[2]\n\n      if (value[0] === '\"') {\n        // remove quotes and escapes\n        value = value\n          .substr(1, value.length - 2)\n          .replace(QESC_REGEXP, '$1')\n      }\n\n      obj.parameters[key] = value\n    }\n\n    if (index !== header.length) {\n      throw new TypeError('invalid parameter format')\n    }\n  }\n\n  return obj\n}\n\n/**\n * Get content-type from req/res objects.\n *\n * @param {object}\n * @return {Object}\n * @private\n */\n\nfunction getcontenttype (obj) {\n  var header\n\n  if (typeof obj.getHeader === 'function') {\n    // res-like\n    header = obj.getHeader('content-type')\n  } else if (typeof obj.headers === 'object') {\n    // req-like\n    header = obj.headers && obj.headers['content-type']\n  }\n\n  if (typeof header !== 'string') {\n    throw new TypeError('content-type header is missing from object')\n  }\n\n  return header\n}\n\n/**\n * Quote a string if necessary.\n *\n * @param {string} val\n * @return {string}\n * @private\n */\n\nfunction qstring (val) {\n  var str = String(val)\n\n  // no need to quote tokens\n  if (TOKEN_REGEXP.test(str)) {\n    return str\n  }\n\n  if (str.length > 0 && !TEXT_REGEXP.test(str)) {\n    throw new TypeError('invalid parameter value')\n  }\n\n  return '\"' + str.replace(QUOTE_REGEXP, '\\\\$1') + '\"'\n}\n\n/**\n * Class to represent a content type.\n * @private\n */\nfunction ContentType (type) {\n  this.parameters = Object.create(null)\n  this.type = type\n}\n",
    "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n",
    "'use strict';\n\n/* eslint no-invalid-this: 1 */\n\nvar ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';\nvar slice = Array.prototype.slice;\nvar toStr = Object.prototype.toString;\nvar funcType = '[object Function]';\n\nmodule.exports = function bind(that) {\n    var target = this;\n    if (typeof target !== 'function' || toStr.call(target) !== funcType) {\n        throw new TypeError(ERROR_MESSAGE + target);\n    }\n    var args = slice.call(arguments, 1);\n\n    var bound;\n    var binder = function () {\n        if (this instanceof bound) {\n            var result = target.apply(\n                this,\n                args.concat(slice.call(arguments))\n            );\n            if (Object(result) === result) {\n                return result;\n            }\n            return this;\n        } else {\n            return target.apply(\n                that,\n                args.concat(slice.call(arguments))\n            );\n        }\n    };\n\n    var boundLength = Math.max(0, target.length - args.length);\n    var boundArgs = [];\n    for (var i = 0; i < boundLength; i++) {\n        boundArgs.push('$' + i);\n    }\n\n    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);\n\n    if (target.prototype) {\n        var Empty = function Empty() {};\n        Empty.prototype = target.prototype;\n        bound.prototype = new Empty();\n        Empty.prototype = null;\n    }\n\n    return bound;\n};\n",
    "'use strict';\n\nvar implementation = require('./implementation');\n\nmodule.exports = Function.prototype.bind || implementation;\n",
    "'use strict';\n\nvar undefined;\n\nvar $SyntaxError = SyntaxError;\nvar $Function = Function;\nvar $TypeError = TypeError;\n\n// eslint-disable-next-line consistent-return\nvar getEvalledConstructor = function (expressionSyntax) {\n\ttry {\n\t\treturn $Function('\"use strict\"; return (' + expressionSyntax + ').constructor;')();\n\t} catch (e) {}\n};\n\nvar $gOPD = Object.getOwnPropertyDescriptor;\nif ($gOPD) {\n\ttry {\n\t\t$gOPD({}, '');\n\t} catch (e) {\n\t\t$gOPD = null; // this is IE 8, which has a broken gOPD\n\t}\n}\n\nvar throwTypeError = function () {\n\tthrow new $TypeError();\n};\nvar ThrowTypeError = $gOPD\n\t? (function () {\n\t\ttry {\n\t\t\t// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties\n\t\t\targuments.callee; // IE 8 does not throw here\n\t\t\treturn throwTypeError;\n\t\t} catch (calleeThrows) {\n\t\t\ttry {\n\t\t\t\t// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')\n\t\t\t\treturn $gOPD(arguments, 'callee').get;\n\t\t\t} catch (gOPDthrows) {\n\t\t\t\treturn throwTypeError;\n\t\t\t}\n\t\t}\n\t}())\n\t: throwTypeError;\n\nvar hasSymbols = require('has-symbols')();\n\nvar getProto = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto\n\nvar needsEval = {};\n\nvar TypedArray = typeof Uint8Array === 'undefined' ? undefined : getProto(Uint8Array);\n\nvar INTRINSICS = {\n\t'%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,\n\t'%Array%': Array,\n\t'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,\n\t'%ArrayIteratorPrototype%': hasSymbols ? getProto([][Symbol.iterator]()) : undefined,\n\t'%AsyncFromSyncIteratorPrototype%': undefined,\n\t'%AsyncFunction%': needsEval,\n\t'%AsyncGenerator%': needsEval,\n\t'%AsyncGeneratorFunction%': needsEval,\n\t'%AsyncIteratorPrototype%': needsEval,\n\t'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,\n\t'%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,\n\t'%Boolean%': Boolean,\n\t'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,\n\t'%Date%': Date,\n\t'%decodeURI%': decodeURI,\n\t'%decodeURIComponent%': decodeURIComponent,\n\t'%encodeURI%': encodeURI,\n\t'%encodeURIComponent%': encodeURIComponent,\n\t'%Error%': Error,\n\t'%eval%': eval, // eslint-disable-line no-eval\n\t'%EvalError%': EvalError,\n\t'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,\n\t'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,\n\t'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,\n\t'%Function%': $Function,\n\t'%GeneratorFunction%': needsEval,\n\t'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,\n\t'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,\n\t'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,\n\t'%isFinite%': isFinite,\n\t'%isNaN%': isNaN,\n\t'%IteratorPrototype%': hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined,\n\t'%JSON%': typeof JSON === 'object' ? JSON : undefined,\n\t'%Map%': typeof Map === 'undefined' ? undefined : Map,\n\t'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols ? undefined : getProto(new Map()[Symbol.iterator]()),\n\t'%Math%': Math,\n\t'%Number%': Number,\n\t'%Object%': Object,\n\t'%parseFloat%': parseFloat,\n\t'%parseInt%': parseInt,\n\t'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,\n\t'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,\n\t'%RangeError%': RangeError,\n\t'%ReferenceError%': ReferenceError,\n\t'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,\n\t'%RegExp%': RegExp,\n\t'%Set%': typeof Set === 'undefined' ? undefined : Set,\n\t'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols ? undefined : getProto(new Set()[Symbol.iterator]()),\n\t'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,\n\t'%String%': String,\n\t'%StringIteratorPrototype%': hasSymbols ? getProto(''[Symbol.iterator]()) : undefined,\n\t'%Symbol%': hasSymbols ? Symbol : undefined,\n\t'%SyntaxError%': $SyntaxError,\n\t'%ThrowTypeError%': ThrowTypeError,\n\t'%TypedArray%': TypedArray,\n\t'%TypeError%': $TypeError,\n\t'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,\n\t'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,\n\t'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,\n\t'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,\n\t'%URIError%': URIError,\n\t'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,\n\t'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,\n\t'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet\n};\n\nvar doEval = function doEval(name) {\n\tvar value;\n\tif (name === '%AsyncFunction%') {\n\t\tvalue = getEvalledConstructor('async function () {}');\n\t} else if (name === '%GeneratorFunction%') {\n\t\tvalue = getEvalledConstructor('function* () {}');\n\t} else if (name === '%AsyncGeneratorFunction%') {\n\t\tvalue = getEvalledConstructor('async function* () {}');\n\t} else if (name === '%AsyncGenerator%') {\n\t\tvar fn = doEval('%AsyncGeneratorFunction%');\n\t\tif (fn) {\n\t\t\tvalue = fn.prototype;\n\t\t}\n\t} else if (name === '%AsyncIteratorPrototype%') {\n\t\tvar gen = doEval('%AsyncGenerator%');\n\t\tif (gen) {\n\t\t\tvalue = getProto(gen.prototype);\n\t\t}\n\t}\n\n\tINTRINSICS[name] = value;\n\n\treturn value;\n};\n\nvar LEGACY_ALIASES = {\n\t'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],\n\t'%ArrayPrototype%': ['Array', 'prototype'],\n\t'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],\n\t'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],\n\t'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],\n\t'%ArrayProto_values%': ['Array', 'prototype', 'values'],\n\t'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],\n\t'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],\n\t'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],\n\t'%BooleanPrototype%': ['Boolean', 'prototype'],\n\t'%DataViewPrototype%': ['DataView', 'prototype'],\n\t'%DatePrototype%': ['Date', 'prototype'],\n\t'%ErrorPrototype%': ['Error', 'prototype'],\n\t'%EvalErrorPrototype%': ['EvalError', 'prototype'],\n\t'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],\n\t'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],\n\t'%FunctionPrototype%': ['Function', 'prototype'],\n\t'%Generator%': ['GeneratorFunction', 'prototype'],\n\t'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],\n\t'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],\n\t'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],\n\t'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],\n\t'%JSONParse%': ['JSON', 'parse'],\n\t'%JSONStringify%': ['JSON', 'stringify'],\n\t'%MapPrototype%': ['Map', 'prototype'],\n\t'%NumberPrototype%': ['Number', 'prototype'],\n\t'%ObjectPrototype%': ['Object', 'prototype'],\n\t'%ObjProto_toString%': ['Object', 'prototype', 'toString'],\n\t'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],\n\t'%PromisePrototype%': ['Promise', 'prototype'],\n\t'%PromiseProto_then%': ['Promise', 'prototype', 'then'],\n\t'%Promise_all%': ['Promise', 'all'],\n\t'%Promise_reject%': ['Promise', 'reject'],\n\t'%Promise_resolve%': ['Promise', 'resolve'],\n\t'%RangeErrorPrototype%': ['RangeError', 'prototype'],\n\t'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],\n\t'%RegExpPrototype%': ['RegExp', 'prototype'],\n\t'%SetPrototype%': ['Set', 'prototype'],\n\t'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],\n\t'%StringPrototype%': ['String', 'prototype'],\n\t'%SymbolPrototype%': ['Symbol', 'prototype'],\n\t'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],\n\t'%TypedArrayPrototype%': ['TypedArray', 'prototype'],\n\t'%TypeErrorPrototype%': ['TypeError', 'prototype'],\n\t'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],\n\t'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],\n\t'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],\n\t'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],\n\t'%URIErrorPrototype%': ['URIError', 'prototype'],\n\t'%WeakMapPrototype%': ['WeakMap', 'prototype'],\n\t'%WeakSetPrototype%': ['WeakSet', 'prototype']\n};\n\nvar bind = require('function-bind');\nvar hasOwn = require('has');\nvar $concat = bind.call(Function.call, Array.prototype.concat);\nvar $spliceApply = bind.call(Function.apply, Array.prototype.splice);\nvar $replace = bind.call(Function.call, String.prototype.replace);\nvar $strSlice = bind.call(Function.call, String.prototype.slice);\n\n/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */\nvar rePropName = /[^%.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|%$))/g;\nvar reEscapeChar = /\\\\(\\\\)?/g; /** Used to match backslashes in property paths. */\nvar stringToPath = function stringToPath(string) {\n\tvar first = $strSlice(string, 0, 1);\n\tvar last = $strSlice(string, -1);\n\tif (first === '%' && last !== '%') {\n\t\tthrow new $SyntaxError('invalid intrinsic syntax, expected closing `%`');\n\t} else if (last === '%' && first !== '%') {\n\t\tthrow new $SyntaxError('invalid intrinsic syntax, expected opening `%`');\n\t}\n\tvar result = [];\n\t$replace(string, rePropName, function (match, number, quote, subString) {\n\t\tresult[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;\n\t});\n\treturn result;\n};\n/* end adaptation */\n\nvar getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {\n\tvar intrinsicName = name;\n\tvar alias;\n\tif (hasOwn(LEGACY_ALIASES, intrinsicName)) {\n\t\talias = LEGACY_ALIASES[intrinsicName];\n\t\tintrinsicName = '%' + alias[0] + '%';\n\t}\n\n\tif (hasOwn(INTRINSICS, intrinsicName)) {\n\t\tvar value = INTRINSICS[intrinsicName];\n\t\tif (value === needsEval) {\n\t\t\tvalue = doEval(intrinsicName);\n\t\t}\n\t\tif (typeof value === 'undefined' && !allowMissing) {\n\t\t\tthrow new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');\n\t\t}\n\n\t\treturn {\n\t\t\talias: alias,\n\t\t\tname: intrinsicName,\n\t\t\tvalue: value\n\t\t};\n\t}\n\n\tthrow new $SyntaxError('intrinsic ' + name + ' does not exist!');\n};\n\nmodule.exports = function GetIntrinsic(name, allowMissing) {\n\tif (typeof name !== 'string' || name.length === 0) {\n\t\tthrow new $TypeError('intrinsic name must be a non-empty string');\n\t}\n\tif (arguments.length > 1 && typeof allowMissing !== 'boolean') {\n\t\tthrow new $TypeError('\"allowMissing\" argument must be a boolean');\n\t}\n\n\tvar parts = stringToPath(name);\n\tvar intrinsicBaseName = parts.length > 0 ? parts[0] : '';\n\n\tvar intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);\n\tvar intrinsicRealName = intrinsic.name;\n\tvar value = intrinsic.value;\n\tvar skipFurtherCaching = false;\n\n\tvar alias = intrinsic.alias;\n\tif (alias) {\n\t\tintrinsicBaseName = alias[0];\n\t\t$spliceApply(parts, $concat([0, 1], alias));\n\t}\n\n\tfor (var i = 1, isOwn = true; i < parts.length; i += 1) {\n\t\tvar part = parts[i];\n\t\tvar first = $strSlice(part, 0, 1);\n\t\tvar last = $strSlice(part, -1);\n\t\tif (\n\t\t\t(\n\t\t\t\t(first === '\"' || first === \"'\" || first === '`')\n\t\t\t\t|| (last === '\"' || last === \"'\" || last === '`')\n\t\t\t)\n\t\t\t&& first !== last\n\t\t) {\n\t\t\tthrow new $SyntaxError('property names with quotes must have matching quotes');\n\t\t}\n\t\tif (part === 'constructor' || !isOwn) {\n\t\t\tskipFurtherCaching = true;\n\t\t}\n\n\t\tintrinsicBaseName += '.' + part;\n\t\tintrinsicRealName = '%' + intrinsicBaseName + '%';\n\n\t\tif (hasOwn(INTRINSICS, intrinsicRealName)) {\n\t\t\tvalue = INTRINSICS[intrinsicRealName];\n\t\t} else if (value != null) {\n\t\t\tif (!(part in value)) {\n\t\t\t\tif (!allowMissing) {\n\t\t\t\t\tthrow new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');\n\t\t\t\t}\n\t\t\t\treturn void undefined;\n\t\t\t}\n\t\t\tif ($gOPD && (i + 1) >= parts.length) {\n\t\t\t\tvar desc = $gOPD(value, part);\n\t\t\t\tisOwn = !!desc;\n\n\t\t\t\t// By convention, when a data property is converted to an accessor\n\t\t\t\t// property to emulate a data property that does not suffer from\n\t\t\t\t// the override mistake, that accessor's getter is marked with\n\t\t\t\t// an `originalValue` property. Here, when we detect this, we\n\t\t\t\t// uphold the illusion by pretending to see that original data\n\t\t\t\t// property, i.e., returning the value rather than the getter\n\t\t\t\t// itself.\n\t\t\t\tif (isOwn && 'get' in desc && !('originalValue' in desc.get)) {\n\t\t\t\t\tvalue = desc.get;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = value[part];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tisOwn = hasOwn(value, part);\n\t\t\t\tvalue = value[part];\n\t\t\t}\n\n\t\t\tif (isOwn && !skipFurtherCaching) {\n\t\t\t\tINTRINSICS[intrinsicRealName] = value;\n\t\t\t}\n\t\t}\n\t}\n\treturn value;\n};\n",
    "'use strict';\n\nvar origSymbol = typeof Symbol !== 'undefined' && Symbol;\nvar hasSymbolSham = require('./shams');\n\nmodule.exports = function hasNativeSymbols() {\n\tif (typeof origSymbol !== 'function') { return false; }\n\tif (typeof Symbol !== 'function') { return false; }\n\tif (typeof origSymbol('foo') !== 'symbol') { return false; }\n\tif (typeof Symbol('bar') !== 'symbol') { return false; }\n\n\treturn hasSymbolSham();\n};\n",
    "'use strict';\n\n/* eslint complexity: [2, 18], max-statements: [2, 33] */\nmodule.exports = function hasSymbols() {\n\tif (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }\n\tif (typeof Symbol.iterator === 'symbol') { return true; }\n\n\tvar obj = {};\n\tvar sym = Symbol('test');\n\tvar symObj = Object(sym);\n\tif (typeof sym === 'string') { return false; }\n\n\tif (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }\n\tif (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }\n\n\t// temp disabled per https://github.com/ljharb/object.assign/issues/17\n\t// if (sym instanceof Symbol) { return false; }\n\t// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4\n\t// if (!(symObj instanceof Symbol)) { return false; }\n\n\t// if (typeof Symbol.prototype.toString !== 'function') { return false; }\n\t// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }\n\n\tvar symVal = 42;\n\tobj[sym] = symVal;\n\tfor (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop\n\tif (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }\n\n\tif (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }\n\n\tvar syms = Object.getOwnPropertySymbols(obj);\n\tif (syms.length !== 1 || syms[0] !== sym) { return false; }\n\n\tif (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }\n\n\tif (typeof Object.getOwnPropertyDescriptor === 'function') {\n\t\tvar descriptor = Object.getOwnPropertyDescriptor(obj, sym);\n\t\tif (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }\n\t}\n\n\treturn true;\n};\n",
    "'use strict';\n\nvar bind = require('function-bind');\n\nmodule.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);\n",
    "/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n",
    "/*\n* loglevel - https://github.com/pimterry/loglevel\n*\n* Copyright (c) 2013 Tim Perry\n* Licensed under the MIT license.\n*/\n(function (root, definition) {\n    \"use strict\";\n    if (typeof define === 'function' && define.amd) {\n        define(definition);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = definition();\n    } else {\n        root.log = definition();\n    }\n}(this, function () {\n    \"use strict\";\n\n    // Slightly dubious tricks to cut down minimized file size\n    var noop = function() {};\n    var undefinedType = \"undefined\";\n    var isIE = (typeof window !== undefinedType) && (typeof window.navigator !== undefinedType) && (\n        /Trident\\/|MSIE /.test(window.navigator.userAgent)\n    );\n\n    var logMethods = [\n        \"trace\",\n        \"debug\",\n        \"info\",\n        \"warn\",\n        \"error\"\n    ];\n\n    // Cross-browser bind equivalent that works at least back to IE6\n    function bindMethod(obj, methodName) {\n        var method = obj[methodName];\n        if (typeof method.bind === 'function') {\n            return method.bind(obj);\n        } else {\n            try {\n                return Function.prototype.bind.call(method, obj);\n            } catch (e) {\n                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n                return function() {\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\n                };\n            }\n        }\n    }\n\n    // Trace() doesn't print the message in IE, so for that case we need to wrap it\n    function traceForIE() {\n        if (console.log) {\n            if (console.log.apply) {\n                console.log.apply(console, arguments);\n            } else {\n                // In old IE, native console methods themselves don't have apply().\n                Function.prototype.apply.apply(console.log, [console, arguments]);\n            }\n        }\n        if (console.trace) console.trace();\n    }\n\n    // Build the best logging method possible for this env\n    // Wherever possible we want to bind, not wrap, to preserve stack traces\n    function realMethod(methodName) {\n        if (methodName === 'debug') {\n            methodName = 'log';\n        }\n\n        if (typeof console === undefinedType) {\n            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n        } else if (methodName === 'trace' && isIE) {\n            return traceForIE;\n        } else if (console[methodName] !== undefined) {\n            return bindMethod(console, methodName);\n        } else if (console.log !== undefined) {\n            return bindMethod(console, 'log');\n        } else {\n            return noop;\n        }\n    }\n\n    // These private functions always need `this` to be set properly\n\n    function replaceLoggingMethods(level, loggerName) {\n        /*jshint validthis:true */\n        for (var i = 0; i < logMethods.length; i++) {\n            var methodName = logMethods[i];\n            this[methodName] = (i < level) ?\n                noop :\n                this.methodFactory(methodName, level, loggerName);\n        }\n\n        // Define log.log as an alias for log.debug\n        this.log = this.debug;\n    }\n\n    // In old IE versions, the console isn't present until you first open it.\n    // We build realMethod() replacements here that regenerate logging methods\n    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {\n        return function () {\n            if (typeof console !== undefinedType) {\n                replaceLoggingMethods.call(this, level, loggerName);\n                this[methodName].apply(this, arguments);\n            }\n        };\n    }\n\n    // By default, we use closely bound real methods wherever possible, and\n    // otherwise we wait for a console to appear, and then try again.\n    function defaultMethodFactory(methodName, level, loggerName) {\n        /*jshint validthis:true */\n        return realMethod(methodName) ||\n               enableLoggingWhenConsoleArrives.apply(this, arguments);\n    }\n\n    function Logger(name, defaultLevel, factory) {\n      var self = this;\n      var currentLevel;\n      defaultLevel = defaultLevel == null ? \"WARN\" : defaultLevel;\n\n      var storageKey = \"loglevel\";\n      if (typeof name === \"string\") {\n        storageKey += \":\" + name;\n      } else if (typeof name === \"symbol\") {\n        storageKey = undefined;\n      }\n\n      function persistLevelIfPossible(levelNum) {\n          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage[storageKey] = levelName;\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\n          } catch (ignore) {}\n      }\n\n      function getPersistedLevel() {\n          var storedLevel;\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          try {\n              storedLevel = window.localStorage[storageKey];\n          } catch (ignore) {}\n\n          // Fallback to cookies if local storage gives us nothing\n          if (typeof storedLevel === undefinedType) {\n              try {\n                  var cookie = window.document.cookie;\n                  var location = cookie.indexOf(\n                      encodeURIComponent(storageKey) + \"=\");\n                  if (location !== -1) {\n                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];\n                  }\n              } catch (ignore) {}\n          }\n\n          // If the stored level is not valid, treat it as if nothing was stored.\n          if (self.levels[storedLevel] === undefined) {\n              storedLevel = undefined;\n          }\n\n          return storedLevel;\n      }\n\n      function clearPersistedLevel() {\n          if (typeof window === undefinedType || !storageKey) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage.removeItem(storageKey);\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=; expires=Thu, 01 Jan 1970 00:00:00 UTC\";\n          } catch (ignore) {}\n      }\n\n      /*\n       *\n       * Public logger API - see https://github.com/pimterry/loglevel for details\n       *\n       */\n\n      self.name = name;\n\n      self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\n          \"ERROR\": 4, \"SILENT\": 5};\n\n      self.methodFactory = factory || defaultMethodFactory;\n\n      self.getLevel = function () {\n          return currentLevel;\n      };\n\n      self.setLevel = function (level, persist) {\n          if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\n              level = self.levels[level.toUpperCase()];\n          }\n          if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\n              currentLevel = level;\n              if (persist !== false) {  // defaults to true\n                  persistLevelIfPossible(level);\n              }\n              replaceLoggingMethods.call(self, level, name);\n              if (typeof console === undefinedType && level < self.levels.SILENT) {\n                  return \"No console available for logging\";\n              }\n          } else {\n              throw \"log.setLevel() called with invalid level: \" + level;\n          }\n      };\n\n      self.setDefaultLevel = function (level) {\n          defaultLevel = level;\n          if (!getPersistedLevel()) {\n              self.setLevel(level, false);\n          }\n      };\n\n      self.resetLevel = function () {\n          self.setLevel(defaultLevel, false);\n          clearPersistedLevel();\n      };\n\n      self.enableAll = function(persist) {\n          self.setLevel(self.levels.TRACE, persist);\n      };\n\n      self.disableAll = function(persist) {\n          self.setLevel(self.levels.SILENT, persist);\n      };\n\n      // Initialize with the right level\n      var initialLevel = getPersistedLevel();\n      if (initialLevel == null) {\n          initialLevel = defaultLevel;\n      }\n      self.setLevel(initialLevel, false);\n    }\n\n    /*\n     *\n     * Top-level API\n     *\n     */\n\n    var defaultLogger = new Logger();\n\n    var _loggersByName = {};\n    defaultLogger.getLogger = function getLogger(name) {\n        if ((typeof name !== \"symbol\" && typeof name !== \"string\") || name === \"\") {\n          throw new TypeError(\"You must supply a name when creating a logger.\");\n        }\n\n        var logger = _loggersByName[name];\n        if (!logger) {\n          logger = _loggersByName[name] = new Logger(\n            name, defaultLogger.getLevel(), defaultLogger.methodFactory);\n        }\n        return logger;\n    };\n\n    // Grab the current global log variable in case of overwrite\n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\n    defaultLogger.noConflict = function() {\n        if (typeof window !== undefinedType &&\n               window.log === defaultLogger) {\n            window.log = _log;\n        }\n\n        return defaultLogger;\n    };\n\n    defaultLogger.getLoggers = function getLoggers() {\n        return _loggersByName;\n    };\n\n    // ES6 default export, for compatibility\n    defaultLogger['default'] = defaultLogger;\n\n    return defaultLogger;\n}));\n",
    "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExtensibleEvents = void 0;\n\nvar _NamespacedMap = require(\"./NamespacedMap\");\n\nvar _InvalidEventError = require(\"./InvalidEventError\");\n\nvar _MRoomMessage = require(\"./interpreters/legacy/MRoomMessage\");\n\nvar _MMessage = require(\"./interpreters/modern/MMessage\");\n\nvar _message_types = require(\"./events/message_types\");\n\nvar _poll_types = require(\"./events/poll_types\");\n\nvar _MPoll = require(\"./interpreters/modern/MPoll\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Utility class for parsing and identifying event types in a renderable form. An\n * instance of this class can be created to change rendering preference depending\n * on use-case.\n */\nvar ExtensibleEvents = /*#__PURE__*/function () {\n  function ExtensibleEvents() {\n    _classCallCheck(this, ExtensibleEvents);\n\n    _defineProperty(this, \"interpreters\", new _NamespacedMap.NamespacedMap([// Remember to add your unit test when adding to this! (\"known events\" test description)\n    [_MRoomMessage.LEGACY_M_ROOM_MESSAGE, _MRoomMessage.parseMRoomMessage], [_message_types.M_MESSAGE, _MMessage.parseMMessage], [_message_types.M_EMOTE, _MMessage.parseMMessage], [_message_types.M_NOTICE, _MMessage.parseMMessage], [_poll_types.M_POLL_START, _MPoll.parseMPoll], [_poll_types.M_POLL_RESPONSE, _MPoll.parseMPoll], [_poll_types.M_POLL_END, _MPoll.parseMPoll]]));\n\n    _defineProperty(this, \"_unknownInterpretOrder\", [_message_types.M_MESSAGE]);\n  }\n  /**\n   * Gets the default instance for all extensible event parsing.\n   */\n\n\n  _createClass(ExtensibleEvents, [{\n    key: \"unknownInterpretOrder\",\n    get:\n    /**\n     * Gets the order the internal processor will use for unknown primary\n     * event types.\n     */\n    function get() {\n      var _this$_unknownInterpr;\n\n      return (_this$_unknownInterpr = this._unknownInterpretOrder) !== null && _this$_unknownInterpr !== void 0 ? _this$_unknownInterpr : [];\n    }\n    /**\n     * Sets the order the internal processor will use for unknown primary\n     * event types.\n     * @param {NamespacedValue<string, string>[]} val The parsing order.\n     */\n    ,\n    set: function set(val) {\n      this._unknownInterpretOrder = val;\n    }\n    /**\n     * Gets the order the internal processor will use for unknown primary\n     * event types.\n     */\n\n  }, {\n    key: \"registerInterpreter\",\n    value:\n    /**\n     * Registers a primary event type interpreter. Note that the interpreter might be\n     * called with non-primary events if the event is being parsed as a fallback.\n     * @param {NamespacedValue<string, string>} wireEventType The event type.\n     * @param {EventInterpreter} interpreter The interpreter.\n     */\n    function registerInterpreter(wireEventType, interpreter) {\n      this.interpreters.set(wireEventType, interpreter);\n    }\n    /**\n     * Registers a primary event type interpreter. Note that the interpreter might be\n     * called with non-primary events if the event is being parsed as a fallback.\n     * @param {NamespacedValue<string, string>} wireEventType The event type.\n     * @param {EventInterpreter} interpreter The interpreter.\n     */\n\n  }, {\n    key: \"parse\",\n    value:\n    /**\n     * Parses an event, trying the primary event type first. If the primary type is not known\n     * then the content will be inspected to find the most suitable fallback.\n     *\n     * If the parsing failed or was a completely unknown type, this will return falsy.\n     * @param {IPartialEvent<object>} wireFormat The event to parse.\n     * @returns {Optional<ExtensibleEvent>} The parsed extensible event.\n     */\n    function parse(wireFormat) {\n      try {\n        if (this.interpreters.hasNamespaced(wireFormat.type)) {\n          return this.interpreters.getNamespaced(wireFormat.type)(wireFormat);\n        }\n\n        var _iterator = _createForOfIteratorHelper(this.unknownInterpretOrder),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var tryType = _step.value;\n\n            if (this.interpreters.has(tryType)) {\n              var val = this.interpreters.get(tryType)(wireFormat);\n              if (val) return val;\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        return null; // cannot be parsed\n      } catch (e) {\n        if (e instanceof _InvalidEventError.InvalidEventError) {\n          return null; // fail parsing and move on\n        }\n\n        throw e; // re-throw everything else\n      }\n    }\n    /**\n     * Parses an event, trying the primary event type first. If the primary type is not known\n     * then the content will be inspected to find the most suitable fallback.\n     *\n     * If the parsing failed or was a completely unknown type, this will return falsy.\n     * @param {IPartialEvent<object>} wireFormat The event to parse.\n     * @returns {Optional<ExtensibleEvent>} The parsed extensible event.\n     */\n\n  }], [{\n    key: \"defaultInstance\",\n    get: function get() {\n      return ExtensibleEvents._defaultInstance;\n    }\n  }, {\n    key: \"unknownInterpretOrder\",\n    get: function get() {\n      return ExtensibleEvents.defaultInstance.unknownInterpretOrder;\n    }\n    /**\n     * Sets the order the internal processor will use for unknown primary\n     * event types.\n     * @param {NamespacedValue<string, string>[]} val The parsing order.\n     */\n    ,\n    set: function set(val) {\n      ExtensibleEvents.defaultInstance.unknownInterpretOrder = val;\n    }\n  }, {\n    key: \"registerInterpreter\",\n    value: function registerInterpreter(wireEventType, interpreter) {\n      ExtensibleEvents.defaultInstance.registerInterpreter(wireEventType, interpreter);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(wireFormat) {\n      return ExtensibleEvents.defaultInstance.parse(wireFormat);\n    }\n  }]);\n\n  return ExtensibleEvents;\n}();\n\nexports.ExtensibleEvents = ExtensibleEvents;\n\n_defineProperty(ExtensibleEvents, \"_defaultInstance\", new ExtensibleEvents());",
    "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});",
    "\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.InvalidEventError = void 0;\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\n\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n/*\nCopyright 2022 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * Thrown when an event is unforgivably unparsable.\n */\nvar InvalidEventError = /*#__PURE__*/function (_Error) {\n  _inherits(InvalidEventError, _Error);\n\n  var _super = _createSuper(InvalidEventError);\n\n  function InvalidEventError(message) {\n    _classCallCheck(this, InvalidEventError);\n\n    return _super.call(this, message);\n  }\n\n  return _createClass(InvalidEventError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nexports.InvalidEventError = InvalidEventError;",
    "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NamespacedMap = void 0;\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * A `Map` implementation which accepts a NamespacedValue as a key, and arbitrary value. The\n * namespaced value must be a string type.\n */\nvar NamespacedMap = /*#__PURE__*/function () {\n  // protected to make tests happy for access\n\n  /**\n   * Creates a new map with optional seed data.\n   * @param {Array<[NS, V]>} initial The seed data.\n   */\n  function NamespacedMap(initial) {\n    _classCallCheck(this, NamespacedMap);\n\n    _defineProperty(this, \"internalMap\", new Map());\n\n    if (initial) {\n      var _iterator = _createForOfIteratorHelper(initial),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var val = _step.value;\n          this.set(val[0], val[1]);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }\n  /**\n   * Gets a value from the map. If the value does not exist under\n   * either namespace option, falsy is returned.\n   * @param {NS} key The key.\n   * @returns {Optional<V>} The value, or falsy.\n   */\n\n\n  _createClass(NamespacedMap, [{\n    key: \"get\",\n    value: function get(key) {\n      if (key.name && this.internalMap.has(key.name)) {\n        return this.internalMap.get(key.name);\n      }\n\n      if (key.altName && this.internalMap.has(key.altName)) {\n        return this.internalMap.get(key.altName);\n      }\n\n      return null;\n    }\n    /**\n     * Sets a value in the map.\n     * @param {NS} key The key.\n     * @param {V} val The value.\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(key, val) {\n      if (key.name) {\n        this.internalMap.set(key.name, val);\n      }\n\n      if (key.altName) {\n        this.internalMap.set(key.altName, val);\n      }\n    }\n    /**\n     * Determines if any of the valid namespaced values are present\n     * in the map.\n     * @param {NS} key The key.\n     * @returns {boolean} True if present.\n     */\n\n  }, {\n    key: \"has\",\n    value: function has(key) {\n      return !!this.get(key);\n    }\n    /**\n     * Removes all the namespaced values from the map.\n     * @param {NS} key The key.\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(key) {\n      if (key.name) {\n        this.internalMap[\"delete\"](key.name);\n      }\n\n      if (key.altName) {\n        this.internalMap[\"delete\"](key.altName);\n      }\n    }\n    /**\n     * Determines if the map contains a specific namespaced value\n     * instead of the parent NS type.\n     * @param {string} key The key.\n     * @returns {boolean} True if present.\n     */\n\n  }, {\n    key: \"hasNamespaced\",\n    value: function hasNamespaced(key) {\n      return this.internalMap.has(key);\n    }\n    /**\n     * Gets a specific namespaced value from the map instead of the\n     * parent NS type. Returns falsy if not found.\n     * @param {string} key The key.\n     * @returns {Optional<V>} The value, or falsy.\n     */\n\n  }, {\n    key: \"getNamespaced\",\n    value: function getNamespaced(key) {\n      return this.internalMap.get(key);\n    }\n  }]);\n\n  return NamespacedMap;\n}();\n\nexports.NamespacedMap = NamespacedMap;",
    "\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UnstableValue = exports.NamespacedValue = void 0;\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\n/*\nCopyright 2021 - 2022 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * Represents a simple Matrix namespaced value. This will assume that if a stable prefix\n * is provided that the stable prefix should be used when representing the identifier.\n */\nvar NamespacedValue = /*#__PURE__*/function () {\n  // Stable is optional, but one of the two parameters is required, hence the weird-looking types.\n  // Goal is to have developers explicitly say there is no stable value (if applicable).\n  function NamespacedValue(stable, unstable) {\n    _classCallCheck(this, NamespacedValue);\n\n    this.stable = stable;\n    this.unstable = unstable;\n\n    if (!this.unstable && !this.stable) {\n      throw new Error(\"One of stable or unstable values must be supplied\");\n    }\n  }\n\n  _createClass(NamespacedValue, [{\n    key: \"name\",\n    get: function get() {\n      if (this.stable) {\n        return this.stable;\n      }\n\n      return this.unstable;\n    }\n  }, {\n    key: \"altName\",\n    get: function get() {\n      if (!this.stable) {\n        return null;\n      }\n\n      return this.unstable;\n    }\n  }, {\n    key: \"matches\",\n    value: function matches(val) {\n      return !!this.name && this.name === val || !!this.altName && this.altName === val;\n    } // this desperately wants https://github.com/microsoft/TypeScript/pull/26349 at the top level of the class\n    // so we can instantiate `NamespacedValue<string, _, _>` as a default type for that namespace.\n\n  }, {\n    key: \"findIn\",\n    value: function findIn(obj) {\n      var val;\n\n      if (this.name) {\n        val = obj === null || obj === void 0 ? void 0 : obj[this.name];\n      }\n\n      if (!val && this.altName) {\n        val = obj === null || obj === void 0 ? void 0 : obj[this.altName];\n      }\n\n      return val;\n    }\n  }, {\n    key: \"includedIn\",\n    value: function includedIn(arr) {\n      var included = false;\n\n      if (this.name) {\n        included = arr.includes(this.name);\n      }\n\n      if (!included && this.altName) {\n        included = arr.includes(this.altName);\n      }\n\n      return included;\n    }\n  }]);\n\n  return NamespacedValue;\n}();\n/**\n * Represents a namespaced value which prioritizes the unstable value over the stable\n * value.\n */\n\n\nexports.NamespacedValue = NamespacedValue;\n\nvar UnstableValue = /*#__PURE__*/function (_NamespacedValue) {\n  _inherits(UnstableValue, _NamespacedValue);\n\n  var _super = _createSuper(UnstableValue);\n\n  // Note: Constructor difference is that `unstable` is *required*.\n  function UnstableValue(stable, unstable) {\n    var _this;\n\n    _classCallCheck(this, UnstableValue);\n\n    _this = _super.call(this, stable, unstable);\n\n    if (!_this.unstable) {\n      throw new Error(\"Unstable value must be supplied\");\n    }\n\n    return _this;\n  }\n\n  _createClass(UnstableValue, [{\n    key: \"name\",\n    get: function get() {\n      return this.unstable;\n    }\n  }, {\n    key: \"altName\",\n    get: function get() {\n      return this.stable;\n    }\n  }]);\n\n  return UnstableValue;\n}(NamespacedValue);\n\nexports.UnstableValue = UnstableValue;",
    "\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EmoteEvent = void 0;\n\nvar _MessageEvent2 = require(\"./MessageEvent\");\n\nvar _message_types = require(\"./message_types\");\n\nvar _events = require(\"../utility/events\");\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _get() { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n// Emote events are just decorated message events\n\n/**\n * Represents an emote. This is essentially a MessageEvent with\n * emote characteristics considered.\n */\nvar EmoteEvent = /*#__PURE__*/function (_MessageEvent) {\n  _inherits(EmoteEvent, _MessageEvent);\n\n  var _super = _createSuper(EmoteEvent);\n\n  function EmoteEvent(wireFormat) {\n    _classCallCheck(this, EmoteEvent);\n\n    return _super.call(this, wireFormat);\n  }\n\n  _createClass(EmoteEvent, [{\n    key: \"isEmote\",\n    get: function get() {\n      return true; // override\n    }\n  }, {\n    key: \"isEquivalentTo\",\n    value: function isEquivalentTo(primaryEventType) {\n      return (0, _events.isEventTypeSame)(primaryEventType, _message_types.M_EMOTE) || _get(_getPrototypeOf(EmoteEvent.prototype), \"isEquivalentTo\", this).call(this, primaryEventType);\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      var message = _get(_getPrototypeOf(EmoteEvent.prototype), \"serialize\", this).call(this);\n\n      message.content['msgtype'] = \"m.emote\";\n      return message;\n    }\n    /**\n     * Creates a new EmoteEvent from text and HTML.\n     * @param {string} text The text.\n     * @param {string} html Optional HTML.\n     * @returns {MessageEvent} The representative message event.\n     */\n\n  }], [{\n    key: \"from\",\n    value: function from(text, html) {\n      var _content;\n\n      return new EmoteEvent({\n        type: _message_types.M_EMOTE.name,\n        content: (_content = {}, _defineProperty(_content, _message_types.M_TEXT.name, text), _defineProperty(_content, _message_types.M_HTML.name, html), _content)\n      });\n    }\n  }]);\n\n  return EmoteEvent;\n}(_MessageEvent2.MessageEvent);\n\nexports.EmoteEvent = EmoteEvent;",
    "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExtensibleEvent = void 0;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\n/*\nCopyright 2021 - 2022 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * Represents an Extensible Event in Matrix.\n */\nvar ExtensibleEvent = /*#__PURE__*/function () {\n  function ExtensibleEvent(wireFormat) {\n    _classCallCheck(this, ExtensibleEvent);\n\n    this.wireFormat = wireFormat;\n  }\n  /**\n   * Shortcut to wireFormat.content\n   */\n\n\n  _createClass(ExtensibleEvent, [{\n    key: \"wireContent\",\n    get: function get() {\n      return this.wireFormat.content;\n    }\n    /**\n     * Serializes the event into a format which can be used to send the\n     * event to the room.\n     * @returns {IPartialEvent<object>} The serialized event.\n     */\n\n  }]);\n\n  return ExtensibleEvent;\n}();\n\nexports.ExtensibleEvent = ExtensibleEvent;",
    "\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MessageEvent = void 0;\n\nvar _ExtensibleEvent2 = require(\"./ExtensibleEvent\");\n\nvar _types = require(\"../types\");\n\nvar _InvalidEventError = require(\"../InvalidEventError\");\n\nvar _message_types = require(\"./message_types\");\n\nvar _events = require(\"../utility/events\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Represents a message event. Message events are the simplest form of event with\n * just text (optionally of different mimetypes, like HTML).\n *\n * Message events can additionally be an Emote or Notice, though typically those\n * are represented as EmoteEvent and NoticeEvent respectively.\n */\nvar MessageEvent = /*#__PURE__*/function (_ExtensibleEvent) {\n  _inherits(MessageEvent, _ExtensibleEvent);\n\n  var _super = _createSuper(MessageEvent);\n\n  /**\n   * The default text for the event.\n   */\n\n  /**\n   * The default HTML for the event, if provided.\n   */\n\n  /**\n   * All the different renderings of the message. Note that this is the same\n   * format as an m.message body but may contain elements not found directly\n   * in the event content: this is because this is interpreted based off the\n   * other information available in the event.\n   */\n\n  /**\n   * Creates a new MessageEvent from a pure format. Note that the event is\n   * *not* parsed here: it will be treated as a literal m.message primary\n   * typed event.\n   * @param {IPartialEvent<M_MESSAGE_EVENT_CONTENT>} wireFormat The event.\n   */\n  function MessageEvent(wireFormat) {\n    var _this;\n\n    _classCallCheck(this, MessageEvent);\n\n    _this = _super.call(this, wireFormat);\n\n    _defineProperty(_assertThisInitialized(_this), \"text\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"html\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"renderings\", void 0);\n\n    var mmessage = _message_types.M_MESSAGE.findIn(_this.wireContent);\n\n    var mtext = _message_types.M_TEXT.findIn(_this.wireContent);\n\n    var mhtml = _message_types.M_HTML.findIn(_this.wireContent);\n\n    if ((0, _types.isProvided)(mmessage)) {\n      if (!Array.isArray(mmessage)) {\n        throw new _InvalidEventError.InvalidEventError(\"m.message contents must be an array\");\n      }\n\n      var text = mmessage.find(function (r) {\n        return !(0, _types.isProvided)(r.mimetype) || r.mimetype === \"text/plain\";\n      });\n      var html = mmessage.find(function (r) {\n        return r.mimetype === \"text/html\";\n      });\n      if (!text) throw new _InvalidEventError.InvalidEventError(\"m.message is missing a plain text representation\");\n      _this.text = text.body;\n      _this.html = html === null || html === void 0 ? void 0 : html.body;\n      _this.renderings = mmessage;\n    } else if ((0, _types.isOptionalAString)(mtext)) {\n      _this.text = mtext;\n      _this.html = mhtml;\n      _this.renderings = [{\n        body: mtext,\n        mimetype: \"text/plain\"\n      }];\n\n      if (_this.html) {\n        _this.renderings.push({\n          body: _this.html,\n          mimetype: \"text/html\"\n        });\n      }\n    } else {\n      throw new _InvalidEventError.InvalidEventError(\"Missing textual representation for event\");\n    }\n\n    return _this;\n  }\n  /**\n   * Gets whether this message is considered an \"emote\". Note that a message\n   * might be an emote and notice at the same time: while technically possible,\n   * the event should be interpreted as one or the other.\n   */\n\n\n  _createClass(MessageEvent, [{\n    key: \"isEmote\",\n    get: function get() {\n      return _message_types.M_EMOTE.matches(this.wireFormat.type) || (0, _types.isProvided)(_message_types.M_EMOTE.findIn(this.wireFormat.content));\n    }\n    /**\n     * Gets whether this message is considered a \"notice\". Note that a message\n     * might be an emote and notice at the same time: while technically possible,\n     * the event should be interpreted as one or the other.\n     */\n\n  }, {\n    key: \"isNotice\",\n    get: function get() {\n      return _message_types.M_NOTICE.matches(this.wireFormat.type) || (0, _types.isProvided)(_message_types.M_NOTICE.findIn(this.wireFormat.content));\n    }\n  }, {\n    key: \"isEquivalentTo\",\n    value: function isEquivalentTo(primaryEventType) {\n      return (0, _events.isEventTypeSame)(primaryEventType, _message_types.M_MESSAGE);\n    }\n  }, {\n    key: \"serializeMMessageOnly\",\n    value: function serializeMMessageOnly() {\n      var messageRendering = _defineProperty({}, _message_types.M_MESSAGE.name, this.renderings); // Use the shorthand if it's just a simple text event\n\n\n      if (this.renderings.length === 1) {\n        var mime = this.renderings[0].mimetype;\n\n        if (mime === undefined || mime === \"text/plain\") {\n          messageRendering = _defineProperty({}, _message_types.M_TEXT.name, this.renderings[0].body);\n        }\n      }\n\n      return messageRendering;\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      var _this$html;\n\n      return {\n        type: \"m.room.message\",\n        content: _objectSpread(_objectSpread({}, this.serializeMMessageOnly()), {}, {\n          body: this.text,\n          msgtype: \"m.text\",\n          format: this.html ? \"org.matrix.custom.html\" : undefined,\n          formatted_body: (_this$html = this.html) !== null && _this$html !== void 0 ? _this$html : undefined\n        })\n      };\n    }\n    /**\n     * Creates a new MessageEvent from text and HTML.\n     * @param {string} text The text.\n     * @param {string} html Optional HTML.\n     * @returns {MessageEvent} The representative message event.\n     */\n\n  }], [{\n    key: \"from\",\n    value: function from(text, html) {\n      var _content;\n\n      return new MessageEvent({\n        type: _message_types.M_MESSAGE.name,\n        content: (_content = {}, _defineProperty(_content, _message_types.M_TEXT.name, text), _defineProperty(_content, _message_types.M_HTML.name, html), _content)\n      });\n    }\n  }]);\n\n  return MessageEvent;\n}(_ExtensibleEvent2.ExtensibleEvent);\n\nexports.MessageEvent = MessageEvent;",
    "\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NoticeEvent = void 0;\n\nvar _MessageEvent2 = require(\"./MessageEvent\");\n\nvar _message_types = require(\"./message_types\");\n\nvar _events = require(\"../utility/events\");\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _get() { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n// Notice events are just decorated message events\n\n/**\n * Represents a notice. This is essentially a MessageEvent with\n * notice characteristics considered.\n */\nvar NoticeEvent = /*#__PURE__*/function (_MessageEvent) {\n  _inherits(NoticeEvent, _MessageEvent);\n\n  var _super = _createSuper(NoticeEvent);\n\n  function NoticeEvent(wireFormat) {\n    _classCallCheck(this, NoticeEvent);\n\n    return _super.call(this, wireFormat);\n  }\n\n  _createClass(NoticeEvent, [{\n    key: \"isNotice\",\n    get: function get() {\n      return true; // override\n    }\n  }, {\n    key: \"isEquivalentTo\",\n    value: function isEquivalentTo(primaryEventType) {\n      return (0, _events.isEventTypeSame)(primaryEventType, _message_types.M_NOTICE) || _get(_getPrototypeOf(NoticeEvent.prototype), \"isEquivalentTo\", this).call(this, primaryEventType);\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      var message = _get(_getPrototypeOf(NoticeEvent.prototype), \"serialize\", this).call(this);\n\n      message.content['msgtype'] = \"m.notice\";\n      return message;\n    }\n    /**\n     * Creates a new NoticeEvent from text and HTML.\n     * @param {string} text The text.\n     * @param {string} html Optional HTML.\n     * @returns {MessageEvent} The representative message event.\n     */\n\n  }], [{\n    key: \"from\",\n    value: function from(text, html) {\n      var _content;\n\n      return new NoticeEvent({\n        type: _message_types.M_NOTICE.name,\n        content: (_content = {}, _defineProperty(_content, _message_types.M_TEXT.name, text), _defineProperty(_content, _message_types.M_HTML.name, html), _content)\n      });\n    }\n  }]);\n\n  return NoticeEvent;\n}(_MessageEvent2.MessageEvent);\n\nexports.NoticeEvent = NoticeEvent;",
    "\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PollEndEvent = void 0;\n\nvar _poll_types = require(\"./poll_types\");\n\nvar _InvalidEventError = require(\"../InvalidEventError\");\n\nvar _relationship_types = require(\"./relationship_types\");\n\nvar _MessageEvent = require(\"./MessageEvent\");\n\nvar _message_types = require(\"./message_types\");\n\nvar _events = require(\"../utility/events\");\n\nvar _ExtensibleEvent2 = require(\"./ExtensibleEvent\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Represents a poll end/closure event.\n */\nvar PollEndEvent = /*#__PURE__*/function (_ExtensibleEvent) {\n  _inherits(PollEndEvent, _ExtensibleEvent);\n\n  var _super = _createSuper(PollEndEvent);\n\n  /**\n   * The poll start event ID referenced by the response.\n   */\n\n  /**\n   * The closing message for the event.\n   */\n\n  /**\n   * Creates a new PollEndEvent from a pure format. Note that the event is *not*\n   * parsed here: it will be treated as a literal m.poll.response primary typed event.\n   * @param {IPartialEvent<M_POLL_END_EVENT_CONTENT>} wireFormat The event.\n   */\n  function PollEndEvent(wireFormat) {\n    var _this;\n\n    _classCallCheck(this, PollEndEvent);\n\n    _this = _super.call(this, wireFormat);\n\n    _defineProperty(_assertThisInitialized(_this), \"pollEventId\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"closingMessage\", void 0);\n\n    var rel = _this.wireContent[\"m.relates_to\"];\n\n    if (!_relationship_types.REFERENCE_RELATION.matches(rel === null || rel === void 0 ? void 0 : rel.rel_type) || typeof (rel === null || rel === void 0 ? void 0 : rel.event_id) !== \"string\") {\n      throw new _InvalidEventError.InvalidEventError(\"Relationship must be a reference to an event\");\n    }\n\n    _this.pollEventId = rel.event_id;\n    _this.closingMessage = new _MessageEvent.MessageEvent(_this.wireFormat);\n    return _this;\n  }\n\n  _createClass(PollEndEvent, [{\n    key: \"isEquivalentTo\",\n    value: function isEquivalentTo(primaryEventType) {\n      return (0, _events.isEventTypeSame)(primaryEventType, _poll_types.M_POLL_END);\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      return {\n        type: _poll_types.M_POLL_END.name,\n        content: _objectSpread(_defineProperty({\n          \"m.relates_to\": {\n            rel_type: _relationship_types.REFERENCE_RELATION.name,\n            event_id: this.pollEventId\n          }\n        }, _poll_types.M_POLL_END.name, {}), this.closingMessage.serialize().content)\n      };\n    }\n    /**\n     * Creates a new PollEndEvent from a poll event ID.\n     * @param {string} pollEventId The poll start event ID.\n     * @param {string} message A closing message, typically revealing the top answer.\n     * @returns {PollStartEvent} The representative poll closure event.\n     */\n\n  }], [{\n    key: \"from\",\n    value: function from(pollEventId, message) {\n      var _content;\n\n      return new PollEndEvent({\n        type: _poll_types.M_POLL_END.name,\n        content: (_content = {\n          \"m.relates_to\": {\n            rel_type: _relationship_types.REFERENCE_RELATION.name,\n            event_id: pollEventId\n          }\n        }, _defineProperty(_content, _poll_types.M_POLL_END.name, {}), _defineProperty(_content, _message_types.M_TEXT.name, message), _content)\n      });\n    }\n  }]);\n\n  return PollEndEvent;\n}(_ExtensibleEvent2.ExtensibleEvent);\n\nexports.PollEndEvent = PollEndEvent;",
    "\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PollResponseEvent = void 0;\n\nvar _ExtensibleEvent2 = require(\"./ExtensibleEvent\");\n\nvar _poll_types = require(\"./poll_types\");\n\nvar _InvalidEventError = require(\"../InvalidEventError\");\n\nvar _relationship_types = require(\"./relationship_types\");\n\nvar _events = require(\"../utility/events\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Represents a poll response event.\n */\nvar PollResponseEvent = /*#__PURE__*/function (_ExtensibleEvent) {\n  _inherits(PollResponseEvent, _ExtensibleEvent);\n\n  var _super = _createSuper(PollResponseEvent);\n\n  /**\n   * Creates a new PollResponseEvent from a pure format. Note that the event is *not*\n   * parsed here: it will be treated as a literal m.poll.response primary typed event.\n   *\n   * To validate the response against a poll, call `validateAgainst` after creation.\n   * @param {IPartialEvent<M_POLL_RESPONSE_EVENT_CONTENT>} wireFormat The event.\n   */\n  function PollResponseEvent(wireFormat) {\n    var _this;\n\n    _classCallCheck(this, PollResponseEvent);\n\n    _this = _super.call(this, wireFormat);\n\n    _defineProperty(_assertThisInitialized(_this), \"internalAnswerIds\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"internalSpoiled\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"pollEventId\", void 0);\n\n    var rel = _this.wireContent[\"m.relates_to\"];\n\n    if (!_relationship_types.REFERENCE_RELATION.matches(rel === null || rel === void 0 ? void 0 : rel.rel_type) || typeof (rel === null || rel === void 0 ? void 0 : rel.event_id) !== \"string\") {\n      throw new _InvalidEventError.InvalidEventError(\"Relationship must be a reference to an event\");\n    }\n\n    _this.pollEventId = rel.event_id;\n\n    _this.validateAgainst(null);\n\n    return _this;\n  }\n  /**\n   * Validates the poll response using the poll start event as a frame of reference. This\n   * is used to determine if the vote is spoiled, whether the answers are valid, etc.\n   * @param {PollStartEvent} poll The poll start event.\n   */\n\n\n  _createClass(PollResponseEvent, [{\n    key: \"answerIds\",\n    get:\n    /**\n     * The provided answers for the poll. Note that this may be falsy/unpredictable if\n     * the `spoiled` property is true.\n     */\n    function get() {\n      return this.internalAnswerIds;\n    }\n    /**\n     * The poll start event ID referenced by the response.\n     */\n\n  }, {\n    key: \"spoiled\",\n    get:\n    /**\n     * Whether the vote is spoiled.\n     */\n    function get() {\n      return this.internalSpoiled;\n    }\n  }, {\n    key: \"validateAgainst\",\n    value: function validateAgainst(poll) {\n      var response = _poll_types.M_POLL_RESPONSE.findIn(this.wireContent);\n\n      if (!Array.isArray(response === null || response === void 0 ? void 0 : response.answers)) {\n        this.internalSpoiled = true;\n        this.internalAnswerIds = [];\n        return;\n      }\n\n      var answers = response.answers;\n\n      if (answers.some(function (a) {\n        return typeof a !== \"string\";\n      }) || answers.length === 0) {\n        this.internalSpoiled = true;\n        this.internalAnswerIds = [];\n        return;\n      }\n\n      if (poll) {\n        if (answers.some(function (a) {\n          return !poll.answers.some(function (pa) {\n            return pa.id === a;\n          });\n        })) {\n          this.internalSpoiled = true;\n          this.internalAnswerIds = [];\n          return;\n        }\n\n        answers = answers.slice(0, poll.maxSelections);\n      }\n\n      this.internalAnswerIds = answers;\n      this.internalSpoiled = false;\n    }\n  }, {\n    key: \"isEquivalentTo\",\n    value: function isEquivalentTo(primaryEventType) {\n      return (0, _events.isEventTypeSame)(primaryEventType, _poll_types.M_POLL_RESPONSE);\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      return {\n        type: _poll_types.M_POLL_RESPONSE.name,\n        content: _defineProperty({\n          \"m.relates_to\": {\n            rel_type: _relationship_types.REFERENCE_RELATION.name,\n            event_id: this.pollEventId\n          }\n        }, _poll_types.M_POLL_RESPONSE.name, {\n          answers: this.spoiled ? undefined : this.answerIds\n        })\n      };\n    }\n    /**\n     * Creates a new PollResponseEvent from a set of answers. To spoil the vote, pass an empty\n     * answers array.\n     * @param {string} answers The user's answers. Should be valid from a poll's answer IDs.\n     * @param {string} pollEventId The poll start event ID.\n     * @returns {PollStartEvent} The representative poll response event.\n     */\n\n  }], [{\n    key: \"from\",\n    value: function from(answers, pollEventId) {\n      return new PollResponseEvent({\n        type: _poll_types.M_POLL_RESPONSE.name,\n        content: _defineProperty({\n          \"m.relates_to\": {\n            rel_type: _relationship_types.REFERENCE_RELATION.name,\n            event_id: pollEventId\n          }\n        }, _poll_types.M_POLL_RESPONSE.name, {\n          answers: answers\n        })\n      });\n    }\n  }]);\n\n  return PollResponseEvent;\n}(_ExtensibleEvent2.ExtensibleEvent);\n\nexports.PollResponseEvent = PollResponseEvent;",
    "\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PollStartEvent = exports.PollAnswerSubevent = void 0;\n\nvar _poll_types = require(\"./poll_types\");\n\nvar _MessageEvent2 = require(\"./MessageEvent\");\n\nvar _message_types = require(\"./message_types\");\n\nvar _InvalidEventError = require(\"../InvalidEventError\");\n\nvar _NamespacedValue = require(\"../NamespacedValue\");\n\nvar _events = require(\"../utility/events\");\n\nvar _ExtensibleEvent2 = require(\"./ExtensibleEvent\");\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Represents a poll answer. Note that this is represented as a subtype and is\n * not registered as a parsable event - it is implied for usage exclusively\n * within the PollStartEvent parsing.\n */\nvar PollAnswerSubevent = /*#__PURE__*/function (_MessageEvent) {\n  _inherits(PollAnswerSubevent, _MessageEvent);\n\n  var _super = _createSuper(PollAnswerSubevent);\n\n  /**\n   * The answer ID.\n   */\n  function PollAnswerSubevent(wireFormat) {\n    var _this;\n\n    _classCallCheck(this, PollAnswerSubevent);\n\n    _this = _super.call(this, wireFormat);\n\n    _defineProperty(_assertThisInitialized(_this), \"id\", void 0);\n\n    var id = wireFormat.content.id;\n\n    if (!id || typeof id !== \"string\") {\n      throw new _InvalidEventError.InvalidEventError(\"Answer ID must be a non-empty string\");\n    }\n\n    _this.id = id;\n    return _this;\n  }\n\n  _createClass(PollAnswerSubevent, [{\n    key: \"serialize\",\n    value: function serialize() {\n      return {\n        type: \"org.matrix.sdk.poll.answer\",\n        content: _objectSpread({\n          id: this.id\n        }, this.serializeMMessageOnly())\n      };\n    }\n    /**\n     * Creates a new PollAnswerSubevent from ID and text.\n     * @param {string} id The answer ID (unique within the poll).\n     * @param {string} text The text.\n     * @returns {PollAnswerSubevent} The representative answer.\n     */\n\n  }], [{\n    key: \"from\",\n    value: function from(id, text) {\n      return new PollAnswerSubevent({\n        type: \"org.matrix.sdk.poll.answer\",\n        content: _defineProperty({\n          id: id\n        }, _message_types.M_TEXT.name, text)\n      });\n    }\n  }]);\n\n  return PollAnswerSubevent;\n}(_MessageEvent2.MessageEvent);\n/**\n * Represents a poll start event.\n */\n\n\nexports.PollAnswerSubevent = PollAnswerSubevent;\n\nvar PollStartEvent = /*#__PURE__*/function (_ExtensibleEvent) {\n  _inherits(PollStartEvent, _ExtensibleEvent);\n\n  var _super2 = _createSuper(PollStartEvent);\n\n  /**\n   * The question being asked, as a MessageEvent node.\n   */\n\n  /**\n   * The interpreted kind of poll. Note that this will infer a value that is known to the\n   * SDK rather than verbatim - this means unknown types will be represented as undisclosed\n   * polls.\n   *\n   * To get the raw kind, use rawKind.\n   */\n\n  /**\n   * The true kind as provided by the event sender. Might not be valid.\n   */\n\n  /**\n   * The maximum number of selections a user is allowed to make.\n   */\n\n  /**\n   * The possible answers for the poll.\n   */\n\n  /**\n   * Creates a new PollStartEvent from a pure format. Note that the event is *not*\n   * parsed here: it will be treated as a literal m.poll.start primary typed event.\n   * @param {IPartialEvent<M_POLL_START_EVENT_CONTENT>} wireFormat The event.\n   */\n  function PollStartEvent(wireFormat) {\n    var _this2;\n\n    _classCallCheck(this, PollStartEvent);\n\n    _this2 = _super2.call(this, wireFormat);\n\n    _defineProperty(_assertThisInitialized(_this2), \"question\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this2), \"kind\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this2), \"rawKind\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this2), \"maxSelections\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this2), \"answers\", void 0);\n\n    var poll = _poll_types.M_POLL_START.findIn(_this2.wireContent);\n\n    if (!poll.question) {\n      throw new _InvalidEventError.InvalidEventError(\"A question is required\");\n    }\n\n    _this2.question = new _MessageEvent2.MessageEvent({\n      type: \"org.matrix.sdk.poll.question\",\n      content: poll.question\n    });\n    _this2.rawKind = poll.kind;\n\n    if (_poll_types.M_POLL_KIND_DISCLOSED.matches(_this2.rawKind)) {\n      _this2.kind = _poll_types.M_POLL_KIND_DISCLOSED;\n    } else {\n      _this2.kind = _poll_types.M_POLL_KIND_UNDISCLOSED; // default & assumed value\n    }\n\n    _this2.maxSelections = Number.isFinite(poll.max_selections) && poll.max_selections > 0 ? poll.max_selections : 1;\n\n    if (!Array.isArray(poll.answers)) {\n      throw new _InvalidEventError.InvalidEventError(\"Poll answers must be an array\");\n    }\n\n    var answers = poll.answers.slice(0, 20).map(function (a) {\n      return new PollAnswerSubevent({\n        type: \"org.matrix.sdk.poll.answer\",\n        content: a\n      });\n    });\n\n    if (answers.length <= 0) {\n      throw new _InvalidEventError.InvalidEventError(\"No answers available\");\n    }\n\n    _this2.answers = answers;\n    return _this2;\n  }\n\n  _createClass(PollStartEvent, [{\n    key: \"isEquivalentTo\",\n    value: function isEquivalentTo(primaryEventType) {\n      return (0, _events.isEventTypeSame)(primaryEventType, _poll_types.M_POLL_START);\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      var _content2;\n\n      return {\n        type: _poll_types.M_POLL_START.name,\n        content: (_content2 = {}, _defineProperty(_content2, _poll_types.M_POLL_START.name, {\n          question: this.question.serialize().content,\n          kind: this.rawKind,\n          max_selections: this.maxSelections,\n          answers: this.answers.map(function (a) {\n            return a.serialize().content;\n          })\n        }), _defineProperty(_content2, _message_types.M_TEXT.name, \"\".concat(this.question.text, \"\\n\").concat(this.answers.map(function (a, i) {\n          return \"\".concat(i + 1, \". \").concat(a.text);\n        }).join(\"\\n\"))), _content2)\n      };\n    }\n    /**\n     * Creates a new PollStartEvent from question, answers, and metadata.\n     * @param {string} question The question to ask.\n     * @param {string} answers The answers. Should be unique within each other.\n     * @param {KNOWN_POLL_KIND|string} kind The kind of poll.\n     * @param {number} maxSelections The maximum number of selections. Must be 1 or higher.\n     * @returns {PollStartEvent} The representative poll start event.\n     */\n\n  }], [{\n    key: \"from\",\n    value: function from(question, answers, kind) {\n      var _content3;\n\n      var maxSelections = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n      return new PollStartEvent({\n        type: _poll_types.M_POLL_START.name,\n        content: (_content3 = {}, _defineProperty(_content3, _message_types.M_TEXT.name, question), _defineProperty(_content3, _poll_types.M_POLL_START.name, {\n          question: _defineProperty({}, _message_types.M_TEXT.name, question),\n          kind: kind instanceof _NamespacedValue.NamespacedValue ? kind.name : kind,\n          max_selections: maxSelections,\n          answers: answers.map(function (a) {\n            return _defineProperty({\n              id: makeId()\n            }, _message_types.M_TEXT.name, a);\n          })\n        }), _content3)\n      });\n    }\n  }]);\n\n  return PollStartEvent;\n}(_ExtensibleEvent2.ExtensibleEvent);\n\nexports.PollStartEvent = PollStartEvent;\nvar LETTERS = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n\nfunction makeId() {\n  return _toConsumableArray(Array(16)).map(function () {\n    return LETTERS.charAt(Math.floor(Math.random() * LETTERS.length));\n  }).join('');\n}",
    "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.M_TEXT = exports.M_NOTICE = exports.M_MESSAGE = exports.M_HTML = exports.M_EMOTE = void 0;\n\nvar _NamespacedValue = require(\"../NamespacedValue\");\n\n/*\nCopyright 2022 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * The namespaced value for m.message\n */\nvar M_MESSAGE = new _NamespacedValue.UnstableValue(\"m.message\", \"org.matrix.msc1767.message\");\n/**\n * An m.message event rendering\n */\n\nexports.M_MESSAGE = M_MESSAGE;\n\n/**\n * The namespaced value for m.text\n */\nvar M_TEXT = new _NamespacedValue.UnstableValue(\"m.text\", \"org.matrix.msc1767.text\");\n/**\n * The content for an m.text event\n */\n\nexports.M_TEXT = M_TEXT;\n\n/**\n * The namespaced value for m.html\n */\nvar M_HTML = new _NamespacedValue.UnstableValue(\"m.html\", \"org.matrix.msc1767.html\");\n/**\n * The content for an m.html event\n */\n\nexports.M_HTML = M_HTML;\n\n/**\n * The namespaced value for m.emote\n */\nvar M_EMOTE = new _NamespacedValue.UnstableValue(\"m.emote\", \"org.matrix.msc1767.emote\");\n/**\n * The event definition for an m.emote event (in content)\n */\n\nexports.M_EMOTE = M_EMOTE;\n\n/**\n * The namespaced value for m.notice\n */\nvar M_NOTICE = new _NamespacedValue.UnstableValue(\"m.notice\", \"org.matrix.msc1767.notice\");\n/**\n * The event definition for an m.notice event (in content)\n */\n\nexports.M_NOTICE = M_NOTICE;",
    "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.M_POLL_START = exports.M_POLL_RESPONSE = exports.M_POLL_KIND_UNDISCLOSED = exports.M_POLL_KIND_DISCLOSED = exports.M_POLL_END = void 0;\n\nvar _NamespacedValue = require(\"../NamespacedValue\");\n\n/*\nCopyright 2022 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * Identifier for a disclosed poll.\n */\nvar M_POLL_KIND_DISCLOSED = new _NamespacedValue.UnstableValue(\"m.poll.disclosed\", \"org.matrix.msc3381.poll.disclosed\");\n/**\n * Identifier for an undisclosed poll.\n */\n\nexports.M_POLL_KIND_DISCLOSED = M_POLL_KIND_DISCLOSED;\nvar M_POLL_KIND_UNDISCLOSED = new _NamespacedValue.UnstableValue(\"m.poll.undisclosed\", \"org.matrix.msc3381.poll.undisclosed\");\n/**\n * Any poll kind.\n */\n\nexports.M_POLL_KIND_UNDISCLOSED = M_POLL_KIND_UNDISCLOSED;\n\n/**\n * The namespaced value for m.poll.start\n */\nvar M_POLL_START = new _NamespacedValue.UnstableValue(\"m.poll.start\", \"org.matrix.msc3381.poll.start\");\n/**\n * The m.poll.start type within event content\n */\n\nexports.M_POLL_START = M_POLL_START;\n\n/**\n * The namespaced value for m.poll.response\n */\nvar M_POLL_RESPONSE = new _NamespacedValue.UnstableValue(\"m.poll.response\", \"org.matrix.msc3381.poll.response\");\n/**\n * The m.poll.response type within event content\n */\n\nexports.M_POLL_RESPONSE = M_POLL_RESPONSE;\n\n/**\n * The namespaced value for m.poll.end\n */\nvar M_POLL_END = new _NamespacedValue.UnstableValue(\"m.poll.end\", \"org.matrix.msc3381.poll.end\");\n/**\n * The event definition for an m.poll.end event (in content)\n */\n\nexports.M_POLL_END = M_POLL_END;",
    "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.REFERENCE_RELATION = void 0;\n\nvar _NamespacedValue = require(\"../NamespacedValue\");\n\n/*\nCopyright 2022 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * The namespaced value for an m.reference relation\n */\nvar REFERENCE_RELATION = new _NamespacedValue.NamespacedValue(\"m.reference\");\n/**\n * Represents any relation type\n */\n\nexports.REFERENCE_RELATION = REFERENCE_RELATION;",
    "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _ExtensibleEvents = require(\"./ExtensibleEvents\");\n\nObject.keys(_ExtensibleEvents).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _ExtensibleEvents[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _ExtensibleEvents[key];\n    }\n  });\n});\n\nvar _IPartialEvent = require(\"./IPartialEvent\");\n\nObject.keys(_IPartialEvent).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _IPartialEvent[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _IPartialEvent[key];\n    }\n  });\n});\n\nvar _InvalidEventError = require(\"./InvalidEventError\");\n\nObject.keys(_InvalidEventError).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _InvalidEventError[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _InvalidEventError[key];\n    }\n  });\n});\n\nvar _NamespacedValue = require(\"./NamespacedValue\");\n\nObject.keys(_NamespacedValue).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _NamespacedValue[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _NamespacedValue[key];\n    }\n  });\n});\n\nvar _NamespacedMap = require(\"./NamespacedMap\");\n\nObject.keys(_NamespacedMap).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _NamespacedMap[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _NamespacedMap[key];\n    }\n  });\n});\n\nvar _types = require(\"./types\");\n\nObject.keys(_types).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _types[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _types[key];\n    }\n  });\n});\n\nvar _MessageMatchers = require(\"./utility/MessageMatchers\");\n\nObject.keys(_MessageMatchers).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _MessageMatchers[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _MessageMatchers[key];\n    }\n  });\n});\n\nvar _events = require(\"./utility/events\");\n\nObject.keys(_events).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _events[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _events[key];\n    }\n  });\n});\n\nvar _MRoomMessage = require(\"./interpreters/legacy/MRoomMessage\");\n\nObject.keys(_MRoomMessage).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _MRoomMessage[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _MRoomMessage[key];\n    }\n  });\n});\n\nvar _MMessage = require(\"./interpreters/modern/MMessage\");\n\nObject.keys(_MMessage).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _MMessage[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _MMessage[key];\n    }\n  });\n});\n\nvar _MPoll = require(\"./interpreters/modern/MPoll\");\n\nObject.keys(_MPoll).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _MPoll[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _MPoll[key];\n    }\n  });\n});\n\nvar _relationship_types = require(\"./events/relationship_types\");\n\nObject.keys(_relationship_types).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _relationship_types[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _relationship_types[key];\n    }\n  });\n});\n\nvar _ExtensibleEvent = require(\"./events/ExtensibleEvent\");\n\nObject.keys(_ExtensibleEvent).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _ExtensibleEvent[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _ExtensibleEvent[key];\n    }\n  });\n});\n\nvar _message_types = require(\"./events/message_types\");\n\nObject.keys(_message_types).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _message_types[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _message_types[key];\n    }\n  });\n});\n\nvar _MessageEvent = require(\"./events/MessageEvent\");\n\nObject.keys(_MessageEvent).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _MessageEvent[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _MessageEvent[key];\n    }\n  });\n});\n\nvar _EmoteEvent = require(\"./events/EmoteEvent\");\n\nObject.keys(_EmoteEvent).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _EmoteEvent[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _EmoteEvent[key];\n    }\n  });\n});\n\nvar _NoticeEvent = require(\"./events/NoticeEvent\");\n\nObject.keys(_NoticeEvent).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _NoticeEvent[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _NoticeEvent[key];\n    }\n  });\n});\n\nvar _poll_types = require(\"./events/poll_types\");\n\nObject.keys(_poll_types).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _poll_types[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _poll_types[key];\n    }\n  });\n});\n\nvar _PollStartEvent = require(\"./events/PollStartEvent\");\n\nObject.keys(_PollStartEvent).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _PollStartEvent[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _PollStartEvent[key];\n    }\n  });\n});\n\nvar _PollResponseEvent = require(\"./events/PollResponseEvent\");\n\nObject.keys(_PollResponseEvent).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _PollResponseEvent[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _PollResponseEvent[key];\n    }\n  });\n});\n\nvar _PollEndEvent = require(\"./events/PollEndEvent\");\n\nObject.keys(_PollEndEvent).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _PollEndEvent[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _PollEndEvent[key];\n    }\n  });\n});",
    "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LEGACY_M_ROOM_MESSAGE = void 0;\nexports.parseMRoomMessage = parseMRoomMessage;\n\nvar _MessageEvent = require(\"../../events/MessageEvent\");\n\nvar _NoticeEvent = require(\"../../events/NoticeEvent\");\n\nvar _EmoteEvent = require(\"../../events/EmoteEvent\");\n\nvar _NamespacedValue = require(\"../../NamespacedValue\");\n\nvar _message_types = require(\"../../events/message_types\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar LEGACY_M_ROOM_MESSAGE = new _NamespacedValue.NamespacedValue(\"m.room.message\");\nexports.LEGACY_M_ROOM_MESSAGE = LEGACY_M_ROOM_MESSAGE;\n\nfunction parseMRoomMessage(wireEvent) {\n  var _wireEvent$content, _wireEvent$content2, _wireEvent$content3;\n\n  if (_message_types.M_MESSAGE.findIn(wireEvent.content) || _message_types.M_TEXT.findIn(wireEvent.content)) {\n    // We know enough about the event to coerce it into the right type\n    return new _MessageEvent.MessageEvent(wireEvent);\n  }\n\n  var msgtype = (_wireEvent$content = wireEvent.content) === null || _wireEvent$content === void 0 ? void 0 : _wireEvent$content.msgtype;\n  var text = (_wireEvent$content2 = wireEvent.content) === null || _wireEvent$content2 === void 0 ? void 0 : _wireEvent$content2.body;\n  var html = ((_wireEvent$content3 = wireEvent.content) === null || _wireEvent$content3 === void 0 ? void 0 : _wireEvent$content3.format) === \"org.matrix.custom.html\" ? wireEvent.content.formatted_body : null;\n\n  if (msgtype === \"m.text\") {\n    var _objectSpread2;\n\n    return new _MessageEvent.MessageEvent(_objectSpread(_objectSpread({}, wireEvent), {}, {\n      content: _objectSpread(_objectSpread({}, wireEvent.content), {}, (_objectSpread2 = {}, _defineProperty(_objectSpread2, _message_types.M_TEXT.name, text), _defineProperty(_objectSpread2, _message_types.M_HTML.name, html), _objectSpread2))\n    }));\n  } else if (msgtype === \"m.notice\") {\n    var _objectSpread3;\n\n    return new _NoticeEvent.NoticeEvent(_objectSpread(_objectSpread({}, wireEvent), {}, {\n      content: _objectSpread(_objectSpread({}, wireEvent.content), {}, (_objectSpread3 = {}, _defineProperty(_objectSpread3, _message_types.M_TEXT.name, text), _defineProperty(_objectSpread3, _message_types.M_HTML.name, html), _objectSpread3))\n    }));\n  } else if (msgtype === \"m.emote\") {\n    var _objectSpread4;\n\n    return new _EmoteEvent.EmoteEvent(_objectSpread(_objectSpread({}, wireEvent), {}, {\n      content: _objectSpread(_objectSpread({}, wireEvent.content), {}, (_objectSpread4 = {}, _defineProperty(_objectSpread4, _message_types.M_TEXT.name, text), _defineProperty(_objectSpread4, _message_types.M_HTML.name, html), _objectSpread4))\n    }));\n  } else {\n    // TODO: Handle other types\n    return null;\n  }\n}",
    "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseMMessage = parseMMessage;\n\nvar _MessageEvent = require(\"../../events/MessageEvent\");\n\nvar _message_types = require(\"../../events/message_types\");\n\nvar _EmoteEvent = require(\"../../events/EmoteEvent\");\n\nvar _NoticeEvent = require(\"../../events/NoticeEvent\");\n\n/*\nCopyright 2022 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nfunction parseMMessage(wireEvent) {\n  if (_message_types.M_EMOTE.matches(wireEvent.type)) {\n    return new _EmoteEvent.EmoteEvent(wireEvent);\n  } else if (_message_types.M_NOTICE.matches(wireEvent.type)) {\n    return new _NoticeEvent.NoticeEvent(wireEvent);\n  } // default: return a generic message\n\n\n  return new _MessageEvent.MessageEvent(wireEvent);\n}",
    "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseMPoll = parseMPoll;\n\nvar _poll_types = require(\"../../events/poll_types\");\n\nvar _PollStartEvent = require(\"../../events/PollStartEvent\");\n\nvar _PollResponseEvent = require(\"../../events/PollResponseEvent\");\n\nvar _PollEndEvent = require(\"../../events/PollEndEvent\");\n\n/*\nCopyright 2022 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nfunction parseMPoll(wireEvent) {\n  if (_poll_types.M_POLL_START.matches(wireEvent.type)) {\n    return new _PollStartEvent.PollStartEvent(wireEvent);\n  } else if (_poll_types.M_POLL_RESPONSE.matches(wireEvent.type)) {\n    return new _PollResponseEvent.PollResponseEvent(wireEvent);\n  } else if (_poll_types.M_POLL_END.matches(wireEvent.type)) {\n    return new _PollEndEvent.PollEndEvent(wireEvent);\n  }\n\n  return null; // not a poll event\n}",
    "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isOptionalAString = isOptionalAString;\nexports.isProvided = isProvided;\n\n/*\nCopyright 2021 - 2022 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * Represents an optional type: can either be T or a falsy value.\n */\n\n/**\n * Determines if the given optional string is a defined string.\n * @param {Optional<string>} s The input string.\n * @returns {boolean} True if the input is a defined string.\n */\nfunction isOptionalAString(s) {\n  return isProvided(s) && typeof s === 'string';\n}\n/**\n * Determines if the given optional was provided a value.\n * @param {Optional<T>} s The optional to test.\n * @returns {boolean} True if the value is defined.\n */\n\n\nfunction isProvided(s) {\n  return s !== null && s !== undefined;\n}\n/**\n * Represents either just T1, just T2, or T1 and T2 mixed.\n */",
    "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LegacyMsgType = void 0;\nexports.isEventLike = isEventLike;\n\nvar _message_types = require(\"../events/message_types\");\n\n/*\nCopyright 2022 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * Represents a legacy m.room.message msgtype\n */\nvar LegacyMsgType;\n/**\n * Determines if the given partial event looks similar enough to the given legacy msgtype\n * to count as that message type.\n * @param {IPartialEvent<EitherAnd<IPartialLegacyContent, M_MESSAGE_EVENT_CONTENT>>} event The event.\n * @param {LegacyMsgType} msgtype The message type to compare for.\n * @returns {boolean} True if the event appears to look similar enough to the msgtype.\n */\n\nexports.LegacyMsgType = LegacyMsgType;\n\n(function (LegacyMsgType) {\n  LegacyMsgType[\"Text\"] = \"m.text\";\n  LegacyMsgType[\"Notice\"] = \"m.notice\";\n  LegacyMsgType[\"Emote\"] = \"m.emote\";\n})(LegacyMsgType || (exports.LegacyMsgType = LegacyMsgType = {}));\n\nfunction isEventLike(event, msgtype) {\n  var content = event.content;\n\n  if (msgtype === LegacyMsgType.Text) {\n    return _message_types.M_MESSAGE.matches(event.type) || event.type === \"m.room.message\" && (content === null || content === void 0 ? void 0 : content['msgtype']) === \"m.text\";\n  } else if (msgtype === LegacyMsgType.Emote) {\n    return _message_types.M_EMOTE.matches(event.type) || event.type === \"m.room.message\" && (content === null || content === void 0 ? void 0 : content['msgtype']) === \"m.emote\";\n  } else if (msgtype === LegacyMsgType.Notice) {\n    return _message_types.M_NOTICE.matches(event.type) || event.type === \"m.room.message\" && (content === null || content === void 0 ? void 0 : content['msgtype']) === \"m.notice\";\n  }\n\n  return false;\n}",
    "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isEventTypeSame = isEventTypeSame;\n\n/*\nCopyright 2022 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * Represents a potentially namespaced event type.\n */\n\n/**\n * Determines if two event types are the same, including namespaces.\n * @param {EventType} given The given event type. This will be compared\n * against the expected type.\n * @param {EventType} expected The expected event type.\n * @returns {boolean} True if the given type matches the expected type.\n */\nfunction isEventTypeSame(given, expected) {\n  if (typeof given === \"string\") {\n    if (typeof expected === \"string\") {\n      return expected === given;\n    } else {\n      return expected.matches(given);\n    }\n  } else {\n    if (typeof expected === \"string\") {\n      return given.matches(expected);\n    } else {\n      var expectedNs = expected;\n      var givenNs = given;\n      return expectedNs.matches(givenNs.name) || expectedNs.matches(givenNs.altName);\n    }\n  }\n}",
    "var hasMap = typeof Map === 'function' && Map.prototype;\nvar mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;\nvar mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;\nvar mapForEach = hasMap && Map.prototype.forEach;\nvar hasSet = typeof Set === 'function' && Set.prototype;\nvar setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;\nvar setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;\nvar setForEach = hasSet && Set.prototype.forEach;\nvar hasWeakMap = typeof WeakMap === 'function' && WeakMap.prototype;\nvar weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;\nvar hasWeakSet = typeof WeakSet === 'function' && WeakSet.prototype;\nvar weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;\nvar hasWeakRef = typeof WeakRef === 'function' && WeakRef.prototype;\nvar weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;\nvar booleanValueOf = Boolean.prototype.valueOf;\nvar objectToString = Object.prototype.toString;\nvar functionToString = Function.prototype.toString;\nvar $match = String.prototype.match;\nvar $slice = String.prototype.slice;\nvar $replace = String.prototype.replace;\nvar $toUpperCase = String.prototype.toUpperCase;\nvar $toLowerCase = String.prototype.toLowerCase;\nvar $test = RegExp.prototype.test;\nvar $concat = Array.prototype.concat;\nvar $join = Array.prototype.join;\nvar $arrSlice = Array.prototype.slice;\nvar $floor = Math.floor;\nvar bigIntValueOf = typeof BigInt === 'function' ? BigInt.prototype.valueOf : null;\nvar gOPS = Object.getOwnPropertySymbols;\nvar symToString = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? Symbol.prototype.toString : null;\nvar hasShammedSymbols = typeof Symbol === 'function' && typeof Symbol.iterator === 'object';\n// ie, `has-tostringtag/shams\nvar toStringTag = typeof Symbol === 'function' && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? 'object' : 'symbol')\n    ? Symbol.toStringTag\n    : null;\nvar isEnumerable = Object.prototype.propertyIsEnumerable;\n\nvar gPO = (typeof Reflect === 'function' ? Reflect.getPrototypeOf : Object.getPrototypeOf) || (\n    [].__proto__ === Array.prototype // eslint-disable-line no-proto\n        ? function (O) {\n            return O.__proto__; // eslint-disable-line no-proto\n        }\n        : null\n);\n\nfunction addNumericSeparator(num, str) {\n    if (\n        num === Infinity\n        || num === -Infinity\n        || num !== num\n        || (num && num > -1000 && num < 1000)\n        || $test.call(/e/, str)\n    ) {\n        return str;\n    }\n    var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;\n    if (typeof num === 'number') {\n        var int = num < 0 ? -$floor(-num) : $floor(num); // trunc(num)\n        if (int !== num) {\n            var intStr = String(int);\n            var dec = $slice.call(str, intStr.length + 1);\n            return $replace.call(intStr, sepRegex, '$&_') + '.' + $replace.call($replace.call(dec, /([0-9]{3})/g, '$&_'), /_$/, '');\n        }\n    }\n    return $replace.call(str, sepRegex, '$&_');\n}\n\nvar inspectCustom = require('./util.inspect').custom;\nvar inspectSymbol = inspectCustom && isSymbol(inspectCustom) ? inspectCustom : null;\n\nmodule.exports = function inspect_(obj, options, depth, seen) {\n    var opts = options || {};\n\n    if (has(opts, 'quoteStyle') && (opts.quoteStyle !== 'single' && opts.quoteStyle !== 'double')) {\n        throw new TypeError('option \"quoteStyle\" must be \"single\" or \"double\"');\n    }\n    if (\n        has(opts, 'maxStringLength') && (typeof opts.maxStringLength === 'number'\n            ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity\n            : opts.maxStringLength !== null\n        )\n    ) {\n        throw new TypeError('option \"maxStringLength\", if provided, must be a positive integer, Infinity, or `null`');\n    }\n    var customInspect = has(opts, 'customInspect') ? opts.customInspect : true;\n    if (typeof customInspect !== 'boolean' && customInspect !== 'symbol') {\n        throw new TypeError('option \"customInspect\", if provided, must be `true`, `false`, or `\\'symbol\\'`');\n    }\n\n    if (\n        has(opts, 'indent')\n        && opts.indent !== null\n        && opts.indent !== '\\t'\n        && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)\n    ) {\n        throw new TypeError('option \"indent\" must be \"\\\\t\", an integer > 0, or `null`');\n    }\n    if (has(opts, 'numericSeparator') && typeof opts.numericSeparator !== 'boolean') {\n        throw new TypeError('option \"numericSeparator\", if provided, must be `true` or `false`');\n    }\n    var numericSeparator = opts.numericSeparator;\n\n    if (typeof obj === 'undefined') {\n        return 'undefined';\n    }\n    if (obj === null) {\n        return 'null';\n    }\n    if (typeof obj === 'boolean') {\n        return obj ? 'true' : 'false';\n    }\n\n    if (typeof obj === 'string') {\n        return inspectString(obj, opts);\n    }\n    if (typeof obj === 'number') {\n        if (obj === 0) {\n            return Infinity / obj > 0 ? '0' : '-0';\n        }\n        var str = String(obj);\n        return numericSeparator ? addNumericSeparator(obj, str) : str;\n    }\n    if (typeof obj === 'bigint') {\n        var bigIntStr = String(obj) + 'n';\n        return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;\n    }\n\n    var maxDepth = typeof opts.depth === 'undefined' ? 5 : opts.depth;\n    if (typeof depth === 'undefined') { depth = 0; }\n    if (depth >= maxDepth && maxDepth > 0 && typeof obj === 'object') {\n        return isArray(obj) ? '[Array]' : '[Object]';\n    }\n\n    var indent = getIndent(opts, depth);\n\n    if (typeof seen === 'undefined') {\n        seen = [];\n    } else if (indexOf(seen, obj) >= 0) {\n        return '[Circular]';\n    }\n\n    function inspect(value, from, noIndent) {\n        if (from) {\n            seen = $arrSlice.call(seen);\n            seen.push(from);\n        }\n        if (noIndent) {\n            var newOpts = {\n                depth: opts.depth\n            };\n            if (has(opts, 'quoteStyle')) {\n                newOpts.quoteStyle = opts.quoteStyle;\n            }\n            return inspect_(value, newOpts, depth + 1, seen);\n        }\n        return inspect_(value, opts, depth + 1, seen);\n    }\n\n    if (typeof obj === 'function') {\n        var name = nameOf(obj);\n        var keys = arrObjKeys(obj, inspect);\n        return '[Function' + (name ? ': ' + name : ' (anonymous)') + ']' + (keys.length > 0 ? ' { ' + $join.call(keys, ', ') + ' }' : '');\n    }\n    if (isSymbol(obj)) {\n        var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\\(.*\\))_[^)]*$/, '$1') : symToString.call(obj);\n        return typeof obj === 'object' && !hasShammedSymbols ? markBoxed(symString) : symString;\n    }\n    if (isElement(obj)) {\n        var s = '<' + $toLowerCase.call(String(obj.nodeName));\n        var attrs = obj.attributes || [];\n        for (var i = 0; i < attrs.length; i++) {\n            s += ' ' + attrs[i].name + '=' + wrapQuotes(quote(attrs[i].value), 'double', opts);\n        }\n        s += '>';\n        if (obj.childNodes && obj.childNodes.length) { s += '...'; }\n        s += '</' + $toLowerCase.call(String(obj.nodeName)) + '>';\n        return s;\n    }\n    if (isArray(obj)) {\n        if (obj.length === 0) { return '[]'; }\n        var xs = arrObjKeys(obj, inspect);\n        if (indent && !singleLineValues(xs)) {\n            return '[' + indentedJoin(xs, indent) + ']';\n        }\n        return '[ ' + $join.call(xs, ', ') + ' ]';\n    }\n    if (isError(obj)) {\n        var parts = arrObjKeys(obj, inspect);\n        if ('cause' in obj && !isEnumerable.call(obj, 'cause')) {\n            return '{ [' + String(obj) + '] ' + $join.call($concat.call('[cause]: ' + inspect(obj.cause), parts), ', ') + ' }';\n        }\n        if (parts.length === 0) { return '[' + String(obj) + ']'; }\n        return '{ [' + String(obj) + '] ' + $join.call(parts, ', ') + ' }';\n    }\n    if (typeof obj === 'object' && customInspect) {\n        if (inspectSymbol && typeof obj[inspectSymbol] === 'function') {\n            return obj[inspectSymbol]();\n        } else if (customInspect !== 'symbol' && typeof obj.inspect === 'function') {\n            return obj.inspect();\n        }\n    }\n    if (isMap(obj)) {\n        var mapParts = [];\n        mapForEach.call(obj, function (value, key) {\n            mapParts.push(inspect(key, obj, true) + ' => ' + inspect(value, obj));\n        });\n        return collectionOf('Map', mapSize.call(obj), mapParts, indent);\n    }\n    if (isSet(obj)) {\n        var setParts = [];\n        setForEach.call(obj, function (value) {\n            setParts.push(inspect(value, obj));\n        });\n        return collectionOf('Set', setSize.call(obj), setParts, indent);\n    }\n    if (isWeakMap(obj)) {\n        return weakCollectionOf('WeakMap');\n    }\n    if (isWeakSet(obj)) {\n        return weakCollectionOf('WeakSet');\n    }\n    if (isWeakRef(obj)) {\n        return weakCollectionOf('WeakRef');\n    }\n    if (isNumber(obj)) {\n        return markBoxed(inspect(Number(obj)));\n    }\n    if (isBigInt(obj)) {\n        return markBoxed(inspect(bigIntValueOf.call(obj)));\n    }\n    if (isBoolean(obj)) {\n        return markBoxed(booleanValueOf.call(obj));\n    }\n    if (isString(obj)) {\n        return markBoxed(inspect(String(obj)));\n    }\n    if (!isDate(obj) && !isRegExp(obj)) {\n        var ys = arrObjKeys(obj, inspect);\n        var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;\n        var protoTag = obj instanceof Object ? '' : 'null prototype';\n        var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr(obj), 8, -1) : protoTag ? 'Object' : '';\n        var constructorTag = isPlainObject || typeof obj.constructor !== 'function' ? '' : obj.constructor.name ? obj.constructor.name + ' ' : '';\n        var tag = constructorTag + (stringTag || protoTag ? '[' + $join.call($concat.call([], stringTag || [], protoTag || []), ': ') + '] ' : '');\n        if (ys.length === 0) { return tag + '{}'; }\n        if (indent) {\n            return tag + '{' + indentedJoin(ys, indent) + '}';\n        }\n        return tag + '{ ' + $join.call(ys, ', ') + ' }';\n    }\n    return String(obj);\n};\n\nfunction wrapQuotes(s, defaultStyle, opts) {\n    var quoteChar = (opts.quoteStyle || defaultStyle) === 'double' ? '\"' : \"'\";\n    return quoteChar + s + quoteChar;\n}\n\nfunction quote(s) {\n    return $replace.call(String(s), /\"/g, '&quot;');\n}\n\nfunction isArray(obj) { return toStr(obj) === '[object Array]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\nfunction isDate(obj) { return toStr(obj) === '[object Date]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\nfunction isRegExp(obj) { return toStr(obj) === '[object RegExp]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\nfunction isError(obj) { return toStr(obj) === '[object Error]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\nfunction isString(obj) { return toStr(obj) === '[object String]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\nfunction isNumber(obj) { return toStr(obj) === '[object Number]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\nfunction isBoolean(obj) { return toStr(obj) === '[object Boolean]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }\n\n// Symbol and BigInt do have Symbol.toStringTag by spec, so that can't be used to eliminate false positives\nfunction isSymbol(obj) {\n    if (hasShammedSymbols) {\n        return obj && typeof obj === 'object' && obj instanceof Symbol;\n    }\n    if (typeof obj === 'symbol') {\n        return true;\n    }\n    if (!obj || typeof obj !== 'object' || !symToString) {\n        return false;\n    }\n    try {\n        symToString.call(obj);\n        return true;\n    } catch (e) {}\n    return false;\n}\n\nfunction isBigInt(obj) {\n    if (!obj || typeof obj !== 'object' || !bigIntValueOf) {\n        return false;\n    }\n    try {\n        bigIntValueOf.call(obj);\n        return true;\n    } catch (e) {}\n    return false;\n}\n\nvar hasOwn = Object.prototype.hasOwnProperty || function (key) { return key in this; };\nfunction has(obj, key) {\n    return hasOwn.call(obj, key);\n}\n\nfunction toStr(obj) {\n    return objectToString.call(obj);\n}\n\nfunction nameOf(f) {\n    if (f.name) { return f.name; }\n    var m = $match.call(functionToString.call(f), /^function\\s*([\\w$]+)/);\n    if (m) { return m[1]; }\n    return null;\n}\n\nfunction indexOf(xs, x) {\n    if (xs.indexOf) { return xs.indexOf(x); }\n    for (var i = 0, l = xs.length; i < l; i++) {\n        if (xs[i] === x) { return i; }\n    }\n    return -1;\n}\n\nfunction isMap(x) {\n    if (!mapSize || !x || typeof x !== 'object') {\n        return false;\n    }\n    try {\n        mapSize.call(x);\n        try {\n            setSize.call(x);\n        } catch (s) {\n            return true;\n        }\n        return x instanceof Map; // core-js workaround, pre-v2.5.0\n    } catch (e) {}\n    return false;\n}\n\nfunction isWeakMap(x) {\n    if (!weakMapHas || !x || typeof x !== 'object') {\n        return false;\n    }\n    try {\n        weakMapHas.call(x, weakMapHas);\n        try {\n            weakSetHas.call(x, weakSetHas);\n        } catch (s) {\n            return true;\n        }\n        return x instanceof WeakMap; // core-js workaround, pre-v2.5.0\n    } catch (e) {}\n    return false;\n}\n\nfunction isWeakRef(x) {\n    if (!weakRefDeref || !x || typeof x !== 'object') {\n        return false;\n    }\n    try {\n        weakRefDeref.call(x);\n        return true;\n    } catch (e) {}\n    return false;\n}\n\nfunction isSet(x) {\n    if (!setSize || !x || typeof x !== 'object') {\n        return false;\n    }\n    try {\n        setSize.call(x);\n        try {\n            mapSize.call(x);\n        } catch (m) {\n            return true;\n        }\n        return x instanceof Set; // core-js workaround, pre-v2.5.0\n    } catch (e) {}\n    return false;\n}\n\nfunction isWeakSet(x) {\n    if (!weakSetHas || !x || typeof x !== 'object') {\n        return false;\n    }\n    try {\n        weakSetHas.call(x, weakSetHas);\n        try {\n            weakMapHas.call(x, weakMapHas);\n        } catch (s) {\n            return true;\n        }\n        return x instanceof WeakSet; // core-js workaround, pre-v2.5.0\n    } catch (e) {}\n    return false;\n}\n\nfunction isElement(x) {\n    if (!x || typeof x !== 'object') { return false; }\n    if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {\n        return true;\n    }\n    return typeof x.nodeName === 'string' && typeof x.getAttribute === 'function';\n}\n\nfunction inspectString(str, opts) {\n    if (str.length > opts.maxStringLength) {\n        var remaining = str.length - opts.maxStringLength;\n        var trailer = '... ' + remaining + ' more character' + (remaining > 1 ? 's' : '');\n        return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;\n    }\n    // eslint-disable-next-line no-control-regex\n    var s = $replace.call($replace.call(str, /(['\\\\])/g, '\\\\$1'), /[\\x00-\\x1f]/g, lowbyte);\n    return wrapQuotes(s, 'single', opts);\n}\n\nfunction lowbyte(c) {\n    var n = c.charCodeAt(0);\n    var x = {\n        8: 'b',\n        9: 't',\n        10: 'n',\n        12: 'f',\n        13: 'r'\n    }[n];\n    if (x) { return '\\\\' + x; }\n    return '\\\\x' + (n < 0x10 ? '0' : '') + $toUpperCase.call(n.toString(16));\n}\n\nfunction markBoxed(str) {\n    return 'Object(' + str + ')';\n}\n\nfunction weakCollectionOf(type) {\n    return type + ' { ? }';\n}\n\nfunction collectionOf(type, size, entries, indent) {\n    var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ', ');\n    return type + ' (' + size + ') {' + joinedEntries + '}';\n}\n\nfunction singleLineValues(xs) {\n    for (var i = 0; i < xs.length; i++) {\n        if (indexOf(xs[i], '\\n') >= 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction getIndent(opts, depth) {\n    var baseIndent;\n    if (opts.indent === '\\t') {\n        baseIndent = '\\t';\n    } else if (typeof opts.indent === 'number' && opts.indent > 0) {\n        baseIndent = $join.call(Array(opts.indent + 1), ' ');\n    } else {\n        return null;\n    }\n    return {\n        base: baseIndent,\n        prev: $join.call(Array(depth + 1), baseIndent)\n    };\n}\n\nfunction indentedJoin(xs, indent) {\n    if (xs.length === 0) { return ''; }\n    var lineJoiner = '\\n' + indent.prev + indent.base;\n    return lineJoiner + $join.call(xs, ',' + lineJoiner) + '\\n' + indent.prev;\n}\n\nfunction arrObjKeys(obj, inspect) {\n    var isArr = isArray(obj);\n    var xs = [];\n    if (isArr) {\n        xs.length = obj.length;\n        for (var i = 0; i < obj.length; i++) {\n            xs[i] = has(obj, i) ? inspect(obj[i], obj) : '';\n        }\n    }\n    var syms = typeof gOPS === 'function' ? gOPS(obj) : [];\n    var symMap;\n    if (hasShammedSymbols) {\n        symMap = {};\n        for (var k = 0; k < syms.length; k++) {\n            symMap['$' + syms[k]] = syms[k];\n        }\n    }\n\n    for (var key in obj) { // eslint-disable-line no-restricted-syntax\n        if (!has(obj, key)) { continue; } // eslint-disable-line no-restricted-syntax, no-continue\n        if (isArr && String(Number(key)) === key && key < obj.length) { continue; } // eslint-disable-line no-restricted-syntax, no-continue\n        if (hasShammedSymbols && symMap['$' + key] instanceof Symbol) {\n            // this is to prevent shammed Symbols, which are stored as strings, from being included in the string key section\n            continue; // eslint-disable-line no-restricted-syntax, no-continue\n        } else if ($test.call(/[^\\w$]/, key)) {\n            xs.push(inspect(key, obj) + ': ' + inspect(obj[key], obj));\n        } else {\n            xs.push(key + ': ' + inspect(obj[key], obj));\n        }\n    }\n    if (typeof gOPS === 'function') {\n        for (var j = 0; j < syms.length; j++) {\n            if (isEnumerable.call(obj, syms[j])) {\n                xs.push('[' + inspect(syms[j]) + ']: ' + inspect(obj[syms[j]], obj));\n            }\n        }\n    }\n    return xs;\n}\n",
    "'use strict';\nconst retry = require('retry');\n\nconst networkErrorMsgs = [\n\t'Failed to fetch', // Chrome\n\t'NetworkError when attempting to fetch resource.', // Firefox\n\t'The Internet connection appears to be offline.', // Safari\n\t'Network request failed' // `cross-fetch`\n];\n\nclass AbortError extends Error {\n\tconstructor(message) {\n\t\tsuper();\n\n\t\tif (message instanceof Error) {\n\t\t\tthis.originalError = message;\n\t\t\t({message} = message);\n\t\t} else {\n\t\t\tthis.originalError = new Error(message);\n\t\t\tthis.originalError.stack = this.stack;\n\t\t}\n\n\t\tthis.name = 'AbortError';\n\t\tthis.message = message;\n\t}\n}\n\nconst decorateErrorWithCounts = (error, attemptNumber, options) => {\n\t// Minus 1 from attemptNumber because the first attempt does not count as a retry\n\tconst retriesLeft = options.retries - (attemptNumber - 1);\n\n\terror.attemptNumber = attemptNumber;\n\terror.retriesLeft = retriesLeft;\n\treturn error;\n};\n\nconst isNetworkError = errorMessage => networkErrorMsgs.includes(errorMessage);\n\nconst pRetry = (input, options) => new Promise((resolve, reject) => {\n\toptions = {\n\t\tonFailedAttempt: () => {},\n\t\tretries: 10,\n\t\t...options\n\t};\n\n\tconst operation = retry.operation(options);\n\n\toperation.attempt(async attemptNumber => {\n\t\ttry {\n\t\t\tresolve(await input(attemptNumber));\n\t\t} catch (error) {\n\t\t\tif (!(error instanceof Error)) {\n\t\t\t\treject(new TypeError(`Non-error was thrown: \"${error}\". You should only throw errors.`));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (error instanceof AbortError) {\n\t\t\t\toperation.stop();\n\t\t\t\treject(error.originalError);\n\t\t\t} else if (error instanceof TypeError && !isNetworkError(error.message)) {\n\t\t\t\toperation.stop();\n\t\t\t\treject(error);\n\t\t\t} else {\n\t\t\t\tdecorateErrorWithCounts(error, attemptNumber, options);\n\n\t\t\t\ttry {\n\t\t\t\t\tawait options.onFailedAttempt(error);\n\t\t\t\t} catch (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!operation.retry(error)) {\n\t\t\t\t\treject(operation.mainError());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n});\n\nmodule.exports = pRetry;\n// TODO: remove this in the next major version\nmodule.exports.default = pRetry;\n\nmodule.exports.AbortError = AbortError;\n",
    "// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n",
    "'use strict';\n\nvar replace = String.prototype.replace;\nvar percentTwenties = /%20/g;\n\nvar Format = {\n    RFC1738: 'RFC1738',\n    RFC3986: 'RFC3986'\n};\n\nmodule.exports = {\n    'default': Format.RFC3986,\n    formatters: {\n        RFC1738: function (value) {\n            return replace.call(value, percentTwenties, '+');\n        },\n        RFC3986: function (value) {\n            return String(value);\n        }\n    },\n    RFC1738: Format.RFC1738,\n    RFC3986: Format.RFC3986\n};\n",
    "'use strict';\n\nvar stringify = require('./stringify');\nvar parse = require('./parse');\nvar formats = require('./formats');\n\nmodule.exports = {\n    formats: formats,\n    parse: parse,\n    stringify: stringify\n};\n",
    "'use strict';\n\nvar utils = require('./utils');\n\nvar has = Object.prototype.hasOwnProperty;\nvar isArray = Array.isArray;\n\nvar defaults = {\n    allowDots: false,\n    allowPrototypes: false,\n    allowSparse: false,\n    arrayLimit: 20,\n    charset: 'utf-8',\n    charsetSentinel: false,\n    comma: false,\n    decoder: utils.decode,\n    delimiter: '&',\n    depth: 5,\n    ignoreQueryPrefix: false,\n    interpretNumericEntities: false,\n    parameterLimit: 1000,\n    parseArrays: true,\n    plainObjects: false,\n    strictNullHandling: false\n};\n\nvar interpretNumericEntities = function (str) {\n    return str.replace(/&#(\\d+);/g, function ($0, numberStr) {\n        return String.fromCharCode(parseInt(numberStr, 10));\n    });\n};\n\nvar parseArrayValue = function (val, options) {\n    if (val && typeof val === 'string' && options.comma && val.indexOf(',') > -1) {\n        return val.split(',');\n    }\n\n    return val;\n};\n\n// This is what browsers will submit when the ✓ character occurs in an\n// application/x-www-form-urlencoded body and the encoding of the page containing\n// the form is iso-8859-1, or when the submitted form has an accept-charset\n// attribute of iso-8859-1. Presumably also with other charsets that do not contain\n// the ✓ character, such as us-ascii.\nvar isoSentinel = 'utf8=%26%2310003%3B'; // encodeURIComponent('&#10003;')\n\n// These are the percent-encoded utf-8 octets representing a checkmark, indicating that the request actually is utf-8 encoded.\nvar charsetSentinel = 'utf8=%E2%9C%93'; // encodeURIComponent('✓')\n\nvar parseValues = function parseQueryStringValues(str, options) {\n    var obj = {};\n    var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\\?/, '') : str;\n    var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;\n    var parts = cleanStr.split(options.delimiter, limit);\n    var skipIndex = -1; // Keep track of where the utf8 sentinel was found\n    var i;\n\n    var charset = options.charset;\n    if (options.charsetSentinel) {\n        for (i = 0; i < parts.length; ++i) {\n            if (parts[i].indexOf('utf8=') === 0) {\n                if (parts[i] === charsetSentinel) {\n                    charset = 'utf-8';\n                } else if (parts[i] === isoSentinel) {\n                    charset = 'iso-8859-1';\n                }\n                skipIndex = i;\n                i = parts.length; // The eslint settings do not allow break;\n            }\n        }\n    }\n\n    for (i = 0; i < parts.length; ++i) {\n        if (i === skipIndex) {\n            continue;\n        }\n        var part = parts[i];\n\n        var bracketEqualsPos = part.indexOf(']=');\n        var pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;\n\n        var key, val;\n        if (pos === -1) {\n            key = options.decoder(part, defaults.decoder, charset, 'key');\n            val = options.strictNullHandling ? null : '';\n        } else {\n            key = options.decoder(part.slice(0, pos), defaults.decoder, charset, 'key');\n            val = utils.maybeMap(\n                parseArrayValue(part.slice(pos + 1), options),\n                function (encodedVal) {\n                    return options.decoder(encodedVal, defaults.decoder, charset, 'value');\n                }\n            );\n        }\n\n        if (val && options.interpretNumericEntities && charset === 'iso-8859-1') {\n            val = interpretNumericEntities(val);\n        }\n\n        if (part.indexOf('[]=') > -1) {\n            val = isArray(val) ? [val] : val;\n        }\n\n        if (has.call(obj, key)) {\n            obj[key] = utils.combine(obj[key], val);\n        } else {\n            obj[key] = val;\n        }\n    }\n\n    return obj;\n};\n\nvar parseObject = function (chain, val, options, valuesParsed) {\n    var leaf = valuesParsed ? val : parseArrayValue(val, options);\n\n    for (var i = chain.length - 1; i >= 0; --i) {\n        var obj;\n        var root = chain[i];\n\n        if (root === '[]' && options.parseArrays) {\n            obj = [].concat(leaf);\n        } else {\n            obj = options.plainObjects ? Object.create(null) : {};\n            var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;\n            var index = parseInt(cleanRoot, 10);\n            if (!options.parseArrays && cleanRoot === '') {\n                obj = { 0: leaf };\n            } else if (\n                !isNaN(index)\n                && root !== cleanRoot\n                && String(index) === cleanRoot\n                && index >= 0\n                && (options.parseArrays && index <= options.arrayLimit)\n            ) {\n                obj = [];\n                obj[index] = leaf;\n            } else if (cleanRoot !== '__proto__') {\n                obj[cleanRoot] = leaf;\n            }\n        }\n\n        leaf = obj;\n    }\n\n    return leaf;\n};\n\nvar parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {\n    if (!givenKey) {\n        return;\n    }\n\n    // Transform dot notation to bracket notation\n    var key = options.allowDots ? givenKey.replace(/\\.([^.[]+)/g, '[$1]') : givenKey;\n\n    // The regex chunks\n\n    var brackets = /(\\[[^[\\]]*])/;\n    var child = /(\\[[^[\\]]*])/g;\n\n    // Get the parent\n\n    var segment = options.depth > 0 && brackets.exec(key);\n    var parent = segment ? key.slice(0, segment.index) : key;\n\n    // Stash the parent if it exists\n\n    var keys = [];\n    if (parent) {\n        // If we aren't using plain objects, optionally prefix keys that would overwrite object prototype properties\n        if (!options.plainObjects && has.call(Object.prototype, parent)) {\n            if (!options.allowPrototypes) {\n                return;\n            }\n        }\n\n        keys.push(parent);\n    }\n\n    // Loop through children appending to the array until we hit depth\n\n    var i = 0;\n    while (options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth) {\n        i += 1;\n        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {\n            if (!options.allowPrototypes) {\n                return;\n            }\n        }\n        keys.push(segment[1]);\n    }\n\n    // If there's a remainder, just add whatever is left\n\n    if (segment) {\n        keys.push('[' + key.slice(segment.index) + ']');\n    }\n\n    return parseObject(keys, val, options, valuesParsed);\n};\n\nvar normalizeParseOptions = function normalizeParseOptions(opts) {\n    if (!opts) {\n        return defaults;\n    }\n\n    if (opts.decoder !== null && opts.decoder !== undefined && typeof opts.decoder !== 'function') {\n        throw new TypeError('Decoder has to be a function.');\n    }\n\n    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {\n        throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');\n    }\n    var charset = typeof opts.charset === 'undefined' ? defaults.charset : opts.charset;\n\n    return {\n        allowDots: typeof opts.allowDots === 'undefined' ? defaults.allowDots : !!opts.allowDots,\n        allowPrototypes: typeof opts.allowPrototypes === 'boolean' ? opts.allowPrototypes : defaults.allowPrototypes,\n        allowSparse: typeof opts.allowSparse === 'boolean' ? opts.allowSparse : defaults.allowSparse,\n        arrayLimit: typeof opts.arrayLimit === 'number' ? opts.arrayLimit : defaults.arrayLimit,\n        charset: charset,\n        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,\n        comma: typeof opts.comma === 'boolean' ? opts.comma : defaults.comma,\n        decoder: typeof opts.decoder === 'function' ? opts.decoder : defaults.decoder,\n        delimiter: typeof opts.delimiter === 'string' || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,\n        // eslint-disable-next-line no-implicit-coercion, no-extra-parens\n        depth: (typeof opts.depth === 'number' || opts.depth === false) ? +opts.depth : defaults.depth,\n        ignoreQueryPrefix: opts.ignoreQueryPrefix === true,\n        interpretNumericEntities: typeof opts.interpretNumericEntities === 'boolean' ? opts.interpretNumericEntities : defaults.interpretNumericEntities,\n        parameterLimit: typeof opts.parameterLimit === 'number' ? opts.parameterLimit : defaults.parameterLimit,\n        parseArrays: opts.parseArrays !== false,\n        plainObjects: typeof opts.plainObjects === 'boolean' ? opts.plainObjects : defaults.plainObjects,\n        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling\n    };\n};\n\nmodule.exports = function (str, opts) {\n    var options = normalizeParseOptions(opts);\n\n    if (str === '' || str === null || typeof str === 'undefined') {\n        return options.plainObjects ? Object.create(null) : {};\n    }\n\n    var tempObj = typeof str === 'string' ? parseValues(str, options) : str;\n    var obj = options.plainObjects ? Object.create(null) : {};\n\n    // Iterate over the keys and setup the new object\n\n    var keys = Object.keys(tempObj);\n    for (var i = 0; i < keys.length; ++i) {\n        var key = keys[i];\n        var newObj = parseKeys(key, tempObj[key], options, typeof str === 'string');\n        obj = utils.merge(obj, newObj, options);\n    }\n\n    if (options.allowSparse === true) {\n        return obj;\n    }\n\n    return utils.compact(obj);\n};\n",
    "'use strict';\n\nvar getSideChannel = require('side-channel');\nvar utils = require('./utils');\nvar formats = require('./formats');\nvar has = Object.prototype.hasOwnProperty;\n\nvar arrayPrefixGenerators = {\n    brackets: function brackets(prefix) {\n        return prefix + '[]';\n    },\n    comma: 'comma',\n    indices: function indices(prefix, key) {\n        return prefix + '[' + key + ']';\n    },\n    repeat: function repeat(prefix) {\n        return prefix;\n    }\n};\n\nvar isArray = Array.isArray;\nvar split = String.prototype.split;\nvar push = Array.prototype.push;\nvar pushToArray = function (arr, valueOrArray) {\n    push.apply(arr, isArray(valueOrArray) ? valueOrArray : [valueOrArray]);\n};\n\nvar toISO = Date.prototype.toISOString;\n\nvar defaultFormat = formats['default'];\nvar defaults = {\n    addQueryPrefix: false,\n    allowDots: false,\n    charset: 'utf-8',\n    charsetSentinel: false,\n    delimiter: '&',\n    encode: true,\n    encoder: utils.encode,\n    encodeValuesOnly: false,\n    format: defaultFormat,\n    formatter: formats.formatters[defaultFormat],\n    // deprecated\n    indices: false,\n    serializeDate: function serializeDate(date) {\n        return toISO.call(date);\n    },\n    skipNulls: false,\n    strictNullHandling: false\n};\n\nvar isNonNullishPrimitive = function isNonNullishPrimitive(v) {\n    return typeof v === 'string'\n        || typeof v === 'number'\n        || typeof v === 'boolean'\n        || typeof v === 'symbol'\n        || typeof v === 'bigint';\n};\n\nvar sentinel = {};\n\nvar stringify = function stringify(\n    object,\n    prefix,\n    generateArrayPrefix,\n    strictNullHandling,\n    skipNulls,\n    encoder,\n    filter,\n    sort,\n    allowDots,\n    serializeDate,\n    format,\n    formatter,\n    encodeValuesOnly,\n    charset,\n    sideChannel\n) {\n    var obj = object;\n\n    var tmpSc = sideChannel;\n    var step = 0;\n    var findFlag = false;\n    while ((tmpSc = tmpSc.get(sentinel)) !== void undefined && !findFlag) {\n        // Where object last appeared in the ref tree\n        var pos = tmpSc.get(object);\n        step += 1;\n        if (typeof pos !== 'undefined') {\n            if (pos === step) {\n                throw new RangeError('Cyclic object value');\n            } else {\n                findFlag = true; // Break while\n            }\n        }\n        if (typeof tmpSc.get(sentinel) === 'undefined') {\n            step = 0;\n        }\n    }\n\n    if (typeof filter === 'function') {\n        obj = filter(prefix, obj);\n    } else if (obj instanceof Date) {\n        obj = serializeDate(obj);\n    } else if (generateArrayPrefix === 'comma' && isArray(obj)) {\n        obj = utils.maybeMap(obj, function (value) {\n            if (value instanceof Date) {\n                return serializeDate(value);\n            }\n            return value;\n        });\n    }\n\n    if (obj === null) {\n        if (strictNullHandling) {\n            return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, 'key', format) : prefix;\n        }\n\n        obj = '';\n    }\n\n    if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {\n        if (encoder) {\n            var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, 'key', format);\n            if (generateArrayPrefix === 'comma' && encodeValuesOnly) {\n                var valuesArray = split.call(String(obj), ',');\n                var valuesJoined = '';\n                for (var i = 0; i < valuesArray.length; ++i) {\n                    valuesJoined += (i === 0 ? '' : ',') + formatter(encoder(valuesArray[i], defaults.encoder, charset, 'value', format));\n                }\n                return [formatter(keyValue) + '=' + valuesJoined];\n            }\n            return [formatter(keyValue) + '=' + formatter(encoder(obj, defaults.encoder, charset, 'value', format))];\n        }\n        return [formatter(prefix) + '=' + formatter(String(obj))];\n    }\n\n    var values = [];\n\n    if (typeof obj === 'undefined') {\n        return values;\n    }\n\n    var objKeys;\n    if (generateArrayPrefix === 'comma' && isArray(obj)) {\n        // we need to join elements in\n        objKeys = [{ value: obj.length > 0 ? obj.join(',') || null : void undefined }];\n    } else if (isArray(filter)) {\n        objKeys = filter;\n    } else {\n        var keys = Object.keys(obj);\n        objKeys = sort ? keys.sort(sort) : keys;\n    }\n\n    for (var j = 0; j < objKeys.length; ++j) {\n        var key = objKeys[j];\n        var value = typeof key === 'object' && typeof key.value !== 'undefined' ? key.value : obj[key];\n\n        if (skipNulls && value === null) {\n            continue;\n        }\n\n        var keyPrefix = isArray(obj)\n            ? typeof generateArrayPrefix === 'function' ? generateArrayPrefix(prefix, key) : prefix\n            : prefix + (allowDots ? '.' + key : '[' + key + ']');\n\n        sideChannel.set(object, step);\n        var valueSideChannel = getSideChannel();\n        valueSideChannel.set(sentinel, sideChannel);\n        pushToArray(values, stringify(\n            value,\n            keyPrefix,\n            generateArrayPrefix,\n            strictNullHandling,\n            skipNulls,\n            encoder,\n            filter,\n            sort,\n            allowDots,\n            serializeDate,\n            format,\n            formatter,\n            encodeValuesOnly,\n            charset,\n            valueSideChannel\n        ));\n    }\n\n    return values;\n};\n\nvar normalizeStringifyOptions = function normalizeStringifyOptions(opts) {\n    if (!opts) {\n        return defaults;\n    }\n\n    if (opts.encoder !== null && typeof opts.encoder !== 'undefined' && typeof opts.encoder !== 'function') {\n        throw new TypeError('Encoder has to be a function.');\n    }\n\n    var charset = opts.charset || defaults.charset;\n    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') {\n        throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');\n    }\n\n    var format = formats['default'];\n    if (typeof opts.format !== 'undefined') {\n        if (!has.call(formats.formatters, opts.format)) {\n            throw new TypeError('Unknown format option provided.');\n        }\n        format = opts.format;\n    }\n    var formatter = formats.formatters[format];\n\n    var filter = defaults.filter;\n    if (typeof opts.filter === 'function' || isArray(opts.filter)) {\n        filter = opts.filter;\n    }\n\n    return {\n        addQueryPrefix: typeof opts.addQueryPrefix === 'boolean' ? opts.addQueryPrefix : defaults.addQueryPrefix,\n        allowDots: typeof opts.allowDots === 'undefined' ? defaults.allowDots : !!opts.allowDots,\n        charset: charset,\n        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,\n        delimiter: typeof opts.delimiter === 'undefined' ? defaults.delimiter : opts.delimiter,\n        encode: typeof opts.encode === 'boolean' ? opts.encode : defaults.encode,\n        encoder: typeof opts.encoder === 'function' ? opts.encoder : defaults.encoder,\n        encodeValuesOnly: typeof opts.encodeValuesOnly === 'boolean' ? opts.encodeValuesOnly : defaults.encodeValuesOnly,\n        filter: filter,\n        format: format,\n        formatter: formatter,\n        serializeDate: typeof opts.serializeDate === 'function' ? opts.serializeDate : defaults.serializeDate,\n        skipNulls: typeof opts.skipNulls === 'boolean' ? opts.skipNulls : defaults.skipNulls,\n        sort: typeof opts.sort === 'function' ? opts.sort : null,\n        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling\n    };\n};\n\nmodule.exports = function (object, opts) {\n    var obj = object;\n    var options = normalizeStringifyOptions(opts);\n\n    var objKeys;\n    var filter;\n\n    if (typeof options.filter === 'function') {\n        filter = options.filter;\n        obj = filter('', obj);\n    } else if (isArray(options.filter)) {\n        filter = options.filter;\n        objKeys = filter;\n    }\n\n    var keys = [];\n\n    if (typeof obj !== 'object' || obj === null) {\n        return '';\n    }\n\n    var arrayFormat;\n    if (opts && opts.arrayFormat in arrayPrefixGenerators) {\n        arrayFormat = opts.arrayFormat;\n    } else if (opts && 'indices' in opts) {\n        arrayFormat = opts.indices ? 'indices' : 'repeat';\n    } else {\n        arrayFormat = 'indices';\n    }\n\n    var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];\n\n    if (!objKeys) {\n        objKeys = Object.keys(obj);\n    }\n\n    if (options.sort) {\n        objKeys.sort(options.sort);\n    }\n\n    var sideChannel = getSideChannel();\n    for (var i = 0; i < objKeys.length; ++i) {\n        var key = objKeys[i];\n\n        if (options.skipNulls && obj[key] === null) {\n            continue;\n        }\n        pushToArray(keys, stringify(\n            obj[key],\n            key,\n            generateArrayPrefix,\n            options.strictNullHandling,\n            options.skipNulls,\n            options.encode ? options.encoder : null,\n            options.filter,\n            options.sort,\n            options.allowDots,\n            options.serializeDate,\n            options.format,\n            options.formatter,\n            options.encodeValuesOnly,\n            options.charset,\n            sideChannel\n        ));\n    }\n\n    var joined = keys.join(options.delimiter);\n    var prefix = options.addQueryPrefix === true ? '?' : '';\n\n    if (options.charsetSentinel) {\n        if (options.charset === 'iso-8859-1') {\n            // encodeURIComponent('&#10003;'), the \"numeric entity\" representation of a checkmark\n            prefix += 'utf8=%26%2310003%3B&';\n        } else {\n            // encodeURIComponent('✓')\n            prefix += 'utf8=%E2%9C%93&';\n        }\n    }\n\n    return joined.length > 0 ? prefix + joined : '';\n};\n",
    "'use strict';\n\nvar formats = require('./formats');\n\nvar has = Object.prototype.hasOwnProperty;\nvar isArray = Array.isArray;\n\nvar hexTable = (function () {\n    var array = [];\n    for (var i = 0; i < 256; ++i) {\n        array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());\n    }\n\n    return array;\n}());\n\nvar compactQueue = function compactQueue(queue) {\n    while (queue.length > 1) {\n        var item = queue.pop();\n        var obj = item.obj[item.prop];\n\n        if (isArray(obj)) {\n            var compacted = [];\n\n            for (var j = 0; j < obj.length; ++j) {\n                if (typeof obj[j] !== 'undefined') {\n                    compacted.push(obj[j]);\n                }\n            }\n\n            item.obj[item.prop] = compacted;\n        }\n    }\n};\n\nvar arrayToObject = function arrayToObject(source, options) {\n    var obj = options && options.plainObjects ? Object.create(null) : {};\n    for (var i = 0; i < source.length; ++i) {\n        if (typeof source[i] !== 'undefined') {\n            obj[i] = source[i];\n        }\n    }\n\n    return obj;\n};\n\nvar merge = function merge(target, source, options) {\n    /* eslint no-param-reassign: 0 */\n    if (!source) {\n        return target;\n    }\n\n    if (typeof source !== 'object') {\n        if (isArray(target)) {\n            target.push(source);\n        } else if (target && typeof target === 'object') {\n            if ((options && (options.plainObjects || options.allowPrototypes)) || !has.call(Object.prototype, source)) {\n                target[source] = true;\n            }\n        } else {\n            return [target, source];\n        }\n\n        return target;\n    }\n\n    if (!target || typeof target !== 'object') {\n        return [target].concat(source);\n    }\n\n    var mergeTarget = target;\n    if (isArray(target) && !isArray(source)) {\n        mergeTarget = arrayToObject(target, options);\n    }\n\n    if (isArray(target) && isArray(source)) {\n        source.forEach(function (item, i) {\n            if (has.call(target, i)) {\n                var targetItem = target[i];\n                if (targetItem && typeof targetItem === 'object' && item && typeof item === 'object') {\n                    target[i] = merge(targetItem, item, options);\n                } else {\n                    target.push(item);\n                }\n            } else {\n                target[i] = item;\n            }\n        });\n        return target;\n    }\n\n    return Object.keys(source).reduce(function (acc, key) {\n        var value = source[key];\n\n        if (has.call(acc, key)) {\n            acc[key] = merge(acc[key], value, options);\n        } else {\n            acc[key] = value;\n        }\n        return acc;\n    }, mergeTarget);\n};\n\nvar assign = function assignSingleSource(target, source) {\n    return Object.keys(source).reduce(function (acc, key) {\n        acc[key] = source[key];\n        return acc;\n    }, target);\n};\n\nvar decode = function (str, decoder, charset) {\n    var strWithoutPlus = str.replace(/\\+/g, ' ');\n    if (charset === 'iso-8859-1') {\n        // unescape never throws, no try...catch needed:\n        return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);\n    }\n    // utf-8\n    try {\n        return decodeURIComponent(strWithoutPlus);\n    } catch (e) {\n        return strWithoutPlus;\n    }\n};\n\nvar encode = function encode(str, defaultEncoder, charset, kind, format) {\n    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.\n    // It has been adapted here for stricter adherence to RFC 3986\n    if (str.length === 0) {\n        return str;\n    }\n\n    var string = str;\n    if (typeof str === 'symbol') {\n        string = Symbol.prototype.toString.call(str);\n    } else if (typeof str !== 'string') {\n        string = String(str);\n    }\n\n    if (charset === 'iso-8859-1') {\n        return escape(string).replace(/%u[0-9a-f]{4}/gi, function ($0) {\n            return '%26%23' + parseInt($0.slice(2), 16) + '%3B';\n        });\n    }\n\n    var out = '';\n    for (var i = 0; i < string.length; ++i) {\n        var c = string.charCodeAt(i);\n\n        if (\n            c === 0x2D // -\n            || c === 0x2E // .\n            || c === 0x5F // _\n            || c === 0x7E // ~\n            || (c >= 0x30 && c <= 0x39) // 0-9\n            || (c >= 0x41 && c <= 0x5A) // a-z\n            || (c >= 0x61 && c <= 0x7A) // A-Z\n            || (format === formats.RFC1738 && (c === 0x28 || c === 0x29)) // ( )\n        ) {\n            out += string.charAt(i);\n            continue;\n        }\n\n        if (c < 0x80) {\n            out = out + hexTable[c];\n            continue;\n        }\n\n        if (c < 0x800) {\n            out = out + (hexTable[0xC0 | (c >> 6)] + hexTable[0x80 | (c & 0x3F)]);\n            continue;\n        }\n\n        if (c < 0xD800 || c >= 0xE000) {\n            out = out + (hexTable[0xE0 | (c >> 12)] + hexTable[0x80 | ((c >> 6) & 0x3F)] + hexTable[0x80 | (c & 0x3F)]);\n            continue;\n        }\n\n        i += 1;\n        c = 0x10000 + (((c & 0x3FF) << 10) | (string.charCodeAt(i) & 0x3FF));\n        /* eslint operator-linebreak: [2, \"before\"] */\n        out += hexTable[0xF0 | (c >> 18)]\n            + hexTable[0x80 | ((c >> 12) & 0x3F)]\n            + hexTable[0x80 | ((c >> 6) & 0x3F)]\n            + hexTable[0x80 | (c & 0x3F)];\n    }\n\n    return out;\n};\n\nvar compact = function compact(value) {\n    var queue = [{ obj: { o: value }, prop: 'o' }];\n    var refs = [];\n\n    for (var i = 0; i < queue.length; ++i) {\n        var item = queue[i];\n        var obj = item.obj[item.prop];\n\n        var keys = Object.keys(obj);\n        for (var j = 0; j < keys.length; ++j) {\n            var key = keys[j];\n            var val = obj[key];\n            if (typeof val === 'object' && val !== null && refs.indexOf(val) === -1) {\n                queue.push({ obj: obj, prop: key });\n                refs.push(val);\n            }\n        }\n    }\n\n    compactQueue(queue);\n\n    return value;\n};\n\nvar isRegExp = function isRegExp(obj) {\n    return Object.prototype.toString.call(obj) === '[object RegExp]';\n};\n\nvar isBuffer = function isBuffer(obj) {\n    if (!obj || typeof obj !== 'object') {\n        return false;\n    }\n\n    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));\n};\n\nvar combine = function combine(a, b) {\n    return [].concat(a, b);\n};\n\nvar maybeMap = function maybeMap(val, fn) {\n    if (isArray(val)) {\n        var mapped = [];\n        for (var i = 0; i < val.length; i += 1) {\n            mapped.push(fn(val[i]));\n        }\n        return mapped;\n    }\n    return fn(val);\n};\n\nmodule.exports = {\n    arrayToObject: arrayToObject,\n    assign: assign,\n    combine: combine,\n    compact: compact,\n    decode: decode,\n    encode: encode,\n    isBuffer: isBuffer,\n    isRegExp: isRegExp,\n    maybeMap: maybeMap,\n    merge: merge\n};\n",
    "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n// If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nmodule.exports = function(qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  var obj = {};\n\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n\n  var regexp = /\\+/g;\n  qs = qs.split(sep);\n\n  var maxKeys = 1000;\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n\n  var len = qs.length;\n  // maxKeys <= 0 means that we should not limit keys count\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n\n  for (var i = 0; i < len; ++i) {\n    var x = qs[i].replace(regexp, '%20'),\n        idx = x.indexOf(eq),\n        kstr, vstr, k, v;\n\n    if (idx >= 0) {\n      kstr = x.substr(0, idx);\n      vstr = x.substr(idx + 1);\n    } else {\n      kstr = x;\n      vstr = '';\n    }\n\n    k = decodeURIComponent(kstr);\n    v = decodeURIComponent(vstr);\n\n    if (!hasOwnProperty(obj, k)) {\n      obj[k] = v;\n    } else if (isArray(obj[k])) {\n      obj[k].push(v);\n    } else {\n      obj[k] = [obj[k], v];\n    }\n  }\n\n  return obj;\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n",
    "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar stringifyPrimitive = function(v) {\n  switch (typeof v) {\n    case 'string':\n      return v;\n\n    case 'boolean':\n      return v ? 'true' : 'false';\n\n    case 'number':\n      return isFinite(v) ? v : '';\n\n    default:\n      return '';\n  }\n};\n\nmodule.exports = function(obj, sep, eq, name) {\n  sep = sep || '&';\n  eq = eq || '=';\n  if (obj === null) {\n    obj = undefined;\n  }\n\n  if (typeof obj === 'object') {\n    return map(objectKeys(obj), function(k) {\n      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n      if (isArray(obj[k])) {\n        return map(obj[k], function(v) {\n          return ks + encodeURIComponent(stringifyPrimitive(v));\n        }).join(sep);\n      } else {\n        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n      }\n    }).join(sep);\n\n  }\n\n  if (!name) return '';\n  return encodeURIComponent(stringifyPrimitive(name)) + eq +\n         encodeURIComponent(stringifyPrimitive(obj));\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n\nfunction map (xs, f) {\n  if (xs.map) return xs.map(f);\n  var res = [];\n  for (var i = 0; i < xs.length; i++) {\n    res.push(f(xs[i], i));\n  }\n  return res;\n}\n\nvar objectKeys = Object.keys || function (obj) {\n  var res = [];\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);\n  }\n  return res;\n};\n",
    "'use strict';\n\nexports.decode = exports.parse = require('./decode');\nexports.encode = exports.stringify = require('./encode');\n",
    "module.exports = require('./lib/retry');",
    "var RetryOperation = require('./retry_operation');\n\nexports.operation = function(options) {\n  var timeouts = exports.timeouts(options);\n  return new RetryOperation(timeouts, {\n      forever: options && (options.forever || options.retries === Infinity),\n      unref: options && options.unref,\n      maxRetryTime: options && options.maxRetryTime\n  });\n};\n\nexports.timeouts = function(options) {\n  if (options instanceof Array) {\n    return [].concat(options);\n  }\n\n  var opts = {\n    retries: 10,\n    factor: 2,\n    minTimeout: 1 * 1000,\n    maxTimeout: Infinity,\n    randomize: false\n  };\n  for (var key in options) {\n    opts[key] = options[key];\n  }\n\n  if (opts.minTimeout > opts.maxTimeout) {\n    throw new Error('minTimeout is greater than maxTimeout');\n  }\n\n  var timeouts = [];\n  for (var i = 0; i < opts.retries; i++) {\n    timeouts.push(this.createTimeout(i, opts));\n  }\n\n  if (options && options.forever && !timeouts.length) {\n    timeouts.push(this.createTimeout(i, opts));\n  }\n\n  // sort the array numerically ascending\n  timeouts.sort(function(a,b) {\n    return a - b;\n  });\n\n  return timeouts;\n};\n\nexports.createTimeout = function(attempt, opts) {\n  var random = (opts.randomize)\n    ? (Math.random() + 1)\n    : 1;\n\n  var timeout = Math.round(random * Math.max(opts.minTimeout, 1) * Math.pow(opts.factor, attempt));\n  timeout = Math.min(timeout, opts.maxTimeout);\n\n  return timeout;\n};\n\nexports.wrap = function(obj, options, methods) {\n  if (options instanceof Array) {\n    methods = options;\n    options = null;\n  }\n\n  if (!methods) {\n    methods = [];\n    for (var key in obj) {\n      if (typeof obj[key] === 'function') {\n        methods.push(key);\n      }\n    }\n  }\n\n  for (var i = 0; i < methods.length; i++) {\n    var method   = methods[i];\n    var original = obj[method];\n\n    obj[method] = function retryWrapper(original) {\n      var op       = exports.operation(options);\n      var args     = Array.prototype.slice.call(arguments, 1);\n      var callback = args.pop();\n\n      args.push(function(err) {\n        if (op.retry(err)) {\n          return;\n        }\n        if (err) {\n          arguments[0] = op.mainError();\n        }\n        callback.apply(this, arguments);\n      });\n\n      op.attempt(function() {\n        original.apply(obj, args);\n      });\n    }.bind(obj, original);\n    obj[method].options = options;\n  }\n};\n",
    "function RetryOperation(timeouts, options) {\n  // Compatibility for the old (timeouts, retryForever) signature\n  if (typeof options === 'boolean') {\n    options = { forever: options };\n  }\n\n  this._originalTimeouts = JSON.parse(JSON.stringify(timeouts));\n  this._timeouts = timeouts;\n  this._options = options || {};\n  this._maxRetryTime = options && options.maxRetryTime || Infinity;\n  this._fn = null;\n  this._errors = [];\n  this._attempts = 1;\n  this._operationTimeout = null;\n  this._operationTimeoutCb = null;\n  this._timeout = null;\n  this._operationStart = null;\n  this._timer = null;\n\n  if (this._options.forever) {\n    this._cachedTimeouts = this._timeouts.slice(0);\n  }\n}\nmodule.exports = RetryOperation;\n\nRetryOperation.prototype.reset = function() {\n  this._attempts = 1;\n  this._timeouts = this._originalTimeouts.slice(0);\n}\n\nRetryOperation.prototype.stop = function() {\n  if (this._timeout) {\n    clearTimeout(this._timeout);\n  }\n  if (this._timer) {\n    clearTimeout(this._timer);\n  }\n\n  this._timeouts       = [];\n  this._cachedTimeouts = null;\n};\n\nRetryOperation.prototype.retry = function(err) {\n  if (this._timeout) {\n    clearTimeout(this._timeout);\n  }\n\n  if (!err) {\n    return false;\n  }\n  var currentTime = new Date().getTime();\n  if (err && currentTime - this._operationStart >= this._maxRetryTime) {\n    this._errors.push(err);\n    this._errors.unshift(new Error('RetryOperation timeout occurred'));\n    return false;\n  }\n\n  this._errors.push(err);\n\n  var timeout = this._timeouts.shift();\n  if (timeout === undefined) {\n    if (this._cachedTimeouts) {\n      // retry forever, only keep last error\n      this._errors.splice(0, this._errors.length - 1);\n      timeout = this._cachedTimeouts.slice(-1);\n    } else {\n      return false;\n    }\n  }\n\n  var self = this;\n  this._timer = setTimeout(function() {\n    self._attempts++;\n\n    if (self._operationTimeoutCb) {\n      self._timeout = setTimeout(function() {\n        self._operationTimeoutCb(self._attempts);\n      }, self._operationTimeout);\n\n      if (self._options.unref) {\n          self._timeout.unref();\n      }\n    }\n\n    self._fn(self._attempts);\n  }, timeout);\n\n  if (this._options.unref) {\n      this._timer.unref();\n  }\n\n  return true;\n};\n\nRetryOperation.prototype.attempt = function(fn, timeoutOps) {\n  this._fn = fn;\n\n  if (timeoutOps) {\n    if (timeoutOps.timeout) {\n      this._operationTimeout = timeoutOps.timeout;\n    }\n    if (timeoutOps.cb) {\n      this._operationTimeoutCb = timeoutOps.cb;\n    }\n  }\n\n  var self = this;\n  if (this._operationTimeoutCb) {\n    this._timeout = setTimeout(function() {\n      self._operationTimeoutCb();\n    }, self._operationTimeout);\n  }\n\n  this._operationStart = new Date().getTime();\n\n  this._fn(this._attempts);\n};\n\nRetryOperation.prototype.try = function(fn) {\n  console.log('Using RetryOperation.try() is deprecated');\n  this.attempt(fn);\n};\n\nRetryOperation.prototype.start = function(fn) {\n  console.log('Using RetryOperation.start() is deprecated');\n  this.attempt(fn);\n};\n\nRetryOperation.prototype.start = RetryOperation.prototype.try;\n\nRetryOperation.prototype.errors = function() {\n  return this._errors;\n};\n\nRetryOperation.prototype.attempts = function() {\n  return this._attempts;\n};\n\nRetryOperation.prototype.mainError = function() {\n  if (this._errors.length === 0) {\n    return null;\n  }\n\n  var counts = {};\n  var mainError = null;\n  var mainErrorCount = 0;\n\n  for (var i = 0; i < this._errors.length; i++) {\n    var error = this._errors[i];\n    var message = error.message;\n    var count = (counts[message] || 0) + 1;\n\n    counts[message] = count;\n\n    if (count >= mainErrorCount) {\n      mainError = error;\n      mainErrorCount = count;\n    }\n  }\n\n  return mainError;\n};\n",
    "/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\n/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.prototype = Object.create(Buffer.prototype)\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n",
    "'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\nvar callBound = require('call-bind/callBound');\nvar inspect = require('object-inspect');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar $WeakMap = GetIntrinsic('%WeakMap%', true);\nvar $Map = GetIntrinsic('%Map%', true);\n\nvar $weakMapGet = callBound('WeakMap.prototype.get', true);\nvar $weakMapSet = callBound('WeakMap.prototype.set', true);\nvar $weakMapHas = callBound('WeakMap.prototype.has', true);\nvar $mapGet = callBound('Map.prototype.get', true);\nvar $mapSet = callBound('Map.prototype.set', true);\nvar $mapHas = callBound('Map.prototype.has', true);\n\n/*\n * This function traverses the list returning the node corresponding to the\n * given key.\n *\n * That node is also moved to the head of the list, so that if it's accessed\n * again we don't need to traverse the whole list. By doing so, all the recently\n * used nodes can be accessed relatively quickly.\n */\nvar listGetNode = function (list, key) { // eslint-disable-line consistent-return\n\tfor (var prev = list, curr; (curr = prev.next) !== null; prev = curr) {\n\t\tif (curr.key === key) {\n\t\t\tprev.next = curr.next;\n\t\t\tcurr.next = list.next;\n\t\t\tlist.next = curr; // eslint-disable-line no-param-reassign\n\t\t\treturn curr;\n\t\t}\n\t}\n};\n\nvar listGet = function (objects, key) {\n\tvar node = listGetNode(objects, key);\n\treturn node && node.value;\n};\nvar listSet = function (objects, key, value) {\n\tvar node = listGetNode(objects, key);\n\tif (node) {\n\t\tnode.value = value;\n\t} else {\n\t\t// Prepend the new node to the beginning of the list\n\t\tobjects.next = { // eslint-disable-line no-param-reassign\n\t\t\tkey: key,\n\t\t\tnext: objects.next,\n\t\t\tvalue: value\n\t\t};\n\t}\n};\nvar listHas = function (objects, key) {\n\treturn !!listGetNode(objects, key);\n};\n\nmodule.exports = function getSideChannel() {\n\tvar $wm;\n\tvar $m;\n\tvar $o;\n\tvar channel = {\n\t\tassert: function (key) {\n\t\t\tif (!channel.has(key)) {\n\t\t\t\tthrow new $TypeError('Side channel does not contain ' + inspect(key));\n\t\t\t}\n\t\t},\n\t\tget: function (key) { // eslint-disable-line consistent-return\n\t\t\tif ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {\n\t\t\t\tif ($wm) {\n\t\t\t\t\treturn $weakMapGet($wm, key);\n\t\t\t\t}\n\t\t\t} else if ($Map) {\n\t\t\t\tif ($m) {\n\t\t\t\t\treturn $mapGet($m, key);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ($o) { // eslint-disable-line no-lonely-if\n\t\t\t\t\treturn listGet($o, key);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\thas: function (key) {\n\t\t\tif ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {\n\t\t\t\tif ($wm) {\n\t\t\t\t\treturn $weakMapHas($wm, key);\n\t\t\t\t}\n\t\t\t} else if ($Map) {\n\t\t\t\tif ($m) {\n\t\t\t\t\treturn $mapHas($m, key);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ($o) { // eslint-disable-line no-lonely-if\n\t\t\t\t\treturn listHas($o, key);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t},\n\t\tset: function (key, value) {\n\t\t\tif ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {\n\t\t\t\tif (!$wm) {\n\t\t\t\t\t$wm = new $WeakMap();\n\t\t\t\t}\n\t\t\t\t$weakMapSet($wm, key, value);\n\t\t\t} else if ($Map) {\n\t\t\t\tif (!$m) {\n\t\t\t\t\t$m = new $Map();\n\t\t\t\t}\n\t\t\t\t$mapSet($m, key, value);\n\t\t\t} else {\n\t\t\t\tif (!$o) {\n\t\t\t\t\t/*\n\t\t\t\t\t * Initialize the linked list as an empty node, so that we don't have\n\t\t\t\t\t * to special-case handling of the first node: we can always refer to\n\t\t\t\t\t * it as (previous node).next, instead of something like (list).head\n\t\t\t\t\t */\n\t\t\t\t\t$o = { key: {}, next: null };\n\t\t\t\t}\n\t\t\t\tlistSet($o, key, value);\n\t\t\t}\n\t\t}\n\t};\n\treturn channel;\n};\n",
    "module.exports={\n  \"0\": \"O\",\n  \"1\": \"l\",\n  \"֭\": \"֖\",\n  \"֮\": \"֘\",\n  \"֨\": \"֙\",\n  \"֤\": \"֚\",\n  \"᪴\": \"ۛ\",\n  \"⃛\": \"ۛ\",\n  \"ؙ\": \"̓\",\n  \"ࣳ\": \"̓\",\n  \"̓\": \"̓\",\n  \"̕\": \"̓\",\n  \"ُ\": \"̓\",\n  \"ٝ\": \"̔\",\n  \"֜\": \"́\",\n  \"֝\": \"́\",\n  \"ؘ\": \"́\",\n  \"݇\": \"́\",\n  \"́\": \"́\",\n  \"॔\": \"́\",\n  \"َ\": \"́\",\n  \"̀\": \"̀\",\n  \"॓\": \"̀\",\n  \"̌\": \"̆\",\n  \"꙼\": \"̆\",\n  \"٘\": \"̆\",\n  \"ٚ\": \"̆\",\n  \"ͮ\": \"̆\",\n  \"ۨ\": \"̆̇\",\n  \"̐\": \"̆̇\",\n  \"ँ\": \"̆̇\",\n  \"ঁ\": \"̆̇\",\n  \"ઁ\": \"̆̇\",\n  \"ଁ\": \"̆̇\",\n  \"ఀ\": \"̆̇\",\n  \"ಁ\": \"̆̇\",\n  \"ഁ\": \"̆̇\",\n  \"𑒿\": \"̆̇\",\n  \"᳐\": \"̂\",\n  \"̑\": \"̂\",\n  \"ٛ\": \"̂\",\n  \"߮\": \"̂\",\n  \"꛰\": \"̂\",\n  \"֯\": \"̊\",\n  \"۟\": \"̊\",\n  \"៓\": \"̊\",\n  \"゚\": \"̊\",\n  \"ْ\": \"̊\",\n  \"ஂ\": \"̊\",\n  \"ံ\": \"̊\",\n  \"ំ\": \"̊\",\n  \"𑌀\": \"̊\",\n  \"ํ\": \"̊\",\n  \"ໍ\": \"̊\",\n  \"ͦ\": \"̊\",\n  \"ⷪ\": \"̊\",\n  \"࣫\": \"̈\",\n  \"߳\": \"̈\",\n  \"ً\": \"̋\",\n  \"ࣰ\": \"̋\",\n  \"͂\": \"̃\",\n  \"ٓ\": \"̃\",\n  \"ׄ\": \"̇\",\n  \"۬\": \"̇\",\n  \"݀\": \"̇\",\n  \"࣪\": \"̇\",\n  \"݁\": \"̇\",\n  \"͘\": \"̇\",\n  \"ֹ\": \"̇\",\n  \"ֺ\": \"̇\",\n  \"ׂ\": \"̇\",\n  \"ׁ\": \"̇\",\n  \"߭\": \"̇\",\n  \"ं\": \"̇\",\n  \"ਂ\": \"̇\",\n  \"ં\": \"̇\",\n  \"்\": \"̇\",\n  \"̷\": \"̸\",\n  \"᪷\": \"̨\",\n  \"̢\": \"̨\",\n  \"ͅ\": \"̨\",\n  \"᳒\": \"̄\",\n  \"̅\": \"̄\",\n  \"ٙ\": \"̄\",\n  \"߫\": \"̄\",\n  \"꛱\": \"̄\",\n  \"᳚\": \"̎\",\n  \"ٗ\": \"̒\",\n  \"͗\": \"͐\",\n  \"ࣿ\": \"͐\",\n  \"ࣸ\": \"͐\",\n  \"ऀ\": \"͒\",\n  \"᳭\": \"̖\",\n  \"᳜\": \"̩\",\n  \"ٖ\": \"̩\",\n  \"᳕\": \"̫\",\n  \"͇\": \"̳\",\n  \"ࣹ\": \"͔\",\n  \"ࣺ\": \"͕\",\n  \"゛\": \"ﾞ\",\n  \"゜\": \"ﾟ\",\n  \"̶\": \"̵\",\n  \"〬\": \"̉\",\n  \"ׅ\": \"̣\",\n  \"࣭\": \"̣\",\n  \"᳝\": \"̣\",\n  \"ִ\": \"̣\",\n  \"ٜ\": \"̣\",\n  \"़\": \"̣\",\n  \"়\": \"̣\",\n  \"਼\": \"̣\",\n  \"઼\": \"̣\",\n  \"଼\": \"̣\",\n  \"𑇊\": \"̣\",\n  \"𑓃\": \"̣\",\n  \"𐨺\": \"̣\",\n  \"࣮\": \"̤\",\n  \"᳞\": \"̤\",\n  \"༷\": \"̥\",\n  \"〭\": \"̥\",\n  \"̧\": \"̦\",\n  \"̡\": \"̦\",\n  \"̹\": \"̦\",\n  \"᳙\": \"̭\",\n  \"᳘\": \"̮\",\n  \"॒\": \"̱\",\n  \"̠\": \"̱\",\n  \"ࣱ\": \"ٌ\",\n  \"ࣨ\": \"ٌ\",\n  \"ࣥ\": \"ٌ\",\n  \"ﱞ\": \"ﹲّ\",\n  \"ࣲ\": \"ٍ\",\n  \"ﱟ\": \"ﹴّ\",\n  \"ﳲ\": \"ﹷّ\",\n  \"ﱠ\": \"ﹶّ\",\n  \"ﳳ\": \"ﹹّ\",\n  \"ﱡ\": \"ﹸّ\",\n  \"ؚ\": \"ِ\",\n  \"̗\": \"ِ\",\n  \"ﳴ\": \"ﹻّ\",\n  \"ﱢ\": \"ﹺّ\",\n  \"ﱣ\": \"ﹼٰ\",\n  \"ٟ\": \"ٕ\",\n  \"̍\": \"ٰ\",\n  \"݂\": \"ܼ\",\n  \"ਃ\": \"ঃ\",\n  \"ః\": \"ঃ\",\n  \"ಃ\": \"ঃ\",\n  \"ഃ\": \"ঃ\",\n  \"ඃ\": \"ঃ\",\n  \"း\": \"ঃ\",\n  \"𑓁\": \"ঃ\",\n  \"់\": \"่\",\n  \"່\": \"่\",\n  \"້\": \"้\",\n  \"໊\": \"๊\",\n  \"໋\": \"๋\",\n  \"꙯\": \"⃩\",\n  \"\\u2028\": \" \",\n  \"\\u2029\": \" \",\n  \" \": \" \",\n  \" \": \" \",\n  \" \": \" \",\n  \" \": \" \",\n  \" \": \" \",\n  \" \": \" \",\n  \" \": \" \",\n  \" \": \" \",\n  \" \": \" \",\n  \" \": \" \",\n  \" \": \" \",\n  \" \": \" \",\n  \" \": \" \",\n  \" \": \" \",\n  \" \": \" \",\n  \"ߺ\": \"_\",\n  \"﹍\": \"_\",\n  \"﹎\": \"_\",\n  \"﹏\": \"_\",\n  \"‐\": \"-\",\n  \"‑\": \"-\",\n  \"‒\": \"-\",\n  \"–\": \"-\",\n  \"﹘\": \"-\",\n  \"۔\": \"-\",\n  \"⁃\": \"-\",\n  \"˗\": \"-\",\n  \"−\": \"-\",\n  \"➖\": \"-\",\n  \"Ⲻ\": \"-\",\n  \"⨩\": \"-̓\",\n  \"⸚\": \"-̈\",\n  \"﬩\": \"-̇\",\n  \"∸\": \"-̇\",\n  \"⨪\": \"-̣\",\n  \"꓾\": \"-.\",\n  \"～\": \"〜\",\n  \"؍\": \",\",\n  \"٫\": \",\",\n  \"‚\": \",\",\n  \"¸\": \",\",\n  \"ꓹ\": \",\",\n  \"⸲\": \"،\",\n  \"٬\": \"،\",\n  \";\": \";\",\n  \"⸵\": \"؛\",\n  \"ः\": \":\",\n  \"ઃ\": \":\",\n  \"：\": \":\",\n  \"։\": \":\",\n  \"܃\": \":\",\n  \"܄\": \":\",\n  \"᛬\": \":\",\n  \"︰\": \":\",\n  \"᠃\": \":\",\n  \"᠉\": \":\",\n  \"⁚\": \":\",\n  \"׃\": \":\",\n  \"˸\": \":\",\n  \"꞉\": \":\",\n  \"∶\": \":\",\n  \"ː\": \":\",\n  \"ꓽ\": \":\",\n  \"⩴\": \"::=\",\n  \"⧴\": \":→\",\n  \"！\": \"!\",\n  \"ǃ\": \"!\",\n  \"ⵑ\": \"!\",\n  \"‼\": \"!!\",\n  \"⁉\": \"!?\",\n  \"ʔ\": \"?\",\n  \"Ɂ\": \"?\",\n  \"ॽ\": \"?\",\n  \"Ꭾ\": \"?\",\n  \"ꛫ\": \"?\",\n  \"⁈\": \"?!\",\n  \"⁇\": \"??\",\n  \"⸮\": \"؟\",\n  \"𝅭\": \".\",\n  \"․\": \".\",\n  \"܁\": \".\",\n  \"܂\": \".\",\n  \"꘎\": \".\",\n  \"𐩐\": \".\",\n  \"٠\": \".\",\n  \"۰\": \".\",\n  \"ꓸ\": \".\",\n  \"ꓻ\": \".,\",\n  \"‥\": \"..\",\n  \"ꓺ\": \"..\",\n  \"…\": \"...\",\n  \"꛴\": \"꛳꛳\",\n  \"・\": \"·\",\n  \"･\": \"·\",\n  \"᛫\": \"·\",\n  \"·\": \"·\",\n  \"⸱\": \"·\",\n  \"𐄁\": \"·\",\n  \"•\": \"·\",\n  \"‧\": \"·\",\n  \"∙\": \"·\",\n  \"⋅\": \"·\",\n  \"ꞏ\": \"·\",\n  \"ᐧ\": \"·\",\n  \"⋯\": \"···\",\n  \"ⵈ\": \"···\",\n  \"ᑄ\": \"·<\",\n  \"⋗\": \"·>\",\n  \"ᐷ\": \"·>\",\n  \"ᑀ\": \"·>\",\n  \"ᔯ\": \"·4\",\n  \"ᑾ\": \"·b\",\n  \"ᒀ\": \"·ḃ\",\n  \"ᑺ\": \"·d\",\n  \"ᒘ\": \"·J\",\n  \"ᒶ\": \"·L\",\n  \"ᑶ\": \"·P\",\n  \"ᑗ\": \"·U\",\n  \"ᐺ\": \"·V\",\n  \"ᐼ\": \"·Ʌ\",\n  \"ᒮ\": \"·Γ\",\n  \"ᐎ\": \"·Δ\",\n  \"ᑙ\": \"·Ո\",\n  \"ᐌ\": \"·ᐁ\",\n  \"ᐐ\": \"·ᐄ\",\n  \"ᐒ\": \"·ᐅ\",\n  \"ᐔ\": \"·ᐆ\",\n  \"ᐗ\": \"·ᐊ\",\n  \"ᐙ\": \"·ᐋ\",\n  \"ᐾ\": \"·ᐲ\",\n  \"ᑂ\": \"·ᐴ\",\n  \"ᑆ\": \"·ᐹ\",\n  \"ᑛ\": \"·ᑏ\",\n  \"ᑔ\": \"·ᑐ\",\n  \"ᑝ\": \"·ᑐ\",\n  \"ᑟ\": \"·ᑑ\",\n  \"ᑡ\": \"·ᑕ\",\n  \"ᑣ\": \"·ᑖ\",\n  \"ᑴ\": \"·ᑫ\",\n  \"ᑸ\": \"·ᑮ\",\n  \"ᑼ\": \"·ᑰ\",\n  \"ᒒ\": \"·ᒉ\",\n  \"ᒔ\": \"·ᒋ\",\n  \"ᒖ\": \"·ᒌ\",\n  \"ᒚ\": \"·ᒎ\",\n  \"ᒜ\": \"·ᒐ\",\n  \"ᒞ\": \"·ᒑ\",\n  \"ᒬ\": \"·ᒣ\",\n  \"ᒰ\": \"·ᒦ\",\n  \"ᒲ\": \"·ᒧ\",\n  \"ᒴ\": \"·ᒨ\",\n  \"ᒸ\": \"·ᒫ\",\n  \"ᓉ\": \"·ᓀ\",\n  \"ᣆ\": \"·ᓂ\",\n  \"ᣈ\": \"·ᓃ\",\n  \"ᣊ\": \"·ᓄ\",\n  \"ᣌ\": \"·ᓅ\",\n  \"ᓋ\": \"·ᓇ\",\n  \"ᓍ\": \"·ᓈ\",\n  \"ᓜ\": \"·ᓓ\",\n  \"ᓞ\": \"·ᓕ\",\n  \"ᓠ\": \"·ᓖ\",\n  \"ᓢ\": \"·ᓗ\",\n  \"ᓤ\": \"·ᓘ\",\n  \"ᓦ\": \"·ᓚ\",\n  \"ᓨ\": \"·ᓛ\",\n  \"ᓶ\": \"·ᓭ\",\n  \"ᓸ\": \"·ᓯ\",\n  \"ᓺ\": \"·ᓰ\",\n  \"ᓼ\": \"·ᓱ\",\n  \"ᓾ\": \"·ᓲ\",\n  \"ᔀ\": \"·ᓴ\",\n  \"ᔂ\": \"·ᓵ\",\n  \"ᔗ\": \"·ᔐ\",\n  \"ᔙ\": \"·ᔑ\",\n  \"ᔛ\": \"·ᔒ\",\n  \"ᔝ\": \"·ᔓ\",\n  \"ᔟ\": \"·ᔔ\",\n  \"ᔡ\": \"·ᔕ\",\n  \"ᔣ\": \"·ᔖ\",\n  \"ᔱ\": \"·ᔨ\",\n  \"ᔳ\": \"·ᔩ\",\n  \"ᔵ\": \"·ᔪ\",\n  \"ᔷ\": \"·ᔫ\",\n  \"ᔹ\": \"·ᔭ\",\n  \"ᔻ\": \"·ᔮ\",\n  \"ᣎ\": \"·ᕃ\",\n  \"ᣏ\": \"·ᕆ\",\n  \"ᣐ\": \"·ᕇ\",\n  \"ᣑ\": \"·ᕈ\",\n  \"ᣒ\": \"·ᕉ\",\n  \"ᣓ\": \"·ᕋ\",\n  \"ᕎ\": \"·ᕌ\",\n  \"ᕛ\": \"·ᕚ\",\n  \"ᕨ\": \"·ᕧ\",\n  \"ᢳ\": \"·ᢱ\",\n  \"ᢶ\": \"·ᢴ\",\n  \"ᢹ\": \"·ᢸ\",\n  \"ᣂ\": \"·ᣀ\",\n  \"꠰\": \"।\",\n  \"॥\": \"।।\",\n  \"᰼\": \"᰻᰻\",\n  \"။\": \"၊၊\",\n  \"᪩\": \"᪨᪨\",\n  \"᪫\": \"᪪᪨\",\n  \"᭟\": \"᭞᭞\",\n  \"𐩗\": \"𐩖𐩖\",\n  \"𑑌\": \"𑑋𑑋\",\n  \"𑙂\": \"𑙁𑙁\",\n  \"𑱂\": \"𑱁𑱁\",\n  \"᱿\": \"᱾᱾\",\n  \"՝\": \"'\",\n  \"＇\": \"'\",\n  \"‘\": \"'\",\n  \"’\": \"'\",\n  \"‛\": \"'\",\n  \"′\": \"'\",\n  \"‵\": \"'\",\n  \"՚\": \"'\",\n  \"׳\": \"'\",\n  \"`\": \"'\",\n  \"`\": \"'\",\n  \"｀\": \"'\",\n  \"´\": \"'\",\n  \"΄\": \"'\",\n  \"´\": \"'\",\n  \"᾽\": \"'\",\n  \"᾿\": \"'\",\n  \"῾\": \"'\",\n  \"ʹ\": \"'\",\n  \"ʹ\": \"'\",\n  \"ˈ\": \"'\",\n  \"ˊ\": \"'\",\n  \"ˋ\": \"'\",\n  \"˴\": \"'\",\n  \"ʻ\": \"'\",\n  \"ʽ\": \"'\",\n  \"ʼ\": \"'\",\n  \"ʾ\": \"'\",\n  \"ꞌ\": \"'\",\n  \"י\": \"'\",\n  \"ߴ\": \"'\",\n  \"ߵ\": \"'\",\n  \"ᑊ\": \"'\",\n  \"ᛌ\": \"'\",\n  \"𖽑\": \"'\",\n  \"𖽒\": \"'\",\n  \"᳓\": \"''\",\n  \"\\\"\": \"''\",\n  \"＂\": \"''\",\n  \"“\": \"''\",\n  \"”\": \"''\",\n  \"‟\": \"''\",\n  \"″\": \"''\",\n  \"‶\": \"''\",\n  \"〃\": \"''\",\n  \"״\": \"''\",\n  \"˝\": \"''\",\n  \"ʺ\": \"''\",\n  \"˶\": \"''\",\n  \"ˮ\": \"''\",\n  \"ײ\": \"''\",\n  \"‴\": \"'''\",\n  \"‷\": \"'''\",\n  \"⁗\": \"''''\",\n  \"Ɓ\": \"'B\",\n  \"Ɗ\": \"'D\",\n  \"ŉ\": \"'n\",\n  \"Ƥ\": \"'P\",\n  \"Ƭ\": \"'T\",\n  \"Ƴ\": \"'Y\",\n  \"［\": \"(\",\n  \"❨\": \"(\",\n  \"❲\": \"(\",\n  \"〔\": \"(\",\n  \"﴾\": \"(\",\n  \"⸨\": \"((\",\n  \"㈠\": \"(ー)\",\n  \"⑵\": \"(2)\",\n  \"⒇\": \"(2O)\",\n  \"⑶\": \"(3)\",\n  \"⑷\": \"(4)\",\n  \"⑸\": \"(5)\",\n  \"⑹\": \"(6)\",\n  \"⑺\": \"(7)\",\n  \"⑻\": \"(8)\",\n  \"⑼\": \"(9)\",\n  \"⒜\": \"(a)\",\n  \"🄐\": \"(A)\",\n  \"⒝\": \"(b)\",\n  \"🄑\": \"(B)\",\n  \"⒞\": \"(c)\",\n  \"🄒\": \"(C)\",\n  \"⒟\": \"(d)\",\n  \"🄓\": \"(D)\",\n  \"⒠\": \"(e)\",\n  \"🄔\": \"(E)\",\n  \"⒡\": \"(f)\",\n  \"🄕\": \"(F)\",\n  \"⒢\": \"(g)\",\n  \"🄖\": \"(G)\",\n  \"⒣\": \"(h)\",\n  \"🄗\": \"(H)\",\n  \"⒤\": \"(i)\",\n  \"⒥\": \"(j)\",\n  \"🄙\": \"(J)\",\n  \"⒦\": \"(k)\",\n  \"🄚\": \"(K)\",\n  \"⑴\": \"(l)\",\n  \"🄘\": \"(l)\",\n  \"⒧\": \"(l)\",\n  \"🄛\": \"(L)\",\n  \"⑿\": \"(l2)\",\n  \"⒀\": \"(l3)\",\n  \"⒁\": \"(l4)\",\n  \"⒂\": \"(l5)\",\n  \"⒃\": \"(l6)\",\n  \"⒄\": \"(l7)\",\n  \"⒅\": \"(l8)\",\n  \"⒆\": \"(l9)\",\n  \"⑾\": \"(ll)\",\n  \"⑽\": \"(lO)\",\n  \"🄜\": \"(M)\",\n  \"⒩\": \"(n)\",\n  \"🄝\": \"(N)\",\n  \"⒪\": \"(o)\",\n  \"🄞\": \"(O)\",\n  \"⒫\": \"(p)\",\n  \"🄟\": \"(P)\",\n  \"⒬\": \"(q)\",\n  \"🄠\": \"(Q)\",\n  \"⒭\": \"(r)\",\n  \"🄡\": \"(R)\",\n  \"⒨\": \"(rn)\",\n  \"⒮\": \"(s)\",\n  \"🄢\": \"(S)\",\n  \"🄪\": \"(S)\",\n  \"⒯\": \"(t)\",\n  \"🄣\": \"(T)\",\n  \"⒰\": \"(u)\",\n  \"🄤\": \"(U)\",\n  \"⒱\": \"(v)\",\n  \"🄥\": \"(V)\",\n  \"⒲\": \"(w)\",\n  \"🄦\": \"(W)\",\n  \"⒳\": \"(x)\",\n  \"🄧\": \"(X)\",\n  \"⒴\": \"(y)\",\n  \"🄨\": \"(Y)\",\n  \"⒵\": \"(z)\",\n  \"🄩\": \"(Z)\",\n  \"㈀\": \"(ᄀ)\",\n  \"㈎\": \"(가)\",\n  \"㈁\": \"(ᄂ)\",\n  \"㈏\": \"(나)\",\n  \"㈂\": \"(ᄃ)\",\n  \"㈐\": \"(다)\",\n  \"㈃\": \"(ᄅ)\",\n  \"㈑\": \"(라)\",\n  \"㈄\": \"(ᄆ)\",\n  \"㈒\": \"(마)\",\n  \"㈅\": \"(ᄇ)\",\n  \"㈓\": \"(바)\",\n  \"㈆\": \"(ᄉ)\",\n  \"㈔\": \"(사)\",\n  \"㈇\": \"(ᄋ)\",\n  \"㈕\": \"(아)\",\n  \"㈝\": \"(오전)\",\n  \"㈞\": \"(오후)\",\n  \"㈈\": \"(ᄌ)\",\n  \"㈖\": \"(자)\",\n  \"㈜\": \"(주)\",\n  \"㈉\": \"(ᄎ)\",\n  \"㈗\": \"(차)\",\n  \"㈊\": \"(ᄏ)\",\n  \"㈘\": \"(카)\",\n  \"㈋\": \"(ᄐ)\",\n  \"㈙\": \"(타)\",\n  \"㈌\": \"(ᄑ)\",\n  \"㈚\": \"(파)\",\n  \"㈍\": \"(ᄒ)\",\n  \"㈛\": \"(하)\",\n  \"㈦\": \"(七)\",\n  \"㈢\": \"(三)\",\n  \"🉁\": \"(三)\",\n  \"㈨\": \"(九)\",\n  \"㈡\": \"(二)\",\n  \"🉂\": \"(二)\",\n  \"㈤\": \"(五)\",\n  \"㈹\": \"(代)\",\n  \"㈽\": \"(企)\",\n  \"㉁\": \"(休)\",\n  \"㈧\": \"(八)\",\n  \"㈥\": \"(六)\",\n  \"㈸\": \"(労)\",\n  \"🉇\": \"(勝)\",\n  \"㈩\": \"(十)\",\n  \"㈿\": \"(協)\",\n  \"㈴\": \"(名)\",\n  \"㈺\": \"(呼)\",\n  \"㈣\": \"(四)\",\n  \"㈯\": \"(土)\",\n  \"㈻\": \"(学)\",\n  \"🉃\": \"(安)\",\n  \"🉅\": \"(打)\",\n  \"🉈\": \"(敗)\",\n  \"㈰\": \"(日)\",\n  \"㈪\": \"(月)\",\n  \"㈲\": \"(有)\",\n  \"㈭\": \"(木)\",\n  \"🉀\": \"(本)\",\n  \"㈱\": \"(株)\",\n  \"㈬\": \"(水)\",\n  \"㈫\": \"(火)\",\n  \"🉄\": \"(点)\",\n  \"㈵\": \"(特)\",\n  \"🉆\": \"(盗)\",\n  \"㈼\": \"(監)\",\n  \"㈳\": \"(社)\",\n  \"㈷\": \"(祝)\",\n  \"㉀\": \"(祭)\",\n  \"㉂\": \"(自)\",\n  \"㉃\": \"(至)\",\n  \"㈶\": \"(財)\",\n  \"㈾\": \"(資)\",\n  \"㈮\": \"(金)\",\n  \"］\": \")\",\n  \"❩\": \")\",\n  \"❳\": \")\",\n  \"〕\": \")\",\n  \"﴿\": \")\",\n  \"⸩\": \"))\",\n  \"❴\": \"{\",\n  \"𝄔\": \"{\",\n  \"❵\": \"}\",\n  \"〚\": \"⟦\",\n  \"〛\": \"⟧\",\n  \"⟨\": \"❬\",\n  \"〈\": \"❬\",\n  \"〈\": \"❬\",\n  \"㇛\": \"❬\",\n  \"く\": \"❬\",\n  \"𡿨\": \"❬\",\n  \"⟩\": \"❭\",\n  \"〉\": \"❭\",\n  \"〉\": \"❭\",\n  \"＾\": \"︿\",\n  \"⸿\": \"¶\",\n  \"⁎\": \"*\",\n  \"٭\": \"*\",\n  \"∗\": \"*\",\n  \"𐌟\": \"*\",\n  \"᜵\": \"/\",\n  \"⁁\": \"/\",\n  \"∕\": \"/\",\n  \"⁄\": \"/\",\n  \"╱\": \"/\",\n  \"⟋\": \"/\",\n  \"⧸\": \"/\",\n  \"𝈺\": \"/\",\n  \"㇓\": \"/\",\n  \"〳\": \"/\",\n  \"Ⳇ\": \"/\",\n  \"ノ\": \"/\",\n  \"丿\": \"/\",\n  \"⼃\": \"/\",\n  \"⧶\": \"/̄\",\n  \"⫽\": \"//\",\n  \"⫻\": \"///\",\n  \"＼\": \"\\\\\",\n  \"﹨\": \"\\\\\",\n  \"∖\": \"\\\\\",\n  \"⟍\": \"\\\\\",\n  \"⧵\": \"\\\\\",\n  \"⧹\": \"\\\\\",\n  \"𝈏\": \"\\\\\",\n  \"𝈻\": \"\\\\\",\n  \"㇔\": \"\\\\\",\n  \"丶\": \"\\\\\",\n  \"⼂\": \"\\\\\",\n  \"⳹\": \"\\\\\\\\\",\n  \"⑊\": \"\\\\\\\\\",\n  \"⟈\": \"\\\\ᑕ\",\n  \"ꝸ\": \"&\",\n  \"૰\": \"॰\",\n  \"𑂻\": \"॰\",\n  \"𑇇\": \"॰\",\n  \"⚬\": \"॰\",\n  \"𑇛\": \"꣼\",\n  \"៙\": \"๏\",\n  \"៕\": \"๚\",\n  \"៚\": \"๛\",\n  \"༌\": \"་\",\n  \"༎\": \"།།\",\n  \"˄\": \"^\",\n  \"ˆ\": \"^\",\n  \"꙾\": \"ˇ\",\n  \"˘\": \"ˇ\",\n  \"‾\": \"ˉ\",\n  \"﹉\": \"ˉ\",\n  \"﹊\": \"ˉ\",\n  \"﹋\": \"ˉ\",\n  \"﹌\": \"ˉ\",\n  \"¯\": \"ˉ\",\n  \"￣\": \"ˉ\",\n  \"▔\": \"ˉ\",\n  \"ъ\": \"ˉb\",\n  \"ꙑ\": \"ˉbi\",\n  \"͵\": \"ˏ\",\n  \"˻\": \"˪\",\n  \"꜖\": \"˪\",\n  \"꜔\": \"˫\",\n  \"。\": \"˳\",\n  \"⸰\": \"°\",\n  \"˚\": \"°\",\n  \"∘\": \"°\",\n  \"○\": \"°\",\n  \"◦\": \"°\",\n  \"⍜\": \"°̲\",\n  \"⍤\": \"°̈\",\n  \"℃\": \"°C\",\n  \"℉\": \"°F\",\n  \"௵\": \"௳\",\n  \"༛\": \"༚༚\",\n  \"༟\": \"༚༝\",\n  \"࿎\": \"༝༚\",\n  \"༞\": \"༝༝\",\n  \"Ⓒ\": \"©\",\n  \"Ⓡ\": \"®\",\n  \"Ⓟ\": \"℗\",\n  \"𝈛\": \"⅄\",\n  \"⯬\": \"↞\",\n  \"⯭\": \"↟\",\n  \"⯮\": \"↠\",\n  \"⯯\": \"↡\",\n  \"↵\": \"↲\",\n  \"⥥\": \"⇃⇂\",\n  \"⥯\": \"⇃ᛚ\",\n  \"𝛛\": \"∂\",\n  \"𝜕\": \"∂\",\n  \"𝝏\": \"∂\",\n  \"𝞉\": \"∂\",\n  \"𝟃\": \"∂\",\n  \"𞣌\": \"∂\",\n  \"𞣍\": \"∂̵\",\n  \"ð\": \"∂̵\",\n  \"⌀\": \"∅\",\n  \"𝛁\": \"∇\",\n  \"𝛻\": \"∇\",\n  \"𝜵\": \"∇\",\n  \"𝝯\": \"∇\",\n  \"𝞩\": \"∇\",\n  \"𑢨\": \"∇\",\n  \"⍢\": \"∇̈\",\n  \"⍫\": \"∇̴\",\n  \"█\": \"∎\",\n  \"■\": \"∎\",\n  \"⨿\": \"∐\",\n  \"᛭\": \"+\",\n  \"➕\": \"+\",\n  \"𐊛\": \"+\",\n  \"⨣\": \"+̂\",\n  \"⨢\": \"+̊\",\n  \"⨤\": \"+̃\",\n  \"∔\": \"+̇\",\n  \"⨥\": \"+̣\",\n  \"⨦\": \"+̰\",\n  \"⨧\": \"+₂\",\n  \"➗\": \"÷\",\n  \"‹\": \"<\",\n  \"❮\": \"<\",\n  \"˂\": \"<\",\n  \"𝈶\": \"<\",\n  \"ᐸ\": \"<\",\n  \"ᚲ\": \"<\",\n  \"⋖\": \"<·\",\n  \"Ⲵ\": \"<·\",\n  \"ᑅ\": \"<·\",\n  \"≪\": \"<<\",\n  \"⋘\": \"<<<\",\n  \"᐀\": \"=\",\n  \"⹀\": \"=\",\n  \"゠\": \"=\",\n  \"꓿\": \"=\",\n  \"≚\": \"=̆\",\n  \"≙\": \"=̂\",\n  \"≗\": \"=̊\",\n  \"≐\": \"=̇\",\n  \"≑\": \"=̣̇\",\n  \"⩮\": \"=⃰\",\n  \"⩵\": \"==\",\n  \"⩶\": \"===\",\n  \"≞\": \"=ͫ\",\n  \"›\": \">\",\n  \"❯\": \">\",\n  \"˃\": \">\",\n  \"𝈷\": \">\",\n  \"ᐳ\": \">\",\n  \"𖼿\": \">\",\n  \"ᑁ\": \">·\",\n  \"⪥\": \"><\",\n  \"≫\": \">>\",\n  \"⨠\": \">>\",\n  \"⋙\": \">>>\",\n  \"⁓\": \"~\",\n  \"˜\": \"~\",\n  \"῀\": \"~\",\n  \"∼\": \"~\",\n  \"⍨\": \"~̈\",\n  \"⸞\": \"~̇\",\n  \"⩪\": \"~̇\",\n  \"⸟\": \"~̣\",\n  \"𞣈\": \"∠\",\n  \"⋀\": \"∧\",\n  \"∯\": \"∮∮\",\n  \"∰\": \"∮∮∮\",\n  \"⸫\": \"∴\",\n  \"⸪\": \"∵\",\n  \"⸬\": \"∷\",\n  \"𑇞\": \"≈\",\n  \"♎\": \"≏\",\n  \"🝞\": \"≏\",\n  \"≣\": \"≡\",\n  \"⨃\": \"⊍\",\n  \"⨄\": \"⊎\",\n  \"𝈸\": \"⊏\",\n  \"𝈹\": \"⊐\",\n  \"⨅\": \"⊓\",\n  \"⨆\": \"⊔\",\n  \"⨂\": \"⊗\",\n  \"⍟\": \"⊛\",\n  \"🝱\": \"⊠\",\n  \"🝕\": \"⊡\",\n  \"◁\": \"⊲\",\n  \"▷\": \"⊳\",\n  \"⍣\": \"⋆̈\",\n  \"︴\": \"⌇\",\n  \"◠\": \"⌒\",\n  \"⨽\": \"⌙\",\n  \"⌥\": \"⌤\",\n  \"⧇\": \"⌻\",\n  \"◎\": \"⌾\",\n  \"⦾\": \"⌾\",\n  \"⧅\": \"⍂\",\n  \"⦰\": \"⍉\",\n  \"⏃\": \"⍋\",\n  \"⏂\": \"⍎\",\n  \"⏁\": \"⍕\",\n  \"⏆\": \"⍭\",\n  \"☸\": \"⎈\",\n  \"︵\": \"⏜\",\n  \"︶\": \"⏝\",\n  \"︷\": \"⏞\",\n  \"︸\": \"⏟\",\n  \"︹\": \"⏠\",\n  \"︺\": \"⏡\",\n  \"▱\": \"⏥\",\n  \"⏼\": \"⏻\",\n  \"︱\": \"│\",\n  \"｜\": \"│\",\n  \"┃\": \"│\",\n  \"┏\": \"┌\",\n  \"┣\": \"├\",\n  \"▐\": \"▌\",\n  \"▗\": \"▖\",\n  \"▝\": \"▘\",\n  \"☐\": \"□\",\n  \"￭\": \"▪\",\n  \"▸\": \"▶\",\n  \"►\": \"▶\",\n  \"⳩\": \"☧\",\n  \"🜊\": \"☩\",\n  \"🌒\": \"☽\",\n  \"🌙\": \"☽\",\n  \"⏾\": \"☾\",\n  \"🌘\": \"☾\",\n  \"⧙\": \"⦚\",\n  \"🜺\": \"⧟\",\n  \"⨾\": \"⨟\",\n  \"𐆠\": \"⳨\",\n  \"♩\": \"𝅘𝅥\",\n  \"♪\": \"𝅘𝅥𝅮\",\n  \"⓪\": \"🄍\",\n  \"↺\": \"🄎\",\n  \"˙\": \"ॱ\",\n  \"ൎ\": \"ॱ\",\n  \"－\": \"ー\",\n  \"—\": \"ー\",\n  \"―\": \"ー\",\n  \"─\": \"ー\",\n  \"━\": \"ー\",\n  \"㇐\": \"ー\",\n  \"ꟷ\": \"ー\",\n  \"ᅳ\": \"ー\",\n  \"ㅡ\": \"ー\",\n  \"一\": \"ー\",\n  \"⼀\": \"ー\",\n  \"ᆖ\": \"ーー\",\n  \"ힹ\": \"ーᅡ\",\n  \"ힺ\": \"ーᅥ\",\n  \"ힻ\": \"ーᅥ丨\",\n  \"ힼ\": \"ーᅩ\",\n  \"ᆕ\": \"ーᅮ\",\n  \"ᅴ\": \"ー丨\",\n  \"ㅢ\": \"ー丨\",\n  \"ᆗ\": \"ー丨ᅮ\",\n  \"🄏\": \"$⃠\",\n  \"₤\": \"£\",\n  \"〒\": \"₸\",\n  \"〶\": \"₸\",\n  \"᭜\": \"᭐\",\n  \"꧆\": \"꧐\",\n  \"𑓑\": \"১\",\n  \"೧\": \"౧\",\n  \"ၥ\": \"၁\",\n  \"①\": \"➀\",\n  \"⑩\": \"➉\",\n  \"⏨\": \"₁₀\",\n  \"𝟐\": \"2\",\n  \"𝟚\": \"2\",\n  \"𝟤\": \"2\",\n  \"𝟮\": \"2\",\n  \"𝟸\": \"2\",\n  \"🯲\": \"2\",\n  \"Ꝛ\": \"2\",\n  \"Ƨ\": \"2\",\n  \"Ϩ\": \"2\",\n  \"Ꙅ\": \"2\",\n  \"ᒿ\": \"2\",\n  \"ꛯ\": \"2\",\n  \"ꧏ\": \"٢\",\n  \"۲\": \"٢\",\n  \"૨\": \"२\",\n  \"𑓒\": \"২\",\n  \"೨\": \"౨\",\n  \"②\": \"➁\",\n  \"ƻ\": \"2̵\",\n  \"🄃\": \"2,\",\n  \"⒉\": \"2.\",\n  \"㏵\": \"22日\",\n  \"㍮\": \"22点\",\n  \"㏶\": \"23日\",\n  \"㍯\": \"23点\",\n  \"㏷\": \"24日\",\n  \"㍰\": \"24点\",\n  \"㏸\": \"25日\",\n  \"㏹\": \"26日\",\n  \"㏺\": \"27日\",\n  \"㏻\": \"28日\",\n  \"㏼\": \"29日\",\n  \"㏴\": \"2l日\",\n  \"㍭\": \"2l点\",\n  \"⒛\": \"2O.\",\n  \"㏳\": \"2O日\",\n  \"㍬\": \"2O点\",\n  \"෩\": \"෨ා\",\n  \"෯\": \"෨ී\",\n  \"㏡\": \"2日\",\n  \"㋁\": \"2月\",\n  \"㍚\": \"2点\",\n  \"𝈆\": \"3\",\n  \"𝟑\": \"3\",\n  \"𝟛\": \"3\",\n  \"𝟥\": \"3\",\n  \"𝟯\": \"3\",\n  \"𝟹\": \"3\",\n  \"🯳\": \"3\",\n  \"Ɜ\": \"3\",\n  \"Ȝ\": \"3\",\n  \"Ʒ\": \"3\",\n  \"Ꝫ\": \"3\",\n  \"Ⳍ\": \"3\",\n  \"З\": \"3\",\n  \"Ӡ\": \"3\",\n  \"𖼻\": \"3\",\n  \"𑣊\": \"3\",\n  \"۳\": \"٣\",\n  \"𞣉\": \"٣\",\n  \"૩\": \"३\",\n  \"③\": \"➂\",\n  \"Ҙ\": \"3̦\",\n  \"🄄\": \"3,\",\n  \"⒊\": \"3.\",\n  \"㏾\": \"3l日\",\n  \"㏽\": \"3O日\",\n  \"㏢\": \"3日\",\n  \"㋂\": \"3月\",\n  \"㍛\": \"3点\",\n  \"𝟒\": \"4\",\n  \"𝟜\": \"4\",\n  \"𝟦\": \"4\",\n  \"𝟰\": \"4\",\n  \"𝟺\": \"4\",\n  \"🯴\": \"4\",\n  \"Ꮞ\": \"4\",\n  \"𑢯\": \"4\",\n  \"۴\": \"٤\",\n  \"૪\": \"४\",\n  \"④\": \"➃\",\n  \"🄅\": \"4,\",\n  \"⒋\": \"4.\",\n  \"ᔰ\": \"4·\",\n  \"㏣\": \"4日\",\n  \"㋃\": \"4月\",\n  \"㍜\": \"4点\",\n  \"𝟓\": \"5\",\n  \"𝟝\": \"5\",\n  \"𝟧\": \"5\",\n  \"𝟱\": \"5\",\n  \"𝟻\": \"5\",\n  \"🯵\": \"5\",\n  \"Ƽ\": \"5\",\n  \"𑢻\": \"5\",\n  \"⑤\": \"➄\",\n  \"🄆\": \"5,\",\n  \"⒌\": \"5.\",\n  \"㏤\": \"5日\",\n  \"㋄\": \"5月\",\n  \"㍝\": \"5点\",\n  \"𝟔\": \"6\",\n  \"𝟞\": \"6\",\n  \"𝟨\": \"6\",\n  \"𝟲\": \"6\",\n  \"𝟼\": \"6\",\n  \"🯶\": \"6\",\n  \"Ⳓ\": \"6\",\n  \"б\": \"6\",\n  \"Ꮾ\": \"6\",\n  \"𑣕\": \"6\",\n  \"۶\": \"٦\",\n  \"𑓖\": \"৬\",\n  \"⑥\": \"➅\",\n  \"🄇\": \"6,\",\n  \"⒍\": \"6.\",\n  \"㏥\": \"6日\",\n  \"㋅\": \"6月\",\n  \"㍞\": \"6点\",\n  \"𝈒\": \"7\",\n  \"𝟕\": \"7\",\n  \"𝟟\": \"7\",\n  \"𝟩\": \"7\",\n  \"𝟳\": \"7\",\n  \"𝟽\": \"7\",\n  \"🯷\": \"7\",\n  \"𐓒\": \"7\",\n  \"𑣆\": \"7\",\n  \"⑦\": \"➆\",\n  \"🄈\": \"7,\",\n  \"⒎\": \"7.\",\n  \"㏦\": \"7日\",\n  \"㋆\": \"7月\",\n  \"㍟\": \"7点\",\n  \"ଃ\": \"8\",\n  \"৪\": \"8\",\n  \"੪\": \"8\",\n  \"𞣋\": \"8\",\n  \"𝟖\": \"8\",\n  \"𝟠\": \"8\",\n  \"𝟪\": \"8\",\n  \"𝟴\": \"8\",\n  \"𝟾\": \"8\",\n  \"🯸\": \"8\",\n  \"ȣ\": \"8\",\n  \"Ȣ\": \"8\",\n  \"𐌚\": \"8\",\n  \"૮\": \"८\",\n  \"⑧\": \"➇\",\n  \"🄉\": \"8,\",\n  \"⒏\": \"8.\",\n  \"㏧\": \"8日\",\n  \"㋇\": \"8月\",\n  \"㍠\": \"8点\",\n  \"੧\": \"9\",\n  \"୨\": \"9\",\n  \"৭\": \"9\",\n  \"൭\": \"9\",\n  \"𝟗\": \"9\",\n  \"𝟡\": \"9\",\n  \"𝟫\": \"9\",\n  \"𝟵\": \"9\",\n  \"𝟿\": \"9\",\n  \"🯹\": \"9\",\n  \"Ꝯ\": \"9\",\n  \"Ⳋ\": \"9\",\n  \"𑣌\": \"9\",\n  \"𑢬\": \"9\",\n  \"𑣖\": \"9\",\n  \"१\": \"٩\",\n  \"𑣤\": \"٩\",\n  \"۹\": \"٩\",\n  \"೯\": \"౯\",\n  \"⑨\": \"➈\",\n  \"🄊\": \"9,\",\n  \"⒐\": \"9.\",\n  \"㏨\": \"9日\",\n  \"㋈\": \"9月\",\n  \"㍡\": \"9点\",\n  \"⍺\": \"a\",\n  \"ａ\": \"a\",\n  \"𝐚\": \"a\",\n  \"𝑎\": \"a\",\n  \"𝒂\": \"a\",\n  \"𝒶\": \"a\",\n  \"𝓪\": \"a\",\n  \"𝔞\": \"a\",\n  \"𝕒\": \"a\",\n  \"𝖆\": \"a\",\n  \"𝖺\": \"a\",\n  \"𝗮\": \"a\",\n  \"𝘢\": \"a\",\n  \"𝙖\": \"a\",\n  \"𝚊\": \"a\",\n  \"ɑ\": \"a\",\n  \"α\": \"a\",\n  \"𝛂\": \"a\",\n  \"𝛼\": \"a\",\n  \"𝜶\": \"a\",\n  \"𝝰\": \"a\",\n  \"𝞪\": \"a\",\n  \"а\": \"a\",\n  \"ⷶ\": \"ͣ\",\n  \"Ａ\": \"A\",\n  \"𝐀\": \"A\",\n  \"𝐴\": \"A\",\n  \"𝑨\": \"A\",\n  \"𝒜\": \"A\",\n  \"𝓐\": \"A\",\n  \"𝔄\": \"A\",\n  \"𝔸\": \"A\",\n  \"𝕬\": \"A\",\n  \"𝖠\": \"A\",\n  \"𝗔\": \"A\",\n  \"𝘈\": \"A\",\n  \"𝘼\": \"A\",\n  \"𝙰\": \"A\",\n  \"Α\": \"A\",\n  \"𝚨\": \"A\",\n  \"𝛢\": \"A\",\n  \"𝜜\": \"A\",\n  \"𝝖\": \"A\",\n  \"𝞐\": \"A\",\n  \"А\": \"A\",\n  \"Ꭺ\": \"A\",\n  \"ᗅ\": \"A\",\n  \"ꓮ\": \"A\",\n  \"𖽀\": \"A\",\n  \"𐊠\": \"A\",\n  \"⍶\": \"a̲\",\n  \"ǎ\": \"ă\",\n  \"Ǎ\": \"Ă\",\n  \"ȧ\": \"å\",\n  \"Ȧ\": \"Å\",\n  \"ẚ\": \"ả\",\n  \"℀\": \"a/c\",\n  \"℁\": \"a/s\",\n  \"ꜳ\": \"aa\",\n  \"Ꜳ\": \"AA\",\n  \"æ\": \"ae\",\n  \"ӕ\": \"ae\",\n  \"Æ\": \"AE\",\n  \"Ӕ\": \"AE\",\n  \"ꜵ\": \"ao\",\n  \"Ꜵ\": \"AO\",\n  \"🜇\": \"AR\",\n  \"ꜷ\": \"au\",\n  \"Ꜷ\": \"AU\",\n  \"ꜹ\": \"av\",\n  \"ꜻ\": \"av\",\n  \"Ꜹ\": \"AV\",\n  \"Ꜻ\": \"AV\",\n  \"ꜽ\": \"ay\",\n  \"Ꜽ\": \"AY\",\n  \"ꭺ\": \"ᴀ\",\n  \"∀\": \"Ɐ\",\n  \"𝈗\": \"Ɐ\",\n  \"ᗄ\": \"Ɐ\",\n  \"ꓯ\": \"Ɐ\",\n  \"𐐟\": \"Ɒ\",\n  \"𝐛\": \"b\",\n  \"𝑏\": \"b\",\n  \"𝒃\": \"b\",\n  \"𝒷\": \"b\",\n  \"𝓫\": \"b\",\n  \"𝔟\": \"b\",\n  \"𝕓\": \"b\",\n  \"𝖇\": \"b\",\n  \"𝖻\": \"b\",\n  \"𝗯\": \"b\",\n  \"𝘣\": \"b\",\n  \"𝙗\": \"b\",\n  \"𝚋\": \"b\",\n  \"Ƅ\": \"b\",\n  \"Ь\": \"b\",\n  \"Ꮟ\": \"b\",\n  \"ᑲ\": \"b\",\n  \"ᖯ\": \"b\",\n  \"Ｂ\": \"B\",\n  \"ℬ\": \"B\",\n  \"𝐁\": \"B\",\n  \"𝐵\": \"B\",\n  \"𝑩\": \"B\",\n  \"𝓑\": \"B\",\n  \"𝔅\": \"B\",\n  \"𝔹\": \"B\",\n  \"𝕭\": \"B\",\n  \"𝖡\": \"B\",\n  \"𝗕\": \"B\",\n  \"𝘉\": \"B\",\n  \"𝘽\": \"B\",\n  \"𝙱\": \"B\",\n  \"Ꞵ\": \"B\",\n  \"Β\": \"B\",\n  \"𝚩\": \"B\",\n  \"𝛣\": \"B\",\n  \"𝜝\": \"B\",\n  \"𝝗\": \"B\",\n  \"𝞑\": \"B\",\n  \"В\": \"B\",\n  \"Ᏼ\": \"B\",\n  \"ᗷ\": \"B\",\n  \"ꓐ\": \"B\",\n  \"𐊂\": \"B\",\n  \"𐊡\": \"B\",\n  \"𐌁\": \"B\",\n  \"ɓ\": \"b̔\",\n  \"ᑳ\": \"ḃ\",\n  \"ƃ\": \"b̄\",\n  \"Ƃ\": \"b̄\",\n  \"Б\": \"b̄\",\n  \"ƀ\": \"b̵\",\n  \"ҍ\": \"b̵\",\n  \"Ҍ\": \"b̵\",\n  \"ѣ\": \"b̵\",\n  \"Ѣ\": \"b̵\",\n  \"ᑿ\": \"b·\",\n  \"ᒁ\": \"ḃ·\",\n  \"ᒈ\": \"b'\",\n  \"Ы\": \"bl\",\n  \"в\": \"ʙ\",\n  \"ᏼ\": \"ʙ\",\n  \"ｃ\": \"c\",\n  \"ⅽ\": \"c\",\n  \"𝐜\": \"c\",\n  \"𝑐\": \"c\",\n  \"𝒄\": \"c\",\n  \"𝒸\": \"c\",\n  \"𝓬\": \"c\",\n  \"𝔠\": \"c\",\n  \"𝕔\": \"c\",\n  \"𝖈\": \"c\",\n  \"𝖼\": \"c\",\n  \"𝗰\": \"c\",\n  \"𝘤\": \"c\",\n  \"𝙘\": \"c\",\n  \"𝚌\": \"c\",\n  \"ᴄ\": \"c\",\n  \"ϲ\": \"c\",\n  \"ⲥ\": \"c\",\n  \"с\": \"c\",\n  \"ꮯ\": \"c\",\n  \"𐐽\": \"c\",\n  \"ⷭ\": \"ͨ\",\n  \"🝌\": \"C\",\n  \"𑣲\": \"C\",\n  \"𑣩\": \"C\",\n  \"Ｃ\": \"C\",\n  \"Ⅽ\": \"C\",\n  \"ℂ\": \"C\",\n  \"ℭ\": \"C\",\n  \"𝐂\": \"C\",\n  \"𝐶\": \"C\",\n  \"𝑪\": \"C\",\n  \"𝒞\": \"C\",\n  \"𝓒\": \"C\",\n  \"𝕮\": \"C\",\n  \"𝖢\": \"C\",\n  \"𝗖\": \"C\",\n  \"𝘊\": \"C\",\n  \"𝘾\": \"C\",\n  \"𝙲\": \"C\",\n  \"Ϲ\": \"C\",\n  \"Ⲥ\": \"C\",\n  \"С\": \"C\",\n  \"Ꮯ\": \"C\",\n  \"ꓚ\": \"C\",\n  \"𐊢\": \"C\",\n  \"𐌂\": \"C\",\n  \"𐐕\": \"C\",\n  \"𐔜\": \"C\",\n  \"¢\": \"c̸\",\n  \"ȼ\": \"c̸\",\n  \"₡\": \"C⃫\",\n  \"🅮\": \"C⃠\",\n  \"ç\": \"c̦\",\n  \"ҫ\": \"c̦\",\n  \"Ç\": \"C̦\",\n  \"Ҫ\": \"C̦\",\n  \"Ƈ\": \"C'\",\n  \"℅\": \"c/o\",\n  \"℆\": \"c/u\",\n  \"🅭\": \"㏄\\t⃝\",\n  \"⋴\": \"ꞓ\",\n  \"ɛ\": \"ꞓ\",\n  \"ε\": \"ꞓ\",\n  \"ϵ\": \"ꞓ\",\n  \"𝛆\": \"ꞓ\",\n  \"𝛜\": \"ꞓ\",\n  \"𝜀\": \"ꞓ\",\n  \"𝜖\": \"ꞓ\",\n  \"𝜺\": \"ꞓ\",\n  \"𝝐\": \"ꞓ\",\n  \"𝝴\": \"ꞓ\",\n  \"𝞊\": \"ꞓ\",\n  \"𝞮\": \"ꞓ\",\n  \"𝟄\": \"ꞓ\",\n  \"ⲉ\": \"ꞓ\",\n  \"є\": \"ꞓ\",\n  \"ԑ\": \"ꞓ\",\n  \"ꮛ\": \"ꞓ\",\n  \"𑣎\": \"ꞓ\",\n  \"𐐩\": \"ꞓ\",\n  \"€\": \"Ꞓ\",\n  \"Ⲉ\": \"Ꞓ\",\n  \"Є\": \"Ꞓ\",\n  \"⍷\": \"ꞓ̲\",\n  \"ͽ\": \"ꜿ\",\n  \"Ͽ\": \"Ꜿ\",\n  \"ⅾ\": \"d\",\n  \"ⅆ\": \"d\",\n  \"𝐝\": \"d\",\n  \"𝑑\": \"d\",\n  \"𝒅\": \"d\",\n  \"𝒹\": \"d\",\n  \"𝓭\": \"d\",\n  \"𝔡\": \"d\",\n  \"𝕕\": \"d\",\n  \"𝖉\": \"d\",\n  \"𝖽\": \"d\",\n  \"𝗱\": \"d\",\n  \"𝘥\": \"d\",\n  \"𝙙\": \"d\",\n  \"𝚍\": \"d\",\n  \"ԁ\": \"d\",\n  \"Ꮷ\": \"d\",\n  \"ᑯ\": \"d\",\n  \"ꓒ\": \"d\",\n  \"Ⅾ\": \"D\",\n  \"ⅅ\": \"D\",\n  \"𝐃\": \"D\",\n  \"𝐷\": \"D\",\n  \"𝑫\": \"D\",\n  \"𝒟\": \"D\",\n  \"𝓓\": \"D\",\n  \"𝔇\": \"D\",\n  \"𝔻\": \"D\",\n  \"𝕯\": \"D\",\n  \"𝖣\": \"D\",\n  \"𝗗\": \"D\",\n  \"𝘋\": \"D\",\n  \"𝘿\": \"D\",\n  \"𝙳\": \"D\",\n  \"Ꭰ\": \"D\",\n  \"ᗞ\": \"D\",\n  \"ᗪ\": \"D\",\n  \"ꓓ\": \"D\",\n  \"ɗ\": \"d̔\",\n  \"ɖ\": \"d̨\",\n  \"ƌ\": \"d̄\",\n  \"đ\": \"d̵\",\n  \"Đ\": \"D̵\",\n  \"Ð\": \"D̵\",\n  \"Ɖ\": \"D̵\",\n  \"₫\": \"ḏ̵\",\n  \"ꝺ\": \"Ꝺ\",\n  \"ᑻ\": \"d·\",\n  \"ᒇ\": \"d'\",\n  \"ʤ\": \"dȝ\",\n  \"ǳ\": \"dz\",\n  \"ʣ\": \"dz\",\n  \"ǲ\": \"Dz\",\n  \"Ǳ\": \"DZ\",\n  \"ǆ\": \"dž\",\n  \"ǅ\": \"Dž\",\n  \"Ǆ\": \"DŽ\",\n  \"ʥ\": \"dʑ\",\n  \"ꭰ\": \"ᴅ\",\n  \"⸹\": \"ẟ\",\n  \"δ\": \"ẟ\",\n  \"𝛅\": \"ẟ\",\n  \"𝛿\": \"ẟ\",\n  \"𝜹\": \"ẟ\",\n  \"𝝳\": \"ẟ\",\n  \"𝞭\": \"ẟ\",\n  \"ծ\": \"ẟ\",\n  \"ᕷ\": \"ẟ\",\n  \"℮\": \"e\",\n  \"ｅ\": \"e\",\n  \"ℯ\": \"e\",\n  \"ⅇ\": \"e\",\n  \"𝐞\": \"e\",\n  \"𝑒\": \"e\",\n  \"𝒆\": \"e\",\n  \"𝓮\": \"e\",\n  \"𝔢\": \"e\",\n  \"𝕖\": \"e\",\n  \"𝖊\": \"e\",\n  \"𝖾\": \"e\",\n  \"𝗲\": \"e\",\n  \"𝘦\": \"e\",\n  \"𝙚\": \"e\",\n  \"𝚎\": \"e\",\n  \"ꬲ\": \"e\",\n  \"е\": \"e\",\n  \"ҽ\": \"e\",\n  \"ⷷ\": \"ͤ\",\n  \"⋿\": \"E\",\n  \"Ｅ\": \"E\",\n  \"ℰ\": \"E\",\n  \"𝐄\": \"E\",\n  \"𝐸\": \"E\",\n  \"𝑬\": \"E\",\n  \"𝓔\": \"E\",\n  \"𝔈\": \"E\",\n  \"𝔼\": \"E\",\n  \"𝕰\": \"E\",\n  \"𝖤\": \"E\",\n  \"𝗘\": \"E\",\n  \"𝘌\": \"E\",\n  \"𝙀\": \"E\",\n  \"𝙴\": \"E\",\n  \"Ε\": \"E\",\n  \"𝚬\": \"E\",\n  \"𝛦\": \"E\",\n  \"𝜠\": \"E\",\n  \"𝝚\": \"E\",\n  \"𝞔\": \"E\",\n  \"Е\": \"E\",\n  \"ⴹ\": \"E\",\n  \"Ꭼ\": \"E\",\n  \"ꓰ\": \"E\",\n  \"𑢦\": \"E\",\n  \"𑢮\": \"E\",\n  \"𐊆\": \"E\",\n  \"ě\": \"ĕ\",\n  \"Ě\": \"Ĕ\",\n  \"ɇ\": \"e̸\",\n  \"Ɇ\": \"E̸\",\n  \"ҿ\": \"ę\",\n  \"ꭼ\": \"ᴇ\",\n  \"ə\": \"ǝ\",\n  \"ә\": \"ǝ\",\n  \"∃\": \"Ǝ\",\n  \"ⴺ\": \"Ǝ\",\n  \"ꓱ\": \"Ǝ\",\n  \"ɚ\": \"ǝ˞\",\n  \"ᴔ\": \"ǝo\",\n  \"ꭁ\": \"ǝo̸\",\n  \"ꭂ\": \"ǝo̵\",\n  \"Ә\": \"Ə\",\n  \"𝈡\": \"Ɛ\",\n  \"ℇ\": \"Ɛ\",\n  \"Ԑ\": \"Ɛ\",\n  \"Ꮛ\": \"Ɛ\",\n  \"𖼭\": \"Ɛ\",\n  \"𐐁\": \"Ɛ\",\n  \"ᶟ\": \"ᵋ\",\n  \"ᴈ\": \"ɜ\",\n  \"з\": \"ɜ\",\n  \"ҙ\": \"ɜ̦\",\n  \"𐑂\": \"ɞ\",\n  \"ꞝ\": \"ʚ\",\n  \"𐐪\": \"ʚ\",\n  \"𝐟\": \"f\",\n  \"𝑓\": \"f\",\n  \"𝒇\": \"f\",\n  \"𝒻\": \"f\",\n  \"𝓯\": \"f\",\n  \"𝔣\": \"f\",\n  \"𝕗\": \"f\",\n  \"𝖋\": \"f\",\n  \"𝖿\": \"f\",\n  \"𝗳\": \"f\",\n  \"𝘧\": \"f\",\n  \"𝙛\": \"f\",\n  \"𝚏\": \"f\",\n  \"ꬵ\": \"f\",\n  \"ꞙ\": \"f\",\n  \"ſ\": \"f\",\n  \"ẝ\": \"f\",\n  \"ք\": \"f\",\n  \"𝈓\": \"F\",\n  \"ℱ\": \"F\",\n  \"𝐅\": \"F\",\n  \"𝐹\": \"F\",\n  \"𝑭\": \"F\",\n  \"𝓕\": \"F\",\n  \"𝔉\": \"F\",\n  \"𝔽\": \"F\",\n  \"𝕱\": \"F\",\n  \"𝖥\": \"F\",\n  \"𝗙\": \"F\",\n  \"𝘍\": \"F\",\n  \"𝙁\": \"F\",\n  \"𝙵\": \"F\",\n  \"Ꞙ\": \"F\",\n  \"Ϝ\": \"F\",\n  \"𝟊\": \"F\",\n  \"ᖴ\": \"F\",\n  \"ꓝ\": \"F\",\n  \"𑣂\": \"F\",\n  \"𑢢\": \"F\",\n  \"𐊇\": \"F\",\n  \"𐊥\": \"F\",\n  \"𐔥\": \"F\",\n  \"ƒ\": \"f̦\",\n  \"Ƒ\": \"F̦\",\n  \"ᵮ\": \"f̴\",\n  \"℻\": \"FAX\",\n  \"ﬀ\": \"ff\",\n  \"ﬃ\": \"ffi\",\n  \"ﬄ\": \"ffl\",\n  \"ﬁ\": \"fi\",\n  \"ﬂ\": \"fl\",\n  \"ʩ\": \"fŋ\",\n  \"ᖵ\": \"Ⅎ\",\n  \"ꓞ\": \"Ⅎ\",\n  \"𝈰\": \"ꟻ\",\n  \"ᖷ\": \"ꟻ\",\n  \"ｇ\": \"g\",\n  \"ℊ\": \"g\",\n  \"𝐠\": \"g\",\n  \"𝑔\": \"g\",\n  \"𝒈\": \"g\",\n  \"𝓰\": \"g\",\n  \"𝔤\": \"g\",\n  \"𝕘\": \"g\",\n  \"𝖌\": \"g\",\n  \"𝗀\": \"g\",\n  \"𝗴\": \"g\",\n  \"𝘨\": \"g\",\n  \"𝙜\": \"g\",\n  \"𝚐\": \"g\",\n  \"ɡ\": \"g\",\n  \"ᶃ\": \"g\",\n  \"ƍ\": \"g\",\n  \"ց\": \"g\",\n  \"𝐆\": \"G\",\n  \"𝐺\": \"G\",\n  \"𝑮\": \"G\",\n  \"𝒢\": \"G\",\n  \"𝓖\": \"G\",\n  \"𝔊\": \"G\",\n  \"𝔾\": \"G\",\n  \"𝕲\": \"G\",\n  \"𝖦\": \"G\",\n  \"𝗚\": \"G\",\n  \"𝘎\": \"G\",\n  \"𝙂\": \"G\",\n  \"𝙶\": \"G\",\n  \"Ԍ\": \"G\",\n  \"Ꮐ\": \"G\",\n  \"Ᏻ\": \"G\",\n  \"ꓖ\": \"G\",\n  \"ᶢ\": \"ᵍ\",\n  \"ɠ\": \"g̔\",\n  \"ǧ\": \"ğ\",\n  \"Ǧ\": \"Ğ\",\n  \"ǵ\": \"ģ\",\n  \"ǥ\": \"g̵\",\n  \"Ǥ\": \"G̵\",\n  \"Ɠ\": \"G'\",\n  \"ԍ\": \"ɢ\",\n  \"ꮐ\": \"ɢ\",\n  \"ᏻ\": \"ɢ\",\n  \"ｈ\": \"h\",\n  \"ℎ\": \"h\",\n  \"𝐡\": \"h\",\n  \"𝒉\": \"h\",\n  \"𝒽\": \"h\",\n  \"𝓱\": \"h\",\n  \"𝔥\": \"h\",\n  \"𝕙\": \"h\",\n  \"𝖍\": \"h\",\n  \"𝗁\": \"h\",\n  \"𝗵\": \"h\",\n  \"𝘩\": \"h\",\n  \"𝙝\": \"h\",\n  \"𝚑\": \"h\",\n  \"һ\": \"h\",\n  \"հ\": \"h\",\n  \"Ꮒ\": \"h\",\n  \"Ｈ\": \"H\",\n  \"ℋ\": \"H\",\n  \"ℌ\": \"H\",\n  \"ℍ\": \"H\",\n  \"𝐇\": \"H\",\n  \"𝐻\": \"H\",\n  \"𝑯\": \"H\",\n  \"𝓗\": \"H\",\n  \"𝕳\": \"H\",\n  \"𝖧\": \"H\",\n  \"𝗛\": \"H\",\n  \"𝘏\": \"H\",\n  \"𝙃\": \"H\",\n  \"𝙷\": \"H\",\n  \"Η\": \"H\",\n  \"𝚮\": \"H\",\n  \"𝛨\": \"H\",\n  \"𝜢\": \"H\",\n  \"𝝜\": \"H\",\n  \"𝞖\": \"H\",\n  \"Ⲏ\": \"H\",\n  \"Н\": \"H\",\n  \"Ꮋ\": \"H\",\n  \"ᕼ\": \"H\",\n  \"ꓧ\": \"H\",\n  \"𐋏\": \"H\",\n  \"ᵸ\": \"ᴴ\",\n  \"ɦ\": \"h̔\",\n  \"ꚕ\": \"h̔\",\n  \"Ᏺ\": \"h̔\",\n  \"Ⱨ\": \"H̩\",\n  \"Ң\": \"H̩\",\n  \"ħ\": \"h̵\",\n  \"ℏ\": \"h̵\",\n  \"ћ\": \"h̵\",\n  \"Ħ\": \"H̵\",\n  \"Ӊ\": \"H̦\",\n  \"Ӈ\": \"H̦\",\n  \"н\": \"ʜ\",\n  \"ꮋ\": \"ʜ\",\n  \"ң\": \"ʜ̩\",\n  \"ӊ\": \"ʜ̦\",\n  \"ӈ\": \"ʜ̦\",\n  \"Ԋ\": \"Ƕ\",\n  \"ꮀ\": \"ⱶ\",\n  \"Ͱ\": \"Ⱶ\",\n  \"Ꭸ\": \"Ⱶ\",\n  \"Ꮀ\": \"Ⱶ\",\n  \"ꚱ\": \"Ⱶ\",\n  \"ꞕ\": \"ꜧ\",\n  \"˛\": \"i\",\n  \"⍳\": \"i\",\n  \"ｉ\": \"i\",\n  \"ⅰ\": \"i\",\n  \"ℹ\": \"i\",\n  \"ⅈ\": \"i\",\n  \"𝐢\": \"i\",\n  \"𝑖\": \"i\",\n  \"𝒊\": \"i\",\n  \"𝒾\": \"i\",\n  \"𝓲\": \"i\",\n  \"𝔦\": \"i\",\n  \"𝕚\": \"i\",\n  \"𝖎\": \"i\",\n  \"𝗂\": \"i\",\n  \"𝗶\": \"i\",\n  \"𝘪\": \"i\",\n  \"𝙞\": \"i\",\n  \"𝚒\": \"i\",\n  \"ı\": \"i\",\n  \"𝚤\": \"i\",\n  \"ɪ\": \"i\",\n  \"ɩ\": \"i\",\n  \"ι\": \"i\",\n  \"ι\": \"i\",\n  \"ͺ\": \"i\",\n  \"𝛊\": \"i\",\n  \"𝜄\": \"i\",\n  \"𝜾\": \"i\",\n  \"𝝸\": \"i\",\n  \"𝞲\": \"i\",\n  \"і\": \"i\",\n  \"ꙇ\": \"i\",\n  \"ӏ\": \"i\",\n  \"ꭵ\": \"i\",\n  \"Ꭵ\": \"i\",\n  \"𑣃\": \"i\",\n  \"ⓛ\": \"Ⓘ\",\n  \"⍸\": \"i̲\",\n  \"ǐ\": \"ĭ\",\n  \"Ǐ\": \"Ĭ\",\n  \"ɨ\": \"i̵\",\n  \"ᵻ\": \"i̵\",\n  \"ᵼ\": \"i̵\",\n  \"ⅱ\": \"ii\",\n  \"ⅲ\": \"iii\",\n  \"ĳ\": \"ij\",\n  \"ⅳ\": \"iv\",\n  \"ⅸ\": \"ix\",\n  \"ｊ\": \"j\",\n  \"ⅉ\": \"j\",\n  \"𝐣\": \"j\",\n  \"𝑗\": \"j\",\n  \"𝒋\": \"j\",\n  \"𝒿\": \"j\",\n  \"𝓳\": \"j\",\n  \"𝔧\": \"j\",\n  \"𝕛\": \"j\",\n  \"𝖏\": \"j\",\n  \"𝗃\": \"j\",\n  \"𝗷\": \"j\",\n  \"𝘫\": \"j\",\n  \"𝙟\": \"j\",\n  \"𝚓\": \"j\",\n  \"ϳ\": \"j\",\n  \"ј\": \"j\",\n  \"Ｊ\": \"J\",\n  \"𝐉\": \"J\",\n  \"𝐽\": \"J\",\n  \"𝑱\": \"J\",\n  \"𝒥\": \"J\",\n  \"𝓙\": \"J\",\n  \"𝔍\": \"J\",\n  \"𝕁\": \"J\",\n  \"𝕵\": \"J\",\n  \"𝖩\": \"J\",\n  \"𝗝\": \"J\",\n  \"𝘑\": \"J\",\n  \"𝙅\": \"J\",\n  \"𝙹\": \"J\",\n  \"Ʝ\": \"J\",\n  \"Ϳ\": \"J\",\n  \"Ј\": \"J\",\n  \"Ꭻ\": \"J\",\n  \"ᒍ\": \"J\",\n  \"ꓙ\": \"J\",\n  \"ɉ\": \"j̵\",\n  \"Ɉ\": \"J̵\",\n  \"ᒙ\": \"J·\",\n  \"𝚥\": \"ȷ\",\n  \"յ\": \"ȷ\",\n  \"ꭻ\": \"ᴊ\",\n  \"𝐤\": \"k\",\n  \"𝑘\": \"k\",\n  \"𝒌\": \"k\",\n  \"𝓀\": \"k\",\n  \"𝓴\": \"k\",\n  \"𝔨\": \"k\",\n  \"𝕜\": \"k\",\n  \"𝖐\": \"k\",\n  \"𝗄\": \"k\",\n  \"𝗸\": \"k\",\n  \"𝘬\": \"k\",\n  \"𝙠\": \"k\",\n  \"𝚔\": \"k\",\n  \"K\": \"K\",\n  \"Ｋ\": \"K\",\n  \"𝐊\": \"K\",\n  \"𝐾\": \"K\",\n  \"𝑲\": \"K\",\n  \"𝒦\": \"K\",\n  \"𝓚\": \"K\",\n  \"𝔎\": \"K\",\n  \"𝕂\": \"K\",\n  \"𝕶\": \"K\",\n  \"𝖪\": \"K\",\n  \"𝗞\": \"K\",\n  \"𝘒\": \"K\",\n  \"𝙆\": \"K\",\n  \"𝙺\": \"K\",\n  \"Κ\": \"K\",\n  \"𝚱\": \"K\",\n  \"𝛫\": \"K\",\n  \"𝜥\": \"K\",\n  \"𝝟\": \"K\",\n  \"𝞙\": \"K\",\n  \"Ⲕ\": \"K\",\n  \"К\": \"K\",\n  \"Ꮶ\": \"K\",\n  \"ᛕ\": \"K\",\n  \"ꓗ\": \"K\",\n  \"𐔘\": \"K\",\n  \"ƙ\": \"k̔\",\n  \"Ⱪ\": \"K̩\",\n  \"Қ\": \"K̩\",\n  \"₭\": \"K̵\",\n  \"Ꝁ\": \"K̵\",\n  \"Ҟ\": \"K̵\",\n  \"Ƙ\": \"K'\",\n  \"׀\": \"l\",\n  \"|\": \"l\",\n  \"∣\": \"l\",\n  \"⏽\": \"l\",\n  \"￨\": \"l\",\n  \"١\": \"l\",\n  \"۱\": \"l\",\n  \"𐌠\": \"l\",\n  \"𞣇\": \"l\",\n  \"𝟏\": \"l\",\n  \"𝟙\": \"l\",\n  \"𝟣\": \"l\",\n  \"𝟭\": \"l\",\n  \"𝟷\": \"l\",\n  \"🯱\": \"l\",\n  \"I\": \"l\",\n  \"Ｉ\": \"l\",\n  \"Ⅰ\": \"l\",\n  \"ℐ\": \"l\",\n  \"ℑ\": \"l\",\n  \"𝐈\": \"l\",\n  \"𝐼\": \"l\",\n  \"𝑰\": \"l\",\n  \"𝓘\": \"l\",\n  \"𝕀\": \"l\",\n  \"𝕴\": \"l\",\n  \"𝖨\": \"l\",\n  \"𝗜\": \"l\",\n  \"𝘐\": \"l\",\n  \"𝙄\": \"l\",\n  \"𝙸\": \"l\",\n  \"Ɩ\": \"l\",\n  \"ｌ\": \"l\",\n  \"ⅼ\": \"l\",\n  \"ℓ\": \"l\",\n  \"𝐥\": \"l\",\n  \"𝑙\": \"l\",\n  \"𝒍\": \"l\",\n  \"𝓁\": \"l\",\n  \"𝓵\": \"l\",\n  \"𝔩\": \"l\",\n  \"𝕝\": \"l\",\n  \"𝖑\": \"l\",\n  \"𝗅\": \"l\",\n  \"𝗹\": \"l\",\n  \"𝘭\": \"l\",\n  \"𝙡\": \"l\",\n  \"𝚕\": \"l\",\n  \"ǀ\": \"l\",\n  \"Ι\": \"l\",\n  \"𝚰\": \"l\",\n  \"𝛪\": \"l\",\n  \"𝜤\": \"l\",\n  \"𝝞\": \"l\",\n  \"𝞘\": \"l\",\n  \"Ⲓ\": \"l\",\n  \"І\": \"l\",\n  \"Ӏ\": \"l\",\n  \"ו\": \"l\",\n  \"ן\": \"l\",\n  \"ا\": \"l\",\n  \"𞸀\": \"l\",\n  \"𞺀\": \"l\",\n  \"ﺎ\": \"l\",\n  \"ﺍ\": \"l\",\n  \"ߊ\": \"l\",\n  \"ⵏ\": \"l\",\n  \"ᛁ\": \"l\",\n  \"ꓲ\": \"l\",\n  \"𖼨\": \"l\",\n  \"𐊊\": \"l\",\n  \"𐌉\": \"l\",\n  \"𝈪\": \"L\",\n  \"Ⅼ\": \"L\",\n  \"ℒ\": \"L\",\n  \"𝐋\": \"L\",\n  \"𝐿\": \"L\",\n  \"𝑳\": \"L\",\n  \"𝓛\": \"L\",\n  \"𝔏\": \"L\",\n  \"𝕃\": \"L\",\n  \"𝕷\": \"L\",\n  \"𝖫\": \"L\",\n  \"𝗟\": \"L\",\n  \"𝘓\": \"L\",\n  \"𝙇\": \"L\",\n  \"𝙻\": \"L\",\n  \"Ⳑ\": \"L\",\n  \"Ꮮ\": \"L\",\n  \"ᒪ\": \"L\",\n  \"ꓡ\": \"L\",\n  \"𖼖\": \"L\",\n  \"𑢣\": \"L\",\n  \"𑢲\": \"L\",\n  \"𐐛\": \"L\",\n  \"𐔦\": \"L\",\n  \"ﴼ\": \"l̋\",\n  \"ﴽ\": \"l̋\",\n  \"ł\": \"l̸\",\n  \"Ł\": \"L̸\",\n  \"ɭ\": \"l̨\",\n  \"Ɨ\": \"l̵\",\n  \"ƚ\": \"l̵\",\n  \"ɫ\": \"l̴\",\n  \"إ\": \"lٕ\",\n  \"ﺈ\": \"lٕ\",\n  \"ﺇ\": \"lٕ\",\n  \"ٳ\": \"lٕ\",\n  \"ŀ\": \"l·\",\n  \"Ŀ\": \"l·\",\n  \"ᒷ\": \"l·\",\n  \"🄂\": \"l,\",\n  \"⒈\": \"l.\",\n  \"ױ\": \"l'\",\n  \"⒓\": \"l2.\",\n  \"㏫\": \"l2日\",\n  \"㋋\": \"l2月\",\n  \"㍤\": \"l2点\",\n  \"⒔\": \"l3.\",\n  \"㏬\": \"l3日\",\n  \"㍥\": \"l3点\",\n  \"⒕\": \"l4.\",\n  \"㏭\": \"l4日\",\n  \"㍦\": \"l4点\",\n  \"⒖\": \"l5.\",\n  \"㏮\": \"l5日\",\n  \"㍧\": \"l5点\",\n  \"⒗\": \"l6.\",\n  \"㏯\": \"l6日\",\n  \"㍨\": \"l6点\",\n  \"⒘\": \"l7.\",\n  \"㏰\": \"l7日\",\n  \"㍩\": \"l7点\",\n  \"⒙\": \"l8.\",\n  \"㏱\": \"l8日\",\n  \"㍪\": \"l8点\",\n  \"⒚\": \"l9.\",\n  \"㏲\": \"l9日\",\n  \"㍫\": \"l9点\",\n  \"ǉ\": \"lj\",\n  \"Ĳ\": \"lJ\",\n  \"ǈ\": \"Lj\",\n  \"Ǉ\": \"LJ\",\n  \"‖\": \"ll\",\n  \"∥\": \"ll\",\n  \"Ⅱ\": \"ll\",\n  \"ǁ\": \"ll\",\n  \"װ\": \"ll\",\n  \"𐆙\": \"l̵l̵\",\n  \"⒒\": \"ll.\",\n  \"Ⅲ\": \"lll\",\n  \"𐆘\": \"l̵l̵S̵\",\n  \"㏪\": \"ll日\",\n  \"㋊\": \"ll月\",\n  \"㍣\": \"ll点\",\n  \"Ю\": \"lO\",\n  \"⒑\": \"lO.\",\n  \"㏩\": \"lO日\",\n  \"㋉\": \"lO月\",\n  \"㍢\": \"lO点\",\n  \"ʪ\": \"ls\",\n  \"₶\": \"lt\",\n  \"Ⅳ\": \"lV\",\n  \"Ⅸ\": \"lX\",\n  \"ɮ\": \"lȝ\",\n  \"ʫ\": \"lz\",\n  \"أ\": \"lٴ\",\n  \"ﺄ\": \"lٴ\",\n  \"ﺃ\": \"lٴ\",\n  \"ٲ\": \"lٴ\",\n  \"ٵ\": \"lٴ\",\n  \"ﷳ\": \"lكبر\",\n  \"ﷲ\": \"lللّٰo\",\n  \"㏠\": \"l日\",\n  \"㋀\": \"l月\",\n  \"㍙\": \"l点\",\n  \"ⳑ\": \"ʟ\",\n  \"ꮮ\": \"ʟ\",\n  \"𐑃\": \"ʟ\",\n  \"Ｍ\": \"M\",\n  \"Ⅿ\": \"M\",\n  \"ℳ\": \"M\",\n  \"𝐌\": \"M\",\n  \"𝑀\": \"M\",\n  \"𝑴\": \"M\",\n  \"𝓜\": \"M\",\n  \"𝔐\": \"M\",\n  \"𝕄\": \"M\",\n  \"𝕸\": \"M\",\n  \"𝖬\": \"M\",\n  \"𝗠\": \"M\",\n  \"𝘔\": \"M\",\n  \"𝙈\": \"M\",\n  \"𝙼\": \"M\",\n  \"Μ\": \"M\",\n  \"𝚳\": \"M\",\n  \"𝛭\": \"M\",\n  \"𝜧\": \"M\",\n  \"𝝡\": \"M\",\n  \"𝞛\": \"M\",\n  \"Ϻ\": \"M\",\n  \"Ⲙ\": \"M\",\n  \"М\": \"M\",\n  \"Ꮇ\": \"M\",\n  \"ᗰ\": \"M\",\n  \"ᛖ\": \"M\",\n  \"ꓟ\": \"M\",\n  \"𐊰\": \"M\",\n  \"𐌑\": \"M\",\n  \"Ӎ\": \"M̦\",\n  \"🝫\": \"MB\",\n  \"ⷨ\": \"ᷟ\",\n  \"𝐧\": \"n\",\n  \"𝑛\": \"n\",\n  \"𝒏\": \"n\",\n  \"𝓃\": \"n\",\n  \"𝓷\": \"n\",\n  \"𝔫\": \"n\",\n  \"𝕟\": \"n\",\n  \"𝖓\": \"n\",\n  \"𝗇\": \"n\",\n  \"𝗻\": \"n\",\n  \"𝘯\": \"n\",\n  \"𝙣\": \"n\",\n  \"𝚗\": \"n\",\n  \"ո\": \"n\",\n  \"ռ\": \"n\",\n  \"Ｎ\": \"N\",\n  \"ℕ\": \"N\",\n  \"𝐍\": \"N\",\n  \"𝑁\": \"N\",\n  \"𝑵\": \"N\",\n  \"𝒩\": \"N\",\n  \"𝓝\": \"N\",\n  \"𝔑\": \"N\",\n  \"𝕹\": \"N\",\n  \"𝖭\": \"N\",\n  \"𝗡\": \"N\",\n  \"𝘕\": \"N\",\n  \"𝙉\": \"N\",\n  \"𝙽\": \"N\",\n  \"Ν\": \"N\",\n  \"𝚴\": \"N\",\n  \"𝛮\": \"N\",\n  \"𝜨\": \"N\",\n  \"𝝢\": \"N\",\n  \"𝞜\": \"N\",\n  \"Ⲛ\": \"N\",\n  \"ꓠ\": \"N\",\n  \"𐔓\": \"N\",\n  \"𐆎\": \"N̊\",\n  \"ɳ\": \"n̨\",\n  \"ƞ\": \"n̩\",\n  \"η\": \"n̩\",\n  \"𝛈\": \"n̩\",\n  \"𝜂\": \"n̩\",\n  \"𝜼\": \"n̩\",\n  \"𝝶\": \"n̩\",\n  \"𝞰\": \"n̩\",\n  \"Ɲ\": \"N̦\",\n  \"ᵰ\": \"n̴\",\n  \"ǌ\": \"nj\",\n  \"ǋ\": \"Nj\",\n  \"Ǌ\": \"NJ\",\n  \"№\": \"No\",\n  \"ͷ\": \"ᴎ\",\n  \"и\": \"ᴎ\",\n  \"𐑍\": \"ᴎ\",\n  \"ņ\": \"ɲ\",\n  \"ం\": \"o\",\n  \"ಂ\": \"o\",\n  \"ം\": \"o\",\n  \"ං\": \"o\",\n  \"०\": \"o\",\n  \"੦\": \"o\",\n  \"૦\": \"o\",\n  \"௦\": \"o\",\n  \"౦\": \"o\",\n  \"೦\": \"o\",\n  \"൦\": \"o\",\n  \"๐\": \"o\",\n  \"໐\": \"o\",\n  \"၀\": \"o\",\n  \"٥\": \"o\",\n  \"۵\": \"o\",\n  \"ｏ\": \"o\",\n  \"ℴ\": \"o\",\n  \"𝐨\": \"o\",\n  \"𝑜\": \"o\",\n  \"𝒐\": \"o\",\n  \"𝓸\": \"o\",\n  \"𝔬\": \"o\",\n  \"𝕠\": \"o\",\n  \"𝖔\": \"o\",\n  \"𝗈\": \"o\",\n  \"𝗼\": \"o\",\n  \"𝘰\": \"o\",\n  \"𝙤\": \"o\",\n  \"𝚘\": \"o\",\n  \"ᴏ\": \"o\",\n  \"ᴑ\": \"o\",\n  \"ꬽ\": \"o\",\n  \"ο\": \"o\",\n  \"𝛐\": \"o\",\n  \"𝜊\": \"o\",\n  \"𝝄\": \"o\",\n  \"𝝾\": \"o\",\n  \"𝞸\": \"o\",\n  \"σ\": \"o\",\n  \"𝛔\": \"o\",\n  \"𝜎\": \"o\",\n  \"𝝈\": \"o\",\n  \"𝞂\": \"o\",\n  \"𝞼\": \"o\",\n  \"ⲟ\": \"o\",\n  \"о\": \"o\",\n  \"ჿ\": \"o\",\n  \"օ\": \"o\",\n  \"ס\": \"o\",\n  \"ه\": \"o\",\n  \"𞸤\": \"o\",\n  \"𞹤\": \"o\",\n  \"𞺄\": \"o\",\n  \"ﻫ\": \"o\",\n  \"ﻬ\": \"o\",\n  \"ﻪ\": \"o\",\n  \"ﻩ\": \"o\",\n  \"ھ\": \"o\",\n  \"ﮬ\": \"o\",\n  \"ﮭ\": \"o\",\n  \"ﮫ\": \"o\",\n  \"ﮪ\": \"o\",\n  \"ہ\": \"o\",\n  \"ﮨ\": \"o\",\n  \"ﮩ\": \"o\",\n  \"ﮧ\": \"o\",\n  \"ﮦ\": \"o\",\n  \"ە\": \"o\",\n  \"ഠ\": \"o\",\n  \"ဝ\": \"o\",\n  \"𐓪\": \"o\",\n  \"𑣈\": \"o\",\n  \"𑣗\": \"o\",\n  \"𐐬\": \"o\",\n  \"߀\": \"O\",\n  \"০\": \"O\",\n  \"୦\": \"O\",\n  \"〇\": \"O\",\n  \"𑓐\": \"O\",\n  \"𑣠\": \"O\",\n  \"𝟎\": \"O\",\n  \"𝟘\": \"O\",\n  \"𝟢\": \"O\",\n  \"𝟬\": \"O\",\n  \"𝟶\": \"O\",\n  \"🯰\": \"O\",\n  \"Ｏ\": \"O\",\n  \"𝐎\": \"O\",\n  \"𝑂\": \"O\",\n  \"𝑶\": \"O\",\n  \"𝒪\": \"O\",\n  \"𝓞\": \"O\",\n  \"𝔒\": \"O\",\n  \"𝕆\": \"O\",\n  \"𝕺\": \"O\",\n  \"𝖮\": \"O\",\n  \"𝗢\": \"O\",\n  \"𝘖\": \"O\",\n  \"𝙊\": \"O\",\n  \"𝙾\": \"O\",\n  \"Ο\": \"O\",\n  \"𝚶\": \"O\",\n  \"𝛰\": \"O\",\n  \"𝜪\": \"O\",\n  \"𝝤\": \"O\",\n  \"𝞞\": \"O\",\n  \"Ⲟ\": \"O\",\n  \"О\": \"O\",\n  \"Օ\": \"O\",\n  \"ⵔ\": \"O\",\n  \"ዐ\": \"O\",\n  \"ଠ\": \"O\",\n  \"𐓂\": \"O\",\n  \"ꓳ\": \"O\",\n  \"𑢵\": \"O\",\n  \"𐊒\": \"O\",\n  \"𐊫\": \"O\",\n  \"𐐄\": \"O\",\n  \"𐔖\": \"O\",\n  \"⁰\": \"º\",\n  \"ᵒ\": \"º\",\n  \"ǒ\": \"ŏ\",\n  \"Ǒ\": \"Ŏ\",\n  \"ۿ\": \"ô\",\n  \"Ő\": \"Ö\",\n  \"ø\": \"o̸\",\n  \"ꬾ\": \"o̸\",\n  \"Ø\": \"O̸\",\n  \"ⵁ\": \"O̸\",\n  \"Ǿ\": \"Ó̸\",\n  \"ɵ\": \"o̵\",\n  \"ꝋ\": \"o̵\",\n  \"ө\": \"o̵\",\n  \"ѳ\": \"o̵\",\n  \"ꮎ\": \"o̵\",\n  \"ꮻ\": \"o̵\",\n  \"⊖\": \"O̵\",\n  \"⊝\": \"O̵\",\n  \"⍬\": \"O̵\",\n  \"𝈚\": \"O̵\",\n  \"🜔\": \"O̵\",\n  \"Ɵ\": \"O̵\",\n  \"Ꝋ\": \"O̵\",\n  \"θ\": \"O̵\",\n  \"ϑ\": \"O̵\",\n  \"𝛉\": \"O̵\",\n  \"𝛝\": \"O̵\",\n  \"𝜃\": \"O̵\",\n  \"𝜗\": \"O̵\",\n  \"𝜽\": \"O̵\",\n  \"𝝑\": \"O̵\",\n  \"𝝷\": \"O̵\",\n  \"𝞋\": \"O̵\",\n  \"𝞱\": \"O̵\",\n  \"𝟅\": \"O̵\",\n  \"Θ\": \"O̵\",\n  \"ϴ\": \"O̵\",\n  \"𝚯\": \"O̵\",\n  \"𝚹\": \"O̵\",\n  \"𝛩\": \"O̵\",\n  \"𝛳\": \"O̵\",\n  \"𝜣\": \"O̵\",\n  \"𝜭\": \"O̵\",\n  \"𝝝\": \"O̵\",\n  \"𝝧\": \"O̵\",\n  \"𝞗\": \"O̵\",\n  \"𝞡\": \"O̵\",\n  \"Ө\": \"O̵\",\n  \"Ѳ\": \"O̵\",\n  \"ⴱ\": \"O̵\",\n  \"Ꮎ\": \"O̵\",\n  \"Ꮻ\": \"O̵\",\n  \"ꭴ\": \"ơ\",\n  \"ﳙ\": \"oٰ\",\n  \"🄁\": \"O,\",\n  \"🄀\": \"O.\",\n  \"ơ\": \"o'\",\n  \"Ơ\": \"O'\",\n  \"Ꭴ\": \"O'\",\n  \"%\": \"º/₀\",\n  \"٪\": \"º/₀\",\n  \"⁒\": \"º/₀\",\n  \"‰\": \"º/₀₀\",\n  \"؉\": \"º/₀₀\",\n  \"‱\": \"º/₀₀₀\",\n  \"؊\": \"º/₀₀₀\",\n  \"œ\": \"oe\",\n  \"Œ\": \"OE\",\n  \"ɶ\": \"oᴇ\",\n  \"∞\": \"oo\",\n  \"ꝏ\": \"oo\",\n  \"ꚙ\": \"oo\",\n  \"Ꝏ\": \"OO\",\n  \"Ꚙ\": \"OO\",\n  \"ﳗ\": \"oج\",\n  \"ﱑ\": \"oج\",\n  \"ﳘ\": \"oم\",\n  \"ﱒ\": \"oم\",\n  \"ﶓ\": \"oمج\",\n  \"ﶔ\": \"oمم\",\n  \"ﱓ\": \"oى\",\n  \"ﱔ\": \"oى\",\n  \"ൟ\": \"oരo\",\n  \"တ\": \"oာ\",\n  \"㍘\": \"O点\",\n  \"ↄ\": \"ɔ\",\n  \"ᴐ\": \"ɔ\",\n  \"ͻ\": \"ɔ\",\n  \"𐑋\": \"ɔ\",\n  \"Ↄ\": \"Ɔ\",\n  \"Ͻ\": \"Ɔ\",\n  \"ꓛ\": \"Ɔ\",\n  \"𐐣\": \"Ɔ\",\n  \"ꬿ\": \"ɔ̸\",\n  \"ꭢ\": \"ɔe\",\n  \"𐐿\": \"ɷ\",\n  \"⍴\": \"p\",\n  \"ｐ\": \"p\",\n  \"𝐩\": \"p\",\n  \"𝑝\": \"p\",\n  \"𝒑\": \"p\",\n  \"𝓅\": \"p\",\n  \"𝓹\": \"p\",\n  \"𝔭\": \"p\",\n  \"𝕡\": \"p\",\n  \"𝖕\": \"p\",\n  \"𝗉\": \"p\",\n  \"𝗽\": \"p\",\n  \"𝘱\": \"p\",\n  \"𝙥\": \"p\",\n  \"𝚙\": \"p\",\n  \"ρ\": \"p\",\n  \"ϱ\": \"p\",\n  \"𝛒\": \"p\",\n  \"𝛠\": \"p\",\n  \"𝜌\": \"p\",\n  \"𝜚\": \"p\",\n  \"𝝆\": \"p\",\n  \"𝝔\": \"p\",\n  \"𝞀\": \"p\",\n  \"𝞎\": \"p\",\n  \"𝞺\": \"p\",\n  \"𝟈\": \"p\",\n  \"ⲣ\": \"p\",\n  \"р\": \"p\",\n  \"Ｐ\": \"P\",\n  \"ℙ\": \"P\",\n  \"𝐏\": \"P\",\n  \"𝑃\": \"P\",\n  \"𝑷\": \"P\",\n  \"𝒫\": \"P\",\n  \"𝓟\": \"P\",\n  \"𝔓\": \"P\",\n  \"𝕻\": \"P\",\n  \"𝖯\": \"P\",\n  \"𝗣\": \"P\",\n  \"𝘗\": \"P\",\n  \"𝙋\": \"P\",\n  \"𝙿\": \"P\",\n  \"Ρ\": \"P\",\n  \"𝚸\": \"P\",\n  \"𝛲\": \"P\",\n  \"𝜬\": \"P\",\n  \"𝝦\": \"P\",\n  \"𝞠\": \"P\",\n  \"Ⲣ\": \"P\",\n  \"Р\": \"P\",\n  \"Ꮲ\": \"P\",\n  \"ᑭ\": \"P\",\n  \"ꓑ\": \"P\",\n  \"𐊕\": \"P\",\n  \"ƥ\": \"p̔\",\n  \"ᵽ\": \"p̵\",\n  \"ᑷ\": \"p·\",\n  \"ᒆ\": \"P'\",\n  \"ᴩ\": \"ᴘ\",\n  \"ꮲ\": \"ᴘ\",\n  \"φ\": \"ɸ\",\n  \"ϕ\": \"ɸ\",\n  \"𝛗\": \"ɸ\",\n  \"𝛟\": \"ɸ\",\n  \"𝜑\": \"ɸ\",\n  \"𝜙\": \"ɸ\",\n  \"𝝋\": \"ɸ\",\n  \"𝝓\": \"ɸ\",\n  \"𝞅\": \"ɸ\",\n  \"𝞍\": \"ɸ\",\n  \"𝞿\": \"ɸ\",\n  \"𝟇\": \"ɸ\",\n  \"ⲫ\": \"ɸ\",\n  \"ф\": \"ɸ\",\n  \"𝐪\": \"q\",\n  \"𝑞\": \"q\",\n  \"𝒒\": \"q\",\n  \"𝓆\": \"q\",\n  \"𝓺\": \"q\",\n  \"𝔮\": \"q\",\n  \"𝕢\": \"q\",\n  \"𝖖\": \"q\",\n  \"𝗊\": \"q\",\n  \"𝗾\": \"q\",\n  \"𝘲\": \"q\",\n  \"𝙦\": \"q\",\n  \"𝚚\": \"q\",\n  \"ԛ\": \"q\",\n  \"գ\": \"q\",\n  \"զ\": \"q\",\n  \"ℚ\": \"Q\",\n  \"𝐐\": \"Q\",\n  \"𝑄\": \"Q\",\n  \"𝑸\": \"Q\",\n  \"𝒬\": \"Q\",\n  \"𝓠\": \"Q\",\n  \"𝔔\": \"Q\",\n  \"𝕼\": \"Q\",\n  \"𝖰\": \"Q\",\n  \"𝗤\": \"Q\",\n  \"𝘘\": \"Q\",\n  \"𝙌\": \"Q\",\n  \"𝚀\": \"Q\",\n  \"ⵕ\": \"Q\",\n  \"ʠ\": \"q̔\",\n  \"🜀\": \"QE\",\n  \"ᶐ\": \"ɋ\",\n  \"ᴋ\": \"ĸ\",\n  \"κ\": \"ĸ\",\n  \"ϰ\": \"ĸ\",\n  \"𝛋\": \"ĸ\",\n  \"𝛞\": \"ĸ\",\n  \"𝜅\": \"ĸ\",\n  \"𝜘\": \"ĸ\",\n  \"𝜿\": \"ĸ\",\n  \"𝝒\": \"ĸ\",\n  \"𝝹\": \"ĸ\",\n  \"𝞌\": \"ĸ\",\n  \"𝞳\": \"ĸ\",\n  \"𝟆\": \"ĸ\",\n  \"ⲕ\": \"ĸ\",\n  \"к\": \"ĸ\",\n  \"ꮶ\": \"ĸ\",\n  \"қ\": \"ĸ̩\",\n  \"ҟ\": \"ĸ̵\",\n  \"𝐫\": \"r\",\n  \"𝑟\": \"r\",\n  \"𝒓\": \"r\",\n  \"𝓇\": \"r\",\n  \"𝓻\": \"r\",\n  \"𝔯\": \"r\",\n  \"𝕣\": \"r\",\n  \"𝖗\": \"r\",\n  \"𝗋\": \"r\",\n  \"𝗿\": \"r\",\n  \"𝘳\": \"r\",\n  \"𝙧\": \"r\",\n  \"𝚛\": \"r\",\n  \"ꭇ\": \"r\",\n  \"ꭈ\": \"r\",\n  \"ᴦ\": \"r\",\n  \"ⲅ\": \"r\",\n  \"г\": \"r\",\n  \"ꮁ\": \"r\",\n  \"𝈖\": \"R\",\n  \"ℛ\": \"R\",\n  \"ℜ\": \"R\",\n  \"ℝ\": \"R\",\n  \"𝐑\": \"R\",\n  \"𝑅\": \"R\",\n  \"𝑹\": \"R\",\n  \"𝓡\": \"R\",\n  \"𝕽\": \"R\",\n  \"𝖱\": \"R\",\n  \"𝗥\": \"R\",\n  \"𝘙\": \"R\",\n  \"𝙍\": \"R\",\n  \"𝚁\": \"R\",\n  \"Ʀ\": \"R\",\n  \"Ꭱ\": \"R\",\n  \"Ꮢ\": \"R\",\n  \"𐒴\": \"R\",\n  \"ᖇ\": \"R\",\n  \"ꓣ\": \"R\",\n  \"𖼵\": \"R\",\n  \"ɽ\": \"r̨\",\n  \"ɼ\": \"r̩\",\n  \"ɍ\": \"r̵\",\n  \"ғ\": \"r̵\",\n  \"ᵲ\": \"r̴\",\n  \"ґ\": \"r'\",\n  \"𑣣\": \"rn\",\n  \"m\": \"rn\",\n  \"ⅿ\": \"rn\",\n  \"𝐦\": \"rn\",\n  \"𝑚\": \"rn\",\n  \"𝒎\": \"rn\",\n  \"𝓂\": \"rn\",\n  \"𝓶\": \"rn\",\n  \"𝔪\": \"rn\",\n  \"𝕞\": \"rn\",\n  \"𝖒\": \"rn\",\n  \"𝗆\": \"rn\",\n  \"𝗺\": \"rn\",\n  \"𝘮\": \"rn\",\n  \"𝙢\": \"rn\",\n  \"𝚖\": \"rn\",\n  \"𑜀\": \"rn\",\n  \"₥\": \"rn̸\",\n  \"ɱ\": \"rn̦\",\n  \"ᵯ\": \"rn̴\",\n  \"₨\": \"Rs\",\n  \"ꭱ\": \"ʀ\",\n  \"ꮢ\": \"ʀ\",\n  \"я\": \"ᴙ\",\n  \"ᵳ\": \"ɾ̴\",\n  \"℩\": \"ɿ\",\n  \"ｓ\": \"s\",\n  \"𝐬\": \"s\",\n  \"𝑠\": \"s\",\n  \"𝒔\": \"s\",\n  \"𝓈\": \"s\",\n  \"𝓼\": \"s\",\n  \"𝔰\": \"s\",\n  \"𝕤\": \"s\",\n  \"𝖘\": \"s\",\n  \"𝗌\": \"s\",\n  \"𝘀\": \"s\",\n  \"𝘴\": \"s\",\n  \"𝙨\": \"s\",\n  \"𝚜\": \"s\",\n  \"ꜱ\": \"s\",\n  \"ƽ\": \"s\",\n  \"ѕ\": \"s\",\n  \"ꮪ\": \"s\",\n  \"𑣁\": \"s\",\n  \"𐑈\": \"s\",\n  \"Ｓ\": \"S\",\n  \"𝐒\": \"S\",\n  \"𝑆\": \"S\",\n  \"𝑺\": \"S\",\n  \"𝒮\": \"S\",\n  \"𝓢\": \"S\",\n  \"𝔖\": \"S\",\n  \"𝕊\": \"S\",\n  \"𝕾\": \"S\",\n  \"𝖲\": \"S\",\n  \"𝗦\": \"S\",\n  \"𝘚\": \"S\",\n  \"𝙎\": \"S\",\n  \"𝚂\": \"S\",\n  \"Ѕ\": \"S\",\n  \"Տ\": \"S\",\n  \"Ꮥ\": \"S\",\n  \"Ꮪ\": \"S\",\n  \"ꓢ\": \"S\",\n  \"𖼺\": \"S\",\n  \"𐊖\": \"S\",\n  \"𐐠\": \"S\",\n  \"ʂ\": \"s̨\",\n  \"ᵴ\": \"s̴\",\n  \"ꞵ\": \"ß\",\n  \"β\": \"ß\",\n  \"ϐ\": \"ß\",\n  \"𝛃\": \"ß\",\n  \"𝛽\": \"ß\",\n  \"𝜷\": \"ß\",\n  \"𝝱\": \"ß\",\n  \"𝞫\": \"ß\",\n  \"Ᏸ\": \"ß\",\n  \"🝜\": \"sss\",\n  \"ﬆ\": \"st\",\n  \"∫\": \"ʃ\",\n  \"ꭍ\": \"ʃ\",\n  \"∑\": \"Ʃ\",\n  \"⅀\": \"Ʃ\",\n  \"Σ\": \"Ʃ\",\n  \"𝚺\": \"Ʃ\",\n  \"𝛴\": \"Ʃ\",\n  \"𝜮\": \"Ʃ\",\n  \"𝝨\": \"Ʃ\",\n  \"𝞢\": \"Ʃ\",\n  \"ⵉ\": \"Ʃ\",\n  \"∬\": \"ʃʃ\",\n  \"∭\": \"ʃʃʃ\",\n  \"⨌\": \"ʃʃʃʃ\",\n  \"𝐭\": \"t\",\n  \"𝑡\": \"t\",\n  \"𝒕\": \"t\",\n  \"𝓉\": \"t\",\n  \"𝓽\": \"t\",\n  \"𝔱\": \"t\",\n  \"𝕥\": \"t\",\n  \"𝖙\": \"t\",\n  \"𝗍\": \"t\",\n  \"𝘁\": \"t\",\n  \"𝘵\": \"t\",\n  \"𝙩\": \"t\",\n  \"𝚝\": \"t\",\n  \"⊤\": \"T\",\n  \"⟙\": \"T\",\n  \"🝨\": \"T\",\n  \"Ｔ\": \"T\",\n  \"𝐓\": \"T\",\n  \"𝑇\": \"T\",\n  \"𝑻\": \"T\",\n  \"𝒯\": \"T\",\n  \"𝓣\": \"T\",\n  \"𝔗\": \"T\",\n  \"𝕋\": \"T\",\n  \"𝕿\": \"T\",\n  \"𝖳\": \"T\",\n  \"𝗧\": \"T\",\n  \"𝘛\": \"T\",\n  \"𝙏\": \"T\",\n  \"𝚃\": \"T\",\n  \"Τ\": \"T\",\n  \"𝚻\": \"T\",\n  \"𝛵\": \"T\",\n  \"𝜯\": \"T\",\n  \"𝝩\": \"T\",\n  \"𝞣\": \"T\",\n  \"Ⲧ\": \"T\",\n  \"Т\": \"T\",\n  \"Ꭲ\": \"T\",\n  \"ꓔ\": \"T\",\n  \"𖼊\": \"T\",\n  \"𑢼\": \"T\",\n  \"𐊗\": \"T\",\n  \"𐊱\": \"T\",\n  \"𐌕\": \"T\",\n  \"ƭ\": \"t̔\",\n  \"⍡\": \"T̈\",\n  \"Ⱦ\": \"T̸\",\n  \"Ț\": \"Ţ\",\n  \"Ʈ\": \"T̨\",\n  \"Ҭ\": \"T̩\",\n  \"₮\": \"T⃫\",\n  \"ŧ\": \"t̵\",\n  \"Ŧ\": \"T̵\",\n  \"ᵵ\": \"t̴\",\n  \"Ⴀ\": \"Ꞇ\",\n  \"Ꜩ\": \"T3\",\n  \"ʨ\": \"tɕ\",\n  \"℡\": \"TEL\",\n  \"ꝷ\": \"tf\",\n  \"ʦ\": \"ts\",\n  \"ʧ\": \"tʃ\",\n  \"ꜩ\": \"tȝ\",\n  \"τ\": \"ᴛ\",\n  \"𝛕\": \"ᴛ\",\n  \"𝜏\": \"ᴛ\",\n  \"𝝉\": \"ᴛ\",\n  \"𝞃\": \"ᴛ\",\n  \"𝞽\": \"ᴛ\",\n  \"т\": \"ᴛ\",\n  \"ꭲ\": \"ᴛ\",\n  \"ҭ\": \"ᴛ̩\",\n  \"ţ\": \"ƫ\",\n  \"ț\": \"ƫ\",\n  \"Ꮏ\": \"ƫ\",\n  \"𝐮\": \"u\",\n  \"𝑢\": \"u\",\n  \"𝒖\": \"u\",\n  \"𝓊\": \"u\",\n  \"𝓾\": \"u\",\n  \"𝔲\": \"u\",\n  \"𝕦\": \"u\",\n  \"𝖚\": \"u\",\n  \"𝗎\": \"u\",\n  \"𝘂\": \"u\",\n  \"𝘶\": \"u\",\n  \"𝙪\": \"u\",\n  \"𝚞\": \"u\",\n  \"ꞟ\": \"u\",\n  \"ᴜ\": \"u\",\n  \"ꭎ\": \"u\",\n  \"ꭒ\": \"u\",\n  \"ʋ\": \"u\",\n  \"υ\": \"u\",\n  \"𝛖\": \"u\",\n  \"𝜐\": \"u\",\n  \"𝝊\": \"u\",\n  \"𝞄\": \"u\",\n  \"𝞾\": \"u\",\n  \"ս\": \"u\",\n  \"𐓶\": \"u\",\n  \"𑣘\": \"u\",\n  \"∪\": \"U\",\n  \"⋃\": \"U\",\n  \"𝐔\": \"U\",\n  \"𝑈\": \"U\",\n  \"𝑼\": \"U\",\n  \"𝒰\": \"U\",\n  \"𝓤\": \"U\",\n  \"𝔘\": \"U\",\n  \"𝕌\": \"U\",\n  \"𝖀\": \"U\",\n  \"𝖴\": \"U\",\n  \"𝗨\": \"U\",\n  \"𝘜\": \"U\",\n  \"𝙐\": \"U\",\n  \"𝚄\": \"U\",\n  \"Ս\": \"U\",\n  \"ሀ\": \"U\",\n  \"𐓎\": \"U\",\n  \"ᑌ\": \"U\",\n  \"ꓴ\": \"U\",\n  \"𖽂\": \"U\",\n  \"𑢸\": \"U\",\n  \"ǔ\": \"ŭ\",\n  \"Ǔ\": \"Ŭ\",\n  \"ᵾ\": \"u̵\",\n  \"ꮜ\": \"u̵\",\n  \"Ʉ\": \"U̵\",\n  \"Ꮜ\": \"U̵\",\n  \"ᑘ\": \"U·\",\n  \"ᑧ\": \"U'\",\n  \"ᵫ\": \"ue\",\n  \"ꭣ\": \"uo\",\n  \"ṃ\": \"ꭑ\",\n  \"պ\": \"ɰ\",\n  \"ሣ\": \"ɰ\",\n  \"℧\": \"Ʊ\",\n  \"ᘮ\": \"Ʊ\",\n  \"ᘴ\": \"Ʊ\",\n  \"ᵿ\": \"ʊ̵\",\n  \"∨\": \"v\",\n  \"⋁\": \"v\",\n  \"ｖ\": \"v\",\n  \"ⅴ\": \"v\",\n  \"𝐯\": \"v\",\n  \"𝑣\": \"v\",\n  \"𝒗\": \"v\",\n  \"𝓋\": \"v\",\n  \"𝓿\": \"v\",\n  \"𝔳\": \"v\",\n  \"𝕧\": \"v\",\n  \"𝖛\": \"v\",\n  \"𝗏\": \"v\",\n  \"𝘃\": \"v\",\n  \"𝘷\": \"v\",\n  \"𝙫\": \"v\",\n  \"𝚟\": \"v\",\n  \"ᴠ\": \"v\",\n  \"ν\": \"v\",\n  \"𝛎\": \"v\",\n  \"𝜈\": \"v\",\n  \"𝝂\": \"v\",\n  \"𝝼\": \"v\",\n  \"𝞶\": \"v\",\n  \"ѵ\": \"v\",\n  \"ט\": \"v\",\n  \"𑜆\": \"v\",\n  \"ꮩ\": \"v\",\n  \"𑣀\": \"v\",\n  \"𝈍\": \"V\",\n  \"٧\": \"V\",\n  \"۷\": \"V\",\n  \"Ⅴ\": \"V\",\n  \"𝐕\": \"V\",\n  \"𝑉\": \"V\",\n  \"𝑽\": \"V\",\n  \"𝒱\": \"V\",\n  \"𝓥\": \"V\",\n  \"𝔙\": \"V\",\n  \"𝕍\": \"V\",\n  \"𝖁\": \"V\",\n  \"𝖵\": \"V\",\n  \"𝗩\": \"V\",\n  \"𝘝\": \"V\",\n  \"𝙑\": \"V\",\n  \"𝚅\": \"V\",\n  \"Ѵ\": \"V\",\n  \"ⴸ\": \"V\",\n  \"Ꮩ\": \"V\",\n  \"ᐯ\": \"V\",\n  \"ꛟ\": \"V\",\n  \"ꓦ\": \"V\",\n  \"𖼈\": \"V\",\n  \"𑢠\": \"V\",\n  \"𐔝\": \"V\",\n  \"𐆗\": \"V̵\",\n  \"ᐻ\": \"V·\",\n  \"🝬\": \"VB\",\n  \"ⅵ\": \"vi\",\n  \"ⅶ\": \"vii\",\n  \"ⅷ\": \"viii\",\n  \"Ⅵ\": \"Vl\",\n  \"Ⅶ\": \"Vll\",\n  \"Ⅷ\": \"Vlll\",\n  \"🜈\": \"Vᷤ\",\n  \"ᴧ\": \"ʌ\",\n  \"𐓘\": \"ʌ\",\n  \"٨\": \"Ʌ\",\n  \"۸\": \"Ʌ\",\n  \"Λ\": \"Ʌ\",\n  \"𝚲\": \"Ʌ\",\n  \"𝛬\": \"Ʌ\",\n  \"𝜦\": \"Ʌ\",\n  \"𝝠\": \"Ʌ\",\n  \"𝞚\": \"Ʌ\",\n  \"Л\": \"Ʌ\",\n  \"ⴷ\": \"Ʌ\",\n  \"𐒰\": \"Ʌ\",\n  \"ᐱ\": \"Ʌ\",\n  \"ꛎ\": \"Ʌ\",\n  \"ꓥ\": \"Ʌ\",\n  \"𖼽\": \"Ʌ\",\n  \"𐊍\": \"Ʌ\",\n  \"Ӆ\": \"Ʌ̦\",\n  \"ᐽ\": \"Ʌ·\",\n  \"ɯ\": \"w\",\n  \"𝐰\": \"w\",\n  \"𝑤\": \"w\",\n  \"𝒘\": \"w\",\n  \"𝓌\": \"w\",\n  \"𝔀\": \"w\",\n  \"𝔴\": \"w\",\n  \"𝕨\": \"w\",\n  \"𝖜\": \"w\",\n  \"𝗐\": \"w\",\n  \"𝘄\": \"w\",\n  \"𝘸\": \"w\",\n  \"𝙬\": \"w\",\n  \"𝚠\": \"w\",\n  \"ᴡ\": \"w\",\n  \"ѡ\": \"w\",\n  \"ԝ\": \"w\",\n  \"ա\": \"w\",\n  \"𑜊\": \"w\",\n  \"𑜎\": \"w\",\n  \"𑜏\": \"w\",\n  \"ꮃ\": \"w\",\n  \"𑣯\": \"W\",\n  \"𑣦\": \"W\",\n  \"𝐖\": \"W\",\n  \"𝑊\": \"W\",\n  \"𝑾\": \"W\",\n  \"𝒲\": \"W\",\n  \"𝓦\": \"W\",\n  \"𝔚\": \"W\",\n  \"𝕎\": \"W\",\n  \"𝖂\": \"W\",\n  \"𝖶\": \"W\",\n  \"𝗪\": \"W\",\n  \"𝘞\": \"W\",\n  \"𝙒\": \"W\",\n  \"𝚆\": \"W\",\n  \"Ԝ\": \"W\",\n  \"Ꮃ\": \"W\",\n  \"Ꮤ\": \"W\",\n  \"ꓪ\": \"W\",\n  \"ѽ\": \"w҆҇\",\n  \"𑓅\": \"ẇ\",\n  \"₩\": \"W̵\",\n  \"ꝡ\": \"w̦\",\n  \"ᴍ\": \"ʍ\",\n  \"м\": \"ʍ\",\n  \"ꮇ\": \"ʍ\",\n  \"ӎ\": \"ʍ̦\",\n  \"᙮\": \"x\",\n  \"×\": \"x\",\n  \"⤫\": \"x\",\n  \"⤬\": \"x\",\n  \"⨯\": \"x\",\n  \"ｘ\": \"x\",\n  \"ⅹ\": \"x\",\n  \"𝐱\": \"x\",\n  \"𝑥\": \"x\",\n  \"𝒙\": \"x\",\n  \"𝓍\": \"x\",\n  \"𝔁\": \"x\",\n  \"𝔵\": \"x\",\n  \"𝕩\": \"x\",\n  \"𝖝\": \"x\",\n  \"𝗑\": \"x\",\n  \"𝘅\": \"x\",\n  \"𝘹\": \"x\",\n  \"𝙭\": \"x\",\n  \"𝚡\": \"x\",\n  \"х\": \"x\",\n  \"ᕁ\": \"x\",\n  \"ᕽ\": \"x\",\n  \"ⷯ\": \"ͯ\",\n  \"᙭\": \"X\",\n  \"╳\": \"X\",\n  \"𐌢\": \"X\",\n  \"𑣬\": \"X\",\n  \"Ｘ\": \"X\",\n  \"Ⅹ\": \"X\",\n  \"𝐗\": \"X\",\n  \"𝑋\": \"X\",\n  \"𝑿\": \"X\",\n  \"𝒳\": \"X\",\n  \"𝓧\": \"X\",\n  \"𝔛\": \"X\",\n  \"𝕏\": \"X\",\n  \"𝖃\": \"X\",\n  \"𝖷\": \"X\",\n  \"𝗫\": \"X\",\n  \"𝘟\": \"X\",\n  \"𝙓\": \"X\",\n  \"𝚇\": \"X\",\n  \"Ꭓ\": \"X\",\n  \"Χ\": \"X\",\n  \"𝚾\": \"X\",\n  \"𝛸\": \"X\",\n  \"𝜲\": \"X\",\n  \"𝝬\": \"X\",\n  \"𝞦\": \"X\",\n  \"Ⲭ\": \"X\",\n  \"Х\": \"X\",\n  \"ⵝ\": \"X\",\n  \"ᚷ\": \"X\",\n  \"ꓫ\": \"X\",\n  \"𐊐\": \"X\",\n  \"𐊴\": \"X\",\n  \"𐌗\": \"X\",\n  \"𐔧\": \"X\",\n  \"⨰\": \"ẋ\",\n  \"Ҳ\": \"X̩\",\n  \"𐆖\": \"X̵\",\n  \"ⅺ\": \"xi\",\n  \"ⅻ\": \"xii\",\n  \"Ⅺ\": \"Xl\",\n  \"Ⅻ\": \"Xll\",\n  \"ɣ\": \"y\",\n  \"ᶌ\": \"y\",\n  \"ｙ\": \"y\",\n  \"𝐲\": \"y\",\n  \"𝑦\": \"y\",\n  \"𝒚\": \"y\",\n  \"𝓎\": \"y\",\n  \"𝔂\": \"y\",\n  \"𝔶\": \"y\",\n  \"𝕪\": \"y\",\n  \"𝖞\": \"y\",\n  \"𝗒\": \"y\",\n  \"𝘆\": \"y\",\n  \"𝘺\": \"y\",\n  \"𝙮\": \"y\",\n  \"𝚢\": \"y\",\n  \"ʏ\": \"y\",\n  \"ỿ\": \"y\",\n  \"ꭚ\": \"y\",\n  \"γ\": \"y\",\n  \"ℽ\": \"y\",\n  \"𝛄\": \"y\",\n  \"𝛾\": \"y\",\n  \"𝜸\": \"y\",\n  \"𝝲\": \"y\",\n  \"𝞬\": \"y\",\n  \"у\": \"y\",\n  \"ү\": \"y\",\n  \"ყ\": \"y\",\n  \"𑣜\": \"y\",\n  \"Ｙ\": \"Y\",\n  \"𝐘\": \"Y\",\n  \"𝑌\": \"Y\",\n  \"𝒀\": \"Y\",\n  \"𝒴\": \"Y\",\n  \"𝓨\": \"Y\",\n  \"𝔜\": \"Y\",\n  \"𝕐\": \"Y\",\n  \"𝖄\": \"Y\",\n  \"𝖸\": \"Y\",\n  \"𝗬\": \"Y\",\n  \"𝘠\": \"Y\",\n  \"𝙔\": \"Y\",\n  \"𝚈\": \"Y\",\n  \"Υ\": \"Y\",\n  \"ϒ\": \"Y\",\n  \"𝚼\": \"Y\",\n  \"𝛶\": \"Y\",\n  \"𝜰\": \"Y\",\n  \"𝝪\": \"Y\",\n  \"𝞤\": \"Y\",\n  \"Ⲩ\": \"Y\",\n  \"У\": \"Y\",\n  \"Ү\": \"Y\",\n  \"Ꭹ\": \"Y\",\n  \"Ꮍ\": \"Y\",\n  \"ꓬ\": \"Y\",\n  \"𖽃\": \"Y\",\n  \"𑢤\": \"Y\",\n  \"𐊲\": \"Y\",\n  \"ƴ\": \"y̔\",\n  \"ɏ\": \"y̵\",\n  \"ұ\": \"y̵\",\n  \"¥\": \"Y̵\",\n  \"Ɏ\": \"Y̵\",\n  \"Ұ\": \"Y̵\",\n  \"ʒ\": \"ȝ\",\n  \"ꝫ\": \"ȝ\",\n  \"ⳍ\": \"ȝ\",\n  \"ӡ\": \"ȝ\",\n  \"ჳ\": \"ȝ\",\n  \"𝐳\": \"z\",\n  \"𝑧\": \"z\",\n  \"𝒛\": \"z\",\n  \"𝓏\": \"z\",\n  \"𝔃\": \"z\",\n  \"𝔷\": \"z\",\n  \"𝕫\": \"z\",\n  \"𝖟\": \"z\",\n  \"𝗓\": \"z\",\n  \"𝘇\": \"z\",\n  \"𝘻\": \"z\",\n  \"𝙯\": \"z\",\n  \"𝚣\": \"z\",\n  \"ᴢ\": \"z\",\n  \"ꮓ\": \"z\",\n  \"𑣄\": \"z\",\n  \"𐋵\": \"Z\",\n  \"𑣥\": \"Z\",\n  \"Ｚ\": \"Z\",\n  \"ℤ\": \"Z\",\n  \"ℨ\": \"Z\",\n  \"𝐙\": \"Z\",\n  \"𝑍\": \"Z\",\n  \"𝒁\": \"Z\",\n  \"𝒵\": \"Z\",\n  \"𝓩\": \"Z\",\n  \"𝖅\": \"Z\",\n  \"𝖹\": \"Z\",\n  \"𝗭\": \"Z\",\n  \"𝘡\": \"Z\",\n  \"𝙕\": \"Z\",\n  \"𝚉\": \"Z\",\n  \"Ζ\": \"Z\",\n  \"𝚭\": \"Z\",\n  \"𝛧\": \"Z\",\n  \"𝜡\": \"Z\",\n  \"𝝛\": \"Z\",\n  \"𝞕\": \"Z\",\n  \"Ꮓ\": \"Z\",\n  \"ꓜ\": \"Z\",\n  \"𑢩\": \"Z\",\n  \"ʐ\": \"z̨\",\n  \"ƶ\": \"z̵\",\n  \"Ƶ\": \"Z̵\",\n  \"ȥ\": \"z̦\",\n  \"Ȥ\": \"Z̦\",\n  \"ᵶ\": \"z̴\",\n  \"ƿ\": \"þ\",\n  \"ϸ\": \"þ\",\n  \"Ϸ\": \"Þ\",\n  \"𐓄\": \"Þ\",\n  \"⁹\": \"ꝰ\",\n  \"ᴤ\": \"ƨ\",\n  \"ϩ\": \"ƨ\",\n  \"ꙅ\": \"ƨ\",\n  \"ь\": \"ƅ\",\n  \"ꮟ\": \"ƅ\",\n  \"ы\": \"ƅi\",\n  \"ꭾ\": \"ɂ\",\n  \"ˤ\": \"ˁ\",\n  \"ꛍ\": \"ʡ\",\n  \"⊙\": \"ʘ\",\n  \"☉\": \"ʘ\",\n  \"⨀\": \"ʘ\",\n  \"Ꙩ\": \"ʘ\",\n  \"ⵙ\": \"ʘ\",\n  \"𐓃\": \"ʘ\",\n  \"ℾ\": \"Γ\",\n  \"𝚪\": \"Γ\",\n  \"𝛤\": \"Γ\",\n  \"𝜞\": \"Γ\",\n  \"𝝘\": \"Γ\",\n  \"𝞒\": \"Γ\",\n  \"Ⲅ\": \"Γ\",\n  \"Г\": \"Γ\",\n  \"Ꮁ\": \"Γ\",\n  \"ᒥ\": \"Γ\",\n  \"𖼇\": \"Γ\",\n  \"Ғ\": \"Γ̵\",\n  \"ᒯ\": \"Γ·\",\n  \"Ґ\": \"Γ'\",\n  \"∆\": \"Δ\",\n  \"△\": \"Δ\",\n  \"🜂\": \"Δ\",\n  \"𝚫\": \"Δ\",\n  \"𝛥\": \"Δ\",\n  \"𝜟\": \"Δ\",\n  \"𝝙\": \"Δ\",\n  \"𝞓\": \"Δ\",\n  \"Ⲇ\": \"Δ\",\n  \"ⵠ\": \"Δ\",\n  \"ᐃ\": \"Δ\",\n  \"𖼚\": \"Δ\",\n  \"𐊅\": \"Δ\",\n  \"𐊣\": \"Δ\",\n  \"⍙\": \"Δ̲\",\n  \"ᐏ\": \"Δ·\",\n  \"ᐬ\": \"Δᐠ\",\n  \"𝟋\": \"ϝ\",\n  \"𝛇\": \"ζ\",\n  \"𝜁\": \"ζ\",\n  \"𝜻\": \"ζ\",\n  \"𝝵\": \"ζ\",\n  \"𝞯\": \"ζ\",\n  \"ⳤ\": \"ϗ\",\n  \"𝛌\": \"λ\",\n  \"𝜆\": \"λ\",\n  \"𝝀\": \"λ\",\n  \"𝝺\": \"λ\",\n  \"𝞴\": \"λ\",\n  \"Ⲗ\": \"λ\",\n  \"𐓛\": \"λ\",\n  \"µ\": \"μ\",\n  \"𝛍\": \"μ\",\n  \"𝜇\": \"μ\",\n  \"𝝁\": \"μ\",\n  \"𝝻\": \"μ\",\n  \"𝞵\": \"μ\",\n  \"𝛏\": \"ξ\",\n  \"𝜉\": \"ξ\",\n  \"𝝃\": \"ξ\",\n  \"𝝽\": \"ξ\",\n  \"𝞷\": \"ξ\",\n  \"𝚵\": \"Ξ\",\n  \"𝛯\": \"Ξ\",\n  \"𝜩\": \"Ξ\",\n  \"𝝣\": \"Ξ\",\n  \"𝞝\": \"Ξ\",\n  \"ϖ\": \"π\",\n  \"ℼ\": \"π\",\n  \"𝛑\": \"π\",\n  \"𝛡\": \"π\",\n  \"𝜋\": \"π\",\n  \"𝜛\": \"π\",\n  \"𝝅\": \"π\",\n  \"𝝕\": \"π\",\n  \"𝝿\": \"π\",\n  \"𝞏\": \"π\",\n  \"𝞹\": \"π\",\n  \"𝟉\": \"π\",\n  \"ᴨ\": \"π\",\n  \"п\": \"π\",\n  \"∏\": \"Π\",\n  \"ℿ\": \"Π\",\n  \"𝚷\": \"Π\",\n  \"𝛱\": \"Π\",\n  \"𝜫\": \"Π\",\n  \"𝝥\": \"Π\",\n  \"𝞟\": \"Π\",\n  \"Ⲡ\": \"Π\",\n  \"П\": \"Π\",\n  \"ꛛ\": \"Π\",\n  \"𐊭\": \"Ϙ\",\n  \"𐌒\": \"Ϙ\",\n  \"ϛ\": \"ς\",\n  \"𝛓\": \"ς\",\n  \"𝜍\": \"ς\",\n  \"𝝇\": \"ς\",\n  \"𝞁\": \"ς\",\n  \"𝞻\": \"ς\",\n  \"𝚽\": \"Φ\",\n  \"𝛷\": \"Φ\",\n  \"𝜱\": \"Φ\",\n  \"𝝫\": \"Φ\",\n  \"𝞥\": \"Φ\",\n  \"Ⲫ\": \"Φ\",\n  \"Ф\": \"Φ\",\n  \"Փ\": \"Φ\",\n  \"ቀ\": \"Φ\",\n  \"ᛰ\": \"Φ\",\n  \"𐊳\": \"Φ\",\n  \"ꭓ\": \"χ\",\n  \"ꭕ\": \"χ\",\n  \"𝛘\": \"χ\",\n  \"𝜒\": \"χ\",\n  \"𝝌\": \"χ\",\n  \"𝞆\": \"χ\",\n  \"𝟀\": \"χ\",\n  \"ⲭ\": \"χ\",\n  \"𝛙\": \"ψ\",\n  \"𝜓\": \"ψ\",\n  \"𝝍\": \"ψ\",\n  \"𝞇\": \"ψ\",\n  \"𝟁\": \"ψ\",\n  \"ѱ\": \"ψ\",\n  \"𐓹\": \"ψ\",\n  \"𝚿\": \"Ψ\",\n  \"𝛹\": \"Ψ\",\n  \"𝜳\": \"Ψ\",\n  \"𝝭\": \"Ψ\",\n  \"𝞧\": \"Ψ\",\n  \"Ⲯ\": \"Ψ\",\n  \"Ѱ\": \"Ψ\",\n  \"𐓑\": \"Ψ\",\n  \"ᛘ\": \"Ψ\",\n  \"𐊵\": \"Ψ\",\n  \"⍵\": \"ω\",\n  \"ꞷ\": \"ω\",\n  \"𝛚\": \"ω\",\n  \"𝜔\": \"ω\",\n  \"𝝎\": \"ω\",\n  \"𝞈\": \"ω\",\n  \"𝟂\": \"ω\",\n  \"ⲱ\": \"ω\",\n  \"ꙍ\": \"ω\",\n  \"Ω\": \"Ω\",\n  \"𝛀\": \"Ω\",\n  \"𝛺\": \"Ω\",\n  \"𝜴\": \"Ω\",\n  \"𝝮\": \"Ω\",\n  \"𝞨\": \"Ω\",\n  \"ᘯ\": \"Ω\",\n  \"ᘵ\": \"Ω\",\n  \"𐊶\": \"Ω\",\n  \"⍹\": \"ω̲\",\n  \"ώ\": \"ῴ\",\n  \"☰\": \"Ⲷ\",\n  \"Ⳝ\": \"Ϭ\",\n  \"җ\": \"ж̩\",\n  \"Җ\": \"Ж̩\",\n  \"𝈋\": \"И\",\n  \"Ͷ\": \"И\",\n  \"ꚡ\": \"И\",\n  \"𐐥\": \"И\",\n  \"Й\": \"Ѝ\",\n  \"Ҋ\": \"Ѝ̦\",\n  \"ѝ\": \"й\",\n  \"ҋ\": \"й̦\",\n  \"𐒼\": \"Ӄ\",\n  \"ᴫ\": \"л\",\n  \"ӆ\": \"л̦\",\n  \"ꭠ\": \"љ\",\n  \"𐓫\": \"ꙩ\",\n  \"ᷮ\": \"ⷬ\",\n  \"𐓍\": \"Ћ\",\n  \"𝈂\": \"Ӿ\",\n  \"𝈢\": \"Ѡ\",\n  \"Ꮗ\": \"Ѡ\",\n  \"ᗯ\": \"Ѡ\",\n  \"Ѽ\": \"Ѡ҆҇\",\n  \"ᣭ\": \"Ѡ·\",\n  \"Ꞷ\": \"Ꙍ\",\n  \"ӌ\": \"ҷ\",\n  \"Ӌ\": \"Ҷ\",\n  \"Ҿ\": \"Ҽ̨\",\n  \"ⲽ\": \"ш\",\n  \"Ⲽ\": \"Ш\",\n  \"Ꙑ\": \"Ъl\",\n  \"℈\": \"Э\",\n  \"🜁\": \"Ꙙ\",\n  \"𖼜\": \"Ꙙ\",\n  \"ꦒ\": \"ⰿ\",\n  \"և\": \"եւ\",\n  \"ኔ\": \"ձ\",\n  \"ﬔ\": \"մե\",\n  \"ﬕ\": \"մի\",\n  \"ﬗ\": \"մխ\",\n  \"ﬓ\": \"մն\",\n  \"∩\": \"Ո\",\n  \"⋂\": \"Ո\",\n  \"𝉅\": \"Ո\",\n  \"በ\": \"Ո\",\n  \"ᑎ\": \"Ո\",\n  \"ꓵ\": \"Ո\",\n  \"ᑚ\": \"Ո·\",\n  \"ᑨ\": \"Ո'\",\n  \"ﬖ\": \"վն\",\n  \"₽\": \"Ք\",\n  \"˓\": \"ՙ\",\n  \"ʿ\": \"ՙ\",\n  \"ℵ\": \"א\",\n  \"ﬡ\": \"א\",\n  \"אָ\": \"אַ\",\n  \"אּ\": \"אַ\",\n  \"ﭏ\": \"אל\",\n  \"ℶ\": \"ב\",\n  \"ℷ\": \"ג\",\n  \"ℸ\": \"ד\",\n  \"ﬢ\": \"ד\",\n  \"ﬣ\": \"ה\",\n  \"יּ\": \"יִ\",\n  \"ﬤ\": \"כ\",\n  \"ﬥ\": \"ל\",\n  \"ﬦ\": \"ם\",\n  \"ﬠ\": \"ע\",\n  \"ﬧ\": \"ר\",\n  \"שׂ\": \"שׁ\",\n  \"שּ\": \"שׁ\",\n  \"שּׂ\": \"שּׁ\",\n  \"ﬨ\": \"ת\",\n  \"ﺀ\": \"ء\",\n  \"۽\": \"ء͈\",\n  \"ﺂ\": \"آ\",\n  \"ﺁ\": \"آ\",\n  \"ﭑ\": \"ٱ\",\n  \"ﭐ\": \"ٱ\",\n  \"𞸁\": \"ب\",\n  \"𞸡\": \"ب\",\n  \"𞹡\": \"ب\",\n  \"𞺁\": \"ب\",\n  \"𞺡\": \"ب\",\n  \"ﺑ\": \"ب\",\n  \"ﺒ\": \"ب\",\n  \"ﺐ\": \"ب\",\n  \"ﺏ\": \"ب\",\n  \"ݑ\": \"بۛ\",\n  \"ࢶ\": \"بۢ\",\n  \"ࢡ\": \"بٔ\",\n  \"ﲠ\": \"بo\",\n  \"ﳢ\": \"بo\",\n  \"ﲜ\": \"بج\",\n  \"ﰅ\": \"بج\",\n  \"ﲝ\": \"بح\",\n  \"ﰆ\": \"بح\",\n  \"ﷂ\": \"بحى\",\n  \"ﲞ\": \"بخ\",\n  \"ﰇ\": \"بخ\",\n  \"ﳒ\": \"بخ\",\n  \"ﱋ\": \"بخ\",\n  \"ﶞ\": \"بخى\",\n  \"ﱪ\": \"بر\",\n  \"ﱫ\": \"بز\",\n  \"ﲟ\": \"بم\",\n  \"ﳡ\": \"بم\",\n  \"ﱬ\": \"بم\",\n  \"ﰈ\": \"بم\",\n  \"ﱭ\": \"بن\",\n  \"ﱮ\": \"بى\",\n  \"ﰉ\": \"بى\",\n  \"ﱯ\": \"بى\",\n  \"ﰊ\": \"بى\",\n  \"ﭔ\": \"ٻ\",\n  \"ﭕ\": \"ٻ\",\n  \"ﭓ\": \"ٻ\",\n  \"ﭒ\": \"ٻ\",\n  \"ې\": \"ٻ\",\n  \"ﯦ\": \"ٻ\",\n  \"ﯧ\": \"ٻ\",\n  \"ﯥ\": \"ٻ\",\n  \"ﯤ\": \"ٻ\",\n  \"ﭜ\": \"ڀ\",\n  \"ﭝ\": \"ڀ\",\n  \"ﭛ\": \"ڀ\",\n  \"ﭚ\": \"ڀ\",\n  \"ࢩ\": \"ݔ\",\n  \"ݧ\": \"ݔ\",\n  \"⍥\": \"ة\",\n  \"ö\": \"ة\",\n  \"ﺔ\": \"ة\",\n  \"ﺓ\": \"ة\",\n  \"ۃ\": \"ة\",\n  \"𞸕\": \"ت\",\n  \"𞸵\": \"ت\",\n  \"𞹵\": \"ت\",\n  \"𞺕\": \"ت\",\n  \"𞺵\": \"ت\",\n  \"ﺗ\": \"ت\",\n  \"ﺘ\": \"ت\",\n  \"ﺖ\": \"ت\",\n  \"ﺕ\": \"ت\",\n  \"ﲥ\": \"تo\",\n  \"ﳤ\": \"تo\",\n  \"ﲡ\": \"تج\",\n  \"ﰋ\": \"تج\",\n  \"ﵐ\": \"تجم\",\n  \"ﶠ\": \"تجى\",\n  \"ﶟ\": \"تجى\",\n  \"ﲢ\": \"تح\",\n  \"ﰌ\": \"تح\",\n  \"ﵒ\": \"تحج\",\n  \"ﵑ\": \"تحج\",\n  \"ﵓ\": \"تحم\",\n  \"ﲣ\": \"تخ\",\n  \"ﰍ\": \"تخ\",\n  \"ﵔ\": \"تخم\",\n  \"ﶢ\": \"تخى\",\n  \"ﶡ\": \"تخى\",\n  \"ﱰ\": \"تر\",\n  \"ﱱ\": \"تز\",\n  \"ﲤ\": \"تم\",\n  \"ﳣ\": \"تم\",\n  \"ﱲ\": \"تم\",\n  \"ﰎ\": \"تم\",\n  \"ﵕ\": \"تمج\",\n  \"ﵖ\": \"تمح\",\n  \"ﵗ\": \"تمخ\",\n  \"ﶤ\": \"تمى\",\n  \"ﶣ\": \"تمى\",\n  \"ﱳ\": \"تن\",\n  \"ﱴ\": \"تى\",\n  \"ﰏ\": \"تى\",\n  \"ﱵ\": \"تى\",\n  \"ﰐ\": \"تى\",\n  \"ﭠ\": \"ٺ\",\n  \"ﭡ\": \"ٺ\",\n  \"ﭟ\": \"ٺ\",\n  \"ﭞ\": \"ٺ\",\n  \"ﭤ\": \"ٿ\",\n  \"ﭥ\": \"ٿ\",\n  \"ﭣ\": \"ٿ\",\n  \"ﭢ\": \"ٿ\",\n  \"𞸂\": \"ج\",\n  \"𞸢\": \"ج\",\n  \"𞹂\": \"ج\",\n  \"𞹢\": \"ج\",\n  \"𞺂\": \"ج\",\n  \"𞺢\": \"ج\",\n  \"ﺟ\": \"ج\",\n  \"ﺠ\": \"ج\",\n  \"ﺞ\": \"ج\",\n  \"ﺝ\": \"ج\",\n  \"ﲧ\": \"جح\",\n  \"ﰕ\": \"جح\",\n  \"ﶦ\": \"جحى\",\n  \"ﶾ\": \"جحى\",\n  \"ﷻ\": \"جل جلlلo\",\n  \"ﲨ\": \"جم\",\n  \"ﰖ\": \"جم\",\n  \"ﵙ\": \"جمح\",\n  \"ﵘ\": \"جمح\",\n  \"ﶧ\": \"جمى\",\n  \"ﶥ\": \"جمى\",\n  \"ﴝ\": \"جى\",\n  \"ﴁ\": \"جى\",\n  \"ﴞ\": \"جى\",\n  \"ﴂ\": \"جى\",\n  \"ﭸ\": \"ڃ\",\n  \"ﭹ\": \"ڃ\",\n  \"ﭷ\": \"ڃ\",\n  \"ﭶ\": \"ڃ\",\n  \"ﭴ\": \"ڄ\",\n  \"ﭵ\": \"ڄ\",\n  \"ﭳ\": \"ڄ\",\n  \"ﭲ\": \"ڄ\",\n  \"ﭼ\": \"چ\",\n  \"ﭽ\": \"چ\",\n  \"ﭻ\": \"چ\",\n  \"ﭺ\": \"چ\",\n  \"ﮀ\": \"ڇ\",\n  \"ﮁ\": \"ڇ\",\n  \"ﭿ\": \"ڇ\",\n  \"ﭾ\": \"ڇ\",\n  \"𞸇\": \"ح\",\n  \"𞸧\": \"ح\",\n  \"𞹇\": \"ح\",\n  \"𞹧\": \"ح\",\n  \"𞺇\": \"ح\",\n  \"𞺧\": \"ح\",\n  \"ﺣ\": \"ح\",\n  \"ﺤ\": \"ح\",\n  \"ﺢ\": \"ح\",\n  \"ﺡ\": \"ح\",\n  \"څ\": \"حۛ\",\n  \"ځ\": \"حٔ\",\n  \"ݲ\": \"حٔ\",\n  \"ﲩ\": \"حج\",\n  \"ﰗ\": \"حج\",\n  \"ﶿ\": \"حجى\",\n  \"ﲪ\": \"حم\",\n  \"ﰘ\": \"حم\",\n  \"ﵛ\": \"حمى\",\n  \"ﵚ\": \"حمى\",\n  \"ﴛ\": \"حى\",\n  \"ﳿ\": \"حى\",\n  \"ﴜ\": \"حى\",\n  \"ﴀ\": \"حى\",\n  \"𞸗\": \"خ\",\n  \"𞸷\": \"خ\",\n  \"𞹗\": \"خ\",\n  \"𞹷\": \"خ\",\n  \"𞺗\": \"خ\",\n  \"𞺷\": \"خ\",\n  \"ﺧ\": \"خ\",\n  \"ﺨ\": \"خ\",\n  \"ﺦ\": \"خ\",\n  \"ﺥ\": \"خ\",\n  \"ﲫ\": \"خج\",\n  \"ﰙ\": \"خج\",\n  \"ﰚ\": \"خح\",\n  \"ﲬ\": \"خم\",\n  \"ﰛ\": \"خم\",\n  \"ﴟ\": \"خى\",\n  \"ﴃ\": \"خى\",\n  \"ﴠ\": \"خى\",\n  \"ﴄ\": \"خى\",\n  \"𐋡\": \"د\",\n  \"𞸃\": \"د\",\n  \"𞺃\": \"د\",\n  \"𞺣\": \"د\",\n  \"ﺪ\": \"د\",\n  \"ﺩ\": \"د\",\n  \"ڈ\": \"دؕ\",\n  \"ﮉ\": \"دؕ\",\n  \"ﮈ\": \"دؕ\",\n  \"ڎ\": \"دۛ\",\n  \"ﮇ\": \"دۛ\",\n  \"ﮆ\": \"دۛ\",\n  \"ۮ\": \"د̂\",\n  \"ࢮ\": \"د̤̣\",\n  \"𞸘\": \"ذ\",\n  \"𞺘\": \"ذ\",\n  \"𞺸\": \"ذ\",\n  \"ﺬ\": \"ذ\",\n  \"ﺫ\": \"ذ\",\n  \"ﱛ\": \"ذٰ\",\n  \"ڋ\": \"ڊؕ\",\n  \"ﮅ\": \"ڌ\",\n  \"ﮄ\": \"ڌ\",\n  \"ﮃ\": \"ڍ\",\n  \"ﮂ\": \"ڍ\",\n  \"𞸓\": \"ر\",\n  \"𞺓\": \"ر\",\n  \"𞺳\": \"ر\",\n  \"ﺮ\": \"ر\",\n  \"ﺭ\": \"ر\",\n  \"ڑ\": \"رؕ\",\n  \"ﮍ\": \"رؕ\",\n  \"ﮌ\": \"رؕ\",\n  \"ژ\": \"رۛ\",\n  \"ﮋ\": \"رۛ\",\n  \"ﮊ\": \"رۛ\",\n  \"ڒ\": \"ر̆\",\n  \"ࢹ\": \"ر̆̇\",\n  \"ۯ\": \"ر̂\",\n  \"ݬ\": \"رٔ\",\n  \"ﱜ\": \"رٰ\",\n  \"ﷶ\": \"رسول\",\n  \"﷼\": \"رىlل\",\n  \"𞸆\": \"ز\",\n  \"𞺆\": \"ز\",\n  \"𞺦\": \"ز\",\n  \"ﺰ\": \"ز\",\n  \"ﺯ\": \"ز\",\n  \"ࢲ\": \"ز̂\",\n  \"ݱ\": \"ڗؕ\",\n  \"𞸎\": \"س\",\n  \"𞸮\": \"س\",\n  \"𞹎\": \"س\",\n  \"𞹮\": \"س\",\n  \"𞺎\": \"س\",\n  \"𞺮\": \"س\",\n  \"ﺳ\": \"س\",\n  \"ﺴ\": \"س\",\n  \"ﺲ\": \"س\",\n  \"ﺱ\": \"س\",\n  \"ش\": \"سۛ\",\n  \"𞸔\": \"سۛ\",\n  \"𞸴\": \"سۛ\",\n  \"𞹔\": \"سۛ\",\n  \"𞹴\": \"سۛ\",\n  \"𞺔\": \"سۛ\",\n  \"𞺴\": \"سۛ\",\n  \"ﺷ\": \"سۛ\",\n  \"ﺸ\": \"سۛ\",\n  \"ﺶ\": \"سۛ\",\n  \"ﺵ\": \"سۛ\",\n  \"ݾ\": \"س̂\",\n  \"ﴱ\": \"سo\",\n  \"ﳨ\": \"سo\",\n  \"ﴲ\": \"سۛo\",\n  \"ﳪ\": \"سۛo\",\n  \"ﲭ\": \"سج\",\n  \"ﴴ\": \"سج\",\n  \"ﰜ\": \"سج\",\n  \"ﴭ\": \"سۛج\",\n  \"ﴷ\": \"سۛج\",\n  \"ﴥ\": \"سۛج\",\n  \"ﴉ\": \"سۛج\",\n  \"ﵝ\": \"سجح\",\n  \"ﵞ\": \"سجى\",\n  \"ﵩ\": \"سۛجى\",\n  \"ﲮ\": \"سح\",\n  \"ﴵ\": \"سح\",\n  \"ﰝ\": \"سح\",\n  \"ﴮ\": \"سۛح\",\n  \"ﴸ\": \"سۛح\",\n  \"ﴦ\": \"سۛح\",\n  \"ﴊ\": \"سۛح\",\n  \"ﵜ\": \"سحج\",\n  \"ﵨ\": \"سۛحم\",\n  \"ﵧ\": \"سۛحم\",\n  \"ﶪ\": \"سۛحى\",\n  \"ﲯ\": \"سخ\",\n  \"ﴶ\": \"سخ\",\n  \"ﰞ\": \"سخ\",\n  \"ﴯ\": \"سۛخ\",\n  \"ﴹ\": \"سۛخ\",\n  \"ﴧ\": \"سۛخ\",\n  \"ﴋ\": \"سۛخ\",\n  \"ﶨ\": \"سخى\",\n  \"ﷆ\": \"سخى\",\n  \"ﴪ\": \"سر\",\n  \"ﴎ\": \"سر\",\n  \"ﴩ\": \"سۛر\",\n  \"ﴍ\": \"سۛر\",\n  \"ﲰ\": \"سم\",\n  \"ﳧ\": \"سم\",\n  \"ﰟ\": \"سم\",\n  \"ﴰ\": \"سۛم\",\n  \"ﳩ\": \"سۛم\",\n  \"ﴨ\": \"سۛم\",\n  \"ﴌ\": \"سۛم\",\n  \"ﵡ\": \"سمج\",\n  \"ﵠ\": \"سمح\",\n  \"ﵟ\": \"سمح\",\n  \"ﵫ\": \"سۛمخ\",\n  \"ﵪ\": \"سۛمخ\",\n  \"ﵣ\": \"سمم\",\n  \"ﵢ\": \"سمم\",\n  \"ﵭ\": \"سۛمم\",\n  \"ﵬ\": \"سۛمم\",\n  \"ﴗ\": \"سى\",\n  \"ﳻ\": \"سى\",\n  \"ﴘ\": \"سى\",\n  \"ﳼ\": \"سى\",\n  \"ﴙ\": \"سۛى\",\n  \"ﳽ\": \"سۛى\",\n  \"ﴚ\": \"سۛى\",\n  \"ﳾ\": \"سۛى\",\n  \"𐋲\": \"ص\",\n  \"𞸑\": \"ص\",\n  \"𞸱\": \"ص\",\n  \"𞹑\": \"ص\",\n  \"𞹱\": \"ص\",\n  \"𞺑\": \"ص\",\n  \"𞺱\": \"ص\",\n  \"ﺻ\": \"ص\",\n  \"ﺼ\": \"ص\",\n  \"ﺺ\": \"ص\",\n  \"ﺹ\": \"ص\",\n  \"ڞ\": \"صۛ\",\n  \"ࢯ\": \"ص̤̣\",\n  \"ﲱ\": \"صح\",\n  \"ﰠ\": \"صح\",\n  \"ﵥ\": \"صحح\",\n  \"ﵤ\": \"صحح\",\n  \"ﶩ\": \"صحى\",\n  \"ﲲ\": \"صخ\",\n  \"ﴫ\": \"صر\",\n  \"ﴏ\": \"صر\",\n  \"ﷵ\": \"صلعم\",\n  \"ﷹ\": \"صلى\",\n  \"ﷰ\": \"صلى\",\n  \"ﷺ\": \"صلى lللo علىo وسلم\",\n  \"ﲳ\": \"صم\",\n  \"ﰡ\": \"صم\",\n  \"ﷅ\": \"صمم\",\n  \"ﵦ\": \"صمم\",\n  \"ﴡ\": \"صى\",\n  \"ﴅ\": \"صى\",\n  \"ﴢ\": \"صى\",\n  \"ﴆ\": \"صى\",\n  \"𞸙\": \"ض\",\n  \"𞸹\": \"ض\",\n  \"𞹙\": \"ض\",\n  \"𞹹\": \"ض\",\n  \"𞺙\": \"ض\",\n  \"𞺹\": \"ض\",\n  \"ﺿ\": \"ض\",\n  \"ﻀ\": \"ض\",\n  \"ﺾ\": \"ض\",\n  \"ﺽ\": \"ض\",\n  \"ﲴ\": \"ضج\",\n  \"ﰢ\": \"ضج\",\n  \"ﲵ\": \"ضح\",\n  \"ﰣ\": \"ضح\",\n  \"ﵮ\": \"ضحى\",\n  \"ﶫ\": \"ضحى\",\n  \"ﲶ\": \"ضخ\",\n  \"ﰤ\": \"ضخ\",\n  \"ﵰ\": \"ضخم\",\n  \"ﵯ\": \"ضخم\",\n  \"ﴬ\": \"ضر\",\n  \"ﴐ\": \"ضر\",\n  \"ﲷ\": \"ضم\",\n  \"ﰥ\": \"ضم\",\n  \"ﴣ\": \"ضى\",\n  \"ﴇ\": \"ضى\",\n  \"ﴤ\": \"ضى\",\n  \"ﴈ\": \"ضى\",\n  \"𐋨\": \"ط\",\n  \"𞸈\": \"ط\",\n  \"𞹨\": \"ط\",\n  \"𞺈\": \"ط\",\n  \"𞺨\": \"ط\",\n  \"ﻃ\": \"ط\",\n  \"ﻄ\": \"ط\",\n  \"ﻂ\": \"ط\",\n  \"ﻁ\": \"ط\",\n  \"ڟ\": \"طۛ\",\n  \"ﲸ\": \"طح\",\n  \"ﰦ\": \"طح\",\n  \"ﴳ\": \"طم\",\n  \"ﴺ\": \"طم\",\n  \"ﰧ\": \"طم\",\n  \"ﵲ\": \"طمح\",\n  \"ﵱ\": \"طمح\",\n  \"ﵳ\": \"طمم\",\n  \"ﵴ\": \"طمى\",\n  \"ﴑ\": \"طى\",\n  \"ﳵ\": \"طى\",\n  \"ﴒ\": \"طى\",\n  \"ﳶ\": \"طى\",\n  \"𞸚\": \"ظ\",\n  \"𞹺\": \"ظ\",\n  \"𞺚\": \"ظ\",\n  \"𞺺\": \"ظ\",\n  \"ﻇ\": \"ظ\",\n  \"ﻈ\": \"ظ\",\n  \"ﻆ\": \"ظ\",\n  \"ﻅ\": \"ظ\",\n  \"ﲹ\": \"ظم\",\n  \"ﴻ\": \"ظم\",\n  \"ﰨ\": \"ظم\",\n  \"؏\": \"ع\",\n  \"𞸏\": \"ع\",\n  \"𞸯\": \"ع\",\n  \"𞹏\": \"ع\",\n  \"𞹯\": \"ع\",\n  \"𞺏\": \"ع\",\n  \"𞺯\": \"ع\",\n  \"ﻋ\": \"ع\",\n  \"ﻌ\": \"ع\",\n  \"ﻊ\": \"ع\",\n  \"ﻉ\": \"ع\",\n  \"ﲺ\": \"عج\",\n  \"ﰩ\": \"عج\",\n  \"ﷄ\": \"عجم\",\n  \"ﵵ\": \"عجم\",\n  \"ﷷ\": \"علىo\",\n  \"ﲻ\": \"عم\",\n  \"ﰪ\": \"عم\",\n  \"ﵷ\": \"عمم\",\n  \"ﵶ\": \"عمم\",\n  \"ﵸ\": \"عمى\",\n  \"ﶶ\": \"عمى\",\n  \"ﴓ\": \"عى\",\n  \"ﳷ\": \"عى\",\n  \"ﴔ\": \"عى\",\n  \"ﳸ\": \"عى\",\n  \"𞸛\": \"غ\",\n  \"𞸻\": \"غ\",\n  \"𞹛\": \"غ\",\n  \"𞹻\": \"غ\",\n  \"𞺛\": \"غ\",\n  \"𞺻\": \"غ\",\n  \"ﻏ\": \"غ\",\n  \"ﻐ\": \"غ\",\n  \"ﻎ\": \"غ\",\n  \"ﻍ\": \"غ\",\n  \"ﲼ\": \"غج\",\n  \"ﰫ\": \"غج\",\n  \"ﲽ\": \"غم\",\n  \"ﰬ\": \"غم\",\n  \"ﵹ\": \"غمم\",\n  \"ﵻ\": \"غمى\",\n  \"ﵺ\": \"غمى\",\n  \"ﴕ\": \"غى\",\n  \"ﳹ\": \"غى\",\n  \"ﴖ\": \"غى\",\n  \"ﳺ\": \"غى\",\n  \"𞸐\": \"ف\",\n  \"𞸰\": \"ف\",\n  \"𞹰\": \"ف\",\n  \"𞺐\": \"ف\",\n  \"𞺰\": \"ف\",\n  \"ﻓ\": \"ف\",\n  \"ﻔ\": \"ف\",\n  \"ﻒ\": \"ف\",\n  \"ﻑ\": \"ف\",\n  \"ڧ\": \"ف\",\n  \"ﲾ\": \"فج\",\n  \"ﰭ\": \"فج\",\n  \"ﲿ\": \"فح\",\n  \"ﰮ\": \"فح\",\n  \"ﳀ\": \"فخ\",\n  \"ﰯ\": \"فخ\",\n  \"ﵽ\": \"فخم\",\n  \"ﵼ\": \"فخم\",\n  \"ﳁ\": \"فم\",\n  \"ﰰ\": \"فم\",\n  \"ﷁ\": \"فمى\",\n  \"ﱼ\": \"فى\",\n  \"ﰱ\": \"فى\",\n  \"ﱽ\": \"فى\",\n  \"ﰲ\": \"فى\",\n  \"𞸞\": \"ڡ\",\n  \"𞹾\": \"ڡ\",\n  \"ࢻ\": \"ڡ\",\n  \"ٯ\": \"ڡ\",\n  \"𞸟\": \"ڡ\",\n  \"𞹟\": \"ڡ\",\n  \"ࢼ\": \"ڡ\",\n  \"ڤ\": \"ڡۛ\",\n  \"ﭬ\": \"ڡۛ\",\n  \"ﭭ\": \"ڡۛ\",\n  \"ﭫ\": \"ڡۛ\",\n  \"ﭪ\": \"ڡۛ\",\n  \"ڨ\": \"ڡۛ\",\n  \"ࢤ\": \"ڢۛ\",\n  \"ﭰ\": \"ڦ\",\n  \"ﭱ\": \"ڦ\",\n  \"ﭯ\": \"ڦ\",\n  \"ﭮ\": \"ڦ\",\n  \"𞸒\": \"ق\",\n  \"𞸲\": \"ق\",\n  \"𞹒\": \"ق\",\n  \"𞹲\": \"ق\",\n  \"𞺒\": \"ق\",\n  \"𞺲\": \"ق\",\n  \"ﻗ\": \"ق\",\n  \"ﻘ\": \"ق\",\n  \"ﻖ\": \"ق\",\n  \"ﻕ\": \"ق\",\n  \"ﳂ\": \"قح\",\n  \"ﰳ\": \"قح\",\n  \"ﷱ\": \"قلى\",\n  \"ﳃ\": \"قم\",\n  \"ﰴ\": \"قم\",\n  \"ﶴ\": \"قمح\",\n  \"ﵾ\": \"قمح\",\n  \"ﵿ\": \"قمم\",\n  \"ﶲ\": \"قمى\",\n  \"ﱾ\": \"قى\",\n  \"ﰵ\": \"قى\",\n  \"ﱿ\": \"قى\",\n  \"ﰶ\": \"قى\",\n  \"𞸊\": \"ك\",\n  \"𞸪\": \"ك\",\n  \"𞹪\": \"ك\",\n  \"ﻛ\": \"ك\",\n  \"ﻜ\": \"ك\",\n  \"ﻚ\": \"ك\",\n  \"ﻙ\": \"ك\",\n  \"ک\": \"ك\",\n  \"ﮐ\": \"ك\",\n  \"ﮑ\": \"ك\",\n  \"ﮏ\": \"ك\",\n  \"ﮎ\": \"ك\",\n  \"ڪ\": \"ك\",\n  \"ڭ\": \"كۛ\",\n  \"ﯕ\": \"كۛ\",\n  \"ﯖ\": \"كۛ\",\n  \"ﯔ\": \"كۛ\",\n  \"ﯓ\": \"كۛ\",\n  \"ݣ\": \"كۛ\",\n  \"ﲀ\": \"كl\",\n  \"ﰷ\": \"كl\",\n  \"ﳄ\": \"كج\",\n  \"ﰸ\": \"كج\",\n  \"ﳅ\": \"كح\",\n  \"ﰹ\": \"كح\",\n  \"ﳆ\": \"كخ\",\n  \"ﰺ\": \"كخ\",\n  \"ﳇ\": \"كل\",\n  \"ﳫ\": \"كل\",\n  \"ﲁ\": \"كل\",\n  \"ﰻ\": \"كل\",\n  \"ﳈ\": \"كم\",\n  \"ﳬ\": \"كم\",\n  \"ﲂ\": \"كم\",\n  \"ﰼ\": \"كم\",\n  \"ﷃ\": \"كمم\",\n  \"ﶻ\": \"كمم\",\n  \"ﶷ\": \"كمى\",\n  \"ﲃ\": \"كى\",\n  \"ﰽ\": \"كى\",\n  \"ﲄ\": \"كى\",\n  \"ﰾ\": \"كى\",\n  \"ݢ\": \"ڬ\",\n  \"ﮔ\": \"گ\",\n  \"ﮕ\": \"گ\",\n  \"ﮓ\": \"گ\",\n  \"ﮒ\": \"گ\",\n  \"ࢰ\": \"گ\",\n  \"ڴ\": \"گۛ\",\n  \"ﮜ\": \"ڱ\",\n  \"ﮝ\": \"ڱ\",\n  \"ﮛ\": \"ڱ\",\n  \"ﮚ\": \"ڱ\",\n  \"ﮘ\": \"ڳ\",\n  \"ﮙ\": \"ڳ\",\n  \"ﮗ\": \"ڳ\",\n  \"ﮖ\": \"ڳ\",\n  \"𞸋\": \"ل\",\n  \"𞸫\": \"ل\",\n  \"𞹋\": \"ل\",\n  \"𞺋\": \"ل\",\n  \"𞺫\": \"ل\",\n  \"ﻟ\": \"ل\",\n  \"ﻠ\": \"ل\",\n  \"ﻞ\": \"ل\",\n  \"ﻝ\": \"ل\",\n  \"ڷ\": \"لۛ\",\n  \"ڵ\": \"ل̆\",\n  \"ﻼ\": \"لl\",\n  \"ﻻ\": \"لl\",\n  \"ﻺ\": \"لlٕ\",\n  \"ﻹ\": \"لlٕ\",\n  \"ﻸ\": \"لlٴ\",\n  \"ﻷ\": \"لlٴ\",\n  \"ﳍ\": \"لo\",\n  \"ﻶ\": \"لآ\",\n  \"ﻵ\": \"لآ\",\n  \"ﳉ\": \"لج\",\n  \"ﰿ\": \"لج\",\n  \"ﶃ\": \"لجج\",\n  \"ﶄ\": \"لجج\",\n  \"ﶺ\": \"لجم\",\n  \"ﶼ\": \"لجم\",\n  \"ﶬ\": \"لجى\",\n  \"ﳊ\": \"لح\",\n  \"ﱀ\": \"لح\",\n  \"ﶵ\": \"لحم\",\n  \"ﶀ\": \"لحم\",\n  \"ﶂ\": \"لحى\",\n  \"ﶁ\": \"لحى\",\n  \"ﳋ\": \"لخ\",\n  \"ﱁ\": \"لخ\",\n  \"ﶆ\": \"لخم\",\n  \"ﶅ\": \"لخم\",\n  \"ﳌ\": \"لم\",\n  \"ﳭ\": \"لم\",\n  \"ﲅ\": \"لم\",\n  \"ﱂ\": \"لم\",\n  \"ﶈ\": \"لمح\",\n  \"ﶇ\": \"لمح\",\n  \"ﶭ\": \"لمى\",\n  \"ﲆ\": \"لى\",\n  \"ﱃ\": \"لى\",\n  \"ﲇ\": \"لى\",\n  \"ﱄ\": \"لى\",\n  \"𞸌\": \"م\",\n  \"𞸬\": \"م\",\n  \"𞹬\": \"م\",\n  \"𞺌\": \"م\",\n  \"𞺬\": \"م\",\n  \"ﻣ\": \"م\",\n  \"ﻤ\": \"م\",\n  \"ﻢ\": \"م\",\n  \"ﻡ\": \"م\",\n  \"ࢧ\": \"مۛ\",\n  \"۾\": \"م͈\",\n  \"ﲈ\": \"مl\",\n  \"ﳎ\": \"مج\",\n  \"ﱅ\": \"مج\",\n  \"ﶌ\": \"مجح\",\n  \"ﶒ\": \"مجخ\",\n  \"ﶍ\": \"مجم\",\n  \"ﷀ\": \"مجى\",\n  \"ﳏ\": \"مح\",\n  \"ﱆ\": \"مح\",\n  \"ﶉ\": \"محج\",\n  \"ﶊ\": \"محم\",\n  \"ﷴ\": \"محمد\",\n  \"ﶋ\": \"محى\",\n  \"ﳐ\": \"مخ\",\n  \"ﱇ\": \"مخ\",\n  \"ﶎ\": \"مخج\",\n  \"ﶏ\": \"مخم\",\n  \"ﶹ\": \"مخى\",\n  \"ﳑ\": \"مم\",\n  \"ﲉ\": \"مم\",\n  \"ﱈ\": \"مم\",\n  \"ﶱ\": \"ممى\",\n  \"ﱉ\": \"مى\",\n  \"ﱊ\": \"مى\",\n  \"𞸍\": \"ن\",\n  \"𞸭\": \"ن\",\n  \"𞹍\": \"ن\",\n  \"𞹭\": \"ن\",\n  \"𞺍\": \"ن\",\n  \"𞺭\": \"ن\",\n  \"ﻧ\": \"ن\",\n  \"ﻨ\": \"ن\",\n  \"ﻦ\": \"ن\",\n  \"ﻥ\": \"ن\",\n  \"ݨ\": \"نؕ\",\n  \"ݩ\": \"ن̆\",\n  \"ﳖ\": \"نo\",\n  \"ﳯ\": \"نo\",\n  \"ﶸ\": \"نجح\",\n  \"ﶽ\": \"نجح\",\n  \"ﶘ\": \"نجم\",\n  \"ﶗ\": \"نجم\",\n  \"ﶙ\": \"نجى\",\n  \"ﷇ\": \"نجى\",\n  \"ﳓ\": \"نح\",\n  \"ﱌ\": \"نح\",\n  \"ﶕ\": \"نحم\",\n  \"ﶖ\": \"نحى\",\n  \"ﶳ\": \"نحى\",\n  \"ﳔ\": \"نخ\",\n  \"ﱍ\": \"نخ\",\n  \"ﲊ\": \"نر\",\n  \"ﲋ\": \"نز\",\n  \"ﳕ\": \"نم\",\n  \"ﳮ\": \"نم\",\n  \"ﲌ\": \"نم\",\n  \"ﱎ\": \"نم\",\n  \"ﶛ\": \"نمى\",\n  \"ﶚ\": \"نمى\",\n  \"ﲍ\": \"نن\",\n  \"ﲎ\": \"نى\",\n  \"ﱏ\": \"نى\",\n  \"ﲏ\": \"نى\",\n  \"ﱐ\": \"نى\",\n  \"ۂ\": \"ۀ\",\n  \"ﮥ\": \"ۀ\",\n  \"ﮤ\": \"ۀ\",\n  \"𐋤\": \"و\",\n  \"𞸅\": \"و\",\n  \"𞺅\": \"و\",\n  \"𞺥\": \"و\",\n  \"ﻮ\": \"و\",\n  \"ﻭ\": \"و\",\n  \"ࢱ\": \"و\",\n  \"ۋ\": \"وۛ\",\n  \"ﯟ\": \"وۛ\",\n  \"ﯞ\": \"وۛ\",\n  \"ۇ\": \"و̓\",\n  \"ﯘ\": \"و̓\",\n  \"ﯗ\": \"و̓\",\n  \"ۆ\": \"و̆\",\n  \"ﯚ\": \"و̆\",\n  \"ﯙ\": \"و̆\",\n  \"ۉ\": \"و̂\",\n  \"ﯣ\": \"و̂\",\n  \"ﯢ\": \"و̂\",\n  \"ۈ\": \"وٰ\",\n  \"ﯜ\": \"وٰ\",\n  \"ﯛ\": \"وٰ\",\n  \"ؤ\": \"وٴ\",\n  \"ﺆ\": \"وٴ\",\n  \"ﺅ\": \"وٴ\",\n  \"ٶ\": \"وٴ\",\n  \"ٷ\": \"و̓ٴ\",\n  \"ﯝ\": \"و̓ٴ\",\n  \"ﷸ\": \"وسلم\",\n  \"ﯡ\": \"ۅ\",\n  \"ﯠ\": \"ۅ\",\n  \"ٮ\": \"ى\",\n  \"𞸜\": \"ى\",\n  \"𞹼\": \"ى\",\n  \"ں\": \"ى\",\n  \"𞸝\": \"ى\",\n  \"𞹝\": \"ى\",\n  \"ﮟ\": \"ى\",\n  \"ﮞ\": \"ى\",\n  \"ࢽ\": \"ى\",\n  \"ﯨ\": \"ى\",\n  \"ﯩ\": \"ى\",\n  \"ﻰ\": \"ى\",\n  \"ﻯ\": \"ى\",\n  \"ي\": \"ى\",\n  \"𞸉\": \"ى\",\n  \"𞸩\": \"ى\",\n  \"𞹉\": \"ى\",\n  \"𞹩\": \"ى\",\n  \"𞺉\": \"ى\",\n  \"𞺩\": \"ى\",\n  \"ﻳ\": \"ى\",\n  \"ﻴ\": \"ى\",\n  \"ﻲ\": \"ى\",\n  \"ﻱ\": \"ى\",\n  \"ی\": \"ى\",\n  \"ﯾ\": \"ى\",\n  \"ﯿ\": \"ى\",\n  \"ﯽ\": \"ى\",\n  \"ﯼ\": \"ى\",\n  \"ے\": \"ى\",\n  \"ﮯ\": \"ى\",\n  \"ﮮ\": \"ى\",\n  \"ٹ\": \"ىؕ\",\n  \"ﭨ\": \"ىؕ\",\n  \"ﭩ\": \"ىؕ\",\n  \"ﭧ\": \"ىؕ\",\n  \"ﭦ\": \"ىؕ\",\n  \"ڻ\": \"ىؕ\",\n  \"ﮢ\": \"ىؕ\",\n  \"ﮣ\": \"ىؕ\",\n  \"ﮡ\": \"ىؕ\",\n  \"ﮠ\": \"ىؕ\",\n  \"پ\": \"ىۛ\",\n  \"ﭘ\": \"ىۛ\",\n  \"ﭙ\": \"ىۛ\",\n  \"ﭗ\": \"ىۛ\",\n  \"ﭖ\": \"ىۛ\",\n  \"ث\": \"ىۛ\",\n  \"𞸖\": \"ىۛ\",\n  \"𞸶\": \"ىۛ\",\n  \"𞹶\": \"ىۛ\",\n  \"𞺖\": \"ىۛ\",\n  \"𞺶\": \"ىۛ\",\n  \"ﺛ\": \"ىۛ\",\n  \"ﺜ\": \"ىۛ\",\n  \"ﺚ\": \"ىۛ\",\n  \"ﺙ\": \"ىۛ\",\n  \"ڽ\": \"ىۛ\",\n  \"ۑ\": \"ىۛ\",\n  \"ؿ\": \"ىۛ\",\n  \"ࢷ\": \"ىۛۢ\",\n  \"ݖ\": \"ى̆\",\n  \"ێ\": \"ى̆\",\n  \"ࢺ\": \"ى̆̇\",\n  \"ؽ\": \"ى̂\",\n  \"ࢨ\": \"ىٔ\",\n  \"ﲐ\": \"ىٰ\",\n  \"ﱝ\": \"ىٰ\",\n  \"ﳞ\": \"ىo\",\n  \"ﳱ\": \"ىo\",\n  \"ﳦ\": \"ىۛo\",\n  \"ئ\": \"ىٴ\",\n  \"ﺋ\": \"ىٴ\",\n  \"ﺌ\": \"ىٴ\",\n  \"ﺊ\": \"ىٴ\",\n  \"ﺉ\": \"ىٴ\",\n  \"ٸ\": \"ىٴ\",\n  \"ﯫ\": \"ىٴl\",\n  \"ﯪ\": \"ىٴl\",\n  \"ﲛ\": \"ىٴo\",\n  \"ﳠ\": \"ىٴo\",\n  \"ﯭ\": \"ىٴo\",\n  \"ﯬ\": \"ىٴo\",\n  \"ﯸ\": \"ىٴٻ\",\n  \"ﯷ\": \"ىٴٻ\",\n  \"ﯶ\": \"ىٴٻ\",\n  \"ﲗ\": \"ىٴج\",\n  \"ﰀ\": \"ىٴج\",\n  \"ﲘ\": \"ىٴح\",\n  \"ﰁ\": \"ىٴح\",\n  \"ﲙ\": \"ىٴخ\",\n  \"ﱤ\": \"ىٴر\",\n  \"ﱥ\": \"ىٴز\",\n  \"ﲚ\": \"ىٴم\",\n  \"ﳟ\": \"ىٴم\",\n  \"ﱦ\": \"ىٴم\",\n  \"ﰂ\": \"ىٴم\",\n  \"ﱧ\": \"ىٴن\",\n  \"ﯯ\": \"ىٴو\",\n  \"ﯮ\": \"ىٴو\",\n  \"ﯱ\": \"ىٴو̓\",\n  \"ﯰ\": \"ىٴو̓\",\n  \"ﯳ\": \"ىٴو̆\",\n  \"ﯲ\": \"ىٴو̆\",\n  \"ﯵ\": \"ىٴوٰ\",\n  \"ﯴ\": \"ىٴوٰ\",\n  \"ﯻ\": \"ىٴى\",\n  \"ﯺ\": \"ىٴى\",\n  \"ﱨ\": \"ىٴى\",\n  \"ﯹ\": \"ىٴى\",\n  \"ﰃ\": \"ىٴى\",\n  \"ﱩ\": \"ىٴى\",\n  \"ﰄ\": \"ىٴى\",\n  \"ﳚ\": \"ىج\",\n  \"ﱕ\": \"ىج\",\n  \"ﰑ\": \"ىۛج\",\n  \"ﶯ\": \"ىجى\",\n  \"ﳛ\": \"ىح\",\n  \"ﱖ\": \"ىح\",\n  \"ﶮ\": \"ىحى\",\n  \"ﳜ\": \"ىخ\",\n  \"ﱗ\": \"ىخ\",\n  \"ﲑ\": \"ىر\",\n  \"ﱶ\": \"ىۛر\",\n  \"ﲒ\": \"ىز\",\n  \"ﱷ\": \"ىۛز\",\n  \"ﳝ\": \"ىم\",\n  \"ﳰ\": \"ىم\",\n  \"ﲓ\": \"ىم\",\n  \"ﱘ\": \"ىم\",\n  \"ﲦ\": \"ىۛم\",\n  \"ﳥ\": \"ىۛم\",\n  \"ﱸ\": \"ىۛم\",\n  \"ﰒ\": \"ىۛم\",\n  \"ﶝ\": \"ىمم\",\n  \"ﶜ\": \"ىمم\",\n  \"ﶰ\": \"ىمى\",\n  \"ﲔ\": \"ىن\",\n  \"ﱹ\": \"ىۛن\",\n  \"ﲕ\": \"ىى\",\n  \"ﱙ\": \"ىى\",\n  \"ﲖ\": \"ىى\",\n  \"ﱚ\": \"ىى\",\n  \"ﱺ\": \"ىۛى\",\n  \"ﰓ\": \"ىۛى\",\n  \"ﱻ\": \"ىۛى\",\n  \"ﰔ\": \"ىۛى\",\n  \"ﮱ\": \"ۓ\",\n  \"ﮰ\": \"ۓ\",\n  \"𐊸\": \"ⵀ\",\n  \"⁞\": \"ⵂ\",\n  \"⸽\": \"ⵂ\",\n  \"⦙\": \"ⵂ\",\n  \"︙\": \"ⵗ\",\n  \"⁝\": \"ⵗ\",\n  \"⋮\": \"ⵗ\",\n  \"Մ\": \"ሆ\",\n  \"Ռ\": \"ቡ\",\n  \"Ի\": \"ኮ\",\n  \"Պ\": \"ጣ\",\n  \"आ\": \"अा\",\n  \"ऒ\": \"अाॆ\",\n  \"ओ\": \"अाे\",\n  \"औ\": \"अाै\",\n  \"ऄ\": \"अॆ\",\n  \"ऑ\": \"अॉ\",\n  \"ऍ\": \"एॅ\",\n  \"ऎ\": \"एॆ\",\n  \"ऐ\": \"एे\",\n  \"ई\": \"र्इ\",\n  \"ઽ\": \"ऽ\",\n  \"𑇜\": \"ꣻ\",\n  \"𑇋\": \"ऺ\",\n  \"ુ\": \"ु\",\n  \"ૂ\": \"ू\",\n  \"ੋ\": \"ॆ\",\n  \"੍\": \"्\",\n  \"્\": \"्\",\n  \"আ\": \"অা\",\n  \"ৠ\": \"ঋৃ\",\n  \"ৡ\": \"ঋৃ\",\n  \"𑒒\": \"ঘ\",\n  \"𑒔\": \"চ\",\n  \"𑒖\": \"জ\",\n  \"𑒘\": \"ঞ\",\n  \"𑒙\": \"ট\",\n  \"𑒛\": \"ড\",\n  \"𑒪\": \"ণ\",\n  \"𑒞\": \"ত\",\n  \"𑒟\": \"থ\",\n  \"𑒠\": \"দ\",\n  \"𑒡\": \"ধ\",\n  \"𑒢\": \"ন\",\n  \"𑒣\": \"প\",\n  \"𑒩\": \"ব\",\n  \"𑒧\": \"ম\",\n  \"𑒨\": \"য\",\n  \"𑒫\": \"র\",\n  \"𑒝\": \"ল\",\n  \"𑒭\": \"ষ\",\n  \"𑒮\": \"স\",\n  \"𑓄\": \"ঽ\",\n  \"𑒰\": \"া\",\n  \"𑒱\": \"ি\",\n  \"𑒹\": \"ে\",\n  \"𑒼\": \"ো\",\n  \"𑒾\": \"ৌ\",\n  \"𑓂\": \"্\",\n  \"𑒽\": \"ৗ\",\n  \"ਉ\": \"ੳੁ\",\n  \"ਊ\": \"ੳੂ\",\n  \"ਆ\": \"ਅਾ\",\n  \"ਐ\": \"ਅੈ\",\n  \"ਔ\": \"ਅੌ\",\n  \"ਇ\": \"ੲਿ\",\n  \"ਈ\": \"ੲੀ\",\n  \"ਏ\": \"ੲੇ\",\n  \"આ\": \"અા\",\n  \"ઑ\": \"અાૅ\",\n  \"ઓ\": \"અાે\",\n  \"ઔ\": \"અાૈ\",\n  \"ઍ\": \"અૅ\",\n  \"એ\": \"અે\",\n  \"ઐ\": \"અૈ\",\n  \"ଆ\": \"ଅା\",\n  \"௮\": \"அ\",\n  \"ர\": \"ஈ\",\n  \"ா\": \"ஈ\",\n  \"௫\": \"ஈு\",\n  \"௨\": \"உ\",\n  \"ഉ\": \"உ\",\n  \"ஊ\": \"உள\",\n  \"ഊ\": \"உൗ\",\n  \"௭\": \"எ\",\n  \"௷\": \"எவ\",\n  \"ஜ\": \"ஐ\",\n  \"ജ\": \"ஐ\",\n  \"௧\": \"க\",\n  \"௪\": \"ச\",\n  \"௬\": \"சு\",\n  \"௲\": \"சூ\",\n  \"ഺ\": \"டி\",\n  \"ണ\": \"ண\",\n  \"௺\": \"நீ\",\n  \"௴\": \"மீ\",\n  \"௰\": \"ய\",\n  \"ഴ\": \"ழ\",\n  \"ௗ\": \"ள\",\n  \"ை\": \"ன\",\n  \"ശ\": \"ஶ\",\n  \"௸\": \"ஷ\",\n  \"ി\": \"ி\",\n  \"ീ\": \"ி\",\n  \"ொ\": \"ெஈ\",\n  \"ௌ\": \"ெள\",\n  \"ோ\": \"ேஈ\",\n  \"ಅ\": \"అ\",\n  \"ಆ\": \"ఆ\",\n  \"ಇ\": \"ఇ\",\n  \"ౠ\": \"ఋా\",\n  \"ౡ\": \"ఌా\",\n  \"ಒ\": \"ఒ\",\n  \"ఔ\": \"ఒౌ\",\n  \"ಔ\": \"ఒౌ\",\n  \"ఓ\": \"ఒౕ\",\n  \"ಓ\": \"ఒౕ\",\n  \"ಜ\": \"జ\",\n  \"ಞ\": \"ఞ\",\n  \"ఢ\": \"డ̣\",\n  \"ಣ\": \"ణ\",\n  \"థ\": \"ధּ\",\n  \"భ\": \"బ̣\",\n  \"ಯ\": \"య\",\n  \"ఠ\": \"రּ\",\n  \"ಱ\": \"ఱ\",\n  \"ಲ\": \"ల\",\n  \"ష\": \"వ̣\",\n  \"హ\": \"వా\",\n  \"మ\": \"వు\",\n  \"ూ\": \"ుా\",\n  \"ౄ\": \"ృా\",\n  \"ೡ\": \"ಌಾ\",\n  \"ഈ\": \"ഇൗ\",\n  \"ഐ\": \"എെ\",\n  \"ഓ\": \"ഒാ\",\n  \"ഔ\": \"ഒൗ\",\n  \"ൡ\": \"ഞ\",\n  \"൫\": \"ദ്ര\",\n  \"൹\": \"നു\",\n  \"ഌ\": \"നു\",\n  \"ങ\": \"നു\",\n  \"൯\": \"ന്\",\n  \"ൻ\": \"ന്\",\n  \"൬\": \"ന്ന\",\n  \"൚\": \"ന്മ\",\n  \"റ\": \"ര\",\n  \"൪\": \"ര്\",\n  \"ർ\": \"ര്\",\n  \"൮\": \"വ്ര\",\n  \"൶\": \"ഹ്മ\",\n  \"ൂ\": \"ു\",\n  \"ൃ\": \"ു\",\n  \"ൈ\": \"െെ\",\n  \"෪\": \"ජ\",\n  \"෫\": \"ද\",\n  \"𑐓\": \"𑐴𑑂𑐒\",\n  \"𑐙\": \"𑐴𑑂𑐘\",\n  \"𑐤\": \"𑐴𑑂𑐣\",\n  \"𑐪\": \"𑐴𑑂𑐩\",\n  \"𑐭\": \"𑐴𑑂𑐬\",\n  \"𑐯\": \"𑐴𑑂𑐮\",\n  \"𑗘\": \"𑖂\",\n  \"𑗙\": \"𑖂\",\n  \"𑗚\": \"𑖃\",\n  \"𑗛\": \"𑖄\",\n  \"𑗜\": \"𑖲\",\n  \"𑗝\": \"𑖳\",\n  \"ฃ\": \"ข\",\n  \"ด\": \"ค\",\n  \"ต\": \"ค\",\n  \"ม\": \"ฆ\",\n  \"ຈ\": \"จ\",\n  \"ซ\": \"ช\",\n  \"ฏ\": \"ฎ\",\n  \"ท\": \"ฑ\",\n  \"ບ\": \"บ\",\n  \"ປ\": \"ป\",\n  \"ຝ\": \"ฝ\",\n  \"ພ\": \"พ\",\n  \"ຟ\": \"ฟ\",\n  \"ฦ\": \"ภ\",\n  \"ຍ\": \"ย\",\n  \"។\": \"ฯ\",\n  \"ๅ\": \"า\",\n  \"ำ\": \"̊า\",\n  \"ិ\": \"ิ\",\n  \"ី\": \"ี\",\n  \"ឹ\": \"ึ\",\n  \"ឺ\": \"ื\",\n  \"ຸ\": \"ุ\",\n  \"ູ\": \"ู\",\n  \"แ\": \"เเ\",\n  \"ໜ\": \"ຫນ\",\n  \"ໝ\": \"ຫມ\",\n  \"ຳ\": \"̊າ\",\n  \"༂\": \"འུྂཿ\",\n  \"༃\": \"འུྂ༔\",\n  \"ཪ\": \"ར\",\n  \"ༀ\": \"ཨོཾ\",\n  \"ཷ\": \"ྲཱྀ\",\n  \"ཹ\": \"ླཱྀ\",\n  \"𑲲\": \"𑲪\",\n  \"ႁ\": \"ဂှ\",\n  \"က\": \"ဂာ\",\n  \"ၰ\": \"ဃှ\",\n  \"ၦ\": \"ပှ\",\n  \"ဟ\": \"ပာ\",\n  \"ၯ\": \"ပာှ\",\n  \"ၾ\": \"ၽှ\",\n  \"ဩ\": \"သြ\",\n  \"ဪ\": \"သြော်\",\n  \"႞\": \"ႃ̊\",\n  \"ឣ\": \"អ\",\n  \"᧐\": \"ᦞ\",\n  \"᧑\": \"ᦱ\",\n  \"᪀\": \"ᩅ\",\n  \"᪐\": \"ᩅ\",\n  \"꩓\": \"ꨁ\",\n  \"꩖\": \"ꨣ\",\n  \"᭒\": \"ᬍ\",\n  \"᭓\": \"ᬑ\",\n  \"᭘\": \"ᬨ\",\n  \"ꦣ\": \"ꦝ\",\n  \"ᢖ\": \"ᡜ\",\n  \"ᡕ\": \"ᠵ\",\n  \"ῶ\": \"Ꮿ\",\n  \"ᐍ\": \"ᐁ·\",\n  \"ᐫ\": \"ᐁᐠ\",\n  \"ᐑ\": \"ᐄ·\",\n  \"ᐓ\": \"ᐅ·\",\n  \"ᐭ\": \"ᐅᐠ\",\n  \"ᐕ\": \"ᐆ·\",\n  \"ᐘ\": \"ᐊ·\",\n  \"ᐮ\": \"ᐊᐠ\",\n  \"ᐚ\": \"ᐋ·\",\n  \"ᣝ\": \"ᐞᣟ\",\n  \"ᓑ\": \"ᐡ\",\n  \"ᕀ\": \"ᐩ\",\n  \"ᐿ\": \"ᐲ·\",\n  \"ᑃ\": \"ᐴ·\",\n  \"⍩\": \"ᐵ\",\n  \"ᑇ\": \"ᐹ·\",\n  \"ᑜ\": \"ᑏ·\",\n  \"⸧\": \"ᑐ\",\n  \"⊃\": \"ᑐ\",\n  \"ᑞ\": \"ᑐ·\",\n  \"ᑩ\": \"ᑐ'\",\n  \"⟉\": \"ᑐ/\",\n  \"⫗\": \"ᑐᑕ\",\n  \"ᑠ\": \"ᑑ·\",\n  \"⸦\": \"ᑕ\",\n  \"⊂\": \"ᑕ\",\n  \"ᑢ\": \"ᑕ·\",\n  \"ᑪ\": \"ᑕ'\",\n  \"ᑤ\": \"ᑖ·\",\n  \"ᑵ\": \"ᑫ·\",\n  \"ᒅ\": \"ᑫ'\",\n  \"ᑹ\": \"ᑮ·\",\n  \"ᑽ\": \"ᑰ·\",\n  \"ᘃ\": \"ᒉ\",\n  \"ᒓ\": \"ᒉ·\",\n  \"ᒕ\": \"ᒋ·\",\n  \"ᒗ\": \"ᒌ·\",\n  \"ᒛ\": \"ᒎ·\",\n  \"ᘂ\": \"ᒐ\",\n  \"ᒝ\": \"ᒐ·\",\n  \"ᒟ\": \"ᒑ·\",\n  \"ᒭ\": \"ᒣ·\",\n  \"ᒱ\": \"ᒦ·\",\n  \"ᒳ\": \"ᒧ·\",\n  \"ᒵ\": \"ᒨ·\",\n  \"ᒹ\": \"ᒫ·\",\n  \"ᓊ\": \"ᓀ·\",\n  \"ᣇ\": \"ᓂ·\",\n  \"ᣉ\": \"ᓃ·\",\n  \"ᣋ\": \"ᓄ·\",\n  \"ᣍ\": \"ᓅ·\",\n  \"ᓌ\": \"ᓇ·\",\n  \"ᓎ\": \"ᓈ·\",\n  \"ᘄ\": \"ᓓ\",\n  \"ᓝ\": \"ᓓ·\",\n  \"ᓟ\": \"ᓕ·\",\n  \"ᓡ\": \"ᓖ·\",\n  \"ᓣ\": \"ᓗ·\",\n  \"ᓥ\": \"ᓘ·\",\n  \"ᘇ\": \"ᓚ\",\n  \"ᓧ\": \"ᓚ·\",\n  \"ᓩ\": \"ᓛ·\",\n  \"ᓷ\": \"ᓭ·\",\n  \"ᓹ\": \"ᓯ·\",\n  \"ᓻ\": \"ᓰ·\",\n  \"ᓽ\": \"ᓱ·\",\n  \"ᓿ\": \"ᓲ·\",\n  \"ᔁ\": \"ᓴ·\",\n  \"ᔃ\": \"ᓵ·\",\n  \"ᔌ\": \"ᔋ<\",\n  \"ᔎ\": \"ᔋb\",\n  \"ᔍ\": \"ᔋᑕ\",\n  \"ᔏ\": \"ᔋᒐ\",\n  \"ᔘ\": \"ᔐ·\",\n  \"ᔚ\": \"ᔑ·\",\n  \"ᔜ\": \"ᔒ·\",\n  \"ᔞ\": \"ᔓ·\",\n  \"ᔠ\": \"ᔔ·\",\n  \"ᔢ\": \"ᔕ·\",\n  \"ᔤ\": \"ᔖ·\",\n  \"ᔲ\": \"ᔨ·\",\n  \"ᔴ\": \"ᔩ·\",\n  \"ᔶ\": \"ᔪ·\",\n  \"ᔸ\": \"ᔫ·\",\n  \"ᔺ\": \"ᔭ·\",\n  \"ᔼ\": \"ᔮ·\",\n  \"ᘢ\": \"ᕃ\",\n  \"ᣠ\": \"ᕃ·\",\n  \"ᘣ\": \"ᕆ\",\n  \"ᘤ\": \"ᕊ\",\n  \"ᕏ\": \"ᕌ·\",\n  \"ᖃ\": \"ᕐb\",\n  \"ᖄ\": \"ᕐḃ\",\n  \"ᖁ\": \"ᕐd\",\n  \"ᕿ\": \"ᕐP\",\n  \"ᙯ\": \"ᕐᑫ\",\n  \"ᕾ\": \"ᕐᑬ\",\n  \"ᖀ\": \"ᕐᑮ\",\n  \"ᖂ\": \"ᕐᑰ\",\n  \"ᖅ\": \"ᕐᒃ\",\n  \"ᕜ\": \"ᕚ·\",\n  \"ᣣ\": \"ᕞ·\",\n  \"ᣤ\": \"ᕦ·\",\n  \"ᕩ\": \"ᕧ·\",\n  \"ᣥ\": \"ᕫ·\",\n  \"ᣨ\": \"ᖆ·\",\n  \"ᖑ\": \"ᖕJ\",\n  \"ᙰ\": \"ᖕᒉ\",\n  \"ᖎ\": \"ᖕᒊ\",\n  \"ᖏ\": \"ᖕᒋ\",\n  \"ᖐ\": \"ᖕᒌ\",\n  \"ᖒ\": \"ᖕᒎ\",\n  \"ᖓ\": \"ᖕᒐ\",\n  \"ᖔ\": \"ᖕᒑ\",\n  \"ᙳ\": \"ᖖJ\",\n  \"ᙱ\": \"ᖖᒋ\",\n  \"ᙲ\": \"ᖖᒌ\",\n  \"ᙴ\": \"ᖖᒎ\",\n  \"ᙵ\": \"ᖖᒐ\",\n  \"ᙶ\": \"ᖖᒑ\",\n  \"ᣪ\": \"ᖗ·\",\n  \"ᙷ\": \"ᖧ·\",\n  \"ᙸ\": \"ᖨ·\",\n  \"ᙹ\": \"ᖩ·\",\n  \"ᙺ\": \"ᖪ·\",\n  \"ᙻ\": \"ᖫ·\",\n  \"ᙼ\": \"ᖬ·\",\n  \"ᙽ\": \"ᖭ·\",\n  \"⪫\": \"ᗒ\",\n  \"⪪\": \"ᗕ\",\n  \"ꓷ\": \"ᗡ\",\n  \"ᣰ\": \"ᗴ·\",\n  \"ᣲ\": \"ᘛ·\",\n  \"ᶻ\": \"ᙆ\",\n  \"ꓭ\": \"ᙠ\",\n  \"ᶺ\": \"ᣔ\",\n  \"ᴾ\": \"ᣖ\",\n  \"ᣜ\": \"ᣟᐞ\",\n  \"ˡ\": \"ᣳ\",\n  \"ʳ\": \"ᣴ\",\n  \"ˢ\": \"ᣵ\",\n  \"ᣛ\": \"ᣵ\",\n  \"ꚰ\": \"ᚹ\",\n  \"ᛡ\": \"ᚼ\",\n  \"⍿\": \"ᚽ\",\n  \"ᛂ\": \"ᚽ\",\n  \"𝈿\": \"ᛋ\",\n  \"↑\": \"ᛏ\",\n  \"↿\": \"ᛐ\",\n  \"⥮\": \"ᛐ⇂\",\n  \"⥣\": \"ᛐᛚ\",\n  \"ⵣ\": \"ᛯ\",\n  \"↾\": \"ᛚ\",\n  \"⨡\": \"ᛚ\",\n  \"⋄\": \"ᛜ\",\n  \"◇\": \"ᛜ\",\n  \"◊\": \"ᛜ\",\n  \"♢\": \"ᛜ\",\n  \"🝔\": \"ᛜ\",\n  \"𑢷\": \"ᛜ\",\n  \"𐊔\": \"ᛜ\",\n  \"⍚\": \"ᛜ̲\",\n  \"⋈\": \"ᛞ\",\n  \"⨝\": \"ᛞ\",\n  \"𐓐\": \"ᛦ\",\n  \"↕\": \"ᛨ\",\n  \"𐳼\": \"𐲂\",\n  \"𐳺\": \"𐲥\",\n  \"ㄱ\": \"ᄀ\",\n  \"ᆨ\": \"ᄀ\",\n  \"ᄁ\": \"ᄀᄀ\",\n  \"ㄲ\": \"ᄀᄀ\",\n  \"ᆩ\": \"ᄀᄀ\",\n  \"ᇺ\": \"ᄀᄂ\",\n  \"ᅚ\": \"ᄀᄃ\",\n  \"ᇃ\": \"ᄀᄅ\",\n  \"ᇻ\": \"ᄀᄇ\",\n  \"ᆪ\": \"ᄀᄉ\",\n  \"ㄳ\": \"ᄀᄉ\",\n  \"ᇄ\": \"ᄀᄉᄀ\",\n  \"ᇼ\": \"ᄀᄎ\",\n  \"ᇽ\": \"ᄀᄏ\",\n  \"ᇾ\": \"ᄀᄒ\",\n  \"ㄴ\": \"ᄂ\",\n  \"ᆫ\": \"ᄂ\",\n  \"ᄓ\": \"ᄂᄀ\",\n  \"ᇅ\": \"ᄂᄀ\",\n  \"ᄔ\": \"ᄂᄂ\",\n  \"ㅥ\": \"ᄂᄂ\",\n  \"ᇿ\": \"ᄂᄂ\",\n  \"ᄕ\": \"ᄂᄃ\",\n  \"ㅦ\": \"ᄂᄃ\",\n  \"ᇆ\": \"ᄂᄃ\",\n  \"ퟋ\": \"ᄂᄅ\",\n  \"ᄖ\": \"ᄂᄇ\",\n  \"ᅛ\": \"ᄂᄉ\",\n  \"ᇇ\": \"ᄂᄉ\",\n  \"ㅧ\": \"ᄂᄉ\",\n  \"ᅜ\": \"ᄂᄌ\",\n  \"ᆬ\": \"ᄂᄌ\",\n  \"ㄵ\": \"ᄂᄌ\",\n  \"ퟌ\": \"ᄂᄎ\",\n  \"ᇉ\": \"ᄂᄐ\",\n  \"ᅝ\": \"ᄂᄒ\",\n  \"ᆭ\": \"ᄂᄒ\",\n  \"ㄶ\": \"ᄂᄒ\",\n  \"ᇈ\": \"ᄂᅀ\",\n  \"ㅨ\": \"ᄂᅀ\",\n  \"ㄷ\": \"ᄃ\",\n  \"ᆮ\": \"ᄃ\",\n  \"ᄗ\": \"ᄃᄀ\",\n  \"ᇊ\": \"ᄃᄀ\",\n  \"ᄄ\": \"ᄃᄃ\",\n  \"ㄸ\": \"ᄃᄃ\",\n  \"ퟍ\": \"ᄃᄃ\",\n  \"ퟎ\": \"ᄃᄃᄇ\",\n  \"ᅞ\": \"ᄃᄅ\",\n  \"ᇋ\": \"ᄃᄅ\",\n  \"ꥠ\": \"ᄃᄆ\",\n  \"ꥡ\": \"ᄃᄇ\",\n  \"ퟏ\": \"ᄃᄇ\",\n  \"ꥢ\": \"ᄃᄉ\",\n  \"ퟐ\": \"ᄃᄉ\",\n  \"ퟑ\": \"ᄃᄉᄀ\",\n  \"ꥣ\": \"ᄃᄌ\",\n  \"ퟒ\": \"ᄃᄌ\",\n  \"ퟓ\": \"ᄃᄎ\",\n  \"ퟔ\": \"ᄃᄐ\",\n  \"ㄹ\": \"ᄅ\",\n  \"ᆯ\": \"ᄅ\",\n  \"ꥤ\": \"ᄅᄀ\",\n  \"ᆰ\": \"ᄅᄀ\",\n  \"ㄺ\": \"ᄅᄀ\",\n  \"ꥥ\": \"ᄅᄀᄀ\",\n  \"ퟕ\": \"ᄅᄀᄀ\",\n  \"ᇌ\": \"ᄅᄀᄉ\",\n  \"ㅩ\": \"ᄅᄀᄉ\",\n  \"ퟖ\": \"ᄅᄀᄒ\",\n  \"ᄘ\": \"ᄅᄂ\",\n  \"ᇍ\": \"ᄅᄂ\",\n  \"ꥦ\": \"ᄅᄃ\",\n  \"ᇎ\": \"ᄅᄃ\",\n  \"ㅪ\": \"ᄅᄃ\",\n  \"ꥧ\": \"ᄅᄃᄃ\",\n  \"ᇏ\": \"ᄅᄃᄒ\",\n  \"ᄙ\": \"ᄅᄅ\",\n  \"ᇐ\": \"ᄅᄅ\",\n  \"ퟗ\": \"ᄅᄅᄏ\",\n  \"ꥨ\": \"ᄅᄆ\",\n  \"ᆱ\": \"ᄅᄆ\",\n  \"ㄻ\": \"ᄅᄆ\",\n  \"ᇑ\": \"ᄅᄆᄀ\",\n  \"ᇒ\": \"ᄅᄆᄉ\",\n  \"ퟘ\": \"ᄅᄆᄒ\",\n  \"ꥩ\": \"ᄅᄇ\",\n  \"ᆲ\": \"ᄅᄇ\",\n  \"ㄼ\": \"ᄅᄇ\",\n  \"ퟙ\": \"ᄅᄇᄃ\",\n  \"ꥪ\": \"ᄅᄇᄇ\",\n  \"ᇓ\": \"ᄅᄇᄉ\",\n  \"ㅫ\": \"ᄅᄇᄉ\",\n  \"ꥫ\": \"ᄅᄇᄋ\",\n  \"ᇕ\": \"ᄅᄇᄋ\",\n  \"ퟚ\": \"ᄅᄇᄑ\",\n  \"ᇔ\": \"ᄅᄇᄒ\",\n  \"ꥬ\": \"ᄅᄉ\",\n  \"ᆳ\": \"ᄅᄉ\",\n  \"ㄽ\": \"ᄅᄉ\",\n  \"ᇖ\": \"ᄅᄉᄉ\",\n  \"ᄛ\": \"ᄅᄋ\",\n  \"ퟝ\": \"ᄅᄋ\",\n  \"ꥭ\": \"ᄅᄌ\",\n  \"ꥮ\": \"ᄅᄏ\",\n  \"ᇘ\": \"ᄅᄏ\",\n  \"ᆴ\": \"ᄅᄐ\",\n  \"ㄾ\": \"ᄅᄐ\",\n  \"ᆵ\": \"ᄅᄑ\",\n  \"ㄿ\": \"ᄅᄑ\",\n  \"ᄚ\": \"ᄅᄒ\",\n  \"ㅀ\": \"ᄅᄒ\",\n  \"ᄻ\": \"ᄅᄒ\",\n  \"ᆶ\": \"ᄅᄒ\",\n  \"ퟲ\": \"ᄅᄒ\",\n  \"ᇗ\": \"ᄅᅀ\",\n  \"ㅬ\": \"ᄅᅀ\",\n  \"ퟛ\": \"ᄅᅌ\",\n  \"ᇙ\": \"ᄅᅙ\",\n  \"ㅭ\": \"ᄅᅙ\",\n  \"ퟜ\": \"ᄅᅙᄒ\",\n  \"ㅁ\": \"ᄆ\",\n  \"ᆷ\": \"ᄆ\",\n  \"ꥯ\": \"ᄆᄀ\",\n  \"ᇚ\": \"ᄆᄀ\",\n  \"ퟞ\": \"ᄆᄂ\",\n  \"ퟟ\": \"ᄆᄂᄂ\",\n  \"ꥰ\": \"ᄆᄃ\",\n  \"ᇛ\": \"ᄆᄅ\",\n  \"ퟠ\": \"ᄆᄆ\",\n  \"ᄜ\": \"ᄆᄇ\",\n  \"ㅮ\": \"ᄆᄇ\",\n  \"ᇜ\": \"ᄆᄇ\",\n  \"ퟡ\": \"ᄆᄇᄉ\",\n  \"ꥱ\": \"ᄆᄉ\",\n  \"ᇝ\": \"ᄆᄉ\",\n  \"ㅯ\": \"ᄆᄉ\",\n  \"ᇞ\": \"ᄆᄉᄉ\",\n  \"ᄝ\": \"ᄆᄋ\",\n  \"ㅱ\": \"ᄆᄋ\",\n  \"ᇢ\": \"ᄆᄋ\",\n  \"ퟢ\": \"ᄆᄌ\",\n  \"ᇠ\": \"ᄆᄎ\",\n  \"ᇡ\": \"ᄆᄒ\",\n  \"ᇟ\": \"ᄆᅀ\",\n  \"ㅰ\": \"ᄆᅀ\",\n  \"ㅂ\": \"ᄇ\",\n  \"ᆸ\": \"ᄇ\",\n  \"ᄞ\": \"ᄇᄀ\",\n  \"ㅲ\": \"ᄇᄀ\",\n  \"ᄟ\": \"ᄇᄂ\",\n  \"ᄠ\": \"ᄇᄃ\",\n  \"ㅳ\": \"ᄇᄃ\",\n  \"ퟣ\": \"ᄇᄃ\",\n  \"ᇣ\": \"ᄇᄅ\",\n  \"ퟤ\": \"ᄇᄅᄑ\",\n  \"ퟥ\": \"ᄇᄆ\",\n  \"ᄈ\": \"ᄇᄇ\",\n  \"ㅃ\": \"ᄇᄇ\",\n  \"ퟦ\": \"ᄇᄇ\",\n  \"ᄬ\": \"ᄇᄇᄋ\",\n  \"ㅹ\": \"ᄇᄇᄋ\",\n  \"ᄡ\": \"ᄇᄉ\",\n  \"ㅄ\": \"ᄇᄉ\",\n  \"ᆹ\": \"ᄇᄉ\",\n  \"ᄢ\": \"ᄇᄉᄀ\",\n  \"ㅴ\": \"ᄇᄉᄀ\",\n  \"ᄣ\": \"ᄇᄉᄃ\",\n  \"ㅵ\": \"ᄇᄉᄃ\",\n  \"ퟧ\": \"ᄇᄉᄃ\",\n  \"ᄤ\": \"ᄇᄉᄇ\",\n  \"ᄥ\": \"ᄇᄉᄉ\",\n  \"ᄦ\": \"ᄇᄉᄌ\",\n  \"ꥲ\": \"ᄇᄉᄐ\",\n  \"ᄫ\": \"ᄇᄋ\",\n  \"ㅸ\": \"ᄇᄋ\",\n  \"ᇦ\": \"ᄇᄋ\",\n  \"ᄧ\": \"ᄇᄌ\",\n  \"ㅶ\": \"ᄇᄌ\",\n  \"ퟨ\": \"ᄇᄌ\",\n  \"ᄨ\": \"ᄇᄎ\",\n  \"ퟩ\": \"ᄇᄎ\",\n  \"ꥳ\": \"ᄇᄏ\",\n  \"ᄩ\": \"ᄇᄐ\",\n  \"ㅷ\": \"ᄇᄐ\",\n  \"ᄪ\": \"ᄇᄑ\",\n  \"ᇤ\": \"ᄇᄑ\",\n  \"ꥴ\": \"ᄇᄒ\",\n  \"ᇥ\": \"ᄇᄒ\",\n  \"ㅅ\": \"ᄉ\",\n  \"ᆺ\": \"ᄉ\",\n  \"ᄭ\": \"ᄉᄀ\",\n  \"ㅺ\": \"ᄉᄀ\",\n  \"ᇧ\": \"ᄉᄀ\",\n  \"ᄮ\": \"ᄉᄂ\",\n  \"ㅻ\": \"ᄉᄂ\",\n  \"ᄯ\": \"ᄉᄃ\",\n  \"ㅼ\": \"ᄉᄃ\",\n  \"ᇨ\": \"ᄉᄃ\",\n  \"ᄰ\": \"ᄉᄅ\",\n  \"ᇩ\": \"ᄉᄅ\",\n  \"ᄱ\": \"ᄉᄆ\",\n  \"ퟪ\": \"ᄉᄆ\",\n  \"ᄲ\": \"ᄉᄇ\",\n  \"ㅽ\": \"ᄉᄇ\",\n  \"ᇪ\": \"ᄉᄇ\",\n  \"ᄳ\": \"ᄉᄇᄀ\",\n  \"ퟫ\": \"ᄉᄇᄋ\",\n  \"ᄊ\": \"ᄉᄉ\",\n  \"ㅆ\": \"ᄉᄉ\",\n  \"ᆻ\": \"ᄉᄉ\",\n  \"ퟬ\": \"ᄉᄉᄀ\",\n  \"ퟭ\": \"ᄉᄉᄃ\",\n  \"ꥵ\": \"ᄉᄉᄇ\",\n  \"ᄴ\": \"ᄉᄉᄉ\",\n  \"ᄵ\": \"ᄉᄋ\",\n  \"ᄶ\": \"ᄉᄌ\",\n  \"ㅾ\": \"ᄉᄌ\",\n  \"ퟯ\": \"ᄉᄌ\",\n  \"ᄷ\": \"ᄉᄎ\",\n  \"ퟰ\": \"ᄉᄎ\",\n  \"ᄸ\": \"ᄉᄏ\",\n  \"ᄹ\": \"ᄉᄐ\",\n  \"ퟱ\": \"ᄉᄐ\",\n  \"ᄺ\": \"ᄉᄑ\",\n  \"ퟮ\": \"ᄉᅀ\",\n  \"ㅇ\": \"ᄋ\",\n  \"ᆼ\": \"ᄋ\",\n  \"ᅁ\": \"ᄋᄀ\",\n  \"ᇬ\": \"ᄋᄀ\",\n  \"ᇭ\": \"ᄋᄀᄀ\",\n  \"ᅂ\": \"ᄋᄃ\",\n  \"ꥶ\": \"ᄋᄅ\",\n  \"ᅃ\": \"ᄋᄆ\",\n  \"ᅄ\": \"ᄋᄇ\",\n  \"ᅅ\": \"ᄋᄉ\",\n  \"ᇱ\": \"ᄋᄉ\",\n  \"ㆂ\": \"ᄋᄉ\",\n  \"ᅇ\": \"ᄋᄋ\",\n  \"ㆀ\": \"ᄋᄋ\",\n  \"ᇮ\": \"ᄋᄋ\",\n  \"ᅈ\": \"ᄋᄌ\",\n  \"ᅉ\": \"ᄋᄎ\",\n  \"ᇯ\": \"ᄋᄏ\",\n  \"ᅊ\": \"ᄋᄐ\",\n  \"ᅋ\": \"ᄋᄑ\",\n  \"ꥷ\": \"ᄋᄒ\",\n  \"ᅆ\": \"ᄋᅀ\",\n  \"ᇲ\": \"ᄋᅀ\",\n  \"ㆃ\": \"ᄋᅀ\",\n  \"ㅈ\": \"ᄌ\",\n  \"ᆽ\": \"ᄌ\",\n  \"ퟷ\": \"ᄌᄇ\",\n  \"ퟸ\": \"ᄌᄇᄇ\",\n  \"ᅍ\": \"ᄌᄋ\",\n  \"ᄍ\": \"ᄌᄌ\",\n  \"ㅉ\": \"ᄌᄌ\",\n  \"ퟹ\": \"ᄌᄌ\",\n  \"ꥸ\": \"ᄌᄌᄒ\",\n  \"ㅊ\": \"ᄎ\",\n  \"ᆾ\": \"ᄎ\",\n  \"ᅒ\": \"ᄎᄏ\",\n  \"ᅓ\": \"ᄎᄒ\",\n  \"ㅋ\": \"ᄏ\",\n  \"ᆿ\": \"ᄏ\",\n  \"ㅌ\": \"ᄐ\",\n  \"ᇀ\": \"ᄐ\",\n  \"ꥹ\": \"ᄐᄐ\",\n  \"ㅍ\": \"ᄑ\",\n  \"ᇁ\": \"ᄑ\",\n  \"ᅖ\": \"ᄑᄇ\",\n  \"ᇳ\": \"ᄑᄇ\",\n  \"ퟺ\": \"ᄑᄉ\",\n  \"ᅗ\": \"ᄑᄋ\",\n  \"ㆄ\": \"ᄑᄋ\",\n  \"ᇴ\": \"ᄑᄋ\",\n  \"ퟻ\": \"ᄑᄐ\",\n  \"ꥺ\": \"ᄑᄒ\",\n  \"ㅎ\": \"ᄒ\",\n  \"ᇂ\": \"ᄒ\",\n  \"ᇵ\": \"ᄒᄂ\",\n  \"ᇶ\": \"ᄒᄅ\",\n  \"ᇷ\": \"ᄒᄆ\",\n  \"ᇸ\": \"ᄒᄇ\",\n  \"ꥻ\": \"ᄒᄉ\",\n  \"ᅘ\": \"ᄒᄒ\",\n  \"ㆅ\": \"ᄒᄒ\",\n  \"ᄽ\": \"ᄼᄼ\",\n  \"ᄿ\": \"ᄾᄾ\",\n  \"ㅿ\": \"ᅀ\",\n  \"ᇫ\": \"ᅀ\",\n  \"ퟳ\": \"ᅀᄇ\",\n  \"ퟴ\": \"ᅀᄇᄋ\",\n  \"ㆁ\": \"ᅌ\",\n  \"ᇰ\": \"ᅌ\",\n  \"ퟵ\": \"ᅌᄆ\",\n  \"ퟶ\": \"ᅌᄒ\",\n  \"ᅏ\": \"ᅎᅎ\",\n  \"ᅑ\": \"ᅐᅐ\",\n  \"ㆆ\": \"ᅙ\",\n  \"ᇹ\": \"ᅙ\",\n  \"ꥼ\": \"ᅙᅙ\",\n  \"ㅤ\": \"ᅠ\",\n  \"ㅏ\": \"ᅡ\",\n  \"ᆣ\": \"ᅡー\",\n  \"ᅶ\": \"ᅡᅩ\",\n  \"ᅷ\": \"ᅡᅮ\",\n  \"ᅢ\": \"ᅡ丨\",\n  \"ㅐ\": \"ᅡ丨\",\n  \"ㅑ\": \"ᅣ\",\n  \"ᅸ\": \"ᅣᅩ\",\n  \"ᅹ\": \"ᅣᅭ\",\n  \"ᆤ\": \"ᅣᅮ\",\n  \"ᅤ\": \"ᅣ丨\",\n  \"ㅒ\": \"ᅣ丨\",\n  \"ㅓ\": \"ᅥ\",\n  \"ᅼ\": \"ᅥー\",\n  \"ᅺ\": \"ᅥᅩ\",\n  \"ᅻ\": \"ᅥᅮ\",\n  \"ᅦ\": \"ᅥ丨\",\n  \"ㅔ\": \"ᅥ丨\",\n  \"ㅕ\": \"ᅧ\",\n  \"ᆥ\": \"ᅧᅣ\",\n  \"ᅽ\": \"ᅧᅩ\",\n  \"ᅾ\": \"ᅧᅮ\",\n  \"ᅨ\": \"ᅧ丨\",\n  \"ㅖ\": \"ᅧ丨\",\n  \"ㅗ\": \"ᅩ\",\n  \"ᅪ\": \"ᅩᅡ\",\n  \"ㅘ\": \"ᅩᅡ\",\n  \"ᅫ\": \"ᅩᅡ丨\",\n  \"ㅙ\": \"ᅩᅡ丨\",\n  \"ᆦ\": \"ᅩᅣ\",\n  \"ᆧ\": \"ᅩᅣ丨\",\n  \"ᅿ\": \"ᅩᅥ\",\n  \"ᆀ\": \"ᅩᅥ丨\",\n  \"ힰ\": \"ᅩᅧ\",\n  \"ᆁ\": \"ᅩᅧ丨\",\n  \"ᆂ\": \"ᅩᅩ\",\n  \"ힱ\": \"ᅩᅩ丨\",\n  \"ᆃ\": \"ᅩᅮ\",\n  \"ᅬ\": \"ᅩ丨\",\n  \"ㅚ\": \"ᅩ丨\",\n  \"ㅛ\": \"ᅭ\",\n  \"ힲ\": \"ᅭᅡ\",\n  \"ힳ\": \"ᅭᅡ丨\",\n  \"ᆄ\": \"ᅭᅣ\",\n  \"ㆇ\": \"ᅭᅣ\",\n  \"ᆆ\": \"ᅭᅣ\",\n  \"ᆅ\": \"ᅭᅣ丨\",\n  \"ㆈ\": \"ᅭᅣ丨\",\n  \"ힴ\": \"ᅭᅥ\",\n  \"ᆇ\": \"ᅭᅩ\",\n  \"ᆈ\": \"ᅭ丨\",\n  \"ㆉ\": \"ᅭ丨\",\n  \"ㅜ\": \"ᅮ\",\n  \"ᆉ\": \"ᅮᅡ\",\n  \"ᆊ\": \"ᅮᅡ丨\",\n  \"ᅯ\": \"ᅮᅥ\",\n  \"ㅝ\": \"ᅮᅥ\",\n  \"ᆋ\": \"ᅮᅥー\",\n  \"ᅰ\": \"ᅮᅥ丨\",\n  \"ㅞ\": \"ᅮᅥ丨\",\n  \"ힵ\": \"ᅮᅧ\",\n  \"ᆌ\": \"ᅮᅧ丨\",\n  \"ᆍ\": \"ᅮᅮ\",\n  \"ᅱ\": \"ᅮ丨\",\n  \"ㅟ\": \"ᅮ丨\",\n  \"ힶ\": \"ᅮ丨丨\",\n  \"ㅠ\": \"ᅲ\",\n  \"ᆎ\": \"ᅲᅡ\",\n  \"ힷ\": \"ᅲᅡ丨\",\n  \"ᆏ\": \"ᅲᅥ\",\n  \"ᆐ\": \"ᅲᅥ丨\",\n  \"ᆑ\": \"ᅲᅧ\",\n  \"ㆊ\": \"ᅲᅧ\",\n  \"ᆒ\": \"ᅲᅧ丨\",\n  \"ㆋ\": \"ᅲᅧ丨\",\n  \"ힸ\": \"ᅲᅩ\",\n  \"ᆓ\": \"ᅲᅮ\",\n  \"ᆔ\": \"ᅲ丨\",\n  \"ㆌ\": \"ᅲ丨\",\n  \"ㆍ\": \"ᆞ\",\n  \"ퟅ\": \"ᆞᅡ\",\n  \"ᆟ\": \"ᆞᅥ\",\n  \"ퟆ\": \"ᆞᅥ丨\",\n  \"ᆠ\": \"ᆞᅮ\",\n  \"ᆢ\": \"ᆞᆞ\",\n  \"ᆡ\": \"ᆞ丨\",\n  \"ㆎ\": \"ᆞ丨\",\n  \"ヘ\": \"へ\",\n  \"⍁\": \"〼\",\n  \"⧄\": \"〼\",\n  \"꒞\": \"ꁊ\",\n  \"꒬\": \"ꁐ\",\n  \"꒜\": \"ꃀ\",\n  \"꒨\": \"ꄲ\",\n  \"꒿\": \"ꉙ\",\n  \"꒾\": \"ꊱ\",\n  \"꒔\": \"ꋍ\",\n  \"꓀\": \"ꎫ\",\n  \"꓂\": \"ꎵ\",\n  \"꒺\": \"ꎿ\",\n  \"꒰\": \"ꏂ\",\n  \"꒧\": \"ꑘ\",\n  \"⊥\": \"ꓕ\",\n  \"⟂\": \"ꓕ\",\n  \"𝈜\": \"ꓕ\",\n  \"Ʇ\": \"ꓕ\",\n  \"Ꞟ\": \"ꓤ\",\n  \"⅁\": \"ꓨ\",\n  \"⅂\": \"ꓶ\",\n  \"𝈕\": \"ꓶ\",\n  \"𝈫\": \"ꓶ\",\n  \"𖼦\": \"ꓶ\",\n  \"𐐑\": \"ꓶ\",\n  \"⅃\": \"𖼀\",\n  \"𑫦\": \"𑫥𑫯\",\n  \"𑫨\": \"𑫥𑫥\",\n  \"𑫩\": \"𑫥𑫥𑫯\",\n  \"𑫪\": \"𑫥𑫥𑫰\",\n  \"𑫧\": \"𑫥𑫰\",\n  \"𑫴\": \"𑫳𑫯\",\n  \"𑫶\": \"𑫳𑫳\",\n  \"𑫷\": \"𑫳𑫳𑫯\",\n  \"𑫸\": \"𑫳𑫳𑫰\",\n  \"𑫵\": \"𑫳𑫰\",\n  \"𑫬\": \"𑫫𑫯\",\n  \"𑫭\": \"𑫫𑫫\",\n  \"𑫮\": \"𑫫𑫫𑫯\",\n  \"⊕\": \"𐊨\",\n  \"⨁\": \"𐊨\",\n  \"🜨\": \"𐊨\",\n  \"Ꚛ\": \"𐊨\",\n  \"▽\": \"𐊼\",\n  \"𝈔\": \"𐊼\",\n  \"🜄\": \"𐊼\",\n  \"⧖\": \"𐋀\",\n  \"ꞛ\": \"𐐺\",\n  \"Ꞛ\": \"𐐒\",\n  \"𐒠\": \"𐒆\",\n  \"𐏑\": \"𐎂\",\n  \"𐏓\": \"𐎓\",\n  \"𒀸\": \"𐎚\",\n  \"☥\": \"𐦞\",\n  \"𓋹\": \"𐦞\",\n  \"〹\": \"卄\",\n  \"不\": \"不\",\n  \"丽\": \"丽\",\n  \"並\": \"並\",\n  \"⎜\": \"丨\",\n  \"⎟\": \"丨\",\n  \"⎢\": \"丨\",\n  \"⎥\": \"丨\",\n  \"⎪\": \"丨\",\n  \"⎮\": \"丨\",\n  \"㇑\": \"丨\",\n  \"ᅵ\": \"丨\",\n  \"ㅣ\": \"丨\",\n  \"⼁\": \"丨\",\n  \"ᆜ\": \"丨ー\",\n  \"ᆘ\": \"丨ᅡ\",\n  \"ᆙ\": \"丨ᅣ\",\n  \"ힽ\": \"丨ᅣᅩ\",\n  \"ힾ\": \"丨ᅣ丨\",\n  \"ힿ\": \"丨ᅧ\",\n  \"ퟀ\": \"丨ᅧ丨\",\n  \"ᆚ\": \"丨ᅩ\",\n  \"ퟁ\": \"丨ᅩ丨\",\n  \"ퟂ\": \"丨ᅭ\",\n  \"ᆛ\": \"丨ᅮ\",\n  \"ퟃ\": \"丨ᅲ\",\n  \"ᆝ\": \"丨ᆞ\",\n  \"ퟄ\": \"丨丨\",\n  \"串\": \"串\",\n  \"丸\": \"丸\",\n  \"丹\": \"丹\",\n  \"乁\": \"乁\",\n  \"㇠\": \"乙\",\n  \"⼄\": \"乙\",\n  \"㇟\": \"乚\",\n  \"⺃\": \"乚\",\n  \"㇖\": \"乛\",\n  \"⺂\": \"乛\",\n  \"⻲\": \"亀\",\n  \"亂\": \"亂\",\n  \"㇚\": \"亅\",\n  \"⼅\": \"亅\",\n  \"了\": \"了\",\n  \"ニ\": \"二\",\n  \"⼆\": \"二\",\n  \"𠄢\": \"𠄢\",\n  \"⼇\": \"亠\",\n  \"亮\": \"亮\",\n  \"⼈\": \"人\",\n  \"イ\": \"亻\",\n  \"⺅\": \"亻\",\n  \"什\": \"什\",\n  \"仌\": \"仌\",\n  \"令\": \"令\",\n  \"你\": \"你\",\n  \"倂\": \"併\",\n  \"倂\": \"併\",\n  \"侀\": \"侀\",\n  \"來\": \"來\",\n  \"例\": \"例\",\n  \"侮\": \"侮\",\n  \"侮\": \"侮\",\n  \"侻\": \"侻\",\n  \"便\": \"便\",\n  \"值\": \"値\",\n  \"倫\": \"倫\",\n  \"偺\": \"偺\",\n  \"備\": \"備\",\n  \"像\": \"像\",\n  \"僚\": \"僚\",\n  \"僧\": \"僧\",\n  \"僧\": \"僧\",\n  \"㒞\": \"㒞\",\n  \"⼉\": \"儿\",\n  \"兀\": \"兀\",\n  \"⺎\": \"兀\",\n  \"充\": \"充\",\n  \"免\": \"免\",\n  \"免\": \"免\",\n  \"兔\": \"兔\",\n  \"兤\": \"兤\",\n  \"⼊\": \"入\",\n  \"內\": \"內\",\n  \"全\": \"全\",\n  \"兩\": \"兩\",\n  \"ハ\": \"八\",\n  \"⼋\": \"八\",\n  \"六\": \"六\",\n  \"具\": \"具\",\n  \"𠔜\": \"𠔜\",\n  \"𠔥\": \"𠔥\",\n  \"冀\": \"冀\",\n  \"㒹\": \"㒹\",\n  \"⼌\": \"冂\",\n  \"再\": \"再\",\n  \"𠕋\": \"𠕋\",\n  \"冒\": \"冒\",\n  \"冕\": \"冕\",\n  \"㒻\": \"㒻\",\n  \"最\": \"最\",\n  \"⼍\": \"冖\",\n  \"冗\": \"冗\",\n  \"冤\": \"冤\",\n  \"⼎\": \"冫\",\n  \"冬\": \"冬\",\n  \"况\": \"况\",\n  \"况\": \"况\",\n  \"冷\": \"冷\",\n  \"凉\": \"凉\",\n  \"凌\": \"凌\",\n  \"凜\": \"凜\",\n  \"凞\": \"凞\",\n  \"⼏\": \"几\",\n  \"𠘺\": \"𠘺\",\n  \"凵\": \"凵\",\n  \"⼐\": \"凵\",\n  \"⼑\": \"刀\",\n  \"⺉\": \"刂\",\n  \"刃\": \"刃\",\n  \"切\": \"切\",\n  \"切\": \"切\",\n  \"列\": \"列\",\n  \"利\": \"利\",\n  \"㓟\": \"㓟\",\n  \"刺\": \"刺\",\n  \"刻\": \"刻\",\n  \"剆\": \"剆\",\n  \"割\": \"割\",\n  \"剷\": \"剷\",\n  \"劉\": \"劉\",\n  \"𠠄\": \"𠠄\",\n  \"カ\": \"力\",\n  \"力\": \"力\",\n  \"⼒\": \"力\",\n  \"劣\": \"劣\",\n  \"㔕\": \"㔕\",\n  \"劳\": \"劳\",\n  \"勇\": \"勇\",\n  \"勇\": \"勇\",\n  \"勉\": \"勉\",\n  \"勉\": \"勉\",\n  \"勒\": \"勒\",\n  \"勞\": \"勞\",\n  \"勤\": \"勤\",\n  \"勤\": \"勤\",\n  \"勵\": \"勵\",\n  \"⼓\": \"勹\",\n  \"勺\": \"勺\",\n  \"勺\": \"勺\",\n  \"包\": \"包\",\n  \"匆\": \"匆\",\n  \"𠣞\": \"𠣞\",\n  \"⼔\": \"匕\",\n  \"北\": \"北\",\n  \"北\": \"北\",\n  \"⼕\": \"匚\",\n  \"⼖\": \"匸\",\n  \"匿\": \"匿\",\n  \"⼗\": \"十\",\n  \"〸\": \"十\",\n  \"〺\": \"卅\",\n  \"卉\": \"卉\",\n  \"࿖\": \"卍\",\n  \"࿕\": \"卐\",\n  \"卑\": \"卑\",\n  \"卑\": \"卑\",\n  \"博\": \"博\",\n  \"ト\": \"卜\",\n  \"⼘\": \"卜\",\n  \"⼙\": \"卩\",\n  \"⺋\": \"㔾\",\n  \"即\": \"即\",\n  \"卵\": \"卵\",\n  \"卽\": \"卽\",\n  \"卿\": \"卿\",\n  \"卿\": \"卿\",\n  \"卿\": \"卿\",\n  \"⼚\": \"厂\",\n  \"𠨬\": \"𠨬\",\n  \"⼛\": \"厶\",\n  \"參\": \"參\",\n  \"⼜\": \"又\",\n  \"及\": \"及\",\n  \"叟\": \"叟\",\n  \"𠭣\": \"𠭣\",\n  \"ロ\": \"口\",\n  \"⼝\": \"口\",\n  \"囗\": \"口\",\n  \"⼞\": \"口\",\n  \"句\": \"句\",\n  \"叫\": \"叫\",\n  \"叱\": \"叱\",\n  \"吆\": \"吆\",\n  \"吏\": \"吏\",\n  \"吝\": \"吝\",\n  \"吸\": \"吸\",\n  \"呂\": \"呂\",\n  \"呈\": \"呈\",\n  \"周\": \"周\",\n  \"咞\": \"咞\",\n  \"咢\": \"咢\",\n  \"咽\": \"咽\",\n  \"䎛\": \"㖈\",\n  \"哶\": \"哶\",\n  \"唐\": \"唐\",\n  \"啓\": \"啓\",\n  \"啟\": \"啓\",\n  \"啕\": \"啕\",\n  \"啣\": \"啣\",\n  \"善\": \"善\",\n  \"善\": \"善\",\n  \"喇\": \"喇\",\n  \"喙\": \"喙\",\n  \"喙\": \"喙\",\n  \"喝\": \"喝\",\n  \"喝\": \"喝\",\n  \"喫\": \"喫\",\n  \"喳\": \"喳\",\n  \"嗀\": \"嗀\",\n  \"嗂\": \"嗂\",\n  \"嗢\": \"嗢\",\n  \"嘆\": \"嘆\",\n  \"嘆\": \"嘆\",\n  \"噑\": \"噑\",\n  \"噴\": \"噴\",\n  \"器\": \"器\",\n  \"囹\": \"囹\",\n  \"圖\": \"圖\",\n  \"圗\": \"圗\",\n  \"⼟\": \"土\",\n  \"士\": \"土\",\n  \"⼠\": \"土\",\n  \"型\": \"型\",\n  \"城\": \"城\",\n  \"㦳\": \"㘽\",\n  \"埴\": \"埴\",\n  \"堍\": \"堍\",\n  \"報\": \"報\",\n  \"堲\": \"堲\",\n  \"塀\": \"塀\",\n  \"塚\": \"塚\",\n  \"塚\": \"塚\",\n  \"塞\": \"塞\",\n  \"填\": \"塡\",\n  \"壿\": \"墫\",\n  \"墬\": \"墬\",\n  \"墳\": \"墳\",\n  \"壘\": \"壘\",\n  \"壟\": \"壟\",\n  \"𡓤\": \"𡓤\",\n  \"壮\": \"壮\",\n  \"売\": \"売\",\n  \"壷\": \"壷\",\n  \"⼡\": \"夂\",\n  \"夆\": \"夆\",\n  \"⼢\": \"夊\",\n  \"タ\": \"夕\",\n  \"⼣\": \"夕\",\n  \"多\": \"多\",\n  \"夢\": \"夢\",\n  \"⼤\": \"大\",\n  \"奄\": \"奄\",\n  \"奈\": \"奈\",\n  \"契\": \"契\",\n  \"奔\": \"奔\",\n  \"奢\": \"奢\",\n  \"女\": \"女\",\n  \"⼥\": \"女\",\n  \"𡚨\": \"𡚨\",\n  \"𡛪\": \"𡛪\",\n  \"姘\": \"姘\",\n  \"姬\": \"姬\",\n  \"娛\": \"娛\",\n  \"娧\": \"娧\",\n  \"婢\": \"婢\",\n  \"婦\": \"婦\",\n  \"嬀\": \"媯\",\n  \"㛮\": \"㛮\",\n  \"㛼\": \"㛼\",\n  \"媵\": \"媵\",\n  \"嬈\": \"嬈\",\n  \"嬨\": \"嬨\",\n  \"嬾\": \"嬾\",\n  \"嬾\": \"嬾\",\n  \"⼦\": \"子\",\n  \"⼧\": \"宀\",\n  \"宅\": \"宅\",\n  \"𡧈\": \"𡧈\",\n  \"寃\": \"寃\",\n  \"寘\": \"寘\",\n  \"寧\": \"寧\",\n  \"寧\": \"寧\",\n  \"寧\": \"寧\",\n  \"寮\": \"寮\",\n  \"寳\": \"寳\",\n  \"𡬘\": \"𡬘\",\n  \"⼨\": \"寸\",\n  \"寿\": \"寿\",\n  \"将\": \"将\",\n  \"⼩\": \"小\",\n  \"尢\": \"尢\",\n  \"⺐\": \"尢\",\n  \"⼪\": \"尢\",\n  \"⺏\": \"尣\",\n  \"㞁\": \"㞁\",\n  \"⼫\": \"尸\",\n  \"尿\": \"尿\",\n  \"屠\": \"屠\",\n  \"屢\": \"屢\",\n  \"層\": \"層\",\n  \"履\": \"履\",\n  \"屮\": \"屮\",\n  \"屮\": \"屮\",\n  \"⼬\": \"屮\",\n  \"𡴋\": \"𡴋\",\n  \"⼭\": \"山\",\n  \"峀\": \"峀\",\n  \"岍\": \"岍\",\n  \"𡷤\": \"𡷤\",\n  \"𡷦\": \"𡷦\",\n  \"崙\": \"崙\",\n  \"嵃\": \"嵃\",\n  \"嵐\": \"嵐\",\n  \"嵫\": \"嵫\",\n  \"嵮\": \"嵮\",\n  \"嵼\": \"嵼\",\n  \"嶲\": \"嶲\",\n  \"嶺\": \"嶺\",\n  \"⼮\": \"巛\",\n  \"巢\": \"巢\",\n  \"エ\": \"工\",\n  \"⼯\": \"工\",\n  \"⼰\": \"己\",\n  \"⺒\": \"巳\",\n  \"㠯\": \"㠯\",\n  \"巽\": \"巽\",\n  \"⼱\": \"巾\",\n  \"帲\": \"帡\",\n  \"帨\": \"帨\",\n  \"帽\": \"帽\",\n  \"幩\": \"幩\",\n  \"㡢\": \"㡢\",\n  \"𢆃\": \"𢆃\",\n  \"⼲\": \"干\",\n  \"年\": \"年\",\n  \"𢆟\": \"𢆟\",\n  \"⺓\": \"幺\",\n  \"⼳\": \"幺\",\n  \"⼴\": \"广\",\n  \"度\": \"度\",\n  \"㡼\": \"㡼\",\n  \"庰\": \"庰\",\n  \"庳\": \"庳\",\n  \"庶\": \"庶\",\n  \"廊\": \"廊\",\n  \"廊\": \"廊\",\n  \"廉\": \"廉\",\n  \"廒\": \"廒\",\n  \"廓\": \"廓\",\n  \"廙\": \"廙\",\n  \"廬\": \"廬\",\n  \"⼵\": \"廴\",\n  \"廾\": \"廾\",\n  \"⼶\": \"廾\",\n  \"𢌱\": \"𢌱\",\n  \"𢌱\": \"𢌱\",\n  \"弄\": \"弄\",\n  \"⼷\": \"弋\",\n  \"⼸\": \"弓\",\n  \"弢\": \"弢\",\n  \"弢\": \"弢\",\n  \"⼹\": \"彐\",\n  \"⺔\": \"彑\",\n  \"当\": \"当\",\n  \"㣇\": \"㣇\",\n  \"⼺\": \"彡\",\n  \"形\": \"形\",\n  \"彩\": \"彩\",\n  \"彫\": \"彫\",\n  \"⼻\": \"彳\",\n  \"律\": \"律\",\n  \"㣣\": \"㣣\",\n  \"徚\": \"徚\",\n  \"復\": \"復\",\n  \"徭\": \"徭\",\n  \"⼼\": \"心\",\n  \"⺖\": \"忄\",\n  \"⺗\": \"㣺\",\n  \"忍\": \"忍\",\n  \"志\": \"志\",\n  \"念\": \"念\",\n  \"忹\": \"忹\",\n  \"怒\": \"怒\",\n  \"怜\": \"怜\",\n  \"恵\": \"恵\",\n  \"㤜\": \"㤜\",\n  \"㤺\": \"㤺\",\n  \"悁\": \"悁\",\n  \"悔\": \"悔\",\n  \"悔\": \"悔\",\n  \"惇\": \"惇\",\n  \"惘\": \"惘\",\n  \"惡\": \"惡\",\n  \"𢛔\": \"𢛔\",\n  \"愈\": \"愈\",\n  \"慨\": \"慨\",\n  \"慄\": \"慄\",\n  \"慈\": \"慈\",\n  \"慌\": \"慌\",\n  \"慌\": \"慌\",\n  \"慎\": \"慎\",\n  \"慎\": \"慎\",\n  \"慠\": \"慠\",\n  \"慺\": \"慺\",\n  \"憎\": \"憎\",\n  \"憎\": \"憎\",\n  \"憎\": \"憎\",\n  \"憐\": \"憐\",\n  \"憤\": \"憤\",\n  \"憯\": \"憯\",\n  \"憲\": \"憲\",\n  \"𢡄\": \"𢡄\",\n  \"𢡊\": \"𢡊\",\n  \"懞\": \"懞\",\n  \"懲\": \"懲\",\n  \"懲\": \"懲\",\n  \"懲\": \"懲\",\n  \"懶\": \"懶\",\n  \"懶\": \"懶\",\n  \"戀\": \"戀\",\n  \"⼽\": \"戈\",\n  \"成\": \"成\",\n  \"戛\": \"戛\",\n  \"戮\": \"戮\",\n  \"戴\": \"戴\",\n  \"⼾\": \"戶\",\n  \"戸\": \"戶\",\n  \"⼿\": \"手\",\n  \"⺘\": \"扌\",\n  \"扝\": \"扝\",\n  \"抱\": \"抱\",\n  \"拉\": \"拉\",\n  \"拏\": \"拏\",\n  \"拓\": \"拓\",\n  \"拔\": \"拔\",\n  \"拼\": \"拼\",\n  \"拾\": \"拾\",\n  \"𢬌\": \"𢬌\",\n  \"挽\": \"挽\",\n  \"捐\": \"捐\",\n  \"捨\": \"捨\",\n  \"捻\": \"捻\",\n  \"掃\": \"掃\",\n  \"掠\": \"掠\",\n  \"掩\": \"掩\",\n  \"揄\": \"揄\",\n  \"揤\": \"揤\",\n  \"摒\": \"摒\",\n  \"𢯱\": \"𢯱\",\n  \"搜\": \"搜\",\n  \"搢\": \"搢\",\n  \"揅\": \"揅\",\n  \"摩\": \"摩\",\n  \"摷\": \"摷\",\n  \"摾\": \"摾\",\n  \"㨮\": \"㨮\",\n  \"搉\": \"㩁\",\n  \"撚\": \"撚\",\n  \"撝\": \"撝\",\n  \"擄\": \"擄\",\n  \"㩬\": \"㩬\",\n  \"⽀\": \"支\",\n  \"⽁\": \"攴\",\n  \"⺙\": \"攵\",\n  \"敏\": \"敏\",\n  \"敏\": \"敏\",\n  \"敖\": \"敖\",\n  \"敬\": \"敬\",\n  \"數\": \"數\",\n  \"𣀊\": \"𣀊\",\n  \"⽂\": \"文\",\n  \"⻫\": \"斉\",\n  \"⽃\": \"斗\",\n  \"料\": \"料\",\n  \"⽄\": \"斤\",\n  \"⽅\": \"方\",\n  \"旅\": \"旅\",\n  \"⽆\": \"无\",\n  \"⺛\": \"旡\",\n  \"既\": \"既\",\n  \"旣\": \"旣\",\n  \"⽇\": \"日\",\n  \"易\": \"易\",\n  \"曶\": \"㫚\",\n  \"㫤\": \"㫤\",\n  \"晉\": \"晉\",\n  \"晩\": \"晚\",\n  \"晴\": \"晴\",\n  \"晴\": \"晴\",\n  \"暑\": \"暑\",\n  \"暑\": \"暑\",\n  \"暈\": \"暈\",\n  \"㬈\": \"㬈\",\n  \"暜\": \"暜\",\n  \"暴\": \"暴\",\n  \"曆\": \"曆\",\n  \"㬙\": \"㬙\",\n  \"𣊸\": \"𣊸\",\n  \"⽈\": \"曰\",\n  \"更\": \"更\",\n  \"書\": \"書\",\n  \"⽉\": \"月\",\n  \"𣍟\": \"𣍟\",\n  \"肦\": \"朌\",\n  \"胐\": \"朏\",\n  \"胊\": \"朐\",\n  \"脁\": \"朓\",\n  \"胶\": \"㬵\",\n  \"朗\": \"朗\",\n  \"朗\": \"朗\",\n  \"朗\": \"朗\",\n  \"脧\": \"朘\",\n  \"望\": \"望\",\n  \"望\": \"望\",\n  \"幐\": \"㬺\",\n  \"䐠\": \"㬻\",\n  \"𣎓\": \"𣎓\",\n  \"膧\": \"朣\",\n  \"𣎜\": \"𣎜\",\n  \"⽊\": \"木\",\n  \"李\": \"李\",\n  \"杓\": \"杓\",\n  \"杖\": \"杖\",\n  \"杞\": \"杞\",\n  \"𣏃\": \"𣏃\",\n  \"柿\": \"杮\",\n  \"杻\": \"杻\",\n  \"枅\": \"枅\",\n  \"林\": \"林\",\n  \"㭉\": \"㭉\",\n  \"𣏕\": \"𣏕\",\n  \"柳\": \"柳\",\n  \"柺\": \"柺\",\n  \"栗\": \"栗\",\n  \"栟\": \"栟\",\n  \"桒\": \"桒\",\n  \"𣑭\": \"𣑭\",\n  \"梁\": \"梁\",\n  \"梅\": \"梅\",\n  \"梅\": \"梅\",\n  \"梎\": \"梎\",\n  \"梨\": \"梨\",\n  \"椔\": \"椔\",\n  \"楂\": \"楂\",\n  \"㮝\": \"㮝\",\n  \"㮝\": \"㮝\",\n  \"槩\": \"㮣\",\n  \"樧\": \"榝\",\n  \"榣\": \"榣\",\n  \"槪\": \"槪\",\n  \"樂\": \"樂\",\n  \"樂\": \"樂\",\n  \"樂\": \"樂\",\n  \"樓\": \"樓\",\n  \"𣚣\": \"𣚣\",\n  \"檨\": \"檨\",\n  \"櫓\": \"櫓\",\n  \"櫛\": \"櫛\",\n  \"欄\": \"欄\",\n  \"㰘\": \"㰘\",\n  \"⽋\": \"欠\",\n  \"次\": \"次\",\n  \"𣢧\": \"𣢧\",\n  \"歔\": \"歔\",\n  \"㱎\": \"㱎\",\n  \"⽌\": \"止\",\n  \"⻭\": \"歯\",\n  \"歲\": \"歲\",\n  \"歷\": \"歷\",\n  \"歹\": \"歹\",\n  \"⽍\": \"歹\",\n  \"⺞\": \"歺\",\n  \"殟\": \"殟\",\n  \"殮\": \"殮\",\n  \"⽎\": \"殳\",\n  \"殺\": \"殺\",\n  \"殺\": \"殺\",\n  \"殺\": \"殺\",\n  \"殻\": \"殻\",\n  \"𣪍\": \"𣪍\",\n  \"⽏\": \"毋\",\n  \"⺟\": \"母\",\n  \"𣫺\": \"𣫺\",\n  \"⽐\": \"比\",\n  \"⽑\": \"毛\",\n  \"⽒\": \"氏\",\n  \"⺠\": \"民\",\n  \"⽓\": \"气\",\n  \"⽔\": \"水\",\n  \"⺡\": \"氵\",\n  \"⺢\": \"氺\",\n  \"汎\": \"汎\",\n  \"汧\": \"汧\",\n  \"沈\": \"沈\",\n  \"沿\": \"沿\",\n  \"泌\": \"泌\",\n  \"泍\": \"泍\",\n  \"泥\": \"泥\",\n  \"𣲼\": \"𣲼\",\n  \"洛\": \"洛\",\n  \"洞\": \"洞\",\n  \"洴\": \"洴\",\n  \"派\": \"派\",\n  \"流\": \"流\",\n  \"流\": \"流\",\n  \"流\": \"流\",\n  \"洖\": \"洖\",\n  \"浩\": \"浩\",\n  \"浪\": \"浪\",\n  \"海\": \"海\",\n  \"海\": \"海\",\n  \"浸\": \"浸\",\n  \"涅\": \"涅\",\n  \"𣴞\": \"𣴞\",\n  \"淋\": \"淋\",\n  \"淚\": \"淚\",\n  \"淪\": \"淪\",\n  \"淹\": \"淹\",\n  \"渚\": \"渚\",\n  \"港\": \"港\",\n  \"湮\": \"湮\",\n  \"潙\": \"溈\",\n  \"滋\": \"滋\",\n  \"滋\": \"滋\",\n  \"溜\": \"溜\",\n  \"溺\": \"溺\",\n  \"滇\": \"滇\",\n  \"滑\": \"滑\",\n  \"滛\": \"滛\",\n  \"㴳\": \"㴳\",\n  \"漏\": \"漏\",\n  \"漢\": \"漢\",\n  \"漢\": \"漢\",\n  \"漣\": \"漣\",\n  \"𣻑\": \"𣻑\",\n  \"潮\": \"潮\",\n  \"𣽞\": \"𣽞\",\n  \"𣾎\": \"𣾎\",\n  \"濆\": \"濆\",\n  \"濫\": \"濫\",\n  \"濾\": \"濾\",\n  \"瀛\": \"瀛\",\n  \"瀞\": \"瀞\",\n  \"瀞\": \"瀞\",\n  \"瀹\": \"瀹\",\n  \"灊\": \"灊\",\n  \"㶖\": \"㶖\",\n  \"⽕\": \"火\",\n  \"⺣\": \"灬\",\n  \"灰\": \"灰\",\n  \"灷\": \"灷\",\n  \"災\": \"災\",\n  \"炙\": \"炙\",\n  \"炭\": \"炭\",\n  \"烈\": \"烈\",\n  \"烙\": \"烙\",\n  \"煮\": \"煮\",\n  \"煮\": \"煮\",\n  \"𤉣\": \"𤉣\",\n  \"煅\": \"煅\",\n  \"煉\": \"煉\",\n  \"𤋮\": \"𤋮\",\n  \"熜\": \"熜\",\n  \"燎\": \"燎\",\n  \"燐\": \"燐\",\n  \"𤎫\": \"𤎫\",\n  \"爐\": \"爐\",\n  \"爛\": \"爛\",\n  \"爨\": \"爨\",\n  \"⽖\": \"爪\",\n  \"爫\": \"爫\",\n  \"⺤\": \"爫\",\n  \"爵\": \"爵\",\n  \"爵\": \"爵\",\n  \"⽗\": \"父\",\n  \"⽘\": \"爻\",\n  \"⺦\": \"丬\",\n  \"⽙\": \"爿\",\n  \"⽚\": \"片\",\n  \"牐\": \"牐\",\n  \"⽛\": \"牙\",\n  \"𤘈\": \"𤘈\",\n  \"⽜\": \"牛\",\n  \"牢\": \"牢\",\n  \"犀\": \"犀\",\n  \"犕\": \"犕\",\n  \"⽝\": \"犬\",\n  \"⺨\": \"犭\",\n  \"犯\": \"犯\",\n  \"狀\": \"狀\",\n  \"𤜵\": \"𤜵\",\n  \"狼\": \"狼\",\n  \"猪\": \"猪\",\n  \"猪\": \"猪\",\n  \"𤠔\": \"𤠔\",\n  \"獵\": \"獵\",\n  \"獺\": \"獺\",\n  \"⽞\": \"玄\",\n  \"率\": \"率\",\n  \"率\": \"率\",\n  \"⽟\": \"玉\",\n  \"王\": \"王\",\n  \"㺬\": \"㺬\",\n  \"玥\": \"玥\",\n  \"玲\": \"玲\",\n  \"㺸\": \"㺸\",\n  \"㺸\": \"㺸\",\n  \"珞\": \"珞\",\n  \"琉\": \"琉\",\n  \"理\": \"理\",\n  \"琢\": \"琢\",\n  \"瑇\": \"瑇\",\n  \"瑜\": \"瑜\",\n  \"瑩\": \"瑩\",\n  \"瑱\": \"瑱\",\n  \"瑱\": \"瑱\",\n  \"璅\": \"璅\",\n  \"璉\": \"璉\",\n  \"璘\": \"璘\",\n  \"瓊\": \"瓊\",\n  \"⽠\": \"瓜\",\n  \"⽡\": \"瓦\",\n  \"㼛\": \"㼛\",\n  \"甆\": \"甆\",\n  \"⽢\": \"甘\",\n  \"⽣\": \"生\",\n  \"甤\": \"甤\",\n  \"⽤\": \"用\",\n  \"⽥\": \"田\",\n  \"画\": \"画\",\n  \"甾\": \"甾\",\n  \"𤰶\": \"𤰶\",\n  \"留\": \"留\",\n  \"略\": \"略\",\n  \"異\": \"異\",\n  \"異\": \"異\",\n  \"𤲒\": \"𤲒\",\n  \"⽦\": \"疋\",\n  \"⽧\": \"疒\",\n  \"痢\": \"痢\",\n  \"瘐\": \"瘐\",\n  \"瘟\": \"瘟\",\n  \"瘝\": \"瘝\",\n  \"療\": \"療\",\n  \"癩\": \"癩\",\n  \"⽨\": \"癶\",\n  \"⽩\": \"白\",\n  \"𤾡\": \"𤾡\",\n  \"𤾸\": \"𤾸\",\n  \"⽪\": \"皮\",\n  \"⽫\": \"皿\",\n  \"𥁄\": \"𥁄\",\n  \"㿼\": \"㿼\",\n  \"益\": \"益\",\n  \"益\": \"益\",\n  \"盛\": \"盛\",\n  \"盧\": \"盧\",\n  \"䀈\": \"䀈\",\n  \"⽬\": \"目\",\n  \"直\": \"直\",\n  \"直\": \"直\",\n  \"𥃲\": \"𥃲\",\n  \"𥃳\": \"𥃳\",\n  \"省\": \"省\",\n  \"䀘\": \"䀘\",\n  \"𥄙\": \"𥄙\",\n  \"眞\": \"眞\",\n  \"真\": \"真\",\n  \"真\": \"真\",\n  \"𥄳\": \"𥄳\",\n  \"着\": \"着\",\n  \"睊\": \"睊\",\n  \"睊\": \"睊\",\n  \"鿃\": \"䀹\",\n  \"䀹\": \"䀹\",\n  \"䀹\": \"䀹\",\n  \"晣\": \"䀿\",\n  \"䁆\": \"䁆\",\n  \"瞋\": \"瞋\",\n  \"𥉉\": \"𥉉\",\n  \"瞧\": \"瞧\",\n  \"⽭\": \"矛\",\n  \"⽮\": \"矢\",\n  \"⽯\": \"石\",\n  \"䂖\": \"䂖\",\n  \"𥐝\": \"𥐝\",\n  \"硏\": \"研\",\n  \"硎\": \"硎\",\n  \"硫\": \"硫\",\n  \"碌\": \"碌\",\n  \"碌\": \"碌\",\n  \"碑\": \"碑\",\n  \"磊\": \"磊\",\n  \"磌\": \"磌\",\n  \"磌\": \"磌\",\n  \"磻\": \"磻\",\n  \"䃣\": \"䃣\",\n  \"礪\": \"礪\",\n  \"⽰\": \"示\",\n  \"⺭\": \"礻\",\n  \"礼\": \"礼\",\n  \"社\": \"社\",\n  \"祈\": \"祈\",\n  \"祉\": \"祉\",\n  \"𥘦\": \"𥘦\",\n  \"祐\": \"祐\",\n  \"祖\": \"祖\",\n  \"祖\": \"祖\",\n  \"祝\": \"祝\",\n  \"神\": \"神\",\n  \"祥\": \"祥\",\n  \"視\": \"視\",\n  \"視\": \"視\",\n  \"祿\": \"祿\",\n  \"𥚚\": \"𥚚\",\n  \"禍\": \"禍\",\n  \"禎\": \"禎\",\n  \"福\": \"福\",\n  \"福\": \"福\",\n  \"𥛅\": \"𥛅\",\n  \"禮\": \"禮\",\n  \"⽱\": \"禸\",\n  \"⽲\": \"禾\",\n  \"秊\": \"秊\",\n  \"䄯\": \"䄯\",\n  \"秫\": \"秫\",\n  \"稜\": \"稜\",\n  \"穊\": \"穊\",\n  \"穀\": \"穀\",\n  \"穀\": \"穀\",\n  \"穏\": \"穏\",\n  \"⽳\": \"穴\",\n  \"突\": \"突\",\n  \"𥥼\": \"𥥼\",\n  \"窱\": \"窱\",\n  \"立\": \"立\",\n  \"⽴\": \"立\",\n  \"⻯\": \"竜\",\n  \"𥪧\": \"𥪧\",\n  \"𥪧\": \"𥪧\",\n  \"竮\": \"竮\",\n  \"⽵\": \"竹\",\n  \"笠\": \"笠\",\n  \"節\": \"節\",\n  \"節\": \"節\",\n  \"䈂\": \"䈂\",\n  \"𥮫\": \"𥮫\",\n  \"篆\": \"篆\",\n  \"䈧\": \"䈧\",\n  \"築\": \"築\",\n  \"𥲀\": \"𥲀\",\n  \"𥳐\": \"𥳐\",\n  \"簾\": \"簾\",\n  \"籠\": \"籠\",\n  \"⽶\": \"米\",\n  \"类\": \"类\",\n  \"粒\": \"粒\",\n  \"精\": \"精\",\n  \"糒\": \"糒\",\n  \"糖\": \"糖\",\n  \"糨\": \"糨\",\n  \"䊠\": \"䊠\",\n  \"糣\": \"糣\",\n  \"糧\": \"糧\",\n  \"⽷\": \"糸\",\n  \"⺯\": \"糹\",\n  \"𥾆\": \"𥾆\",\n  \"紀\": \"紀\",\n  \"紐\": \"紐\",\n  \"索\": \"索\",\n  \"累\": \"累\",\n  \"絶\": \"絕\",\n  \"絣\": \"絣\",\n  \"絛\": \"絛\",\n  \"綠\": \"綠\",\n  \"綾\": \"綾\",\n  \"緇\": \"緇\",\n  \"練\": \"練\",\n  \"練\": \"練\",\n  \"練\": \"練\",\n  \"縂\": \"縂\",\n  \"䌁\": \"䌁\",\n  \"縉\": \"縉\",\n  \"縷\": \"縷\",\n  \"繁\": \"繁\",\n  \"繅\": \"繅\",\n  \"𦇚\": \"𦇚\",\n  \"䌴\": \"䌴\",\n  \"⽸\": \"缶\",\n  \"𦈨\": \"𦈨\",\n  \"缾\": \"缾\",\n  \"𦉇\": \"𦉇\",\n  \"⽹\": \"网\",\n  \"⺫\": \"罒\",\n  \"⺲\": \"罒\",\n  \"⺱\": \"罓\",\n  \"䍙\": \"䍙\",\n  \"署\": \"署\",\n  \"𦋙\": \"𦋙\",\n  \"罹\": \"罹\",\n  \"罺\": \"罺\",\n  \"羅\": \"羅\",\n  \"𦌾\": \"𦌾\",\n  \"⽺\": \"羊\",\n  \"羕\": \"羕\",\n  \"羚\": \"羚\",\n  \"羽\": \"羽\",\n  \"⽻\": \"羽\",\n  \"翺\": \"翺\",\n  \"老\": \"老\",\n  \"⽼\": \"老\",\n  \"⺹\": \"耂\",\n  \"者\": \"者\",\n  \"者\": \"者\",\n  \"者\": \"者\",\n  \"⽽\": \"而\",\n  \"𦓚\": \"𦓚\",\n  \"⽾\": \"耒\",\n  \"𦔣\": \"𦔣\",\n  \"⽿\": \"耳\",\n  \"聆\": \"聆\",\n  \"聠\": \"聠\",\n  \"𦖨\": \"𦖨\",\n  \"聯\": \"聯\",\n  \"聰\": \"聰\",\n  \"聾\": \"聾\",\n  \"⾀\": \"聿\",\n  \"⺺\": \"肀\",\n  \"⾁\": \"肉\",\n  \"肋\": \"肋\",\n  \"肭\": \"肭\",\n  \"育\": \"育\",\n  \"䏕\": \"䏕\",\n  \"䏙\": \"䏙\",\n  \"腁\": \"胼\",\n  \"脃\": \"脃\",\n  \"脾\": \"脾\",\n  \"䐋\": \"䐋\",\n  \"朡\": \"朡\",\n  \"𦞧\": \"𦞧\",\n  \"𦞵\": \"𦞵\",\n  \"朦\": \"䑃\",\n  \"臘\": \"臘\",\n  \"⾂\": \"臣\",\n  \"臨\": \"臨\",\n  \"⾃\": \"自\",\n  \"臭\": \"臭\",\n  \"⾄\": \"至\",\n  \"⾅\": \"臼\",\n  \"舁\": \"舁\",\n  \"舁\": \"舁\",\n  \"舄\": \"舄\",\n  \"⾆\": \"舌\",\n  \"舘\": \"舘\",\n  \"⾇\": \"舛\",\n  \"⾈\": \"舟\",\n  \"䑫\": \"䑫\",\n  \"⾉\": \"艮\",\n  \"良\": \"良\",\n  \"⾊\": \"色\",\n  \"⾋\": \"艸\",\n  \"艹\": \"艹\",\n  \"艹\": \"艹\",\n  \"⺾\": \"艹\",\n  \"⺿\": \"艹\",\n  \"⻀\": \"艹\",\n  \"芋\": \"芋\",\n  \"芑\": \"芑\",\n  \"芝\": \"芝\",\n  \"花\": \"花\",\n  \"芳\": \"芳\",\n  \"芽\": \"芽\",\n  \"若\": \"若\",\n  \"若\": \"若\",\n  \"苦\": \"苦\",\n  \"𦬼\": \"𦬼\",\n  \"茶\": \"茶\",\n  \"荒\": \"荒\",\n  \"荣\": \"荣\",\n  \"茝\": \"茝\",\n  \"茣\": \"茣\",\n  \"莽\": \"莽\",\n  \"荓\": \"荓\",\n  \"菉\": \"菉\",\n  \"菊\": \"菊\",\n  \"菌\": \"菌\",\n  \"菜\": \"菜\",\n  \"菧\": \"菧\",\n  \"華\": \"華\",\n  \"菱\": \"菱\",\n  \"著\": \"著\",\n  \"著\": \"著\",\n  \"𦰶\": \"𦰶\",\n  \"莭\": \"莭\",\n  \"落\": \"落\",\n  \"葉\": \"葉\",\n  \"蔿\": \"蒍\",\n  \"𦳕\": \"𦳕\",\n  \"𦵫\": \"𦵫\",\n  \"蓮\": \"蓮\",\n  \"蓱\": \"蓱\",\n  \"蓳\": \"蓳\",\n  \"蓼\": \"蓼\",\n  \"蔖\": \"蔖\",\n  \"䔫\": \"䔫\",\n  \"蕤\": \"蕤\",\n  \"𦼬\": \"𦼬\",\n  \"藍\": \"藍\",\n  \"䕝\": \"䕝\",\n  \"𦾱\": \"𦾱\",\n  \"䕡\": \"䕡\",\n  \"藺\": \"藺\",\n  \"蘆\": \"蘆\",\n  \"䕫\": \"䕫\",\n  \"蘒\": \"蘒\",\n  \"蘭\": \"蘭\",\n  \"𧃒\": \"𧃒\",\n  \"虁\": \"蘷\",\n  \"蘿\": \"蘿\",\n  \"⾌\": \"虍\",\n  \"⻁\": \"虎\",\n  \"虐\": \"虐\",\n  \"虜\": \"虜\",\n  \"虜\": \"虜\",\n  \"虧\": \"虧\",\n  \"虩\": \"虩\",\n  \"⾍\": \"虫\",\n  \"蚩\": \"蚩\",\n  \"蚈\": \"蚈\",\n  \"蛢\": \"蛢\",\n  \"蜎\": \"蜎\",\n  \"蜨\": \"蜨\",\n  \"蝫\": \"蝫\",\n  \"蟡\": \"蟡\",\n  \"蝹\": \"蝹\",\n  \"蝹\": \"蝹\",\n  \"螆\": \"螆\",\n  \"䗗\": \"䗗\",\n  \"𧏊\": \"𧏊\",\n  \"螺\": \"螺\",\n  \"蠁\": \"蠁\",\n  \"䗹\": \"䗹\",\n  \"蠟\": \"蠟\",\n  \"⾎\": \"血\",\n  \"行\": \"行\",\n  \"⾏\": \"行\",\n  \"衠\": \"衠\",\n  \"衣\": \"衣\",\n  \"⾐\": \"衣\",\n  \"⻂\": \"衤\",\n  \"裂\": \"裂\",\n  \"𧙧\": \"𧙧\",\n  \"裏\": \"裏\",\n  \"裗\": \"裗\",\n  \"裞\": \"裞\",\n  \"裡\": \"裡\",\n  \"裸\": \"裸\",\n  \"裺\": \"裺\",\n  \"䘵\": \"䘵\",\n  \"褐\": \"褐\",\n  \"襁\": \"襁\",\n  \"襤\": \"襤\",\n  \"⾑\": \"襾\",\n  \"⻄\": \"西\",\n  \"⻃\": \"覀\",\n  \"覆\": \"覆\",\n  \"見\": \"見\",\n  \"⾒\": \"見\",\n  \"𧢮\": \"𧢮\",\n  \"⻅\": \"见\",\n  \"⾓\": \"角\",\n  \"⾔\": \"言\",\n  \"𧥦\": \"𧥦\",\n  \"詽\": \"訮\",\n  \"訞\": \"䚶\",\n  \"䚾\": \"䚾\",\n  \"䛇\": \"䛇\",\n  \"誠\": \"誠\",\n  \"說\": \"說\",\n  \"說\": \"說\",\n  \"調\": \"調\",\n  \"請\": \"請\",\n  \"諒\": \"諒\",\n  \"論\": \"論\",\n  \"諭\": \"諭\",\n  \"諭\": \"諭\",\n  \"諸\": \"諸\",\n  \"諸\": \"諸\",\n  \"諾\": \"諾\",\n  \"諾\": \"諾\",\n  \"謁\": \"謁\",\n  \"謁\": \"謁\",\n  \"謹\": \"謹\",\n  \"謹\": \"謹\",\n  \"識\": \"識\",\n  \"讀\": \"讀\",\n  \"讏\": \"讆\",\n  \"變\": \"變\",\n  \"變\": \"變\",\n  \"⻈\": \"讠\",\n  \"⾕\": \"谷\",\n  \"⾖\": \"豆\",\n  \"豈\": \"豈\",\n  \"豕\": \"豕\",\n  \"⾗\": \"豕\",\n  \"豣\": \"豜\",\n  \"⾘\": \"豸\",\n  \"𧲨\": \"𧲨\",\n  \"⾙\": \"貝\",\n  \"貫\": \"貫\",\n  \"賁\": \"賁\",\n  \"賂\": \"賂\",\n  \"賈\": \"賈\",\n  \"賓\": \"賓\",\n  \"贈\": \"贈\",\n  \"贈\": \"贈\",\n  \"贛\": \"贛\",\n  \"⻉\": \"贝\",\n  \"⾚\": \"赤\",\n  \"⾛\": \"走\",\n  \"起\": \"起\",\n  \"趆\": \"赿\",\n  \"𧻓\": \"𧻓\",\n  \"𧼯\": \"𧼯\",\n  \"⾜\": \"足\",\n  \"跋\": \"跋\",\n  \"趼\": \"趼\",\n  \"跺\": \"跥\",\n  \"路\": \"路\",\n  \"跰\": \"跰\",\n  \"躛\": \"躗\",\n  \"⾝\": \"身\",\n  \"車\": \"車\",\n  \"⾞\": \"車\",\n  \"軔\": \"軔\",\n  \"輧\": \"軿\",\n  \"輦\": \"輦\",\n  \"輪\": \"輪\",\n  \"輸\": \"輸\",\n  \"輸\": \"輸\",\n  \"輻\": \"輻\",\n  \"轢\": \"轢\",\n  \"⻋\": \"车\",\n  \"⾟\": \"辛\",\n  \"辞\": \"辞\",\n  \"辰\": \"辰\",\n  \"⾠\": \"辰\",\n  \"⾡\": \"辵\",\n  \"辶\": \"辶\",\n  \"⻌\": \"辶\",\n  \"⻍\": \"辶\",\n  \"巡\": \"巡\",\n  \"連\": \"連\",\n  \"逸\": \"逸\",\n  \"逸\": \"逸\",\n  \"遲\": \"遲\",\n  \"遼\": \"遼\",\n  \"𨗒\": \"𨗒\",\n  \"𨗭\": \"𨗭\",\n  \"邏\": \"邏\",\n  \"⾢\": \"邑\",\n  \"邔\": \"邔\",\n  \"郎\": \"郎\",\n  \"郞\": \"郎\",\n  \"郞\": \"郎\",\n  \"郱\": \"郱\",\n  \"都\": \"都\",\n  \"𨜮\": \"𨜮\",\n  \"鄑\": \"鄑\",\n  \"鄛\": \"鄛\",\n  \"⾣\": \"酉\",\n  \"酪\": \"酪\",\n  \"醙\": \"醙\",\n  \"醴\": \"醴\",\n  \"⾤\": \"釆\",\n  \"里\": \"里\",\n  \"⾥\": \"里\",\n  \"量\": \"量\",\n  \"金\": \"金\",\n  \"⾦\": \"金\",\n  \"鈴\": \"鈴\",\n  \"鈸\": \"鈸\",\n  \"鉶\": \"鉶\",\n  \"鋗\": \"鋗\",\n  \"鋘\": \"鋘\",\n  \"鉼\": \"鉼\",\n  \"錄\": \"錄\",\n  \"鍊\": \"鍊\",\n  \"鎮\": \"鎭\",\n  \"鏹\": \"鏹\",\n  \"鐕\": \"鐕\",\n  \"𨯺\": \"𨯺\",\n  \"⻐\": \"钅\",\n  \"⻑\": \"長\",\n  \"⾧\": \"長\",\n  \"⻒\": \"镸\",\n  \"⻓\": \"长\",\n  \"⾨\": \"門\",\n  \"開\": \"開\",\n  \"䦕\": \"䦕\",\n  \"閭\": \"閭\",\n  \"閷\": \"閷\",\n  \"𨵷\": \"𨵷\",\n  \"⻔\": \"门\",\n  \"⾩\": \"阜\",\n  \"⻏\": \"阝\",\n  \"⻖\": \"阝\",\n  \"阮\": \"阮\",\n  \"陋\": \"陋\",\n  \"降\": \"降\",\n  \"陵\": \"陵\",\n  \"陸\": \"陸\",\n  \"陼\": \"陼\",\n  \"隆\": \"隆\",\n  \"隣\": \"隣\",\n  \"䧦\": \"䧦\",\n  \"⾪\": \"隶\",\n  \"隷\": \"隷\",\n  \"隸\": \"隷\",\n  \"隸\": \"隷\",\n  \"⾫\": \"隹\",\n  \"雃\": \"雃\",\n  \"離\": \"離\",\n  \"難\": \"難\",\n  \"難\": \"難\",\n  \"⾬\": \"雨\",\n  \"零\": \"零\",\n  \"雷\": \"雷\",\n  \"霣\": \"霣\",\n  \"𩅅\": \"𩅅\",\n  \"露\": \"露\",\n  \"靈\": \"靈\",\n  \"⾭\": \"靑\",\n  \"⻘\": \"青\",\n  \"靖\": \"靖\",\n  \"靖\": \"靖\",\n  \"𩇟\": \"𩇟\",\n  \"⾮\": \"非\",\n  \"⾯\": \"面\",\n  \"𩈚\": \"𩈚\",\n  \"⾰\": \"革\",\n  \"䩮\": \"䩮\",\n  \"䩶\": \"䩶\",\n  \"⾱\": \"韋\",\n  \"韛\": \"韛\",\n  \"韠\": \"韠\",\n  \"⻙\": \"韦\",\n  \"⾲\": \"韭\",\n  \"𩐊\": \"𩐊\",\n  \"⾳\": \"音\",\n  \"響\": \"響\",\n  \"響\": \"響\",\n  \"⾴\": \"頁\",\n  \"䪲\": \"䪲\",\n  \"頋\": \"頋\",\n  \"頋\": \"頋\",\n  \"頋\": \"頋\",\n  \"領\": \"領\",\n  \"頩\": \"頩\",\n  \"𩒖\": \"𩒖\",\n  \"頻\": \"頻\",\n  \"頻\": \"頻\",\n  \"類\": \"類\",\n  \"⻚\": \"页\",\n  \"⾵\": \"風\",\n  \"𩖶\": \"𩖶\",\n  \"⻛\": \"风\",\n  \"⾶\": \"飛\",\n  \"⻜\": \"飞\",\n  \"⻝\": \"食\",\n  \"⾷\": \"食\",\n  \"⻟\": \"飠\",\n  \"飢\": \"飢\",\n  \"飯\": \"飯\",\n  \"飼\": \"飼\",\n  \"䬳\": \"䬳\",\n  \"館\": \"館\",\n  \"餩\": \"餩\",\n  \"⻠\": \"饣\",\n  \"⾸\": \"首\",\n  \"⾹\": \"香\",\n  \"馧\": \"馧\",\n  \"⾺\": \"馬\",\n  \"駂\": \"駂\",\n  \"駱\": \"駱\",\n  \"駾\": \"駾\",\n  \"驪\": \"驪\",\n  \"⻢\": \"马\",\n  \"⾻\": \"骨\",\n  \"䯎\": \"䯎\",\n  \"⾼\": \"高\",\n  \"⾽\": \"髟\",\n  \"𩬰\": \"𩬰\",\n  \"鬒\": \"鬒\",\n  \"鬒\": \"鬒\",\n  \"⾾\": \"鬥\",\n  \"⾿\": \"鬯\",\n  \"⿀\": \"鬲\",\n  \"⿁\": \"鬼\",\n  \"⻤\": \"鬼\",\n  \"⿂\": \"魚\",\n  \"魯\": \"魯\",\n  \"鱀\": \"鱀\",\n  \"鱗\": \"鱗\",\n  \"⻥\": \"鱼\",\n  \"⿃\": \"鳥\",\n  \"鳽\": \"鳽\",\n  \"䳎\": \"䳎\",\n  \"鵧\": \"鵧\",\n  \"䳭\": \"䳭\",\n  \"𪃎\": \"𪃎\",\n  \"鶴\": \"鶴\",\n  \"𪄅\": \"𪄅\",\n  \"䳸\": \"䳸\",\n  \"鷺\": \"鷺\",\n  \"𪈎\": \"𪈎\",\n  \"鸞\": \"鸞\",\n  \"鹃\": \"鹂\",\n  \"⿄\": \"鹵\",\n  \"鹿\": \"鹿\",\n  \"⿅\": \"鹿\",\n  \"𪊑\": \"𪊑\",\n  \"麗\": \"麗\",\n  \"麟\": \"麟\",\n  \"⿆\": \"麥\",\n  \"⻨\": \"麦\",\n  \"麻\": \"麻\",\n  \"⿇\": \"麻\",\n  \"𪎒\": \"𪎒\",\n  \"⿈\": \"黃\",\n  \"⻩\": \"黄\",\n  \"⿉\": \"黍\",\n  \"黎\": \"黎\",\n  \"䵖\": \"䵖\",\n  \"⿊\": \"黑\",\n  \"黒\": \"黑\",\n  \"墨\": \"墨\",\n  \"黹\": \"黹\",\n  \"⿋\": \"黹\",\n  \"⿌\": \"黽\",\n  \"鼅\": \"鼅\",\n  \"黾\": \"黾\",\n  \"⿍\": \"鼎\",\n  \"鼏\": \"鼏\",\n  \"⿎\": \"鼓\",\n  \"鼖\": \"鼖\",\n  \"⿏\": \"鼠\",\n  \"鼻\": \"鼻\",\n  \"⿐\": \"鼻\",\n  \"齃\": \"齃\",\n  \"⿑\": \"齊\",\n  \"⻬\": \"齐\",\n  \"⿒\": \"齒\",\n  \"𪘀\": \"𪘀\",\n  \"⻮\": \"齿\",\n  \"龍\": \"龍\",\n  \"⿓\": \"龍\",\n  \"龎\": \"龎\",\n  \"⻰\": \"龙\",\n  \"龜\": \"龜\",\n  \"龜\": \"龜\",\n  \"龜\": \"龜\",\n  \"⿔\": \"龜\",\n  \"⻳\": \"龟\",\n  \"⿕\": \"龠\"\n}",
    "'use strict';\n\n\nvar data = require('./data.json');\n\nfunction escapeRegexp(str) {\n  return str.replace(/([.?*+^$[\\]\\\\(){}|-])/g, '\\\\$1');\n}\n\nvar REPLACE_RE = RegExp(Object.keys(data).map(escapeRegexp).join('|'), 'g');\n\nfunction replace_fn(match) {\n  return data[match];\n}\n\nfunction unhomoglyph(str) {\n  return str.replace(REPLACE_RE, replace_fn);\n}\n\nmodule.exports = unhomoglyph;\n",
    "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar punycode = require('punycode');\nvar util = require('./util');\n\nexports.parse = urlParse;\nexports.resolve = urlResolve;\nexports.resolveObject = urlResolveObject;\nexports.format = urlFormat;\n\nexports.Url = Url;\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.host = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.query = null;\n  this.pathname = null;\n  this.path = null;\n  this.href = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n\n    // Special case for a simple path URL\n    simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n\n    // RFC 2396: characters reserved for delimiting URLs.\n    // We actually just auto-escape these.\n    delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n\n    // RFC 2396: characters not allowed for various reasons.\n    unwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\n\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n    autoEscape = ['\\''].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n    // Note that any invalid chars are also handled, but these\n    // are the ones that are *expected* to be seen, so we fast-path\n    // them.\n    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\n    hostEndingChars = ['/', '?', '#'],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n    unsafeProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that never have a hostname.\n    hostlessProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that always contain a // bit.\n    slashedProtocol = {\n      'http': true,\n      'https': true,\n      'ftp': true,\n      'gopher': true,\n      'file': true,\n      'http:': true,\n      'https:': true,\n      'ftp:': true,\n      'gopher:': true,\n      'file:': true\n    },\n    querystring = require('querystring');\n\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n  if (url && util.isObject(url) && url instanceof Url) return url;\n\n  var u = new Url;\n  u.parse(url, parseQueryString, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {\n  if (!util.isString(url)) {\n    throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);\n  }\n\n  // Copy chrome, IE, opera backslash-handling behavior.\n  // Back slashes before the query string get converted to forward slashes\n  // See: https://code.google.com/p/chromium/issues/detail?id=25916\n  var queryIndex = url.indexOf('?'),\n      splitter =\n          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',\n      uSplit = url.split(splitter),\n      slashRegex = /\\\\/g;\n  uSplit[0] = uSplit[0].replace(slashRegex, '/');\n  url = uSplit.join(splitter);\n\n  var rest = url;\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n    if (simplePath) {\n      this.path = rest;\n      this.href = rest;\n      this.pathname = simplePath[1];\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n        if (parseQueryString) {\n          this.query = querystring.parse(this.search.substr(1));\n        } else {\n          this.query = this.search.substr(1);\n        }\n      } else if (parseQueryString) {\n        this.search = '';\n        this.query = {};\n      }\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    var lowerProto = proto.toLowerCase();\n    this.protocol = lowerProto;\n    rest = rest.substr(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    var slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (var i = 0; i < hostEndingChars.length; i++) {\n      var hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = decodeURIComponent(auth);\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (var i = 0; i < nonHostChars.length; i++) {\n      var hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1)\n      hostEnd = rest.length;\n\n    this.host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost();\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    this.hostname = this.hostname || '';\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    var ipv6Hostname = this.hostname[0] === '[' &&\n        this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n      for (var i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) continue;\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = '/' + notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    } else {\n      // hostnames are always lower case.\n      this.hostname = this.hostname.toLowerCase();\n    }\n\n    if (!ipv6Hostname) {\n      // IDNA Support: Returns a punycoded representation of \"domain\".\n      // It only converts parts of the domain name that\n      // have non-ASCII characters, i.e. it doesn't matter if\n      // you call it with a domain that already is ASCII-only.\n      this.hostname = punycode.toASCII(this.hostname);\n    }\n\n    var p = this.port ? ':' + this.port : '';\n    var h = this.hostname || '';\n    this.host = h + p;\n    this.href += this.host;\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n      if (rest[0] !== '/') {\n        rest = '/' + rest;\n      }\n    }\n  }\n\n  // now rest is set to the post-host stuff.\n  // chop off any delim chars.\n  if (!unsafeProtocol[lowerProto]) {\n\n    // First, make 100% sure that any \"autoEscape\" chars get\n    // escaped, even if encodeURIComponent doesn't think they\n    // need to be.\n    for (var i = 0, l = autoEscape.length; i < l; i++) {\n      var ae = autoEscape[i];\n      if (rest.indexOf(ae) === -1)\n        continue;\n      var esc = encodeURIComponent(ae);\n      if (esc === ae) {\n        esc = escape(ae);\n      }\n      rest = rest.split(ae).join(esc);\n    }\n  }\n\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    this.query = rest.substr(qm + 1);\n    if (parseQueryString) {\n      this.query = querystring.parse(this.query);\n    }\n    rest = rest.slice(0, qm);\n  } else if (parseQueryString) {\n    // no query string, but parseQueryString still requested\n    this.search = '';\n    this.query = {};\n  }\n  if (rest) this.pathname = rest;\n  if (slashedProtocol[lowerProto] &&\n      this.hostname && !this.pathname) {\n    this.pathname = '/';\n  }\n\n  //to support http.request\n  if (this.pathname || this.search) {\n    var p = this.pathname || '';\n    var s = this.search || '';\n    this.path = p + s;\n  }\n\n  // finally, reconstruct the href based on what has been validated.\n  this.href = this.format();\n  return this;\n};\n\n// format a parsed object into a url string\nfunction urlFormat(obj) {\n  // ensure it's an object, and not a string url.\n  // If it's an obj, this is a no-op.\n  // this way, you can call url_format() on strings\n  // to clean up potentially wonky urls.\n  if (util.isString(obj)) obj = urlParse(obj);\n  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);\n  return obj.format();\n}\n\nUrl.prototype.format = function() {\n  var auth = this.auth || '';\n  if (auth) {\n    auth = encodeURIComponent(auth);\n    auth = auth.replace(/%3A/i, ':');\n    auth += '@';\n  }\n\n  var protocol = this.protocol || '',\n      pathname = this.pathname || '',\n      hash = this.hash || '',\n      host = false,\n      query = '';\n\n  if (this.host) {\n    host = auth + this.host;\n  } else if (this.hostname) {\n    host = auth + (this.hostname.indexOf(':') === -1 ?\n        this.hostname :\n        '[' + this.hostname + ']');\n    if (this.port) {\n      host += ':' + this.port;\n    }\n  }\n\n  if (this.query &&\n      util.isObject(this.query) &&\n      Object.keys(this.query).length) {\n    query = querystring.stringify(this.query);\n  }\n\n  var search = this.search || (query && ('?' + query)) || '';\n\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':';\n\n  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n  // unless they had them to begin with.\n  if (this.slashes ||\n      (!protocol || slashedProtocol[protocol]) && host !== false) {\n    host = '//' + (host || '');\n    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;\n  } else if (!host) {\n    host = '';\n  }\n\n  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;\n  if (search && search.charAt(0) !== '?') search = '?' + search;\n\n  pathname = pathname.replace(/[?#]/g, function(match) {\n    return encodeURIComponent(match);\n  });\n  search = search.replace('#', '%23');\n\n  return protocol + host + pathname + search + hash;\n};\n\nfunction urlResolve(source, relative) {\n  return urlParse(source, false, true).resolve(relative);\n}\n\nUrl.prototype.resolve = function(relative) {\n  return this.resolveObject(urlParse(relative, false, true)).format();\n};\n\nfunction urlResolveObject(source, relative) {\n  if (!source) return relative;\n  return urlParse(source, false, true).resolveObject(relative);\n}\n\nUrl.prototype.resolveObject = function(relative) {\n  if (util.isString(relative)) {\n    var rel = new Url();\n    rel.parse(relative, false, true);\n    relative = rel;\n  }\n\n  var result = new Url();\n  var tkeys = Object.keys(this);\n  for (var tk = 0; tk < tkeys.length; tk++) {\n    var tkey = tkeys[tk];\n    result[tkey] = this[tkey];\n  }\n\n  // hash is always overridden, no matter what.\n  // even href=\"\" will remove it.\n  result.hash = relative.hash;\n\n  // if the relative url is empty, then there's nothing left to do here.\n  if (relative.href === '') {\n    result.href = result.format();\n    return result;\n  }\n\n  // hrefs like //foo/bar always cut to the protocol.\n  if (relative.slashes && !relative.protocol) {\n    // take everything except the protocol from relative\n    var rkeys = Object.keys(relative);\n    for (var rk = 0; rk < rkeys.length; rk++) {\n      var rkey = rkeys[rk];\n      if (rkey !== 'protocol')\n        result[rkey] = relative[rkey];\n    }\n\n    //urlParse appends trailing / to urls like http://www.example.com\n    if (slashedProtocol[result.protocol] &&\n        result.hostname && !result.pathname) {\n      result.path = result.pathname = '/';\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (relative.protocol && relative.protocol !== result.protocol) {\n    // if it's a known url protocol, then changing\n    // the protocol does weird things\n    // first, if it's not file:, then we MUST have a host,\n    // and if there was a path\n    // to begin with, then we MUST have a path.\n    // if it is file:, then the host is dropped,\n    // because that's known to be hostless.\n    // anything else is assumed to be absolute.\n    if (!slashedProtocol[relative.protocol]) {\n      var keys = Object.keys(relative);\n      for (var v = 0; v < keys.length; v++) {\n        var k = keys[v];\n        result[k] = relative[k];\n      }\n      result.href = result.format();\n      return result;\n    }\n\n    result.protocol = relative.protocol;\n    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n      var relPath = (relative.pathname || '').split('/');\n      while (relPath.length && !(relative.host = relPath.shift()));\n      if (!relative.host) relative.host = '';\n      if (!relative.hostname) relative.hostname = '';\n      if (relPath[0] !== '') relPath.unshift('');\n      if (relPath.length < 2) relPath.unshift('');\n      result.pathname = relPath.join('/');\n    } else {\n      result.pathname = relative.pathname;\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    result.host = relative.host || '';\n    result.auth = relative.auth;\n    result.hostname = relative.hostname || relative.host;\n    result.port = relative.port;\n    // to support http.request\n    if (result.pathname || result.search) {\n      var p = result.pathname || '';\n      var s = result.search || '';\n      result.path = p + s;\n    }\n    result.slashes = result.slashes || relative.slashes;\n    result.href = result.format();\n    return result;\n  }\n\n  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),\n      isRelAbs = (\n          relative.host ||\n          relative.pathname && relative.pathname.charAt(0) === '/'\n      ),\n      mustEndAbs = (isRelAbs || isSourceAbs ||\n                    (result.host && relative.pathname)),\n      removeAllDots = mustEndAbs,\n      srcPath = result.pathname && result.pathname.split('/') || [],\n      relPath = relative.pathname && relative.pathname.split('/') || [],\n      psychotic = result.protocol && !slashedProtocol[result.protocol];\n\n  // if the url is a non-slashed url, then relative\n  // links like ../.. should be able\n  // to crawl up to the hostname, as well.  This is strange.\n  // result.protocol has already been set by now.\n  // Later on, put the first path part into the host field.\n  if (psychotic) {\n    result.hostname = '';\n    result.port = null;\n    if (result.host) {\n      if (srcPath[0] === '') srcPath[0] = result.host;\n      else srcPath.unshift(result.host);\n    }\n    result.host = '';\n    if (relative.protocol) {\n      relative.hostname = null;\n      relative.port = null;\n      if (relative.host) {\n        if (relPath[0] === '') relPath[0] = relative.host;\n        else relPath.unshift(relative.host);\n      }\n      relative.host = null;\n    }\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n  }\n\n  if (isRelAbs) {\n    // it's absolute.\n    result.host = (relative.host || relative.host === '') ?\n                  relative.host : result.host;\n    result.hostname = (relative.hostname || relative.hostname === '') ?\n                      relative.hostname : result.hostname;\n    result.search = relative.search;\n    result.query = relative.query;\n    srcPath = relPath;\n    // fall through to the dot-handling below.\n  } else if (relPath.length) {\n    // it's relative\n    // throw away the existing file, and take the new path instead.\n    if (!srcPath) srcPath = [];\n    srcPath.pop();\n    srcPath = srcPath.concat(relPath);\n    result.search = relative.search;\n    result.query = relative.query;\n  } else if (!util.isNullOrUndefined(relative.search)) {\n    // just pull out the search.\n    // like href='?foo'.\n    // Put this after the other two cases because it simplifies the booleans\n    if (psychotic) {\n      result.hostname = result.host = srcPath.shift();\n      //occationaly the auth can get stuck only in host\n      //this especially happens in cases like\n      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n      var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                       result.host.split('@') : false;\n      if (authInHost) {\n        result.auth = authInHost.shift();\n        result.host = result.hostname = authInHost.shift();\n      }\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    //to support http.request\n    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n      result.path = (result.pathname ? result.pathname : '') +\n                    (result.search ? result.search : '');\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  if (!srcPath.length) {\n    // no path at all.  easy.\n    // we've already handled the other stuff above.\n    result.pathname = null;\n    //to support http.request\n    if (result.search) {\n      result.path = '/' + result.search;\n    } else {\n      result.path = null;\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  // if a url ENDs in . or .., then it must get a trailing slash.\n  // however, if it ends in anything else non-slashy,\n  // then it must NOT get a trailing slash.\n  var last = srcPath.slice(-1)[0];\n  var hasTrailingSlash = (\n      (result.host || relative.host || srcPath.length > 1) &&\n      (last === '.' || last === '..') || last === '');\n\n  // strip single dots, resolve double dots to parent dir\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = srcPath.length; i >= 0; i--) {\n    last = srcPath[i];\n    if (last === '.') {\n      srcPath.splice(i, 1);\n    } else if (last === '..') {\n      srcPath.splice(i, 1);\n      up++;\n    } else if (up) {\n      srcPath.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (!mustEndAbs && !removeAllDots) {\n    for (; up--; up) {\n      srcPath.unshift('..');\n    }\n  }\n\n  if (mustEndAbs && srcPath[0] !== '' &&\n      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n    srcPath.unshift('');\n  }\n\n  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {\n    srcPath.push('');\n  }\n\n  var isAbsolute = srcPath[0] === '' ||\n      (srcPath[0] && srcPath[0].charAt(0) === '/');\n\n  // put the host back\n  if (psychotic) {\n    result.hostname = result.host = isAbsolute ? '' :\n                                    srcPath.length ? srcPath.shift() : '';\n    //occationaly the auth can get stuck only in host\n    //this especially happens in cases like\n    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n    var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                     result.host.split('@') : false;\n    if (authInHost) {\n      result.auth = authInHost.shift();\n      result.host = result.hostname = authInHost.shift();\n    }\n  }\n\n  mustEndAbs = mustEndAbs || (result.host && srcPath.length);\n\n  if (mustEndAbs && !isAbsolute) {\n    srcPath.unshift('');\n  }\n\n  if (!srcPath.length) {\n    result.pathname = null;\n    result.path = null;\n  } else {\n    result.pathname = srcPath.join('/');\n  }\n\n  //to support request.http\n  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n    result.path = (result.pathname ? result.pathname : '') +\n                  (result.search ? result.search : '');\n  }\n  result.auth = relative.auth || result.auth;\n  result.slashes = result.slashes || relative.slashes;\n  result.href = result.format();\n  return result;\n};\n\nUrl.prototype.parseHost = function() {\n  var host = this.host;\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) this.hostname = host;\n};\n",
    "'use strict';\n\nmodule.exports = {\n  isString: function(arg) {\n    return typeof(arg) === 'string';\n  },\n  isObject: function(arg) {\n    return typeof(arg) === 'object' && arg !== null;\n  },\n  isNull: function(arg) {\n    return arg === null;\n  },\n  isNullOrUndefined: function(arg) {\n    return arg == null;\n  }\n};\n",
    "/*\nCopyright 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n// allow camelcase as these are things that go onto the wire\n/* eslint-disable camelcase */\n\nexport enum PushRuleActionName {\n    DontNotify = \"dont_notify\",\n    Notify = \"notify\",\n    Coalesce = \"coalesce\",\n}\n\nexport enum TweakName {\n    Highlight = \"highlight\",\n    Sound = \"sound\",\n}\n\nexport type Tweak<N extends TweakName, V> = {\n    set_tweak: N;\n    value: V;\n};\n\nexport type TweakHighlight = Tweak<TweakName.Highlight, boolean>;\nexport type TweakSound = Tweak<TweakName.Sound, string>;\n\nexport type Tweaks = TweakHighlight | TweakSound;\n\nexport enum ConditionOperator {\n    ExactEquals = \"==\",\n    LessThan = \"<\",\n    GreaterThan = \">\",\n    GreaterThanOrEqual = \">=\",\n    LessThanOrEqual = \"<=\",\n}\n\nexport type PushRuleAction = Tweaks | PushRuleActionName;\n\nexport type MemberCountCondition\n    <N extends number, Op extends ConditionOperator = ConditionOperator.ExactEquals>\n    = `${Op}${N}` | (Op extends ConditionOperator.ExactEquals ? `${N}` : never);\n\nexport type AnyMemberCountCondition = MemberCountCondition<number, ConditionOperator>;\n\nexport const DMMemberCountCondition: MemberCountCondition<2> = \"2\";\n\nexport function isDmMemberCountCondition(condition: AnyMemberCountCondition): boolean {\n    return condition === \"==2\" || condition === \"2\";\n}\n\nexport enum ConditionKind {\n    EventMatch = \"event_match\",\n    ContainsDisplayName = \"contains_display_name\",\n    RoomMemberCount = \"room_member_count\",\n    SenderNotificationPermission = \"sender_notification_permission\",\n}\n\nexport interface IPushRuleCondition<N extends ConditionKind | string> {\n    [k: string]: any; // for custom conditions, there can be other fields here\n    kind: N;\n}\n\nexport interface IEventMatchCondition extends IPushRuleCondition<ConditionKind.EventMatch> {\n    key: string;\n    pattern: string;\n}\n\nexport interface IContainsDisplayNameCondition extends IPushRuleCondition<ConditionKind.ContainsDisplayName> {\n    // no additional fields\n}\n\nexport interface IRoomMemberCountCondition extends IPushRuleCondition<ConditionKind.RoomMemberCount> {\n    is: AnyMemberCountCondition;\n}\n\nexport interface ISenderNotificationPermissionCondition\n    extends IPushRuleCondition<ConditionKind.SenderNotificationPermission> {\n    key: string;\n}\n\n// XXX: custom conditions are possible but always fail, and break the typescript discriminated union so ignore them here\n// IPushRuleCondition<Exclude<string, ConditionKind>> unfortunately does not resolve this at the time of writing.\nexport type PushRuleCondition = IEventMatchCondition\n    | IContainsDisplayNameCondition\n    | IRoomMemberCountCondition\n    | ISenderNotificationPermissionCondition;\n\nexport enum PushRuleKind {\n    Override = \"override\",\n    ContentSpecific = \"content\",\n    RoomSpecific = \"room\",\n    SenderSpecific = \"sender\",\n    Underride = \"underride\",\n}\n\nexport enum RuleId {\n    Master = \".m.rule.master\",\n    ContainsDisplayName = \".m.rule.contains_display_name\",\n    ContainsUserName = \".m.rule.contains_user_name\",\n    AtRoomNotification = \".m.rule.roomnotif\",\n    DM = \".m.rule.room_one_to_one\",\n    EncryptedDM = \".m.rule.encrypted_room_one_to_one\",\n    Message = \".m.rule.message\",\n    EncryptedMessage = \".m.rule.encrypted\",\n    InviteToSelf = \".m.rule.invite_for_me\",\n    MemberEvent = \".m.rule.member_event\",\n    IncomingCall = \".m.rule.call\",\n    SuppressNotices = \".m.rule.suppress_notices\",\n    Tombstone = \".m.rule.tombstone\",\n}\n\nexport type PushRuleSet = {\n    [k in PushRuleKind]?: IPushRule[];\n};\n\nexport interface IPushRule {\n    actions: PushRuleAction[];\n    conditions?: PushRuleCondition[];\n    default: boolean;\n    enabled: boolean;\n    pattern?: string;\n    rule_id: RuleId | string;\n}\n\nexport interface IAnnotatedPushRule extends IPushRule {\n    kind: PushRuleKind;\n}\n\nexport interface IPushRules {\n    global: PushRuleSet;\n    device?: PushRuleSet;\n}\n\nexport interface IPusher {\n    app_display_name: string;\n    app_id: string;\n    data: {\n        format?: string;\n        url?: string; // TODO: Required if kind==http\n        brand?: string; // TODO: For email notifications only? Unspecced field\n    };\n    device_display_name: string;\n    kind: \"http\" | string;\n    lang: string;\n    profile_tag?: string;\n    pushkey: string;\n}\n\nexport interface IPusherRequest extends IPusher {\n    append?: boolean;\n}\n\n/* eslint-enable camelcase */\n",
    "/*\nCopyright 2022 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { RELATES_TO_RELATIONSHIP, REFERENCE_RELATION } from \"matrix-events-sdk\";\n\nimport { UnstableValue } from \"../NamespacedValue\";\nimport { MAssetEvent, MLocationEvent, MTimestampEvent } from \"./location\";\n\n/**\n * Beacon info and beacon event types as described in MSC3672\n * https://github.com/matrix-org/matrix-spec-proposals/pull/3672\n */\n\n/**\n * Beacon info events are state events.\n * We have two requirements for these events:\n * 1. they can only be written by their owner\n * 2. a user can have an arbitrary number of beacon_info events\n *\n * 1. is achieved by setting the state_key to the owners mxid.\n * Event keys in room state are a combination of `type` + `state_key`.\n * To achieve an arbitrary number of only owner-writable state events\n * we introduce a variable suffix to the event type\n *\n * Eg\n * {\n *      \"type\": \"m.beacon_info.@matthew:matrix.org.1\",\n *      \"state_key\": \"@matthew:matrix.org\",\n *      \"content\": {\n *          \"m.beacon_info\": {\n *              \"description\": \"The Matthew Tracker\",\n *              \"timeout\": 86400000,\n *          },\n *          // more content as described below\n *      }\n * },\n * {\n *      \"type\": \"m.beacon_info.@matthew:matrix.org.2\",\n *      \"state_key\": \"@matthew:matrix.org\",\n *      \"content\": {\n *          \"m.beacon_info\": {\n *              \"description\": \"Another different Matthew tracker\",\n *              \"timeout\": 400000,\n *          },\n *          // more content as described below\n *      }\n * }\n */\n\n/**\n * Non-variable type for m.beacon_info event content\n */\nexport const M_BEACON_INFO = new UnstableValue(\"m.beacon_info\", \"org.matrix.msc3672.beacon_info\");\nexport const M_BEACON = new UnstableValue(\"m.beacon\", \"org.matrix.msc3672.beacon\");\n\nexport type MBeaconInfoContent = {\n    description?: string;\n    // how long from the last event until we consider the beacon inactive in milliseconds\n    timeout: number;\n    // true when this is a live location beacon\n    // https://github.com/matrix-org/matrix-spec-proposals/pull/3672\n    live?: boolean;\n};\n\n/**\n * m.beacon_info Event example from the spec\n * https://github.com/matrix-org/matrix-spec-proposals/pull/3672\n * {\n    \"type\": \"m.beacon_info\",\n    \"state_key\": \"@matthew:matrix.org\",\n    \"content\": {\n        \"m.beacon_info\": {\n            \"description\": \"The Matthew Tracker\", // same as an `m.location` description\n            \"timeout\": 86400000, // how long from the last event until we consider the beacon inactive in milliseconds\n        },\n        \"m.ts\": 1436829458432, // creation timestamp of the beacon on the client\n        \"m.asset\": {\n            \"type\": \"m.self\" // the type of asset being tracked as per MSC3488\n        }\n    }\n}\n */\n\n/**\n * m.beacon_info.* event content\n */\nexport type MBeaconInfoEventContent = &\n    MBeaconInfoContent &\n    // creation timestamp of the beacon on the client\n    MTimestampEvent &\n    // the type of asset being tracked as per MSC3488\n    MAssetEvent;\n\n/**\n * m.beacon event example\n * https://github.com/matrix-org/matrix-spec-proposals/pull/3672\n *\n * {\n    \"type\": \"m.beacon\",\n    \"sender\": \"@matthew:matrix.org\",\n    \"content\": {\n        \"m.relates_to\": { // from MSC2674: https://github.com/matrix-org/matrix-doc/pull/2674\n            \"rel_type\": \"m.reference\", // from MSC3267: https://github.com/matrix-org/matrix-doc/pull/3267\n            \"event_id\": \"$beacon_info\"\n        },\n        \"m.location\": {\n            \"uri\": \"geo:51.5008,0.1247;u=35\",\n            \"description\": \"Arbitrary beacon information\"\n        },\n        \"m.ts\": 1636829458432,\n    }\n}\n*/\n\n/**\n * Content of an m.beacon event\n */\nexport type MBeaconEventContent = &\n    MLocationEvent &\n    // timestamp when location was taken\n    MTimestampEvent &\n    // relates to a beacon_info event\n    RELATES_TO_RELATIONSHIP<typeof REFERENCE_RELATION>;\n\n",
    "/*\nCopyright 2020 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { UnstableValue } from \"../NamespacedValue\";\n\nexport enum EventType {\n    // Room state events\n    RoomCanonicalAlias = \"m.room.canonical_alias\",\n    RoomCreate = \"m.room.create\",\n    RoomJoinRules = \"m.room.join_rules\",\n    RoomMember = \"m.room.member\",\n    RoomThirdPartyInvite = \"m.room.third_party_invite\",\n    RoomPowerLevels = \"m.room.power_levels\",\n    RoomName = \"m.room.name\",\n    RoomTopic = \"m.room.topic\",\n    RoomAvatar = \"m.room.avatar\",\n    RoomPinnedEvents = \"m.room.pinned_events\",\n    RoomEncryption = \"m.room.encryption\",\n    RoomHistoryVisibility = \"m.room.history_visibility\",\n    RoomGuestAccess = \"m.room.guest_access\",\n    RoomServerAcl = \"m.room.server_acl\",\n    RoomTombstone = \"m.room.tombstone\",\n    /**\n     * @deprecated Should not be used.\n     */\n    RoomAliases = \"m.room.aliases\", // deprecated https://matrix.org/docs/spec/client_server/r0.6.1#historical-events\n\n    SpaceChild = \"m.space.child\",\n    SpaceParent = \"m.space.parent\",\n\n    // Room timeline events\n    RoomRedaction = \"m.room.redaction\",\n    RoomMessage = \"m.room.message\",\n    RoomMessageEncrypted = \"m.room.encrypted\",\n    Sticker = \"m.sticker\",\n    CallInvite = \"m.call.invite\",\n    CallCandidates = \"m.call.candidates\",\n    CallAnswer = \"m.call.answer\",\n    CallHangup = \"m.call.hangup\",\n    CallReject = \"m.call.reject\",\n    CallSelectAnswer = \"m.call.select_answer\",\n    CallNegotiate = \"m.call.negotiate\",\n    CallSDPStreamMetadataChanged = \"m.call.sdp_stream_metadata_changed\",\n    CallSDPStreamMetadataChangedPrefix = \"org.matrix.call.sdp_stream_metadata_changed\",\n    CallReplaces = \"m.call.replaces\",\n    CallAssertedIdentity = \"m.call.asserted_identity\",\n    CallAssertedIdentityPrefix = \"org.matrix.call.asserted_identity\",\n    KeyVerificationRequest = \"m.key.verification.request\",\n    KeyVerificationStart = \"m.key.verification.start\",\n    KeyVerificationCancel = \"m.key.verification.cancel\",\n    KeyVerificationMac = \"m.key.verification.mac\",\n    KeyVerificationDone = \"m.key.verification.done\",\n    // use of this is discouraged https://matrix.org/docs/spec/client_server/r0.6.1#m-room-message-feedback\n    RoomMessageFeedback = \"m.room.message.feedback\",\n    Reaction = \"m.reaction\",\n\n    // Room ephemeral events\n    Typing = \"m.typing\",\n    Receipt = \"m.receipt\",\n    Presence = \"m.presence\",\n\n    // Room account_data events\n    FullyRead = \"m.fully_read\",\n    Tag = \"m.tag\",\n    SpaceOrder = \"org.matrix.msc3230.space_order\", // MSC3230\n\n    // User account_data events\n    PushRules = \"m.push_rules\",\n    Direct = \"m.direct\",\n    IgnoredUserList = \"m.ignored_user_list\",\n\n    // to_device events\n    RoomKey = \"m.room_key\",\n    RoomKeyRequest = \"m.room_key_request\",\n    ForwardedRoomKey = \"m.forwarded_room_key\",\n    Dummy = \"m.dummy\",\n}\n\nexport enum RelationType {\n    Annotation = \"m.annotation\",\n    Replace = \"m.replace\",\n    Reference = \"m.reference\",\n    Thread = \"m.thread\",\n}\n\nexport enum MsgType {\n    Text = \"m.text\",\n    Emote = \"m.emote\",\n    Notice = \"m.notice\",\n    Image = \"m.image\",\n    File = \"m.file\",\n    Audio = \"m.audio\",\n    Location = \"m.location\",\n    Video = \"m.video\",\n    KeyVerificationRequest = \"m.key.verification.request\",\n}\n\nexport const RoomCreateTypeField = \"type\";\n\nexport enum RoomType {\n    Space = \"m.space\",\n    UnstableCall = \"org.matrix.msc3417.call\",\n    ElementVideo = \"io.element.video\",\n}\n\n/**\n * Identifier for an [MSC3088](https://github.com/matrix-org/matrix-doc/pull/3088)\n * room purpose. Note that this reference is UNSTABLE and subject to breaking changes,\n * including its eventual removal.\n */\nexport const UNSTABLE_MSC3088_PURPOSE = new UnstableValue(\"m.room.purpose\", \"org.matrix.msc3088.purpose\");\n\n/**\n * Enabled flag for an [MSC3088](https://github.com/matrix-org/matrix-doc/pull/3088)\n * room purpose. Note that this reference is UNSTABLE and subject to breaking changes,\n * including its eventual removal.\n */\nexport const UNSTABLE_MSC3088_ENABLED = new UnstableValue(\"m.enabled\", \"org.matrix.msc3088.enabled\");\n\n/**\n * Subtype for an [MSC3089](https://github.com/matrix-org/matrix-doc/pull/3089) space-room.\n * Note that this reference is UNSTABLE and subject to breaking changes, including its\n * eventual removal.\n */\nexport const UNSTABLE_MSC3089_TREE_SUBTYPE = new UnstableValue(\"m.data_tree\", \"org.matrix.msc3089.data_tree\");\n\n/**\n * Leaf type for an event in a [MSC3089](https://github.com/matrix-org/matrix-doc/pull/3089) space-room.\n * Note that this reference is UNSTABLE and subject to breaking changes, including its\n * eventual removal.\n */\nexport const UNSTABLE_MSC3089_LEAF = new UnstableValue(\"m.leaf\", \"org.matrix.msc3089.leaf\");\n\n/**\n * Branch (Leaf Reference) type for the index approach in a\n * [MSC3089](https://github.com/matrix-org/matrix-doc/pull/3089) space-room. Note that this reference is\n * UNSTABLE and subject to breaking changes, including its eventual removal.\n */\nexport const UNSTABLE_MSC3089_BRANCH = new UnstableValue(\"m.branch\", \"org.matrix.msc3089.branch\");\n\n/**\n * Functional members type for declaring a purpose of room members (e.g. helpful bots).\n * Note that this reference is UNSTABLE and subject to breaking changes, including its\n * eventual removal.\n *\n * Schema (TypeScript):\n * {\n *   service_members?: string[]\n * }\n *\n * Example:\n * {\n *   \"service_members\": [\n *     \"@helperbot:localhost\",\n *     \"@reminderbot:alice.tdl\"\n *   ]\n * }\n */\nexport const UNSTABLE_ELEMENT_FUNCTIONAL_USERS = new UnstableValue(\n    \"io.element.functional_members\",\n    \"io.element.functional_members\");\n\n/**\n * A type of message that affects visibility of a message,\n * as per https://github.com/matrix-org/matrix-doc/pull/3531\n *\n * @experimental\n */\nexport const EVENT_VISIBILITY_CHANGE_TYPE = new UnstableValue(\n    \"m.visibility\",\n    \"org.matrix.msc3531.visibility\");\n\nexport interface IEncryptedFile {\n    url: string;\n    mimetype?: string;\n    key: {\n        alg: string;\n        key_ops: string[]; // eslint-disable-line camelcase\n        kty: string;\n        k: string;\n        ext: boolean;\n    };\n    iv: string;\n    hashes: {[alg: string]: string};\n    v: string;\n}\n",
    "/*\nCopyright 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n// Types for MSC1767: Extensible events in Matrix\n\nimport { UnstableValue } from \"../NamespacedValue\";\n\nexport const TEXT_NODE_TYPE = new UnstableValue(\"m.text\", \"org.matrix.msc1767.text\");\n",
    "/*\nCopyright 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n// Types for MSC3488 - m.location: Extending events with location data\nimport { EitherAnd } from \"matrix-events-sdk\";\n\nimport { UnstableValue } from \"../NamespacedValue\";\nimport { TEXT_NODE_TYPE } from \"./extensible_events\";\n\nexport enum LocationAssetType {\n    Self = \"m.self\",\n    Pin = \"m.pin\",\n}\n\nexport const M_ASSET = new UnstableValue(\"m.asset\", \"org.matrix.msc3488.asset\");\nexport type MAssetContent = { type: LocationAssetType };\n/**\n * The event definition for an m.asset event (in content)\n */\nexport type MAssetEvent = EitherAnd<{ [M_ASSET.name]: MAssetContent }, { [M_ASSET.altName]: MAssetContent }>;\n\nexport const M_TIMESTAMP = new UnstableValue(\"m.ts\", \"org.matrix.msc3488.ts\");\n/**\n * The event definition for an m.ts event (in content)\n */\nexport type MTimestampEvent = EitherAnd<{ [M_TIMESTAMP.name]: number }, { [M_TIMESTAMP.altName]: number }>;\n\nexport const M_LOCATION = new UnstableValue(\n    \"m.location\", \"org.matrix.msc3488.location\");\n\nexport type MLocationContent = {\n    uri: string;\n    description?: string | null;\n};\n\nexport type MLocationEvent = EitherAnd<\n    { [M_LOCATION.name]: MLocationContent },\n    { [M_LOCATION.altName]: MLocationContent }\n>;\n\nexport type MTextEvent = EitherAnd<{ [TEXT_NODE_TYPE.name]: string }, { [TEXT_NODE_TYPE.altName]: string }>;\n\n/* From the spec at:\n * https://github.com/matrix-org/matrix-doc/blob/matthew/location/proposals/3488-location.md\n{\n    \"type\": \"m.room.message\",\n    \"content\": {\n        \"body\": \"Matthew was at geo:51.5008,0.1247;u=35 as of Sat Nov 13 18:50:58 2021\",\n        \"msgtype\": \"m.location\",\n        \"geo_uri\": \"geo:51.5008,0.1247;u=35\",\n        \"m.location\": {\n            \"uri\": \"geo:51.5008,0.1247;u=35\",\n            \"description\": \"Matthew's whereabouts\",\n        },\n        \"m.asset\": {\n            \"type\": \"m.self\"\n        },\n        \"m.text\": \"Matthew was at geo:51.5008,0.1247;u=35 as of Sat Nov 13 18:50:58 2021\",\n        \"m.ts\": 1636829458432,\n    }\n}\n*/\ntype OptionalTimestampEvent = MTimestampEvent | undefined;\n/**\n * The content for an m.location event\n*/\nexport type MLocationEventContent = &\n    MLocationEvent &\n    MAssetEvent &\n    MTextEvent &\n    OptionalTimestampEvent;\n\nexport type LegacyLocationEventContent = {\n    body: string;\n    msgtype: string;\n    geo_uri: string;\n};\n\n/**\n * Possible content for location events as sent over the wire\n */\nexport type LocationEventWireContent = Partial<LegacyLocationEventContent & MLocationEventContent>;\n\nexport type ILocationContent = MLocationEventContent & LegacyLocationEventContent;\n",
    "/*\nCopyright 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nexport interface IImageInfo {\n    size?: number;\n    mimetype?: string;\n    thumbnail_info?: { // eslint-disable-line camelcase\n        w?: number;\n        h?: number;\n        size?: number;\n        mimetype?: string;\n    };\n    w?: number;\n    h?: number;\n}\n\nexport enum Visibility {\n    Public = \"public\",\n    Private = \"private\",\n}\n\nexport enum Preset {\n    PrivateChat = \"private_chat\",\n    TrustedPrivateChat = \"trusted_private_chat\",\n    PublicChat = \"public_chat\",\n}\n\nexport type ResizeMethod = \"crop\" | \"scale\";\n\n// TODO move to http-api after TSification\nexport interface IAbortablePromise<T> extends Promise<T> {\n    abort(): void;\n}\n\nexport type IdServerUnbindResult = \"no-support\" | \"success\";\n\n// Knock and private are reserved keywords which are not yet implemented.\nexport enum JoinRule {\n    Public = \"public\",\n    Invite = \"invite\",\n    /**\n     * @deprecated Reserved keyword. Should not be used. Not yet implemented.\n     */\n    Private = \"private\",\n    Knock = \"knock\",\n    Restricted = \"restricted\",\n}\n\nexport enum RestrictedAllowType {\n    RoomMembership = \"m.room_membership\",\n}\n\nexport interface IJoinRuleEventContent {\n    join_rule: JoinRule; // eslint-disable-line camelcase\n    allow?: {\n        type: RestrictedAllowType;\n        room_id: string; // eslint-disable-line camelcase\n    }[];\n}\n\nexport enum GuestAccess {\n    CanJoin = \"can_join\",\n    Forbidden = \"forbidden\",\n}\n\nexport enum HistoryVisibility {\n    Invited = \"invited\",\n    Joined = \"joined\",\n    Shared = \"shared\",\n    WorldReadable = \"world_readable\",\n}\n\nexport interface IUsageLimit {\n    // \"hs_disabled\" is NOT a specced string, but is used in Synapse\n    // This is tracked over at https://github.com/matrix-org/synapse/issues/9237\n    // eslint-disable-next-line camelcase\n    limit_type: \"monthly_active_user\" | \"hs_disabled\" | string;\n    // eslint-disable-next-line camelcase\n    admin_contact?: string;\n}\n",
    "/*\nCopyright 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { Callback } from \"../client\";\nimport { IContent, IEvent } from \"../models/event\";\nimport { Preset, Visibility } from \"./partials\";\nimport { SearchKey } from \"./search\";\nimport { IRoomEventFilter } from \"../filter\";\nimport { Direction } from \"../models/event-timeline\";\n\n// allow camelcase as these are things that go onto the wire\n/* eslint-disable camelcase */\n\nexport interface IJoinRoomOpts {\n    /**\n     * True to do a room initial sync on the resulting\n     * room. If false, the <strong>returned Room object will have no current state.\n     * </strong> Default: true.\n     */\n    syncRoom?: boolean;\n\n    /**\n     * If the caller has a keypair 3pid invite, the signing URL is passed in this parameter.\n     */\n    inviteSignUrl?: string;\n\n    /**\n     * The server names to try and join through in addition to those that are automatically chosen.\n     */\n    viaServers?: string[];\n}\n\nexport interface IRedactOpts {\n    reason?: string;\n}\n\nexport interface ISendEventResponse {\n    event_id: string;\n}\n\nexport interface IPresenceOpts {\n    presence: \"online\" | \"offline\" | \"unavailable\";\n    status_msg?: string;\n}\n\nexport interface IPaginateOpts {\n    backwards?: boolean;\n    limit?: number;\n}\n\nexport interface IGuestAccessOpts {\n    allowJoin: boolean;\n    allowRead: boolean;\n}\n\nexport interface ISearchOpts {\n    keys?: SearchKey[];\n    query: string;\n}\n\nexport interface IEventSearchOpts {\n    filter?: IRoomEventFilter;\n    term: string;\n}\n\nexport interface IInvite3PID {\n    id_server: string;\n    id_access_token?: string; // this gets injected by the js-sdk\n    medium: string;\n    address: string;\n}\n\nexport interface ICreateRoomStateEvent {\n    type: string;\n    state_key?: string; // defaults to an empty string\n    content: IContent;\n}\n\nexport interface ICreateRoomOpts {\n    room_alias_name?: string;\n    visibility?: Visibility;\n    name?: string;\n    topic?: string;\n    preset?: Preset;\n    power_level_content_override?: object;\n    creation_content?: object;\n    initial_state?: ICreateRoomStateEvent[];\n    invite?: string[];\n    invite_3pid?: IInvite3PID[];\n    is_direct?: boolean;\n    room_version?: string;\n}\n\nexport interface IRoomDirectoryOptions {\n    server?: string;\n    limit?: number;\n    since?: string;\n    filter?: {\n        generic_search_term: string;\n    };\n    include_all_networks?: boolean;\n    third_party_instance_id?: string;\n}\n\nexport interface IUploadOpts {\n    name?: string;\n    includeFilename?: boolean;\n    type?: string;\n    rawResponse?: boolean;\n    onlyContentUri?: boolean;\n    callback?: Callback;\n    progressHandler?: (state: {loaded: number, total: number}) => void;\n}\n\nexport interface IAddThreePidOnlyBody {\n    auth?: {\n        type: string;\n        session?: string;\n    };\n    client_secret: string;\n    sid: string;\n}\n\nexport interface IBindThreePidBody {\n    client_secret: string;\n    id_server: string;\n    id_access_token: string;\n    sid: string;\n}\n\nexport interface IRelationsRequestOpts {\n    from?: string;\n    to?: string;\n    limit?: number;\n    direction?: Direction;\n}\n\nexport interface IRelationsResponse {\n    original_event: IEvent;\n    chunk: IEvent[];\n    next_batch?: string;\n    prev_batch?: string;\n}\n\n/* eslint-enable camelcase */\n",
    "/*\nCopyright 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n// Types relating to the /search API\n\nimport { IRoomEvent, IStateEvent } from \"../sync-accumulator\";\nimport { IRoomEventFilter } from \"../filter\";\nimport { SearchResult } from \"../models/search-result\";\n\n/* eslint-disable camelcase */\nexport interface IEventWithRoomId extends IRoomEvent {\n    room_id: string;\n}\n\nexport interface IStateEventWithRoomId extends IStateEvent {\n    room_id: string;\n}\n\nexport interface IMatrixProfile {\n    avatar_url?: string;\n    displayname?: string;\n}\n\nexport interface IResultContext {\n    events_before: IEventWithRoomId[];\n    events_after: IEventWithRoomId[];\n    profile_info: Record<string, IMatrixProfile>;\n    start?: string;\n    end?: string;\n}\n\nexport interface ISearchResult {\n    rank: number;\n    result: IEventWithRoomId;\n    context: IResultContext;\n}\n\nenum GroupKey {\n    RoomId = \"room_id\",\n    Sender = \"sender\",\n}\n\nexport interface IResultRoomEvents {\n    count: number;\n    highlights: string[];\n    results: ISearchResult[];\n    state?: { [roomId: string]: IStateEventWithRoomId[] };\n    groups?: {\n        [groupKey in GroupKey]: {\n            [value: string]: {\n                next_batch?: string;\n                order: number;\n                results: string[];\n            };\n        };\n    };\n    next_batch?: string;\n}\n\ninterface IResultCategories {\n    room_events: IResultRoomEvents;\n}\n\nexport type SearchKey = \"content.body\" | \"content.name\" | \"content.topic\";\n\nexport enum SearchOrderBy {\n    Recent = \"recent\",\n    Rank = \"rank\",\n}\n\nexport interface ISearchRequestBody {\n    search_categories: {\n        room_events: {\n            search_term: string;\n            keys?: SearchKey[];\n            filter?: IRoomEventFilter;\n            order_by?: SearchOrderBy;\n            event_context?: {\n                before_limit?: number;\n                after_limit?: number;\n                include_profile?: boolean;\n            };\n            include_state?: boolean;\n            groupings?: {\n                group_by: {\n                    key: GroupKey;\n                }[];\n            };\n        };\n    };\n}\n\nexport interface ISearchResponse {\n    search_categories: IResultCategories;\n}\n\nexport interface ISearchResults {\n    _query?: ISearchRequestBody;\n    results: SearchResult[];\n    highlights: string[];\n    count?: number;\n    next_batch?: string;\n    pendingRequest?: Promise<ISearchResults>;\n}\n/* eslint-enable camelcase */\n",
    "/*\nCopyright 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * Represents a simple Matrix namespaced value. This will assume that if a stable prefix\n * is provided that the stable prefix should be used when representing the identifier.\n */\nexport class NamespacedValue<S extends string, U extends string> {\n    // Stable is optional, but one of the two parameters is required, hence the weird-looking types.\n    // Goal is to to have developers explicitly say there is no stable value (if applicable).\n    public constructor(public readonly stable: S | null | undefined, public readonly unstable?: U) {\n        if (!this.unstable && !this.stable) {\n            throw new Error(\"One of stable or unstable values must be supplied\");\n        }\n    }\n\n    public get name(): U | S {\n        if (this.stable) {\n            return this.stable;\n        }\n        return this.unstable;\n    }\n\n    public get altName(): U | S | null {\n        if (!this.stable) {\n            return null;\n        }\n        return this.unstable;\n    }\n\n    public matches(val: string): boolean {\n        return this.name === val || this.altName === val;\n    }\n\n    // this desperately wants https://github.com/microsoft/TypeScript/pull/26349 at the top level of the class\n    // so we can instantiate `NamespacedValue<string, _, _>` as a default type for that namespace.\n    public findIn<T>(obj: any): T {\n        let val: T;\n        if (this.name) {\n            val = obj?.[this.name];\n        }\n        if (!val && this.altName) {\n            val = obj?.[this.altName];\n        }\n        return val;\n    }\n\n    public includedIn(arr: any[]): boolean {\n        let included = false;\n        if (this.name) {\n            included = arr.includes(this.name);\n        }\n        if (!included && this.altName) {\n            included = arr.includes(this.altName);\n        }\n        return included;\n    }\n}\n\nexport class ServerControlledNamespacedValue<S extends string, U extends string>\n    extends NamespacedValue<S, U> {\n    private preferUnstable = false;\n\n    public setPreferUnstable(preferUnstable: boolean): void {\n        this.preferUnstable = preferUnstable;\n    }\n\n    public get name(): U | S {\n        if (this.stable && !this.preferUnstable) {\n            return this.stable;\n        }\n        return this.unstable;\n    }\n}\n\n/**\n * Represents a namespaced value which prioritizes the unstable value over the stable\n * value.\n */\nexport class UnstableValue<S extends string, U extends string> extends NamespacedValue<S, U> {\n    // Note: Constructor difference is that `unstable` is *required*.\n    public constructor(stable: S, unstable: U) {\n        super(stable, unstable);\n        if (!this.unstable) {\n            throw new Error(\"Unstable value must be supplied\");\n        }\n    }\n\n    public get name(): U {\n        return this.unstable;\n    }\n\n    public get altName(): S {\n        return this.stable;\n    }\n}\n",
    "/*\nCopyright 2015, 2016 OpenMarket Ltd\nCopyright 2017 Vector Creations Ltd\nCopyright 2017 New Vector Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n// eslint-disable-next-line no-restricted-imports\nimport { EventEmitter } from \"events\";\n\nimport { ListenerMap, TypedEventEmitter } from \"./models/typed-event-emitter\";\n\nexport class ReEmitter {\n    constructor(private readonly target: EventEmitter) {}\n\n    public reEmit(source: EventEmitter, eventNames: string[]): void {\n        for (const eventName of eventNames) {\n            // We include the source as the last argument for event handlers which may need it,\n            // such as read receipt listeners on the client class which won't have the context\n            // of the room.\n            const forSource = (...args: any[]) => {\n                // EventEmitter special cases 'error' to make the emit function throw if no\n                // handler is attached, which sort of makes sense for making sure that something\n                // handles an error, but for re-emitting, there could be a listener on the original\n                // source object so the test doesn't really work. We *could* try to replicate the\n                // same logic and throw if there is no listener on either the source or the target,\n                // but this behaviour is fairly undesireable for us anyway: the main place we throw\n                // 'error' events is for calls, where error events are usually emitted some time\n                // later by a different part of the code where 'emit' throwing because the app hasn't\n                // added an error handler isn't terribly helpful. (A better fix in retrospect may\n                // have been to just avoid using the event name 'error', but backwards compat...)\n                if (eventName === 'error' && this.target.listenerCount('error') === 0) return;\n                this.target.emit(eventName, ...args, source);\n            };\n            source.on(eventName, forSource);\n        }\n    }\n}\n\nexport class TypedReEmitter<\n    Events extends string,\n    Arguments extends ListenerMap<Events>,\n> extends ReEmitter {\n    constructor(target: TypedEventEmitter<Events, Arguments>) {\n        super(target);\n    }\n\n    public reEmit<ReEmittedEvents extends string, T extends Events & ReEmittedEvents>(\n        source: TypedEventEmitter<ReEmittedEvents, any>,\n        eventNames: T[],\n    ): void {\n        super.reEmit(source, eventNames);\n    }\n}\n",
    "/*\nCopyright 2018 New Vector Ltd\nCopyright 2019 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/** @module auto-discovery */\n\nimport { URL as NodeURL } from \"url\";\n\nimport { IClientWellKnown, IWellKnownConfig } from \"./client\";\nimport { logger } from './logger';\n\n// Dev note: Auto discovery is part of the spec.\n// See: https://matrix.org/docs/spec/client_server/r0.4.0.html#server-discovery\n\nexport enum AutoDiscoveryAction {\n    SUCCESS = \"SUCCESS\",\n    IGNORE = \"IGNORE\",\n    PROMPT = \"PROMPT\",\n    FAIL_PROMPT = \"FAIL_PROMPT\",\n    FAIL_ERROR = \"FAIL_ERROR\",\n}\n\n/**\n * Utilities for automatically discovery resources, such as homeservers\n * for users to log in to.\n */\nexport class AutoDiscovery {\n    // Dev note: the constants defined here are related to but not\n    // exactly the same as those in the spec. This is to hopefully\n    // translate the meaning of the states in the spec, but also\n    // support our own if needed.\n\n    public static readonly ERROR_INVALID = \"Invalid homeserver discovery response\";\n\n    public static readonly ERROR_GENERIC_FAILURE = \"Failed to get autodiscovery configuration from server\";\n\n    public static readonly ERROR_INVALID_HS_BASE_URL = \"Invalid base_url for m.homeserver\";\n\n    public static readonly ERROR_INVALID_HOMESERVER = \"Homeserver URL does not appear to be a valid Matrix homeserver\";\n\n    public static readonly ERROR_INVALID_IS_BASE_URL = \"Invalid base_url for m.identity_server\";\n\n    // eslint-disable-next-line\n    public static readonly ERROR_INVALID_IDENTITY_SERVER = \"Identity server URL does not appear to be a valid identity server\";\n\n    public static readonly ERROR_INVALID_IS = \"Invalid identity server discovery response\";\n\n    public static readonly ERROR_MISSING_WELLKNOWN = \"No .well-known JSON file found\";\n\n    public static readonly ERROR_INVALID_JSON = \"Invalid JSON\";\n\n    public static readonly ALL_ERRORS = [\n        AutoDiscovery.ERROR_INVALID,\n        AutoDiscovery.ERROR_GENERIC_FAILURE,\n        AutoDiscovery.ERROR_INVALID_HS_BASE_URL,\n        AutoDiscovery.ERROR_INVALID_HOMESERVER,\n        AutoDiscovery.ERROR_INVALID_IS_BASE_URL,\n        AutoDiscovery.ERROR_INVALID_IDENTITY_SERVER,\n        AutoDiscovery.ERROR_INVALID_IS,\n        AutoDiscovery.ERROR_MISSING_WELLKNOWN,\n        AutoDiscovery.ERROR_INVALID_JSON,\n    ];\n\n    /**\n     * The auto discovery failed. The client is expected to communicate\n     * the error to the user and refuse logging in.\n     * @return {string}\n     * @constructor\n     */\n    public static readonly FAIL_ERROR = AutoDiscoveryAction.FAIL_ERROR;\n\n    /**\n     * The auto discovery failed, however the client may still recover\n     * from the problem. The client is recommended to that the same\n     * action it would for PROMPT while also warning the user about\n     * what went wrong. The client may also treat this the same as\n     * a FAIL_ERROR state.\n     * @return {string}\n     * @constructor\n     */\n    public static readonly FAIL_PROMPT = AutoDiscoveryAction.FAIL_PROMPT;\n\n    /**\n     * The auto discovery didn't fail but did not find anything of\n     * interest. The client is expected to prompt the user for more\n     * information, or fail if it prefers.\n     * @return {string}\n     * @constructor\n     */\n    public static readonly PROMPT = AutoDiscoveryAction.PROMPT;\n\n    /**\n     * The auto discovery was successful.\n     * @return {string}\n     * @constructor\n     */\n    public static readonly SUCCESS = AutoDiscoveryAction.SUCCESS;\n\n    /**\n     * Validates and verifies client configuration information for purposes\n     * of logging in. Such information includes the homeserver URL\n     * and identity server URL the client would want. Additional details\n     * may also be included, and will be transparently brought into the\n     * response object unaltered.\n     * @param {object} wellknown The configuration object itself, as returned\n     * by the .well-known auto-discovery endpoint.\n     * @return {Promise<DiscoveredClientConfig>} Resolves to the verified\n     * configuration, which may include error states. Rejects on unexpected\n     * failure, not when verification fails.\n     */\n    public static async fromDiscoveryConfig(wellknown: any): Promise<IClientWellKnown> {\n        // Step 1 is to get the config, which is provided to us here.\n\n        // We default to an error state to make the first few checks easier to\n        // write. We'll update the properties of this object over the duration\n        // of this function.\n        const clientConfig = {\n            \"m.homeserver\": {\n                state: AutoDiscovery.FAIL_ERROR,\n                error: AutoDiscovery.ERROR_INVALID,\n                base_url: null,\n            },\n            \"m.identity_server\": {\n                // Technically, we don't have a problem with the identity server\n                // config at this point.\n                state: AutoDiscovery.PROMPT,\n                error: null,\n                base_url: null,\n            },\n        };\n\n        if (!wellknown || !wellknown[\"m.homeserver\"]) {\n            logger.error(\"No m.homeserver key in config\");\n\n            clientConfig[\"m.homeserver\"].state = AutoDiscovery.FAIL_PROMPT;\n            clientConfig[\"m.homeserver\"].error = AutoDiscovery.ERROR_INVALID;\n\n            return Promise.resolve(clientConfig);\n        }\n\n        if (!wellknown[\"m.homeserver\"][\"base_url\"]) {\n            logger.error(\"No m.homeserver base_url in config\");\n\n            clientConfig[\"m.homeserver\"].state = AutoDiscovery.FAIL_PROMPT;\n            clientConfig[\"m.homeserver\"].error = AutoDiscovery.ERROR_INVALID_HS_BASE_URL;\n\n            return Promise.resolve(clientConfig);\n        }\n\n        // Step 2: Make sure the homeserver URL is valid *looking*. We'll make\n        // sure it points to a homeserver in Step 3.\n        const hsUrl = this.sanitizeWellKnownUrl(\n            wellknown[\"m.homeserver\"][\"base_url\"],\n        );\n        if (!hsUrl) {\n            logger.error(\"Invalid base_url for m.homeserver\");\n            clientConfig[\"m.homeserver\"].error = AutoDiscovery.ERROR_INVALID_HS_BASE_URL;\n            return Promise.resolve(clientConfig);\n        }\n\n        // Step 3: Make sure the homeserver URL points to a homeserver.\n        const hsVersions = await this.fetchWellKnownObject(\n            `${hsUrl}/_matrix/client/versions`,\n        );\n        if (!hsVersions || !hsVersions.raw[\"versions\"]) {\n            logger.error(\"Invalid /versions response\");\n            clientConfig[\"m.homeserver\"].error = AutoDiscovery.ERROR_INVALID_HOMESERVER;\n\n            // Supply the base_url to the caller because they may be ignoring liveliness\n            // errors, like this one.\n            clientConfig[\"m.homeserver\"].base_url = hsUrl;\n\n            return Promise.resolve(clientConfig);\n        }\n\n        // Step 4: Now that the homeserver looks valid, update our client config.\n        clientConfig[\"m.homeserver\"] = {\n            state: AutoDiscovery.SUCCESS,\n            error: null,\n            base_url: hsUrl,\n        };\n\n        // Step 5: Try to pull out the identity server configuration\n        let isUrl: string | boolean = \"\";\n        if (wellknown[\"m.identity_server\"]) {\n            // We prepare a failing identity server response to save lines later\n            // in this branch.\n            const failingClientConfig = {\n                \"m.homeserver\": clientConfig[\"m.homeserver\"],\n                \"m.identity_server\": {\n                    state: AutoDiscovery.FAIL_PROMPT,\n                    error: AutoDiscovery.ERROR_INVALID_IS,\n                    base_url: null,\n                },\n            };\n\n            // Step 5a: Make sure the URL is valid *looking*. We'll make sure it\n            // points to an identity server in Step 5b.\n            isUrl = this.sanitizeWellKnownUrl(\n                wellknown[\"m.identity_server\"][\"base_url\"],\n            );\n            if (!isUrl) {\n                logger.error(\"Invalid base_url for m.identity_server\");\n                failingClientConfig[\"m.identity_server\"].error =\n                    AutoDiscovery.ERROR_INVALID_IS_BASE_URL;\n                return Promise.resolve(failingClientConfig);\n            }\n\n            // Step 5b: Verify there is an identity server listening on the provided\n            // URL.\n            const isResponse = await this.fetchWellKnownObject(\n                `${isUrl}/_matrix/identity/api/v1`,\n            );\n            if (!isResponse || !isResponse.raw || isResponse.action !== AutoDiscoveryAction.SUCCESS) {\n                logger.error(\"Invalid /api/v1 response\");\n                failingClientConfig[\"m.identity_server\"].error =\n                    AutoDiscovery.ERROR_INVALID_IDENTITY_SERVER;\n\n                // Supply the base_url to the caller because they may be ignoring\n                // liveliness errors, like this one.\n                failingClientConfig[\"m.identity_server\"].base_url = isUrl;\n\n                return Promise.resolve(failingClientConfig);\n            }\n        }\n\n        // Step 6: Now that the identity server is valid, or never existed,\n        // populate the IS section.\n        if (isUrl && isUrl.toString().length > 0) {\n            clientConfig[\"m.identity_server\"] = {\n                state: AutoDiscovery.SUCCESS,\n                error: null,\n                base_url: isUrl,\n            };\n        }\n\n        // Step 7: Copy any other keys directly into the clientConfig. This is for\n        // things like custom configuration of services.\n        Object.keys(wellknown)\n            .map((k) => {\n                if (k === \"m.homeserver\" || k === \"m.identity_server\") {\n                    // Only copy selected parts of the config to avoid overwriting\n                    // properties computed by the validation logic above.\n                    const notProps = [\"error\", \"state\", \"base_url\"];\n                    for (const prop of Object.keys(wellknown[k])) {\n                        if (notProps.includes(prop)) continue;\n                        clientConfig[k][prop] = wellknown[k][prop];\n                    }\n                } else {\n                    // Just copy the whole thing over otherwise\n                    clientConfig[k] = wellknown[k];\n                }\n            });\n\n        // Step 8: Give the config to the caller (finally)\n        return Promise.resolve(clientConfig);\n    }\n\n    /**\n     * Attempts to automatically discover client configuration information\n     * prior to logging in. Such information includes the homeserver URL\n     * and identity server URL the client would want. Additional details\n     * may also be discovered, and will be transparently included in the\n     * response object unaltered.\n     * @param {string} domain The homeserver domain to perform discovery\n     * on. For example, \"matrix.org\".\n     * @return {Promise<DiscoveredClientConfig>} Resolves to the discovered\n     * configuration, which may include error states. Rejects on unexpected\n     * failure, not when discovery fails.\n     */\n    public static async findClientConfig(domain: string): Promise<IClientWellKnown> {\n        if (!domain || typeof(domain) !== \"string\" || domain.length === 0) {\n            throw new Error(\"'domain' must be a string of non-zero length\");\n        }\n\n        // We use a .well-known lookup for all cases. According to the spec, we\n        // can do other discovery mechanisms if we want such as custom lookups\n        // however we won't bother with that here (mostly because the spec only\n        // supports .well-known right now).\n        //\n        // By using .well-known, we need to ensure we at least pull out a URL\n        // for the homeserver. We don't really need an identity server configuration\n        // but will return one anyways (with state PROMPT) to make development\n        // easier for clients. If we can't get a homeserver URL, all bets are\n        // off on the rest of the config and we'll assume it is invalid too.\n\n        // We default to an error state to make the first few checks easier to\n        // write. We'll update the properties of this object over the duration\n        // of this function.\n        const clientConfig = {\n            \"m.homeserver\": {\n                state: AutoDiscovery.FAIL_ERROR,\n                error: AutoDiscovery.ERROR_INVALID,\n                base_url: null,\n            },\n            \"m.identity_server\": {\n                // Technically, we don't have a problem with the identity server\n                // config at this point.\n                state: AutoDiscovery.PROMPT,\n                error: null,\n                base_url: null,\n            },\n        };\n\n        // Step 1: Actually request the .well-known JSON file and make sure it\n        // at least has a homeserver definition.\n        const wellknown = await this.fetchWellKnownObject(\n            `https://${domain}/.well-known/matrix/client`,\n        );\n        if (!wellknown || wellknown.action !== AutoDiscoveryAction.SUCCESS) {\n            logger.error(\"No response or error when parsing .well-known\");\n            if (wellknown.reason) logger.error(wellknown.reason);\n            if (wellknown.action === AutoDiscoveryAction.IGNORE) {\n                clientConfig[\"m.homeserver\"] = {\n                    state: AutoDiscovery.PROMPT,\n                    error: null,\n                    base_url: null,\n                };\n            } else {\n                // this can only ever be FAIL_PROMPT at this point.\n                clientConfig[\"m.homeserver\"].state = AutoDiscovery.FAIL_PROMPT;\n                clientConfig[\"m.homeserver\"].error = AutoDiscovery.ERROR_INVALID;\n            }\n            return Promise.resolve(clientConfig);\n        }\n\n        // Step 2: Validate and parse the config\n        return AutoDiscovery.fromDiscoveryConfig(wellknown.raw);\n    }\n\n    /**\n     * Gets the raw discovery client configuration for the given domain name.\n     * Should only be used if there's no validation to be done on the resulting\n     * object, otherwise use findClientConfig().\n     * @param {string} domain The domain to get the client config for.\n     * @returns {Promise<object>} Resolves to the domain's client config. Can\n     * be an empty object.\n     */\n    public static async getRawClientConfig(domain: string): Promise<IClientWellKnown> {\n        if (!domain || typeof(domain) !== \"string\" || domain.length === 0) {\n            throw new Error(\"'domain' must be a string of non-zero length\");\n        }\n\n        const response = await this.fetchWellKnownObject(\n            `https://${domain}/.well-known/matrix/client`,\n        );\n        if (!response) return {};\n        return response.raw || {};\n    }\n\n    /**\n     * Sanitizes a given URL to ensure it is either an HTTP or HTTP URL and\n     * is suitable for the requirements laid out by .well-known auto discovery.\n     * If valid, the URL will also be stripped of any trailing slashes.\n     * @param {string} url The potentially invalid URL to sanitize.\n     * @return {string|boolean} The sanitized URL or a falsey value if the URL is invalid.\n     * @private\n     */\n    private static sanitizeWellKnownUrl(url: string): string | boolean {\n        if (!url) return false;\n\n        try {\n            // We have to try and parse the URL using the NodeJS URL\n            // library if we're on NodeJS and use the browser's URL\n            // library when we're in a browser. To accomplish this, we\n            // try the NodeJS version first and fall back to the browser.\n            let parsed = null;\n            try {\n                if (NodeURL) parsed = new NodeURL(url);\n                else parsed = new URL(url);\n            } catch (e) {\n                parsed = new URL(url);\n            }\n\n            if (!parsed || !parsed.hostname) return false;\n            if (parsed.protocol !== \"http:\" && parsed.protocol !== \"https:\") return false;\n\n            const port = parsed.port ? `:${parsed.port}` : \"\";\n            const path = parsed.pathname ? parsed.pathname : \"\";\n            let saferUrl = `${parsed.protocol}//${parsed.hostname}${port}${path}`;\n            if (saferUrl.endsWith(\"/\")) {\n                saferUrl = saferUrl.substring(0, saferUrl.length - 1);\n            }\n            return saferUrl;\n        } catch (e) {\n            logger.error(e);\n            return false;\n        }\n    }\n\n    /**\n     * Fetches a JSON object from a given URL, as expected by all .well-known\n     * related lookups. If the server gives a 404 then the `action` will be\n     * IGNORE. If the server returns something that isn't JSON, the `action`\n     * will be FAIL_PROMPT. For any other failure the `action` will be FAIL_PROMPT.\n     *\n     * The returned object will be a result of the call in object form with\n     * the following properties:\n     *   raw: The JSON object returned by the server.\n     *   action: One of SUCCESS, IGNORE, or FAIL_PROMPT.\n     *   reason: Relatively human readable description of what went wrong.\n     *   error: The actual Error, if one exists.\n     * @param {string} url The URL to fetch a JSON object from.\n     * @return {Promise<object>} Resolves to the returned state.\n     * @private\n     */\n    private static async fetchWellKnownObject(url: string): Promise<IWellKnownConfig> {\n        return new Promise(function(resolve, reject) {\n            // eslint-disable-next-line\n            const request = require(\"./matrix\").getRequest();\n            if (!request) throw new Error(\"No request library available\");\n            request(\n                { method: \"GET\", uri: url, timeout: 5000 },\n                (err, response, body) => {\n                    if (err || response &&\n                        (response.statusCode < 200 || response.statusCode >= 300)\n                    ) {\n                        let action = AutoDiscoveryAction.FAIL_PROMPT;\n                        let reason = (err ? err.message : null) || \"General failure\";\n                        if (response && response.statusCode === 404) {\n                            action = AutoDiscoveryAction.IGNORE;\n                            reason = AutoDiscovery.ERROR_MISSING_WELLKNOWN;\n                        }\n                        resolve({ raw: {}, action: action, reason: reason, error: err });\n                        return;\n                    }\n\n                    try {\n                        resolve({ raw: JSON.parse(body), action: AutoDiscoveryAction.SUCCESS });\n                    } catch (e) {\n                        let reason = AutoDiscovery.ERROR_INVALID;\n                        if (e.name === \"SyntaxError\") {\n                            reason = AutoDiscovery.ERROR_INVALID_JSON;\n                        }\n                        resolve({\n                            raw: {},\n                            action: AutoDiscoveryAction.FAIL_PROMPT,\n                            reason: reason,\n                            error: e,\n                        });\n                    }\n                },\n            );\n        });\n    }\n}\n",
    "/*\nCopyright 2019 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport request from \"browser-request\";\nimport queryString from \"qs\";\n\nimport * as matrixcs from \"./matrix\";\n\nif (matrixcs.getRequest()) {\n    throw new Error(\"Multiple matrix-js-sdk entrypoints detected!\");\n}\n\nmatrixcs.request(function(opts, fn) {\n    // We manually fix the query string for browser-request because\n    // it doesn't correctly handle cases like ?via=one&via=two. Instead\n    // we mimic `request`'s query string interface to make it all work\n    // as expected.\n    // browser-request will happily take the constructed string as the\n    // query string without trying to modify it further.\n    opts.qs = queryString.stringify(opts.qs || {}, opts.qsStringifyOptions);\n    return request(opts, fn);\n});\n\n// just *accessing* indexedDB throws an exception in firefox with\n// indexeddb disabled.\nlet indexedDB;\ntry {\n    indexedDB = global.indexedDB;\n} catch (e) {}\n\n// if our browser (appears to) support indexeddb, use an indexeddb crypto store.\nif (indexedDB) {\n    matrixcs.setCryptoStoreFactory(\n        function() {\n            return new matrixcs.IndexedDBCryptoStore(\n                indexedDB, \"matrix-js-sdk:crypto\",\n            );\n        },\n    );\n}\n\n// We export 3 things to make browserify happy as well as downstream projects.\n// It's awkward, but required.\nexport * from \"./matrix\";\nexport default matrixcs; // keep export for browserify package deps\nglobal.matrixcs = matrixcs;\n",
    "/*\nCopyright 2015-2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * This is an internal module. See {@link MatrixClient} for the public class.\n * @module client\n */\n\nimport { EmoteEvent, IPartialEvent, MessageEvent, NoticeEvent } from \"matrix-events-sdk\";\n\nimport { ISyncStateData, SyncApi, SyncState } from \"./sync\";\nimport {\n    EventStatus,\n    IContent,\n    IDecryptOptions,\n    IEvent,\n    MatrixEvent,\n    MatrixEventEvent,\n    MatrixEventHandlerMap,\n} from \"./models/event\";\nimport { StubStore } from \"./store/stub\";\nimport { CallEvent, CallEventHandlerMap, createNewMatrixCall, MatrixCall } from \"./webrtc/call\";\nimport { Filter, IFilterDefinition } from \"./filter\";\nimport { CallEventHandlerEvent, CallEventHandler, CallEventHandlerEventHandlerMap } from './webrtc/callEventHandler';\nimport * as utils from './utils';\nimport { sleep } from './utils';\nimport { Direction, EventTimeline } from \"./models/event-timeline\";\nimport { IActionsObject, PushProcessor } from \"./pushprocessor\";\nimport { AutoDiscovery, AutoDiscoveryAction } from \"./autodiscovery\";\nimport * as olmlib from \"./crypto/olmlib\";\nimport { decodeBase64, encodeBase64 } from \"./crypto/olmlib\";\nimport { IExportedDevice as IOlmDevice } from \"./crypto/OlmDevice\";\nimport { TypedReEmitter } from './ReEmitter';\nimport { IRoomEncryption, RoomList } from './crypto/RoomList';\nimport { logger } from './logger';\nimport { SERVICE_TYPES } from './service-types';\nimport {\n    FileType, HttpApiEvent, HttpApiEventHandlerMap,\n    IHttpOpts,\n    IUpload,\n    MatrixError,\n    MatrixHttpApi,\n    Method,\n    PREFIX_IDENTITY_V2,\n    PREFIX_MEDIA_R0,\n    PREFIX_R0,\n    PREFIX_UNSTABLE,\n    PREFIX_V1,\n    retryNetworkOperation,\n    UploadContentResponseType,\n} from \"./http-api\";\nimport {\n    Crypto,\n    CryptoEvent,\n    CryptoEventHandlerMap,\n    fixBackupKey,\n    IBootstrapCrossSigningOpts,\n    ICheckOwnCrossSigningTrustOpts,\n    IMegolmSessionData,\n    isCryptoAvailable,\n    VerificationMethod,\n} from './crypto';\nimport { DeviceInfo, IDevice } from \"./crypto/deviceinfo\";\nimport { decodeRecoveryKey } from './crypto/recoverykey';\nimport { keyFromAuthData } from './crypto/key_passphrase';\nimport { User, UserEvent, UserEventHandlerMap } from \"./models/user\";\nimport { getHttpUriForMxc } from \"./content-repo\";\nimport { SearchResult } from \"./models/search-result\";\nimport {\n    DEHYDRATION_ALGORITHM,\n    IDehydratedDevice,\n    IDehydratedDeviceKeyInfo,\n    IDeviceKeys,\n    IOneTimeKey,\n} from \"./crypto/dehydration\";\nimport {\n    IKeyBackupInfo,\n    IKeyBackupPrepareOpts,\n    IKeyBackupRestoreOpts,\n    IKeyBackupRestoreResult,\n    IKeyBackupRoomSessions,\n    IKeyBackupSession,\n} from \"./crypto/keybackup\";\nimport { IIdentityServerProvider } from \"./@types/IIdentityServerProvider\";\nimport { MatrixScheduler } from \"./scheduler\";\nimport {\n    IAuthData,\n    ICryptoCallbacks,\n    IMinimalEvent,\n    IRoomEvent,\n    IStateEvent,\n    NotificationCountType,\n    BeaconEvent,\n    BeaconEventHandlerMap,\n    RoomEvent,\n    RoomEventHandlerMap,\n    RoomMemberEvent,\n    RoomMemberEventHandlerMap,\n    RoomStateEvent,\n    RoomStateEventHandlerMap,\n} from \"./matrix\";\nimport {\n    CrossSigningKey,\n    IAddSecretStorageKeyOpts,\n    ICreateSecretStorageOpts,\n    IEncryptedEventInfo,\n    IImportRoomKeysOpts,\n    IRecoveryKey,\n    ISecretStorageKeyInfo,\n} from \"./crypto/api\";\nimport { EventTimelineSet } from \"./models/event-timeline-set\";\nimport { VerificationRequest } from \"./crypto/verification/request/VerificationRequest\";\nimport { VerificationBase as Verification } from \"./crypto/verification/Base\";\nimport * as ContentHelpers from \"./content-helpers\";\nimport { CrossSigningInfo, DeviceTrustLevel, ICacheCallbacks, UserTrustLevel } from \"./crypto/CrossSigning\";\nimport { Room } from \"./models/room\";\nimport {\n    IAddThreePidOnlyBody,\n    IBindThreePidBody,\n    ICreateRoomOpts,\n    IEventSearchOpts,\n    IGuestAccessOpts,\n    IJoinRoomOpts,\n    IPaginateOpts,\n    IPresenceOpts,\n    IRedactOpts,\n    IRelationsRequestOpts,\n    IRelationsResponse,\n    IRoomDirectoryOptions,\n    ISearchOpts,\n    ISendEventResponse,\n    IUploadOpts,\n} from \"./@types/requests\";\nimport {\n    EventType,\n    MsgType,\n    RelationType,\n    RoomCreateTypeField,\n    RoomType,\n    UNSTABLE_MSC3088_ENABLED,\n    UNSTABLE_MSC3088_PURPOSE,\n    UNSTABLE_MSC3089_TREE_SUBTYPE,\n} from \"./@types/event\";\nimport { IAbortablePromise, IdServerUnbindResult, IImageInfo, Preset, Visibility } from \"./@types/partials\";\nimport { EventMapper, eventMapperFor, MapperOpts } from \"./event-mapper\";\nimport { randomString } from \"./randomstring\";\nimport { WebStorageSessionStore } from \"./store/session/webstorage\";\nimport { BackupManager, IKeyBackup, IKeyBackupCheck, IPreparedKeyBackupVersion, TrustInfo } from \"./crypto/backup\";\nimport { DEFAULT_TREE_POWER_LEVELS_TEMPLATE, MSC3089TreeSpace } from \"./models/MSC3089TreeSpace\";\nimport { ISignatures } from \"./@types/signed\";\nimport { IStore } from \"./store\";\nimport { ISecretRequest } from \"./crypto/SecretStorage\";\nimport {\n    IEventWithRoomId,\n    ISearchRequestBody,\n    ISearchResponse,\n    ISearchResults,\n    IStateEventWithRoomId,\n    SearchOrderBy,\n} from \"./@types/search\";\nimport { ISynapseAdminDeactivateResponse, ISynapseAdminWhoisResponse } from \"./@types/synapse\";\nimport { IHierarchyRoom } from \"./@types/spaces\";\nimport { IPusher, IPusherRequest, IPushRules, PushRuleAction, PushRuleKind, RuleId } from \"./@types/PushRules\";\nimport { IThreepid } from \"./@types/threepids\";\nimport { CryptoStore } from \"./crypto/store/base\";\nimport { MediaHandler } from \"./webrtc/mediaHandler\";\nimport { IRefreshTokenResponse } from \"./@types/auth\";\nimport { TypedEventEmitter } from \"./models/typed-event-emitter\";\nimport { Thread, THREAD_RELATION_TYPE } from \"./models/thread\";\nimport { MBeaconInfoEventContent, M_BEACON, M_BEACON_INFO } from \"./@types/beacon\";\n\nexport type Store = IStore;\nexport type SessionStore = WebStorageSessionStore;\n\nexport type Callback<T = any> = (err: Error | any | null, data?: T) => void;\nexport type ResetTimelineCallback = (roomId: string) => boolean;\n\nconst SCROLLBACK_DELAY_MS = 3000;\nexport const CRYPTO_ENABLED: boolean = isCryptoAvailable();\nconst CAPABILITIES_CACHE_MS = 21600000; // 6 hours - an arbitrary value\nconst TURN_CHECK_INTERVAL = 10 * 60 * 1000; // poll for turn credentials every 10 minutes\n\ninterface IExportedDevice {\n    olmDevice: IOlmDevice;\n    userId: string;\n    deviceId: string;\n}\n\nexport interface IKeysUploadResponse {\n    one_time_key_counts: { // eslint-disable-line camelcase\n        [algorithm: string]: number;\n    };\n}\n\nexport interface ICreateClientOpts {\n    baseUrl: string;\n\n    idBaseUrl?: string;\n\n    /**\n     * The data store used for sync data from the homeserver. If not specified,\n     * this client will not store any HTTP responses. The `createClient` helper\n     * will create a default store if needed.\n     */\n    store?: Store;\n\n    /**\n     * A store to be used for end-to-end crypto session data. If not specified,\n     * end-to-end crypto will be disabled. The `createClient` helper will create\n     * a default store if needed.\n     */\n    cryptoStore?: CryptoStore;\n\n    /**\n     * The scheduler to use. If not\n     * specified, this client will not retry requests on failure. This client\n     * will supply its own processing function to\n     * {@link module:scheduler~MatrixScheduler#setProcessFunction}.\n     */\n    scheduler?: MatrixScheduler;\n\n    /**\n     * The function to invoke for HTTP\n     * requests. The value of this property is typically <code>require(\"request\")\n     * </code> as it returns a function which meets the required interface. See\n     * {@link requestFunction} for more information.\n     */\n    request?: IHttpOpts[\"request\"];\n\n    userId?: string;\n\n    /**\n     * A unique identifier for this device; used for tracking things like crypto\n     * keys and access tokens. If not specified, end-to-end encryption will be\n     * disabled.\n     */\n    deviceId?: string;\n\n    accessToken?: string;\n\n    /**\n     * Identity server provider to retrieve the user's access token when accessing\n     * the identity server. See also https://github.com/vector-im/element-web/issues/10615\n     * which seeks to replace the previous approach of manual access tokens params\n     * with this callback throughout the SDK.\n     */\n    identityServer?: IIdentityServerProvider;\n\n    /**\n     * The default maximum amount of\n     * time to wait before timing out HTTP requests. If not specified, there is no timeout.\n     */\n    localTimeoutMs?: number;\n\n    /**\n     * Set to true to use\n     * Authorization header instead of query param to send the access token to the server.\n     *\n     * Default false.\n     */\n    useAuthorizationHeader?: boolean;\n\n    /**\n     * Set to true to enable\n     * improved timeline support ({@link module:client~MatrixClient#getEventTimeline getEventTimeline}). It is\n     * disabled by default for compatibility with older clients - in particular to\n     * maintain support for back-paginating the live timeline after a '/sync'\n     * result with a gap.\n     */\n    timelineSupport?: boolean;\n\n    /**\n     * Extra query parameters to append\n     * to all requests with this client. Useful for application services which require\n     * <code>?user_id=</code>.\n     */\n    queryParams?: Record<string, string>;\n\n    /**\n     * Device data exported with\n     * \"exportDevice\" method that must be imported to recreate this device.\n     * Should only be useful for devices with end-to-end crypto enabled.\n     * If provided, deviceId and userId should **NOT** be provided at the top\n     * level (they are present in the exported data).\n     */\n    deviceToImport?: IExportedDevice;\n\n    /**\n     * Key used to pickle olm objects or other sensitive data.\n     */\n    pickleKey?: string;\n\n    /**\n     * A store to be used for end-to-end crypto session data. Most data has been\n     * migrated out of here to `cryptoStore` instead. If not specified,\n     * end-to-end crypto will be disabled. The `createClient` helper\n     * _will not_ create this store at the moment.\n     */\n    sessionStore?: SessionStore;\n\n    /**\n     * Set to true to enable client-side aggregation of event relations\n     * via `EventTimelineSet#getRelationsForEvent`.\n     * This feature is currently unstable and the API may change without notice.\n     */\n    unstableClientRelationAggregation?: boolean;\n\n    verificationMethods?: Array<VerificationMethod>;\n\n    /**\n     * Whether relaying calls through a TURN server should be forced. Default false.\n     */\n    forceTURN?: boolean;\n\n    /**\n     * Up to this many ICE candidates will be gathered when an incoming call arrives.\n     * Gathering does not send data to the caller, but will communicate with the configured TURN\n     * server. Default 0.\n     */\n    iceCandidatePoolSize?: number;\n\n    /**\n     * True to advertise support for call transfers to other parties on Matrix calls. Default false.\n     */\n    supportsCallTransfer?: boolean;\n\n    /**\n     * Whether to allow a fallback ICE server should be used for negotiating a\n     * WebRTC connection if the homeserver doesn't provide any servers. Defaults to false.\n     */\n    fallbackICEServerAllowed?: boolean;\n\n    cryptoCallbacks?: ICryptoCallbacks;\n}\n\nexport interface IMatrixClientCreateOpts extends ICreateClientOpts {\n    /**\n     * Whether to allow sending messages to encrypted rooms when encryption\n     * is not available internally within this SDK. This is useful if you are using an external\n     * E2E proxy, for example. Defaults to false.\n     */\n    usingExternalCrypto?: boolean;\n}\n\nexport enum PendingEventOrdering {\n    Chronological = \"chronological\",\n    Detached = \"detached\",\n}\n\nexport interface IStartClientOpts {\n    /**\n     * The event <code>limit=</code> to apply to initial sync. Default: 8.\n     */\n    initialSyncLimit?: number;\n\n    /**\n     * True to put <code>archived=true</code> on the <code>/initialSync</code> request. Default: false.\n     */\n    includeArchivedRooms?: boolean;\n\n    /**\n     * True to do /profile requests on every invite event if the displayname/avatar_url is not known for this user ID. Default: false.\n     */\n    resolveInvitesToProfiles?: boolean;\n\n    /**\n     * Controls where pending messages appear in a room's timeline. If \"<b>chronological</b>\", messages will\n     * appear in the timeline when the call to <code>sendEvent</code> was made. If \"<b>detached</b>\",\n     * pending messages will appear in a separate list, accessbile via {@link module:models/room#getPendingEvents}.\n     * Default: \"chronological\".\n     */\n    pendingEventOrdering?: PendingEventOrdering;\n\n    /**\n     * The number of milliseconds to wait on /sync. Default: 30000 (30 seconds).\n     */\n    pollTimeout?: number;\n\n    /**\n     * The filter to apply to /sync calls. This will override the opts.initialSyncLimit, which would\n     * normally result in a timeline limit filter.\n     */\n    filter?: Filter;\n\n    /**\n     * True to perform syncing without automatically updating presence.\n     */\n    disablePresence?: boolean;\n\n    /**\n     * True to not load all membership events during initial sync but fetch them when needed by calling\n     * `loadOutOfBandMembers` This will override the filter option at this moment.\n     */\n    lazyLoadMembers?: boolean;\n\n    /**\n     * The number of seconds between polls to /.well-known/matrix/client, undefined to disable.\n     * This should be in the order of hours. Default: undefined.\n     */\n    clientWellKnownPollPeriod?: number;\n\n    /**\n     * @experimental\n     */\n    experimentalThreadSupport?: boolean;\n}\n\nexport interface IStoredClientOpts extends IStartClientOpts {\n    crypto: Crypto;\n    canResetEntireTimeline: ResetTimelineCallback;\n}\n\nexport enum RoomVersionStability {\n    Stable = \"stable\",\n    Unstable = \"unstable\",\n}\n\nexport interface IRoomCapability { // MSC3244\n    preferred: string | null;\n    support: string[];\n}\n\nexport interface IRoomVersionsCapability {\n    default: string;\n    available: Record<string, RoomVersionStability>;\n    \"org.matrix.msc3244.room_capabilities\"?: Record<string, IRoomCapability>; // MSC3244\n}\n\nexport interface ICapability {\n    enabled: boolean;\n}\n\nexport interface IChangePasswordCapability extends ICapability {}\n\nexport interface IThreadsCapability extends ICapability {}\n\ninterface ICapabilities {\n    [key: string]: any;\n    \"m.change_password\"?: IChangePasswordCapability;\n    \"m.room_versions\"?: IRoomVersionsCapability;\n    \"io.element.thread\"?: IThreadsCapability;\n}\n\n/* eslint-disable camelcase */\nexport interface ICrossSigningKey {\n    keys: { [algorithm: string]: string };\n    signatures?: ISignatures;\n    usage: string[];\n    user_id: string;\n}\n\nenum CrossSigningKeyType {\n    MasterKey = \"master_key\",\n    SelfSigningKey = \"self_signing_key\",\n    UserSigningKey = \"user_signing_key\",\n}\n\nexport type CrossSigningKeys = Record<CrossSigningKeyType, ICrossSigningKey>;\n\nexport interface ISignedKey {\n    keys: Record<string, string>;\n    signatures: ISignatures;\n    user_id: string;\n    algorithms: string[];\n    device_id: string;\n}\n\nexport type KeySignatures = Record<string, Record<string, ICrossSigningKey | ISignedKey>>;\nexport interface IUploadKeySignaturesResponse {\n    failures: Record<string, Record<string, {\n        errcode: string;\n        error: string;\n    }>>;\n}\n\nexport interface IPreviewUrlResponse {\n    [key: string]: string | number;\n    \"og:title\": string;\n    \"og:type\": string;\n    \"og:url\": string;\n    \"og:image\"?: string;\n    \"og:image:type\"?: string;\n    \"og:image:height\"?: number;\n    \"og:image:width\"?: number;\n    \"og:description\"?: string;\n    \"matrix:image:size\"?: number;\n}\n\ninterface ITurnServerResponse {\n    uris: string[];\n    username: string;\n    password: string;\n    ttl: number;\n}\n\ninterface ITurnServer {\n    urls: string[];\n    username: string;\n    credential: string;\n}\n\ninterface IServerVersions {\n    versions: string[];\n    unstable_features: Record<string, boolean>;\n}\n\nexport interface IClientWellKnown {\n    [key: string]: any;\n    \"m.homeserver\"?: IWellKnownConfig;\n    \"m.identity_server\"?: IWellKnownConfig;\n}\n\nexport interface IWellKnownConfig {\n    raw?: any; // todo typings\n    action?: AutoDiscoveryAction;\n    reason?: string;\n    error?: Error | string;\n    // eslint-disable-next-line\n    base_url?: string | null;\n}\n\ninterface IKeyBackupPath {\n    path: string;\n    queryData?: {\n        version: string;\n    };\n}\n\ninterface IMediaConfig {\n    [key: string]: any; // extensible\n    \"m.upload.size\"?: number;\n}\n\ninterface IThirdPartySigned {\n    sender: string;\n    mxid: string;\n    token: string;\n    signatures: ISignatures;\n}\n\ninterface IJoinRequestBody {\n    third_party_signed?: IThirdPartySigned;\n}\n\ninterface ITagMetadata {\n    [key: string]: any;\n    order: number;\n}\n\ninterface IMessagesResponse {\n    start: string;\n    end: string;\n    chunk: IRoomEvent[];\n    state: IStateEvent[];\n}\n\nexport interface IRequestTokenResponse {\n    sid: string;\n    submit_url?: string;\n}\n\nexport interface IRequestMsisdnTokenResponse extends IRequestTokenResponse {\n    msisdn: string;\n    success: boolean;\n    intl_fmt: string;\n}\n\ninterface IUploadKeysRequest {\n    device_keys?: Required<IDeviceKeys>;\n    one_time_keys?: {\n        [userId: string]: {\n            [deviceId: string]: number;\n        };\n    };\n    \"org.matrix.msc2732.fallback_keys\"?: Record<string, IOneTimeKey>;\n}\n\ninterface IOpenIDToken {\n    access_token: string;\n    token_type: \"Bearer\" | string;\n    matrix_server_name: string;\n    expires_in: number;\n}\n\ninterface IRoomInitialSyncResponse {\n    room_id: string;\n    membership: \"invite\" | \"join\" | \"leave\" | \"ban\";\n    messages?: {\n        start?: string;\n        end?: string;\n        chunk: IEventWithRoomId[];\n    };\n    state?: IStateEventWithRoomId[];\n    visibility: Visibility;\n    account_data?: IMinimalEvent[];\n    presence: Partial<IEvent>; // legacy and undocumented, api is deprecated so this won't get attention\n}\n\ninterface IJoinedRoomsResponse {\n    joined_rooms: string[];\n}\n\ninterface IJoinedMembersResponse {\n    joined: {\n        [userId: string]: {\n            display_name: string;\n            avatar_url: string;\n        };\n    };\n}\n\nexport interface IPublicRoomsChunkRoom {\n    room_id: string;\n    name?: string;\n    avatar_url?: string;\n    topic?: string;\n    canonical_alias?: string;\n    aliases?: string[];\n    world_readable: boolean;\n    guest_can_join: boolean;\n    num_joined_members: number;\n}\n\ninterface IPublicRoomsResponse {\n    chunk: IPublicRoomsChunkRoom[];\n    next_batch?: string;\n    prev_batch?: string;\n    total_room_count_estimate?: number;\n}\n\ninterface IUserDirectoryResponse {\n    results: {\n        user_id: string;\n        display_name?: string;\n        avatar_url?: string;\n    }[];\n    limited: boolean;\n}\n\nexport interface IMyDevice {\n    device_id: string;\n    display_name?: string;\n    last_seen_ip?: string;\n    last_seen_ts?: number;\n}\n\nexport interface IDownloadKeyResult {\n    failures: { [serverName: string]: object };\n    device_keys: {\n        [userId: string]: {\n            [deviceId: string]: IDeviceKeys & {\n                unsigned?: {\n                    device_display_name: string;\n                };\n            };\n        };\n    };\n    // the following three fields were added in 1.1\n    master_keys?: {\n        [userId: string]: {\n            keys: { [keyId: string]: string };\n            usage: string[];\n            user_id: string;\n        };\n    };\n    self_signing_keys?: {\n        [userId: string]: {\n            keys: { [keyId: string]: string };\n            signatures: ISignatures;\n            usage: string[];\n            user_id: string;\n        };\n    };\n    user_signing_keys?: {\n        [userId: string]: {\n            keys: { [keyId: string]: string };\n            signatures: ISignatures;\n            usage: string[];\n            user_id: string;\n        };\n    };\n}\n\nexport interface IClaimOTKsResult {\n    failures: { [serverName: string]: object };\n    one_time_keys: {\n        [userId: string]: {\n            [deviceId: string]: {\n                [keyId: string]: {\n                    key: string;\n                    signatures: ISignatures;\n                };\n            };\n        };\n    };\n}\n\nexport interface IFieldType {\n    regexp: string;\n    placeholder: string;\n}\n\nexport interface IInstance {\n    desc: string;\n    icon?: string;\n    fields: object;\n    network_id: string;\n    // XXX: this is undocumented but we rely on it: https://github.com/matrix-org/matrix-doc/issues/3203\n    instance_id: string;\n}\n\nexport interface IProtocol {\n    user_fields: string[];\n    location_fields: string[];\n    icon: string;\n    field_types: Record<string, IFieldType>;\n    instances: IInstance[];\n}\n\ninterface IThirdPartyLocation {\n    alias: string;\n    protocol: string;\n    fields: object;\n}\n\ninterface IThirdPartyUser {\n    userid: string;\n    protocol: string;\n    fields: object;\n}\n\ninterface IRoomSummary extends Omit<IPublicRoomsChunkRoom, \"canonical_alias\" | \"aliases\"> {\n    room_type?: RoomType;\n    membership?: string;\n    is_encrypted: boolean;\n}\n\ninterface IRoomKeysResponse {\n    sessions: IKeyBackupRoomSessions;\n}\n\ninterface IRoomsKeysResponse {\n    rooms: Record<string, IRoomKeysResponse>;\n}\n\ninterface IRoomHierarchy {\n    rooms: IHierarchyRoom[];\n    next_batch?: string;\n}\n\ninterface ITimestampToEventResponse {\n    event_id: string;\n    origin_server_ts: string;\n}\n/* eslint-enable camelcase */\n\n// We're using this constant for methods overloading and inspect whether a variable\n// contains an eventId or not. This was required to ensure backwards compatibility\n// of methods for threads\n// Probably not the most graceful solution but does a good enough job for now\nconst EVENT_ID_PREFIX = \"$\";\n\nexport enum ClientEvent {\n    Sync = \"sync\",\n    Event = \"event\",\n    ToDeviceEvent = \"toDeviceEvent\",\n    AccountData = \"accountData\",\n    Room = \"Room\",\n    DeleteRoom = \"deleteRoom\",\n    SyncUnexpectedError = \"sync.unexpectedError\",\n    ClientWellKnown = \"WellKnown.client\",\n}\n\ntype RoomEvents = RoomEvent.Name\n    | RoomEvent.Redaction\n    | RoomEvent.RedactionCancelled\n    | RoomEvent.Receipt\n    | RoomEvent.Tags\n    | RoomEvent.LocalEchoUpdated\n    | RoomEvent.AccountData\n    | RoomEvent.MyMembership\n    | RoomEvent.Timeline\n    | RoomEvent.TimelineReset;\n\ntype RoomStateEvents = RoomStateEvent.Events\n    | RoomStateEvent.Members\n    | RoomStateEvent.NewMember\n    | RoomStateEvent.Update\n    ;\n\ntype CryptoEvents = CryptoEvent.KeySignatureUploadFailure\n    | CryptoEvent.KeyBackupStatus\n    | CryptoEvent.KeyBackupFailed\n    | CryptoEvent.KeyBackupSessionsRemaining\n    | CryptoEvent.RoomKeyRequest\n    | CryptoEvent.RoomKeyRequestCancellation\n    | CryptoEvent.VerificationRequest\n    | CryptoEvent.DeviceVerificationChanged\n    | CryptoEvent.UserTrustStatusChanged\n    | CryptoEvent.KeysChanged\n    | CryptoEvent.Warning\n    | CryptoEvent.DevicesUpdated\n    | CryptoEvent.WillUpdateDevices;\n\ntype MatrixEventEvents = MatrixEventEvent.Decrypted | MatrixEventEvent.Replaced | MatrixEventEvent.VisibilityChange;\n\ntype RoomMemberEvents = RoomMemberEvent.Name\n    | RoomMemberEvent.Typing\n    | RoomMemberEvent.PowerLevel\n    | RoomMemberEvent.Membership;\n\ntype UserEvents = UserEvent.AvatarUrl\n    | UserEvent.DisplayName\n    | UserEvent.Presence\n    | UserEvent.CurrentlyActive\n    | UserEvent.LastPresenceTs;\n\ntype EmittedEvents = ClientEvent\n    | RoomEvents\n    | RoomStateEvents\n    | CryptoEvents\n    | MatrixEventEvents\n    | RoomMemberEvents\n    | UserEvents\n    | CallEvent // re-emitted by call.ts using Object.values\n    | CallEventHandlerEvent.Incoming\n    | HttpApiEvent.SessionLoggedOut\n    | HttpApiEvent.NoConsent\n    | BeaconEvent;\n\nexport type ClientEventHandlerMap = {\n    [ClientEvent.Sync]: (state: SyncState, lastState?: SyncState, data?: ISyncStateData) => void;\n    [ClientEvent.Event]: (event: MatrixEvent) => void;\n    [ClientEvent.ToDeviceEvent]: (event: MatrixEvent) => void;\n    [ClientEvent.AccountData]: (event: MatrixEvent, lastEvent?: MatrixEvent) => void;\n    [ClientEvent.Room]: (room: Room) => void;\n    [ClientEvent.DeleteRoom]: (roomId: string) => void;\n    [ClientEvent.SyncUnexpectedError]: (error: Error) => void;\n    [ClientEvent.ClientWellKnown]: (data: IClientWellKnown) => void;\n} & RoomEventHandlerMap\n    & RoomStateEventHandlerMap\n    & CryptoEventHandlerMap\n    & MatrixEventHandlerMap\n    & RoomMemberEventHandlerMap\n    & UserEventHandlerMap\n    & CallEventHandlerEventHandlerMap\n    & CallEventHandlerMap\n    & HttpApiEventHandlerMap\n    & BeaconEventHandlerMap;\n\n/**\n * Represents a Matrix Client. Only directly construct this if you want to use\n * custom modules. Normally, {@link createClient} should be used\n * as it specifies 'sensible' defaults for these modules.\n */\nexport class MatrixClient extends TypedEventEmitter<EmittedEvents, ClientEventHandlerMap> {\n    public static readonly RESTORE_BACKUP_ERROR_BAD_KEY = 'RESTORE_BACKUP_ERROR_BAD_KEY';\n\n    public reEmitter = new TypedReEmitter<EmittedEvents, ClientEventHandlerMap>(this);\n    public olmVersion: [number, number, number] = null; // populated after initCrypto\n    public usingExternalCrypto = false;\n    public store: Store;\n    public deviceId?: string;\n    public credentials: { userId?: string };\n    public pickleKey: string;\n    public scheduler: MatrixScheduler;\n    public clientRunning = false;\n    public timelineSupport = false;\n    public urlPreviewCache: { [key: string]: Promise<IPreviewUrlResponse> } = {};\n    public unstableClientRelationAggregation = false;\n    public identityServer: IIdentityServerProvider;\n    public sessionStore: SessionStore; // XXX: Intended private, used in code.\n    public http: MatrixHttpApi; // XXX: Intended private, used in code.\n    public crypto: Crypto; // XXX: Intended private, used in code.\n    public cryptoCallbacks: ICryptoCallbacks; // XXX: Intended private, used in code.\n    public callEventHandler: CallEventHandler; // XXX: Intended private, used in code.\n    public supportsCallTransfer = false; // XXX: Intended private, used in code.\n    public forceTURN = false; // XXX: Intended private, used in code.\n    public iceCandidatePoolSize = 0; // XXX: Intended private, used in code.\n    public idBaseUrl: string;\n    public baseUrl: string;\n\n    // Note: these are all `protected` to let downstream consumers make mistakes if they want to.\n    // We don't technically support this usage, but have reasons to do this.\n\n    protected canSupportVoip = false;\n    protected peekSync: SyncApi = null;\n    protected isGuestAccount = false;\n    protected ongoingScrollbacks: {[roomId: string]: {promise?: Promise<Room>, errorTs?: number}} = {};\n    protected notifTimelineSet: EventTimelineSet = null;\n    protected cryptoStore: CryptoStore;\n    protected verificationMethods: VerificationMethod[];\n    protected fallbackICEServerAllowed = false;\n    protected roomList: RoomList;\n    protected syncApi: SyncApi;\n    public pushRules: IPushRules;\n    protected syncLeftRoomsPromise: Promise<Room[]>;\n    protected syncedLeftRooms = false;\n    protected clientOpts: IStoredClientOpts;\n    protected clientWellKnownIntervalID: number;\n    protected canResetTimelineCallback: ResetTimelineCallback;\n\n    // The pushprocessor caches useful things, so keep one and re-use it\n    protected pushProcessor = new PushProcessor(this);\n\n    // Promise to a response of the server's /versions response\n    // TODO: This should expire: https://github.com/matrix-org/matrix-js-sdk/issues/1020\n    protected serverVersionsPromise: Promise<IServerVersions>;\n\n    public cachedCapabilities: {\n        capabilities: ICapabilities;\n        expiration: number;\n    };\n    protected clientWellKnown: IClientWellKnown;\n    protected clientWellKnownPromise: Promise<IClientWellKnown>;\n    protected turnServers: ITurnServer[] = [];\n    protected turnServersExpiry = 0;\n    protected checkTurnServersIntervalID: number;\n    protected exportedOlmDeviceToImport: IOlmDevice;\n    protected txnCtr = 0;\n    protected mediaHandler = new MediaHandler(this);\n    protected pendingEventEncryption = new Map<string, Promise<void>>();\n\n    constructor(opts: IMatrixClientCreateOpts) {\n        super();\n\n        opts.baseUrl = utils.ensureNoTrailingSlash(opts.baseUrl);\n        opts.idBaseUrl = utils.ensureNoTrailingSlash(opts.idBaseUrl);\n\n        this.baseUrl = opts.baseUrl;\n        this.idBaseUrl = opts.idBaseUrl;\n\n        this.usingExternalCrypto = opts.usingExternalCrypto;\n        this.store = opts.store || new StubStore();\n        this.deviceId = opts.deviceId || null;\n\n        const userId = opts.userId || null;\n        this.credentials = { userId };\n\n        this.http = new MatrixHttpApi(this as ConstructorParameters<typeof MatrixHttpApi>[0], {\n            baseUrl: opts.baseUrl,\n            idBaseUrl: opts.idBaseUrl,\n            accessToken: opts.accessToken,\n            request: opts.request,\n            prefix: PREFIX_R0,\n            onlyData: true,\n            extraParams: opts.queryParams,\n            localTimeoutMs: opts.localTimeoutMs,\n            useAuthorizationHeader: opts.useAuthorizationHeader,\n        });\n\n        if (opts.deviceToImport) {\n            if (this.deviceId) {\n                logger.warn(\n                    'not importing device because device ID is provided to ' +\n                    'constructor independently of exported data',\n                );\n            } else if (this.credentials.userId) {\n                logger.warn(\n                    'not importing device because user ID is provided to ' +\n                    'constructor independently of exported data',\n                );\n            } else if (!opts.deviceToImport.deviceId) {\n                logger.warn('not importing device because no device ID in exported data');\n            } else {\n                this.deviceId = opts.deviceToImport.deviceId;\n                this.credentials.userId = opts.deviceToImport.userId;\n                // will be used during async initialization of the crypto\n                this.exportedOlmDeviceToImport = opts.deviceToImport.olmDevice;\n            }\n        } else if (opts.pickleKey) {\n            this.pickleKey = opts.pickleKey;\n        }\n\n        this.scheduler = opts.scheduler;\n        if (this.scheduler) {\n            this.scheduler.setProcessFunction(async (eventToSend: MatrixEvent) => {\n                const room = this.getRoom(eventToSend.getRoomId());\n                if (eventToSend.status !== EventStatus.SENDING) {\n                    this.updatePendingEventStatus(room, eventToSend, EventStatus.SENDING);\n                }\n                const res = await this.sendEventHttpRequest(eventToSend);\n                if (room) {\n                    // ensure we update pending event before the next scheduler run so that any listeners to event id\n                    // updates on the synchronous event emitter get a chance to run first.\n                    room.updatePendingEvent(eventToSend, EventStatus.SENT, res.event_id);\n                }\n                return res;\n            });\n        }\n\n        // try constructing a MatrixCall to see if we are running in an environment\n        // which has WebRTC. If we are, listen for and handle m.call.* events.\n        const call = createNewMatrixCall(this, undefined, undefined);\n        if (call) {\n            this.callEventHandler = new CallEventHandler(this);\n            this.canSupportVoip = true;\n            // Start listening for calls after the initial sync is done\n            // We do not need to backfill the call event buffer\n            // with encrypted events that might never get decrypted\n            this.on(ClientEvent.Sync, this.startCallEventHandler);\n        }\n\n        this.timelineSupport = Boolean(opts.timelineSupport);\n        this.unstableClientRelationAggregation = !!opts.unstableClientRelationAggregation;\n\n        this.cryptoStore = opts.cryptoStore;\n        this.sessionStore = opts.sessionStore;\n        this.verificationMethods = opts.verificationMethods;\n        this.cryptoCallbacks = opts.cryptoCallbacks || {};\n\n        this.forceTURN = opts.forceTURN || false;\n        this.iceCandidatePoolSize = opts.iceCandidatePoolSize === undefined ? 0 : opts.iceCandidatePoolSize;\n        this.supportsCallTransfer = opts.supportsCallTransfer || false;\n        this.fallbackICEServerAllowed = opts.fallbackICEServerAllowed || false;\n\n        // List of which rooms have encryption enabled: separate from crypto because\n        // we still want to know which rooms are encrypted even if crypto is disabled:\n        // we don't want to start sending unencrypted events to them.\n        this.roomList = new RoomList(this.cryptoStore);\n\n        // The SDK doesn't really provide a clean way for events to recalculate the push\n        // actions for themselves, so we have to kinda help them out when they are encrypted.\n        // We do this so that push rules are correctly executed on events in their decrypted\n        // state, such as highlights when the user's name is mentioned.\n        this.on(MatrixEventEvent.Decrypted, (event) => {\n            const oldActions = event.getPushActions();\n            const actions = this.getPushActionsForEvent(event, true);\n\n            const room = this.getRoom(event.getRoomId());\n            if (!room) return;\n\n            const currentCount = room.getUnreadNotificationCount(NotificationCountType.Highlight);\n\n            // Ensure the unread counts are kept up to date if the event is encrypted\n            // We also want to make sure that the notification count goes up if we already\n            // have encrypted events to avoid other code from resetting 'highlight' to zero.\n            const oldHighlight = !!oldActions?.tweaks?.highlight;\n            const newHighlight = !!actions?.tweaks?.highlight;\n            if (oldHighlight !== newHighlight || currentCount > 0) {\n                // TODO: Handle mentions received while the client is offline\n                // See also https://github.com/vector-im/element-web/issues/9069\n                if (!room.hasUserReadEvent(this.getUserId(), event.getId())) {\n                    let newCount = currentCount;\n                    if (newHighlight && !oldHighlight) newCount++;\n                    if (!newHighlight && oldHighlight) newCount--;\n                    room.setUnreadNotificationCount(NotificationCountType.Highlight, newCount);\n\n                    // Fix 'Mentions Only' rooms from not having the right badge count\n                    const totalCount = room.getUnreadNotificationCount(NotificationCountType.Total);\n                    if (totalCount < newCount) {\n                        room.setUnreadNotificationCount(NotificationCountType.Total, newCount);\n                    }\n                }\n            }\n        });\n\n        // Like above, we have to listen for read receipts from ourselves in order to\n        // correctly handle notification counts on encrypted rooms.\n        // This fixes https://github.com/vector-im/element-web/issues/9421\n        this.on(RoomEvent.Receipt, (event, room) => {\n            if (room && this.isRoomEncrypted(room.roomId)) {\n                // Figure out if we've read something or if it's just informational\n                const content = event.getContent();\n                const isSelf = Object.keys(content).filter(eid => {\n                    return Object.keys(content[eid]['m.read']).includes(this.getUserId());\n                }).length > 0;\n\n                if (!isSelf) return;\n\n                // Work backwards to determine how many events are unread. We also set\n                // a limit for how back we'll look to avoid spinning CPU for too long.\n                // If we hit the limit, we assume the count is unchanged.\n                const maxHistory = 20;\n                const events = room.getLiveTimeline().getEvents();\n\n                let highlightCount = 0;\n\n                for (let i = events.length - 1; i >= 0; i--) {\n                    if (i === events.length - maxHistory) return; // limit reached\n\n                    const event = events[i];\n\n                    if (room.hasUserReadEvent(this.getUserId(), event.getId())) {\n                        // If the user has read the event, then the counting is done.\n                        break;\n                    }\n\n                    const pushActions = this.getPushActionsForEvent(event);\n                    highlightCount += pushActions.tweaks &&\n                    pushActions.tweaks.highlight ? 1 : 0;\n                }\n\n                // Note: we don't need to handle 'total' notifications because the counts\n                // will come from the server.\n                room.setUnreadNotificationCount(NotificationCountType.Highlight, highlightCount);\n            }\n        });\n    }\n\n    /**\n     * High level helper method to begin syncing and poll for new events. To listen for these\n     * events, add a listener for {@link module:client~MatrixClient#event:\"event\"}\n     * via {@link module:client~MatrixClient#on}. Alternatively, listen for specific\n     * state change events.\n     * @param {Object=} opts Options to apply when syncing.\n     */\n    public async startClient(opts?: IStartClientOpts): Promise<void> {\n        if (this.clientRunning) {\n            // client is already running.\n            return;\n        }\n        this.clientRunning = true;\n        // backwards compat for when 'opts' was 'historyLen'.\n        if (typeof opts === \"number\") {\n            opts = {\n                initialSyncLimit: opts,\n            };\n        }\n\n        // Create our own user object artificially (instead of waiting for sync)\n        // so it's always available, even if the user is not in any rooms etc.\n        const userId = this.getUserId();\n        if (userId) {\n            this.store.storeUser(new User(userId));\n        }\n\n        if (this.crypto) {\n            this.crypto.uploadDeviceKeys();\n            this.crypto.start();\n        }\n\n        // periodically poll for turn servers if we support voip\n        if (this.canSupportVoip) {\n            this.checkTurnServersIntervalID = setInterval(() => {\n                this.checkTurnServers();\n            }, TURN_CHECK_INTERVAL);\n            // noinspection ES6MissingAwait\n            this.checkTurnServers();\n        }\n\n        if (this.syncApi) {\n            // This shouldn't happen since we thought the client was not running\n            logger.error(\"Still have sync object whilst not running: stopping old one\");\n            this.syncApi.stop();\n        }\n\n        try {\n            const { serverSupport, stable } = await this.doesServerSupportThread();\n            Thread.setServerSideSupport(serverSupport, stable);\n        } catch (e) {\n            Thread.setServerSideSupport(false, true);\n        }\n\n        // shallow-copy the opts dict before modifying and storing it\n        this.clientOpts = Object.assign({}, opts) as IStoredClientOpts;\n        this.clientOpts.crypto = this.crypto;\n        this.clientOpts.canResetEntireTimeline = (roomId) => {\n            if (!this.canResetTimelineCallback) {\n                return false;\n            }\n            return this.canResetTimelineCallback(roomId);\n        };\n        this.syncApi = new SyncApi(this, this.clientOpts);\n        this.syncApi.sync();\n\n        if (this.clientOpts.clientWellKnownPollPeriod !== undefined) {\n            this.clientWellKnownIntervalID = setInterval(() => {\n                this.fetchClientWellKnown();\n            }, 1000 * this.clientOpts.clientWellKnownPollPeriod);\n            this.fetchClientWellKnown();\n        }\n    }\n\n    /**\n     * High level helper method to stop the client from polling and allow a\n     * clean shutdown.\n     */\n    public stopClient() {\n        logger.log('stopping MatrixClient');\n\n        this.clientRunning = false;\n\n        this.syncApi?.stop();\n        this.syncApi = null;\n\n        this.crypto?.stop();\n        this.peekSync?.stopPeeking();\n\n        this.callEventHandler?.stop();\n        this.callEventHandler = null;\n\n        global.clearInterval(this.checkTurnServersIntervalID);\n        if (this.clientWellKnownIntervalID !== undefined) {\n            global.clearInterval(this.clientWellKnownIntervalID);\n        }\n    }\n\n    /**\n     * Try to rehydrate a device if available.  The client must have been\n     * initialized with a `cryptoCallback.getDehydrationKey` option, and this\n     * function must be called before initCrypto and startClient are called.\n     *\n     * @return {Promise<string>} Resolves to undefined if a device could not be dehydrated, or\n     *     to the new device ID if the dehydration was successful.\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public async rehydrateDevice(): Promise<string> {\n        if (this.crypto) {\n            throw new Error(\"Cannot rehydrate device after crypto is initialized\");\n        }\n\n        if (!this.cryptoCallbacks.getDehydrationKey) {\n            return;\n        }\n\n        const getDeviceResult = await this.getDehydratedDevice();\n        if (!getDeviceResult) {\n            return;\n        }\n\n        if (!getDeviceResult.device_data || !getDeviceResult.device_id) {\n            logger.info(\"no dehydrated device found\");\n            return;\n        }\n\n        const account = new global.Olm.Account();\n        try {\n            const deviceData = getDeviceResult.device_data;\n            if (deviceData.algorithm !== DEHYDRATION_ALGORITHM) {\n                logger.warn(\"Wrong algorithm for dehydrated device\");\n                return;\n            }\n            logger.log(\"unpickling dehydrated device\");\n            const key = await this.cryptoCallbacks.getDehydrationKey(\n                deviceData,\n                (k) => {\n                    // copy the key so that it doesn't get clobbered\n                    account.unpickle(new Uint8Array(k), deviceData.account);\n                },\n            );\n            account.unpickle(key, deviceData.account);\n            logger.log(\"unpickled device\");\n\n            const rehydrateResult = await this.http.authedRequest<{ success: boolean }>(\n                undefined,\n                Method.Post,\n                \"/dehydrated_device/claim\",\n                undefined,\n                {\n                    device_id: getDeviceResult.device_id,\n                },\n                {\n                    prefix: \"/_matrix/client/unstable/org.matrix.msc2697.v2\",\n                },\n            );\n\n            if (rehydrateResult.success === true) {\n                this.deviceId = getDeviceResult.device_id;\n                logger.info(\"using dehydrated device\");\n                const pickleKey = this.pickleKey || \"DEFAULT_KEY\";\n                this.exportedOlmDeviceToImport = {\n                    pickledAccount: account.pickle(pickleKey),\n                    sessions: [],\n                    pickleKey: pickleKey,\n                };\n                account.free();\n                return this.deviceId;\n            } else {\n                account.free();\n                logger.info(\"not using dehydrated device\");\n                return;\n            }\n        } catch (e) {\n            account.free();\n            logger.warn(\"could not unpickle\", e);\n        }\n    }\n\n    /**\n     * Get the current dehydrated device, if any\n     * @return {Promise} A promise of an object containing the dehydrated device\n     */\n    public async getDehydratedDevice(): Promise<IDehydratedDevice> {\n        try {\n            return await this.http.authedRequest<IDehydratedDevice>(\n                undefined,\n                Method.Get,\n                \"/dehydrated_device\",\n                undefined, undefined,\n                {\n                    prefix: \"/_matrix/client/unstable/org.matrix.msc2697.v2\",\n                },\n            );\n        } catch (e) {\n            logger.info(\"could not get dehydrated device\", e.toString());\n            return;\n        }\n    }\n\n    /**\n     * Set the dehydration key.  This will also periodically dehydrate devices to\n     * the server.\n     *\n     * @param {Uint8Array} key the dehydration key\n     * @param {IDehydratedDeviceKeyInfo} [keyInfo] Information about the key.  Primarily for\n     *     information about how to generate the key from a passphrase.\n     * @param {string} [deviceDisplayName] The device display name for the\n     *     dehydrated device.\n     * @return {Promise} A promise that resolves when the dehydrated device is stored.\n     */\n    public async setDehydrationKey(\n        key: Uint8Array,\n        keyInfo: IDehydratedDeviceKeyInfo,\n        deviceDisplayName?: string,\n    ): Promise<void> {\n        if (!this.crypto) {\n            logger.warn('not dehydrating device if crypto is not enabled');\n            return;\n        }\n        return await this.crypto.dehydrationManager.setKeyAndQueueDehydration(key, keyInfo, deviceDisplayName);\n    }\n\n    /**\n     * Creates a new dehydrated device (without queuing periodic dehydration)\n     * @param {Uint8Array} key the dehydration key\n     * @param {IDehydratedDeviceKeyInfo} [keyInfo] Information about the key.  Primarily for\n     *     information about how to generate the key from a passphrase.\n     * @param {string} [deviceDisplayName] The device display name for the\n     *     dehydrated device.\n     * @return {Promise<String>} the device id of the newly created dehydrated device\n     */\n    public async createDehydratedDevice(\n        key: Uint8Array,\n        keyInfo: IDehydratedDeviceKeyInfo,\n        deviceDisplayName?: string,\n    ): Promise<string> {\n        if (!this.crypto) {\n            logger.warn('not dehydrating device if crypto is not enabled');\n            return;\n        }\n        await this.crypto.dehydrationManager.setKey(\n            key, keyInfo, deviceDisplayName,\n        );\n        // XXX: Private member access.\n        return await this.crypto.dehydrationManager.dehydrateDevice();\n    }\n\n    public async exportDevice(): Promise<IExportedDevice> {\n        if (!this.crypto) {\n            logger.warn('not exporting device if crypto is not enabled');\n            return;\n        }\n        return {\n            userId: this.credentials.userId,\n            deviceId: this.deviceId,\n            // XXX: Private member access.\n            olmDevice: await this.crypto.olmDevice.export(),\n        };\n    }\n\n    /**\n     * Clear any data out of the persistent stores used by the client.\n     *\n     * @returns {Promise} Promise which resolves when the stores have been cleared.\n     */\n    public clearStores(): Promise<void> {\n        if (this.clientRunning) {\n            throw new Error(\"Cannot clear stores while client is running\");\n        }\n\n        const promises = [];\n\n        promises.push(this.store.deleteAllData());\n        if (this.cryptoStore) {\n            promises.push(this.cryptoStore.deleteAllData());\n        }\n        return Promise.all(promises).then(); // .then to fix types\n    }\n\n    /**\n     * Get the user-id of the logged-in user\n     *\n     * @return {?string} MXID for the logged-in user, or null if not logged in\n     */\n    public getUserId(): string {\n        if (this.credentials && this.credentials.userId) {\n            return this.credentials.userId;\n        }\n        return null;\n    }\n\n    /**\n     * Get the domain for this client's MXID\n     * @return {?string} Domain of this MXID\n     */\n    public getDomain(): string {\n        if (this.credentials && this.credentials.userId) {\n            return this.credentials.userId.replace(/^.*?:/, '');\n        }\n        return null;\n    }\n\n    /**\n     * Get the local part of the current user ID e.g. \"foo\" in \"@foo:bar\".\n     * @return {?string} The user ID localpart or null.\n     */\n    public getUserIdLocalpart(): string {\n        if (this.credentials && this.credentials.userId) {\n            return this.credentials.userId.split(\":\")[0].substring(1);\n        }\n        return null;\n    }\n\n    /**\n     * Get the device ID of this client\n     * @return {?string} device ID\n     */\n    public getDeviceId(): string {\n        return this.deviceId;\n    }\n\n    /**\n     * Check if the runtime environment supports VoIP calling.\n     * @return {boolean} True if VoIP is supported.\n     */\n    public supportsVoip(): boolean {\n        return this.canSupportVoip;\n    }\n\n    /**\n     * @returns {MediaHandler}\n     */\n    public getMediaHandler(): MediaHandler {\n        return this.mediaHandler;\n    }\n\n    /**\n     * Set whether VoIP calls are forced to use only TURN\n     * candidates. This is the same as the forceTURN option\n     * when creating the client.\n     * @param {boolean} force True to force use of TURN servers\n     */\n    public setForceTURN(force: boolean) {\n        this.forceTURN = force;\n    }\n\n    /**\n     * Set whether to advertise transfer support to other parties on Matrix calls.\n     * @param {boolean} support True to advertise the 'm.call.transferee' capability\n     */\n    public setSupportsCallTransfer(support: boolean) {\n        this.supportsCallTransfer = support;\n    }\n\n    /**\n     * Creates a new call.\n     * The place*Call methods on the returned call can be used to actually place a call\n     *\n     * @param {string} roomId The room the call is to be placed in.\n     * @return {MatrixCall} the call or null if the browser doesn't support calling.\n     */\n    public createCall(roomId: string): MatrixCall {\n        return createNewMatrixCall(this, roomId);\n    }\n\n    /**\n     * Get the current sync state.\n     * @return {?SyncState} the sync state, which may be null.\n     * @see module:client~MatrixClient#event:\"sync\"\n     */\n    public getSyncState(): SyncState {\n        if (!this.syncApi) {\n            return null;\n        }\n        return this.syncApi.getSyncState();\n    }\n\n    /**\n     * Returns the additional data object associated with\n     * the current sync state, or null if there is no\n     * such data.\n     * Sync errors, if available, are put in the 'error' key of\n     * this object.\n     * @return {?Object}\n     */\n    public getSyncStateData(): ISyncStateData | null {\n        if (!this.syncApi) {\n            return null;\n        }\n        return this.syncApi.getSyncStateData();\n    }\n\n    /**\n     * Whether the initial sync has completed.\n     * @return {boolean} True if at least one sync has happened.\n     */\n    public isInitialSyncComplete(): boolean {\n        const state = this.getSyncState();\n        if (!state) {\n            return false;\n        }\n        return state === SyncState.Prepared || state === SyncState.Syncing;\n    }\n\n    /**\n     * Return whether the client is configured for a guest account.\n     * @return {boolean} True if this is a guest access_token (or no token is supplied).\n     */\n    public isGuest(): boolean {\n        return this.isGuestAccount;\n    }\n\n    /**\n     * Set whether this client is a guest account. <b>This method is experimental\n     * and may change without warning.</b>\n     * @param {boolean} guest True if this is a guest account.\n     */\n    public setGuest(guest: boolean) {\n        // EXPERIMENTAL:\n        // If the token is a macaroon, it should be encoded in it that it is a 'guest'\n        // access token, which means that the SDK can determine this entirely without\n        // the dev manually flipping this flag.\n        this.isGuestAccount = guest;\n    }\n\n    /**\n     * Return the provided scheduler, if any.\n     * @return {?module:scheduler~MatrixScheduler} The scheduler or null\n     */\n    public getScheduler(): MatrixScheduler {\n        return this.scheduler;\n    }\n\n    /**\n     * Retry a backed off syncing request immediately. This should only be used when\n     * the user <b>explicitly</b> attempts to retry their lost connection.\n     * @return {boolean} True if this resulted in a request being retried.\n     */\n    public retryImmediately(): boolean {\n        return this.syncApi.retryImmediately();\n    }\n\n    /**\n     * Return the global notification EventTimelineSet, if any\n     *\n     * @return {EventTimelineSet} the globl notification EventTimelineSet\n     */\n    public getNotifTimelineSet(): EventTimelineSet {\n        return this.notifTimelineSet;\n    }\n\n    /**\n     * Set the global notification EventTimelineSet\n     *\n     * @param {EventTimelineSet} set\n     */\n    public setNotifTimelineSet(set: EventTimelineSet) {\n        this.notifTimelineSet = set;\n    }\n\n    /**\n     * Gets the capabilities of the homeserver. Always returns an object of\n     * capability keys and their options, which may be empty.\n     * @param {boolean} fresh True to ignore any cached values.\n     * @return {Promise} Resolves to the capabilities of the homeserver\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public getCapabilities(fresh = false): Promise<ICapabilities> {\n        const now = new Date().getTime();\n\n        if (this.cachedCapabilities && !fresh) {\n            if (now < this.cachedCapabilities.expiration) {\n                logger.log(\"Returning cached capabilities\");\n                return Promise.resolve(this.cachedCapabilities.capabilities);\n            }\n        }\n\n        return this.http.authedRequest(\n            undefined, Method.Get, \"/capabilities\",\n        ).catch((e: Error): void => {\n            // We swallow errors because we need a default object anyhow\n            logger.error(e);\n        }).then((r: { capabilities?: ICapabilities } = {}) => {\n            const capabilities: ICapabilities = r[\"capabilities\"] || {};\n\n            // If the capabilities missed the cache, cache it for a shorter amount\n            // of time to try and refresh them later.\n            const cacheMs = Object.keys(capabilities).length\n                ? CAPABILITIES_CACHE_MS\n                : 60000 + (Math.random() * 5000);\n\n            this.cachedCapabilities = {\n                capabilities,\n                expiration: now + cacheMs,\n            };\n\n            logger.log(\"Caching capabilities: \", capabilities);\n            return capabilities;\n        });\n    }\n\n    /**\n     * Initialise support for end-to-end encryption in this client\n     *\n     * You should call this method after creating the matrixclient, but *before*\n     * calling `startClient`, if you want to support end-to-end encryption.\n     *\n     * It will return a Promise which will resolve when the crypto layer has been\n     * successfully initialised.\n     */\n    public async initCrypto(): Promise<void> {\n        if (!isCryptoAvailable()) {\n            throw new Error(\n                `End-to-end encryption not supported in this js-sdk build: did ` +\n                `you remember to load the olm library?`,\n            );\n        }\n\n        if (this.crypto) {\n            logger.warn(\"Attempt to re-initialise e2e encryption on MatrixClient\");\n            return;\n        }\n\n        if (!this.sessionStore) {\n            // this is temporary, the sessionstore is supposed to be going away\n            throw new Error(`Cannot enable encryption: no sessionStore provided`);\n        }\n        if (!this.cryptoStore) {\n            // the cryptostore is provided by sdk.createClient, so this shouldn't happen\n            throw new Error(`Cannot enable encryption: no cryptoStore provided`);\n        }\n\n        logger.log(\"Crypto: Starting up crypto store...\");\n        await this.cryptoStore.startup();\n\n        // initialise the list of encrypted rooms (whether or not crypto is enabled)\n        logger.log(\"Crypto: initialising roomlist...\");\n        await this.roomList.init();\n\n        const userId = this.getUserId();\n        if (userId === null) {\n            throw new Error(\n                `Cannot enable encryption on MatrixClient with unknown userId: ` +\n                `ensure userId is passed in createClient().`,\n            );\n        }\n        if (this.deviceId === null) {\n            throw new Error(\n                `Cannot enable encryption on MatrixClient with unknown deviceId: ` +\n                `ensure deviceId is passed in createClient().`,\n            );\n        }\n\n        const crypto = new Crypto(\n            this,\n            this.sessionStore,\n            userId, this.deviceId,\n            this.store,\n            this.cryptoStore,\n            this.roomList,\n            this.verificationMethods,\n        );\n\n        this.reEmitter.reEmit(crypto, [\n            CryptoEvent.KeyBackupFailed,\n            CryptoEvent.KeyBackupSessionsRemaining,\n            CryptoEvent.RoomKeyRequest,\n            CryptoEvent.RoomKeyRequestCancellation,\n            CryptoEvent.Warning,\n            CryptoEvent.DevicesUpdated,\n            CryptoEvent.WillUpdateDevices,\n            CryptoEvent.DeviceVerificationChanged,\n            CryptoEvent.UserTrustStatusChanged,\n            CryptoEvent.KeysChanged,\n        ]);\n\n        logger.log(\"Crypto: initialising crypto object...\");\n        await crypto.init({\n            exportedOlmDevice: this.exportedOlmDeviceToImport,\n            pickleKey: this.pickleKey,\n        });\n        delete this.exportedOlmDeviceToImport;\n\n        this.olmVersion = Crypto.getOlmVersion();\n\n        // if crypto initialisation was successful, tell it to attach its event handlers.\n        crypto.registerEventHandlers(this as Parameters<Crypto[\"registerEventHandlers\"]>[0]);\n        this.crypto = crypto;\n    }\n\n    /**\n     * Is end-to-end crypto enabled for this client.\n     * @return {boolean} True if end-to-end is enabled.\n     */\n    public isCryptoEnabled(): boolean {\n        return !!this.crypto;\n    }\n\n    /**\n     * Get the Ed25519 key for this device\n     *\n     * @return {?string} base64-encoded ed25519 key. Null if crypto is\n     *    disabled.\n     */\n    public getDeviceEd25519Key(): string {\n        if (!this.crypto) return null;\n        return this.crypto.getDeviceEd25519Key();\n    }\n\n    /**\n     * Get the Curve25519 key for this device\n     *\n     * @return {?string} base64-encoded curve25519 key. Null if crypto is\n     *    disabled.\n     */\n    public getDeviceCurve25519Key(): string {\n        if (!this.crypto) return null;\n        return this.crypto.getDeviceCurve25519Key();\n    }\n\n    /**\n     * Upload the device keys to the homeserver.\n     * @return {Promise<void>} A promise that will resolve when the keys are uploaded.\n     */\n    public async uploadKeys(): Promise<void> {\n        if (!this.crypto) {\n            throw new Error(\"End-to-end encryption disabled\");\n        }\n\n        await this.crypto.uploadDeviceKeys();\n    }\n\n    /**\n     * Download the keys for a list of users and stores the keys in the session\n     * store.\n     * @param {Array} userIds The users to fetch.\n     * @param {boolean} forceDownload Always download the keys even if cached.\n     *\n     * @return {Promise} A promise which resolves to a map userId->deviceId->{@link\n        * module:crypto~DeviceInfo|DeviceInfo}.\n     */\n    public downloadKeys(\n        userIds: string[],\n        forceDownload?: boolean,\n    ): Promise<Record<string, Record<string, IDevice>>> {\n        if (!this.crypto) {\n            return Promise.reject(new Error(\"End-to-end encryption disabled\"));\n        }\n        return this.crypto.downloadKeys(userIds, forceDownload);\n    }\n\n    /**\n     * Get the stored device keys for a user id\n     *\n     * @param {string} userId the user to list keys for.\n     *\n     * @return {module:crypto/deviceinfo[]} list of devices\n     */\n    public getStoredDevicesForUser(userId: string): DeviceInfo[] {\n        if (!this.crypto) {\n            throw new Error(\"End-to-end encryption disabled\");\n        }\n        return this.crypto.getStoredDevicesForUser(userId) || [];\n    }\n\n    /**\n     * Get the stored device key for a user id and device id\n     *\n     * @param {string} userId the user to list keys for.\n     * @param {string} deviceId unique identifier for the device\n     *\n     * @return {module:crypto/deviceinfo} device or null\n     */\n    public getStoredDevice(userId: string, deviceId: string): DeviceInfo {\n        if (!this.crypto) {\n            throw new Error(\"End-to-end encryption disabled\");\n        }\n        return this.crypto.getStoredDevice(userId, deviceId) || null;\n    }\n\n    /**\n     * Mark the given device as verified\n     *\n     * @param {string} userId owner of the device\n     * @param {string} deviceId unique identifier for the device or user's\n     * cross-signing public key ID.\n     *\n     * @param {boolean=} verified whether to mark the device as verified. defaults\n     *   to 'true'.\n     *\n     * @returns {Promise}\n     *\n     * @fires module:client~event:MatrixClient\"deviceVerificationChanged\"\n     */\n    public setDeviceVerified(userId: string, deviceId: string, verified = true): Promise<void> {\n        const prom = this.setDeviceVerification(userId, deviceId, verified, null, null);\n\n        // if one of the user's own devices is being marked as verified / unverified,\n        // check the key backup status, since whether or not we use this depends on\n        // whether it has a signature from a verified device\n        if (userId == this.credentials.userId) {\n            this.checkKeyBackup();\n        }\n        return prom;\n    }\n\n    /**\n     * Mark the given device as blocked/unblocked\n     *\n     * @param {string} userId owner of the device\n     * @param {string} deviceId unique identifier for the device or user's\n     * cross-signing public key ID.\n     *\n     * @param {boolean=} blocked whether to mark the device as blocked. defaults\n     *   to 'true'.\n     *\n     * @returns {Promise}\n     *\n     * @fires module:client~event:MatrixClient\"deviceVerificationChanged\"\n     */\n    public setDeviceBlocked(userId: string, deviceId: string, blocked = true): Promise<void> {\n        return this.setDeviceVerification(userId, deviceId, null, blocked, null);\n    }\n\n    /**\n     * Mark the given device as known/unknown\n     *\n     * @param {string} userId owner of the device\n     * @param {string} deviceId unique identifier for the device or user's\n     * cross-signing public key ID.\n     *\n     * @param {boolean=} known whether to mark the device as known. defaults\n     *   to 'true'.\n     *\n     * @returns {Promise}\n     *\n     * @fires module:client~event:MatrixClient\"deviceVerificationChanged\"\n     */\n    public setDeviceKnown(userId: string, deviceId: string, known = true): Promise<void> {\n        return this.setDeviceVerification(userId, deviceId, null, null, known);\n    }\n\n    private async setDeviceVerification(\n        userId: string,\n        deviceId: string,\n        verified: boolean,\n        blocked: boolean,\n        known: boolean,\n    ): Promise<void> {\n        if (!this.crypto) {\n            throw new Error(\"End-to-end encryption disabled\");\n        }\n        await this.crypto.setDeviceVerification(userId, deviceId, verified, blocked, known);\n    }\n\n    /**\n     * Request a key verification from another user, using a DM.\n     *\n     * @param {string} userId the user to request verification with\n     * @param {string} roomId the room to use for verification\n     *\n     * @returns {Promise<module:crypto/verification/request/VerificationRequest>} resolves to a VerificationRequest\n     *    when the request has been sent to the other party.\n     */\n    public requestVerificationDM(userId: string, roomId: string): Promise<VerificationRequest> {\n        if (!this.crypto) {\n            throw new Error(\"End-to-end encryption disabled\");\n        }\n        return this.crypto.requestVerificationDM(userId, roomId);\n    }\n\n    /**\n     * Finds a DM verification request that is already in progress for the given room id\n     *\n     * @param {string} roomId the room to use for verification\n     *\n     * @returns {module:crypto/verification/request/VerificationRequest?} the VerificationRequest that is in progress, if any\n     */\n    public findVerificationRequestDMInProgress(roomId: string): VerificationRequest {\n        if (!this.crypto) {\n            throw new Error(\"End-to-end encryption disabled\");\n        }\n        return this.crypto.findVerificationRequestDMInProgress(roomId);\n    }\n\n    /**\n     * Returns all to-device verification requests that are already in progress for the given user id\n     *\n     * @param {string} userId the ID of the user to query\n     *\n     * @returns {module:crypto/verification/request/VerificationRequest[]} the VerificationRequests that are in progress\n     */\n    public getVerificationRequestsToDeviceInProgress(userId: string): VerificationRequest[] {\n        if (!this.crypto) {\n            throw new Error(\"End-to-end encryption disabled\");\n        }\n        return this.crypto.getVerificationRequestsToDeviceInProgress(userId);\n    }\n\n    /**\n     * Request a key verification from another user.\n     *\n     * @param {string} userId the user to request verification with\n     * @param {Array} devices array of device IDs to send requests to.  Defaults to\n     *    all devices owned by the user\n     *\n     * @returns {Promise<module:crypto/verification/request/VerificationRequest>} resolves to a VerificationRequest\n     *    when the request has been sent to the other party.\n     */\n    public requestVerification(userId: string, devices?: string[]): Promise<VerificationRequest> {\n        if (!this.crypto) {\n            throw new Error(\"End-to-end encryption disabled\");\n        }\n        return this.crypto.requestVerification(userId, devices);\n    }\n\n    /**\n     * Begin a key verification.\n     *\n     * @param {string} method the verification method to use\n     * @param {string} userId the user to verify keys with\n     * @param {string} deviceId the device to verify\n     *\n     * @returns {Verification} a verification object\n     * @deprecated Use `requestVerification` instead.\n     */\n    public beginKeyVerification(method: string, userId: string, deviceId: string): Verification<any, any> {\n        if (!this.crypto) {\n            throw new Error(\"End-to-end encryption disabled\");\n        }\n        return this.crypto.beginKeyVerification(method, userId, deviceId);\n    }\n\n    public checkSecretStorageKey(key: Uint8Array, info: ISecretStorageKeyInfo): Promise<boolean> {\n        if (!this.crypto) {\n            throw new Error(\"End-to-end encryption disabled\");\n        }\n        return this.crypto.checkSecretStorageKey(key, info);\n    }\n\n    /**\n     * Set the global override for whether the client should ever send encrypted\n     * messages to unverified devices.  This provides the default for rooms which\n     * do not specify a value.\n     *\n     * @param {boolean} value whether to blacklist all unverified devices by default\n     */\n    public setGlobalBlacklistUnverifiedDevices(value: boolean) {\n        if (!this.crypto) {\n            throw new Error(\"End-to-end encryption disabled\");\n        }\n        return this.crypto.setGlobalBlacklistUnverifiedDevices(value);\n    }\n\n    /**\n     * @return {boolean} whether to blacklist all unverified devices by default\n     */\n    public getGlobalBlacklistUnverifiedDevices(): boolean {\n        if (!this.crypto) {\n            throw new Error(\"End-to-end encryption disabled\");\n        }\n        return this.crypto.getGlobalBlacklistUnverifiedDevices();\n    }\n\n    /**\n     * Set whether sendMessage in a room with unknown and unverified devices\n     * should throw an error and not send them message. This has 'Global' for\n     * symmetry with setGlobalBlacklistUnverifiedDevices but there is currently\n     * no room-level equivalent for this setting.\n     *\n     * This API is currently UNSTABLE and may change or be removed without notice.\n     *\n     * @param {boolean} value whether error on unknown devices\n     */\n    public setGlobalErrorOnUnknownDevices(value: boolean) {\n        if (!this.crypto) {\n            throw new Error(\"End-to-end encryption disabled\");\n        }\n        return this.crypto.setGlobalErrorOnUnknownDevices(value);\n    }\n\n    /**\n     * @return {boolean} whether to error on unknown devices\n     *\n     * This API is currently UNSTABLE and may change or be removed without notice.\n     */\n    public getGlobalErrorOnUnknownDevices(): boolean {\n        if (!this.crypto) {\n            throw new Error(\"End-to-end encryption disabled\");\n        }\n        return this.crypto.getGlobalErrorOnUnknownDevices();\n    }\n\n    /**\n     * Get the user's cross-signing key ID.\n     *\n     * The cross-signing API is currently UNSTABLE and may change without notice.\n     *\n     * @param {CrossSigningKey} [type=master] The type of key to get the ID of.  One of\n     *     \"master\", \"self_signing\", or \"user_signing\".  Defaults to \"master\".\n     *\n     * @returns {string} the key ID\n     */\n    public getCrossSigningId(type: CrossSigningKey | string = CrossSigningKey.Master): string {\n        if (!this.crypto) {\n            throw new Error(\"End-to-end encryption disabled\");\n        }\n        return this.crypto.getCrossSigningId(type);\n    }\n\n    /**\n     * Get the cross signing information for a given user.\n     *\n     * The cross-signing API is currently UNSTABLE and may change without notice.\n     *\n     * @param {string} userId the user ID to get the cross-signing info for.\n     *\n     * @returns {CrossSigningInfo} the cross signing information for the user.\n     */\n    public getStoredCrossSigningForUser(userId: string): CrossSigningInfo {\n        if (!this.crypto) {\n            throw new Error(\"End-to-end encryption disabled\");\n        }\n        return this.crypto.getStoredCrossSigningForUser(userId);\n    }\n\n    /**\n     * Check whether a given user is trusted.\n     *\n     * The cross-signing API is currently UNSTABLE and may change without notice.\n     *\n     * @param {string} userId The ID of the user to check.\n     *\n     * @returns {UserTrustLevel}\n     */\n    public checkUserTrust(userId: string): UserTrustLevel {\n        if (!this.crypto) {\n            throw new Error(\"End-to-end encryption disabled\");\n        }\n        return this.crypto.checkUserTrust(userId);\n    }\n\n    /**\n     * Check whether a given device is trusted.\n     *\n     * The cross-signing API is currently UNSTABLE and may change without notice.\n     *\n     * @function module:client~MatrixClient#checkDeviceTrust\n     * @param {string} userId The ID of the user whose devices is to be checked.\n     * @param {string} deviceId The ID of the device to check\n     *\n     * @returns {DeviceTrustLevel}\n     */\n    public checkDeviceTrust(userId: string, deviceId: string): DeviceTrustLevel {\n        if (!this.crypto) {\n            throw new Error(\"End-to-end encryption disabled\");\n        }\n        return this.crypto.checkDeviceTrust(userId, deviceId);\n    }\n\n    /**\n     * Check the copy of our cross-signing key that we have in the device list and\n     * see if we can get the private key. If so, mark it as trusted.\n     * @param {Object} opts ICheckOwnCrossSigningTrustOpts object\n     */\n    public checkOwnCrossSigningTrust(opts?: ICheckOwnCrossSigningTrustOpts): Promise<void> {\n        if (!this.crypto) {\n            throw new Error(\"End-to-end encryption disabled\");\n        }\n        return this.crypto.checkOwnCrossSigningTrust(opts);\n    }\n\n    /**\n     * Checks that a given cross-signing private key matches a given public key.\n     * This can be used by the getCrossSigningKey callback to verify that the\n     * private key it is about to supply is the one that was requested.\n     * @param {Uint8Array} privateKey The private key\n     * @param {string} expectedPublicKey The public key\n     * @returns {boolean} true if the key matches, otherwise false\n     */\n    public checkCrossSigningPrivateKey(privateKey: Uint8Array, expectedPublicKey: string): boolean {\n        if (!this.crypto) {\n            throw new Error(\"End-to-end encryption disabled\");\n        }\n        return this.crypto.checkCrossSigningPrivateKey(privateKey, expectedPublicKey);\n    }\n\n    // deprecated: use requestVerification instead\n    public legacyDeviceVerification(\n        userId: string,\n        deviceId: string,\n        method: VerificationMethod,\n    ): Promise<VerificationRequest> {\n        if (!this.crypto) {\n            throw new Error(\"End-to-end encryption disabled\");\n        }\n        return this.crypto.legacyDeviceVerification(userId, deviceId, method);\n    }\n\n    /**\n     * Perform any background tasks that can be done before a message is ready to\n     * send, in order to speed up sending of the message.\n     * @param {module:models/room} room the room the event is in\n     */\n    public prepareToEncrypt(room: Room) {\n        if (!this.crypto) {\n            throw new Error(\"End-to-end encryption disabled\");\n        }\n        return this.crypto.prepareToEncrypt(room);\n    }\n\n    /**\n     * Checks whether cross signing:\n     * - is enabled on this account and trusted by this device\n     * - has private keys either cached locally or stored in secret storage\n     *\n     * If this function returns false, bootstrapCrossSigning() can be used\n     * to fix things such that it returns true. That is to say, after\n     * bootstrapCrossSigning() completes successfully, this function should\n     * return true.\n     * @return {boolean} True if cross-signing is ready to be used on this device\n     */\n    public isCrossSigningReady(): Promise<boolean> {\n        if (!this.crypto) {\n            throw new Error(\"End-to-end encryption disabled\");\n        }\n        return this.crypto.isCrossSigningReady();\n    }\n\n    /**\n     * Bootstrap cross-signing by creating keys if needed. If everything is already\n     * set up, then no changes are made, so this is safe to run to ensure\n     * cross-signing is ready for use.\n     *\n     * This function:\n     * - creates new cross-signing keys if they are not found locally cached nor in\n     *   secret storage (if it has been setup)\n     *\n     * The cross-signing API is currently UNSTABLE and may change without notice.\n     *\n     * @param {function} opts.authUploadDeviceSigningKeys Function\n     * called to await an interactive auth flow when uploading device signing keys.\n     * @param {boolean} [opts.setupNewCrossSigning] Optional. Reset even if keys\n     * already exist.\n     * Args:\n     *     {function} A function that makes the request requiring auth. Receives the\n     *     auth data as an object. Can be called multiple times, first with an empty\n     *     authDict, to obtain the flows.\n     */\n    public bootstrapCrossSigning(opts: IBootstrapCrossSigningOpts) {\n        if (!this.crypto) {\n            throw new Error(\"End-to-end encryption disabled\");\n        }\n        return this.crypto.bootstrapCrossSigning(opts);\n    }\n\n    /**\n     * Whether to trust a others users signatures of their devices.\n     * If false, devices will only be considered 'verified' if we have\n     * verified that device individually (effectively disabling cross-signing).\n     *\n     * Default: true\n     *\n     * @return {boolean} True if trusting cross-signed devices\n     */\n    public getCryptoTrustCrossSignedDevices(): boolean {\n        if (!this.crypto) {\n            throw new Error(\"End-to-end encryption disabled\");\n        }\n        return this.crypto.getCryptoTrustCrossSignedDevices();\n    }\n\n    /**\n     * See getCryptoTrustCrossSignedDevices\n\n     * This may be set before initCrypto() is called to ensure no races occur.\n     *\n     * @param {boolean} val True to trust cross-signed devices\n     */\n    public setCryptoTrustCrossSignedDevices(val: boolean) {\n        if (!this.crypto) {\n            throw new Error(\"End-to-end encryption disabled\");\n        }\n        return this.crypto.setCryptoTrustCrossSignedDevices(val);\n    }\n\n    /**\n     * Counts the number of end to end session keys that are waiting to be backed up\n     * @returns {Promise<int>} Resolves to the number of sessions requiring backup\n     */\n    public countSessionsNeedingBackup(): Promise<number> {\n        if (!this.crypto) {\n            throw new Error(\"End-to-end encryption disabled\");\n        }\n        return this.crypto.countSessionsNeedingBackup();\n    }\n\n    /**\n     * Get information about the encryption of an event\n     *\n     * @param {module:models/event.MatrixEvent} event event to be checked\n     * @returns {IEncryptedEventInfo} The event information.\n     */\n    public getEventEncryptionInfo(event: MatrixEvent): IEncryptedEventInfo {\n        if (!this.crypto) {\n            throw new Error(\"End-to-end encryption disabled\");\n        }\n        return this.crypto.getEventEncryptionInfo(event);\n    }\n\n    /**\n     * Create a recovery key from a user-supplied passphrase.\n     *\n     * The Secure Secret Storage API is currently UNSTABLE and may change without notice.\n     *\n     * @param {string} password Passphrase string that can be entered by the user\n     *     when restoring the backup as an alternative to entering the recovery key.\n     *     Optional.\n     * @returns {Promise<Object>} Object with public key metadata, encoded private\n     *     recovery key which should be disposed of after displaying to the user,\n     *     and raw private key to avoid round tripping if needed.\n     */\n    public createRecoveryKeyFromPassphrase(password?: string): Promise<IRecoveryKey> {\n        if (!this.crypto) {\n            throw new Error(\"End-to-end encryption disabled\");\n        }\n        return this.crypto.createRecoveryKeyFromPassphrase(password);\n    }\n\n    /**\n     * Checks whether secret storage:\n     * - is enabled on this account\n     * - is storing cross-signing private keys\n     * - is storing session backup key (if enabled)\n     *\n     * If this function returns false, bootstrapSecretStorage() can be used\n     * to fix things such that it returns true. That is to say, after\n     * bootstrapSecretStorage() completes successfully, this function should\n     * return true.\n     *\n     * The Secure Secret Storage API is currently UNSTABLE and may change without notice.\n     *\n     * @return {boolean} True if secret storage is ready to be used on this device\n     */\n    public isSecretStorageReady(): Promise<boolean> {\n        if (!this.crypto) {\n            throw new Error(\"End-to-end encryption disabled\");\n        }\n        return this.crypto.isSecretStorageReady();\n    }\n\n    /**\n     * Bootstrap Secure Secret Storage if needed by creating a default key. If everything is\n     * already set up, then no changes are made, so this is safe to run to ensure secret\n     * storage is ready for use.\n     *\n     * This function\n     * - creates a new Secure Secret Storage key if no default key exists\n     *   - if a key backup exists, it is migrated to store the key in the Secret\n     *     Storage\n     * - creates a backup if none exists, and one is requested\n     * - migrates Secure Secret Storage to use the latest algorithm, if an outdated\n     *   algorithm is found\n     *\n     * @param opts\n     */\n    public bootstrapSecretStorage(opts: ICreateSecretStorageOpts): Promise<void> {\n        if (!this.crypto) {\n            throw new Error(\"End-to-end encryption disabled\");\n        }\n        return this.crypto.bootstrapSecretStorage(opts);\n    }\n\n    /**\n     * Add a key for encrypting secrets.\n     *\n     * The Secure Secret Storage API is currently UNSTABLE and may change without notice.\n     *\n     * @param {string} algorithm the algorithm used by the key\n     * @param {object} opts the options for the algorithm.  The properties used\n     *     depend on the algorithm given.\n     * @param {string} [keyName] the name of the key.  If not given, a random name will be generated.\n     *\n     * @return {object} An object with:\n     *     keyId: {string} the ID of the key\n     *     keyInfo: {object} details about the key (iv, mac, passphrase)\n     */\n    public addSecretStorageKey(\n        algorithm: string,\n        opts: IAddSecretStorageKeyOpts,\n        keyName?: string,\n    ): Promise<{keyId: string, keyInfo: ISecretStorageKeyInfo}> {\n        if (!this.crypto) {\n            throw new Error(\"End-to-end encryption disabled\");\n        }\n        return this.crypto.addSecretStorageKey(algorithm, opts, keyName);\n    }\n\n    /**\n     * Check whether we have a key with a given ID.\n     *\n     * The Secure Secret Storage API is currently UNSTABLE and may change without notice.\n     *\n     * @param {string} [keyId = default key's ID] The ID of the key to check\n     *     for. Defaults to the default key ID if not provided.\n     * @return {boolean} Whether we have the key.\n     */\n    public hasSecretStorageKey(keyId?: string): Promise<boolean> {\n        if (!this.crypto) {\n            throw new Error(\"End-to-end encryption disabled\");\n        }\n        return this.crypto.hasSecretStorageKey(keyId);\n    }\n\n    /**\n     * Store an encrypted secret on the server.\n     *\n     * The Secure Secret Storage API is currently UNSTABLE and may change without notice.\n     *\n     * @param {string} name The name of the secret\n     * @param {string} secret The secret contents.\n     * @param {Array} keys The IDs of the keys to use to encrypt the secret or null/undefined\n     *     to use the default (will throw if no default key is set).\n     */\n    public storeSecret(name: string, secret: string, keys?: string[]) {\n        if (!this.crypto) {\n            throw new Error(\"End-to-end encryption disabled\");\n        }\n        return this.crypto.storeSecret(name, secret, keys);\n    }\n\n    /**\n     * Get a secret from storage.\n     *\n     * The Secure Secret Storage API is currently UNSTABLE and may change without notice.\n     *\n     * @param {string} name the name of the secret\n     *\n     * @return {string} the contents of the secret\n     */\n    public getSecret(name: string): Promise<string> {\n        if (!this.crypto) {\n            throw new Error(\"End-to-end encryption disabled\");\n        }\n        return this.crypto.getSecret(name);\n    }\n\n    /**\n     * Check if a secret is stored on the server.\n     *\n     * The Secure Secret Storage API is currently UNSTABLE and may change without notice.\n     *\n     * @param {string} name the name of the secret\n     * @param {boolean} checkKey check if the secret is encrypted by a trusted\n     *     key\n     *\n     * @return {object?} map of key name to key info the secret is encrypted\n     *     with, or null if it is not present or not encrypted with a trusted\n     *     key\n     */\n    public isSecretStored(name: string, checkKey: boolean): Promise<Record<string, ISecretStorageKeyInfo> | null> {\n        if (!this.crypto) {\n            throw new Error(\"End-to-end encryption disabled\");\n        }\n        return this.crypto.isSecretStored(name, checkKey);\n    }\n\n    /**\n     * Request a secret from another device.\n     *\n     * The Secure Secret Storage API is currently UNSTABLE and may change without notice.\n     *\n     * @param {string} name the name of the secret to request\n     * @param {string[]} devices the devices to request the secret from\n     *\n     * @return {ISecretRequest} the secret request object\n     */\n    public requestSecret(name: string, devices: string[]): ISecretRequest {\n        if (!this.crypto) {\n            throw new Error(\"End-to-end encryption disabled\");\n        }\n        return this.crypto.requestSecret(name, devices);\n    }\n\n    /**\n     * Get the current default key ID for encrypting secrets.\n     *\n     * The Secure Secret Storage API is currently UNSTABLE and may change without notice.\n     *\n     * @return {string} The default key ID or null if no default key ID is set\n     */\n    public getDefaultSecretStorageKeyId(): Promise<string | null> {\n        if (!this.crypto) {\n            throw new Error(\"End-to-end encryption disabled\");\n        }\n        return this.crypto.getDefaultSecretStorageKeyId();\n    }\n\n    /**\n     * Set the current default key ID for encrypting secrets.\n     *\n     * The Secure Secret Storage API is currently UNSTABLE and may change without notice.\n     *\n     * @param {string} keyId The new default key ID\n     */\n    public setDefaultSecretStorageKeyId(keyId: string) {\n        if (!this.crypto) {\n            throw new Error(\"End-to-end encryption disabled\");\n        }\n        return this.crypto.setDefaultSecretStorageKeyId(keyId);\n    }\n\n    /**\n     * Checks that a given secret storage private key matches a given public key.\n     * This can be used by the getSecretStorageKey callback to verify that the\n     * private key it is about to supply is the one that was requested.\n     *\n     * The Secure Secret Storage API is currently UNSTABLE and may change without notice.\n     *\n     * @param {Uint8Array} privateKey The private key\n     * @param {string} expectedPublicKey The public key\n     * @returns {boolean} true if the key matches, otherwise false\n     */\n    public checkSecretStoragePrivateKey(privateKey: Uint8Array, expectedPublicKey: string): boolean {\n        if (!this.crypto) {\n            throw new Error(\"End-to-end encryption disabled\");\n        }\n        return this.crypto.checkSecretStoragePrivateKey(privateKey, expectedPublicKey);\n    }\n\n    /**\n     * Get e2e information on the device that sent an event\n     *\n     * @param {MatrixEvent} event event to be checked\n     *\n     * @return {Promise<module:crypto/deviceinfo?>}\n     */\n    public async getEventSenderDeviceInfo(event: MatrixEvent): Promise<DeviceInfo> {\n        if (!this.crypto) {\n            return null;\n        }\n        return this.crypto.getEventSenderDeviceInfo(event);\n    }\n\n    /**\n     * Check if the sender of an event is verified\n     *\n     * @param {MatrixEvent} event event to be checked\n     *\n     * @return {boolean} true if the sender of this event has been verified using\n     * {@link module:client~MatrixClient#setDeviceVerified|setDeviceVerified}.\n     */\n    public async isEventSenderVerified(event: MatrixEvent): Promise<boolean> {\n        const device = await this.getEventSenderDeviceInfo(event);\n        if (!device) {\n            return false;\n        }\n        return device.isVerified();\n    }\n\n    /**\n     * Cancel a room key request for this event if one is ongoing and resend the\n     * request.\n     * @param  {MatrixEvent} event event of which to cancel and resend the room\n     *                            key request.\n     * @return {Promise} A promise that will resolve when the key request is queued\n     */\n    public cancelAndResendEventRoomKeyRequest(event: MatrixEvent): Promise<void> {\n        return event.cancelAndResendKeyRequest(this.crypto, this.getUserId());\n    }\n\n    /**\n     * Enable end-to-end encryption for a room. This does not modify room state.\n     * Any messages sent before the returned promise resolves will be sent unencrypted.\n     * @param {string} roomId The room ID to enable encryption in.\n     * @param {object} config The encryption config for the room.\n     * @return {Promise} A promise that will resolve when encryption is set up.\n     */\n    public setRoomEncryption(roomId: string, config: IRoomEncryption): Promise<void> {\n        if (!this.crypto) {\n            throw new Error(\"End-to-End encryption disabled\");\n        }\n        return this.crypto.setRoomEncryption(roomId, config);\n    }\n\n    /**\n     * Whether encryption is enabled for a room.\n     * @param {string} roomId the room id to query.\n     * @return {boolean} whether encryption is enabled.\n     */\n    public isRoomEncrypted(roomId: string): boolean {\n        const room = this.getRoom(roomId);\n        if (!room) {\n            // we don't know about this room, so can't determine if it should be\n            // encrypted. Let's assume not.\n            return false;\n        }\n\n        // if there is an 'm.room.encryption' event in this room, it should be\n        // encrypted (independently of whether we actually support encryption)\n        const ev = room.currentState.getStateEvents(EventType.RoomEncryption, \"\");\n        if (ev) {\n            return true;\n        }\n\n        // we don't have an m.room.encrypted event, but that might be because\n        // the server is hiding it from us. Check the store to see if it was\n        // previously encrypted.\n        return this.roomList.isRoomEncrypted(roomId);\n    }\n\n    /**\n     * Forces the current outbound group session to be discarded such\n     * that another one will be created next time an event is sent.\n     *\n     * @param {string} roomId The ID of the room to discard the session for\n     *\n     * This should not normally be necessary.\n     */\n    public forceDiscardSession(roomId: string) {\n        if (!this.crypto) {\n            throw new Error(\"End-to-End encryption disabled\");\n        }\n        this.crypto.forceDiscardSession(roomId);\n    }\n\n    /**\n     * Get a list containing all of the room keys\n     *\n     * This should be encrypted before returning it to the user.\n     *\n     * @return {Promise} a promise which resolves to a list of\n     *    session export objects\n     */\n    public exportRoomKeys(): Promise<IMegolmSessionData[]> {\n        if (!this.crypto) {\n            return Promise.reject(new Error(\"End-to-end encryption disabled\"));\n        }\n        return this.crypto.exportRoomKeys();\n    }\n\n    /**\n     * Import a list of room keys previously exported by exportRoomKeys\n     *\n     * @param {Object[]} keys a list of session export objects\n     * @param {Object} opts\n     * @param {Function} opts.progressCallback called with an object that has a \"stage\" param\n     *\n     * @return {Promise} a promise which resolves when the keys\n     *    have been imported\n     */\n    public importRoomKeys(keys: IMegolmSessionData[], opts?: IImportRoomKeysOpts): Promise<void> {\n        if (!this.crypto) {\n            throw new Error(\"End-to-end encryption disabled\");\n        }\n        return this.crypto.importRoomKeys(keys, opts);\n    }\n\n    /**\n     * Force a re-check of the local key backup status against\n     * what's on the server.\n     *\n     * @returns {Object} Object with backup info (as returned by\n     *     getKeyBackupVersion) in backupInfo and\n     *     trust information (as returned by isKeyBackupTrusted)\n     *     in trustInfo.\n     */\n    public checkKeyBackup(): Promise<IKeyBackupCheck> {\n        return this.crypto.backupManager.checkKeyBackup();\n    }\n\n    /**\n     * Get information about the current key backup.\n     * @returns {Promise<IKeyBackupInfo | null>} Information object from API or null\n     */\n    public async getKeyBackupVersion(): Promise<IKeyBackupInfo | null> {\n        let res;\n        try {\n            res = await this.http.authedRequest(\n                undefined, Method.Get, \"/room_keys/version\", undefined, undefined,\n                { prefix: PREFIX_UNSTABLE },\n            );\n        } catch (e) {\n            if (e.errcode === 'M_NOT_FOUND') {\n                return null;\n            } else {\n                throw e;\n            }\n        }\n        try {\n            BackupManager.checkBackupVersion(res);\n        } catch (e) {\n            throw e;\n        }\n        return res;\n    }\n\n    /**\n     * @param {object} info key backup info dict from getKeyBackupVersion()\n     * @return {object} {\n     *     usable: [bool], // is the backup trusted, true iff there is a sig that is valid & from a trusted device\n     *     sigs: [\n     *         valid: [bool],\n     *         device: [DeviceInfo],\n     *     ]\n     * }\n     */\n    public isKeyBackupTrusted(info: IKeyBackupInfo): Promise<TrustInfo> {\n        return this.crypto.backupManager.isKeyBackupTrusted(info);\n    }\n\n    /**\n     * @returns {boolean} true if the client is configured to back up keys to\n     *     the server, otherwise false. If we haven't completed a successful check\n     *     of key backup status yet, returns null.\n     */\n    public getKeyBackupEnabled(): boolean {\n        if (!this.crypto) {\n            throw new Error(\"End-to-end encryption disabled\");\n        }\n        return this.crypto.backupManager.getKeyBackupEnabled();\n    }\n\n    /**\n     * Enable backing up of keys, using data previously returned from\n     * getKeyBackupVersion.\n     *\n     * @param {object} info Backup information object as returned by getKeyBackupVersion\n     * @returns {Promise<void>} Resolves when complete.\n     */\n    public enableKeyBackup(info: IKeyBackupInfo): Promise<void> {\n        if (!this.crypto) {\n            throw new Error(\"End-to-end encryption disabled\");\n        }\n\n        return this.crypto.backupManager.enableKeyBackup(info);\n    }\n\n    /**\n     * Disable backing up of keys.\n     */\n    public disableKeyBackup() {\n        if (!this.crypto) {\n            throw new Error(\"End-to-end encryption disabled\");\n        }\n\n        this.crypto.backupManager.disableKeyBackup();\n    }\n\n    /**\n     * Set up the data required to create a new backup version.  The backup version\n     * will not be created and enabled until createKeyBackupVersion is called.\n     *\n     * @param {string} password Passphrase string that can be entered by the user\n     *     when restoring the backup as an alternative to entering the recovery key.\n     *     Optional.\n     * @param {boolean} [opts.secureSecretStorage = false] Whether to use Secure\n     *     Secret Storage to store the key encrypting key backups.\n     *     Optional, defaults to false.\n     *\n     * @returns {Promise<object>} Object that can be passed to createKeyBackupVersion and\n     *     additionally has a 'recovery_key' member with the user-facing recovery key string.\n     */\n    // TODO: Verify types\n    public async prepareKeyBackupVersion(\n        password?: string,\n        opts: IKeyBackupPrepareOpts = { secureSecretStorage: false },\n    ): Promise<Pick<IPreparedKeyBackupVersion, \"algorithm\" | \"auth_data\" | \"recovery_key\">> {\n        if (!this.crypto) {\n            throw new Error(\"End-to-end encryption disabled\");\n        }\n\n        // eslint-disable-next-line camelcase\n        const { algorithm, auth_data, recovery_key, privateKey } =\n            await this.crypto.backupManager.prepareKeyBackupVersion(password);\n\n        if (opts.secureSecretStorage) {\n            await this.storeSecret(\"m.megolm_backup.v1\", encodeBase64(privateKey));\n            logger.info(\"Key backup private key stored in secret storage\");\n        }\n\n        return {\n            algorithm,\n            /* eslint-disable camelcase */\n            auth_data,\n            recovery_key,\n            /* eslint-enable camelcase */\n        };\n    }\n\n    /**\n     * Check whether the key backup private key is stored in secret storage.\n     * @return {Promise<object?>} map of key name to key info the secret is\n     *     encrypted with, or null if it is not present or not encrypted with a\n     *     trusted key\n     */\n    public isKeyBackupKeyStored(): Promise<Record<string, ISecretStorageKeyInfo> | null> {\n        return Promise.resolve(this.isSecretStored(\"m.megolm_backup.v1\", false /* checkKey */));\n    }\n\n    /**\n     * Create a new key backup version and enable it, using the information return\n     * from prepareKeyBackupVersion.\n     *\n     * @param {object} info Info object from prepareKeyBackupVersion\n     * @returns {Promise<object>} Object with 'version' param indicating the version created\n     */\n    public async createKeyBackupVersion(info: IKeyBackupInfo): Promise<IKeyBackupInfo> {\n        if (!this.crypto) {\n            throw new Error(\"End-to-end encryption disabled\");\n        }\n\n        await this.crypto.backupManager.createKeyBackupVersion(info);\n\n        const data = {\n            algorithm: info.algorithm,\n            auth_data: info.auth_data,\n        };\n\n        // Sign the backup auth data with the device key for backwards compat with\n        // older devices with cross-signing. This can probably go away very soon in\n        // favour of just signing with the cross-singing master key.\n        // XXX: Private member access\n        await this.crypto.signObject(data.auth_data);\n\n        if (\n            this.cryptoCallbacks.getCrossSigningKey &&\n            // XXX: Private member access\n            this.crypto.crossSigningInfo.getId()\n        ) {\n            // now also sign the auth data with the cross-signing master key\n            // we check for the callback explicitly here because we still want to be able\n            // to create an un-cross-signed key backup if there is a cross-signing key but\n            // no callback supplied.\n            // XXX: Private member access\n            await this.crypto.crossSigningInfo.signObject(data.auth_data, \"master\");\n        }\n\n        const res = await this.http.authedRequest<IKeyBackupInfo>(\n            undefined, Method.Post, \"/room_keys/version\", undefined, data,\n            { prefix: PREFIX_UNSTABLE },\n        );\n\n        // We could assume everything's okay and enable directly, but this ensures\n        // we run the same signature verification that will be used for future\n        // sessions.\n        await this.checkKeyBackup();\n        if (!this.getKeyBackupEnabled()) {\n            logger.error(\"Key backup not usable even though we just created it\");\n        }\n\n        return res;\n    }\n\n    public deleteKeyBackupVersion(version: string): Promise<void> {\n        if (!this.crypto) {\n            throw new Error(\"End-to-end encryption disabled\");\n        }\n\n        // If we're currently backing up to this backup... stop.\n        // (We start using it automatically in createKeyBackupVersion\n        // so this is symmetrical).\n        if (this.crypto.backupManager.version) {\n            this.crypto.backupManager.disableKeyBackup();\n        }\n\n        const path = utils.encodeUri(\"/room_keys/version/$version\", {\n            $version: version,\n        });\n\n        return this.http.authedRequest(\n            undefined, Method.Delete, path, undefined, undefined,\n            { prefix: PREFIX_UNSTABLE },\n        );\n    }\n\n    private makeKeyBackupPath(roomId: undefined, sessionId: undefined, version: string): IKeyBackupPath;\n    private makeKeyBackupPath(roomId: string, sessionId: undefined, version: string): IKeyBackupPath;\n    private makeKeyBackupPath(roomId: string, sessionId: string, version: string): IKeyBackupPath;\n    private makeKeyBackupPath(\n        roomId: string | undefined,\n        sessionId: string | undefined,\n        version: string,\n    ): IKeyBackupPath {\n        let path;\n        if (sessionId !== undefined) {\n            path = utils.encodeUri(\"/room_keys/keys/$roomId/$sessionId\", {\n                $roomId: roomId,\n                $sessionId: sessionId,\n            });\n        } else if (roomId !== undefined) {\n            path = utils.encodeUri(\"/room_keys/keys/$roomId\", {\n                $roomId: roomId,\n            });\n        } else {\n            path = \"/room_keys/keys\";\n        }\n        const queryData = version === undefined ? undefined : { version };\n        return { path, queryData };\n    }\n\n    /**\n     * Back up session keys to the homeserver.\n     * @param {string} roomId ID of the room that the keys are for Optional.\n     * @param {string} sessionId ID of the session that the keys are for Optional.\n     * @param {number} version backup version Optional.\n     * @param {object} data Object keys to send\n     * @return {Promise} a promise that will resolve when the keys\n     * are uploaded\n     */\n    public sendKeyBackup(roomId: undefined, sessionId: undefined, version: string, data: IKeyBackup): Promise<void>;\n    public sendKeyBackup(roomId: string, sessionId: undefined, version: string, data: IKeyBackup): Promise<void>;\n    public sendKeyBackup(roomId: string, sessionId: string, version: string, data: IKeyBackup): Promise<void>;\n    public sendKeyBackup(\n        roomId: string,\n        sessionId: string | undefined,\n        version: string | undefined,\n        data: IKeyBackup,\n    ): Promise<void> {\n        if (!this.crypto) {\n            throw new Error(\"End-to-end encryption disabled\");\n        }\n\n        const path = this.makeKeyBackupPath(roomId, sessionId, version);\n        return this.http.authedRequest(\n            undefined, Method.Put, path.path, path.queryData, data,\n            { prefix: PREFIX_UNSTABLE },\n        );\n    }\n\n    /**\n     * Marks all group sessions as needing to be backed up and schedules them to\n     * upload in the background as soon as possible.\n     */\n    public async scheduleAllGroupSessionsForBackup() {\n        if (!this.crypto) {\n            throw new Error(\"End-to-end encryption disabled\");\n        }\n\n        await this.crypto.backupManager.scheduleAllGroupSessionsForBackup();\n    }\n\n    /**\n     * Marks all group sessions as needing to be backed up without scheduling\n     * them to upload in the background.\n     * @returns {Promise<int>} Resolves to the number of sessions requiring a backup.\n     */\n    public flagAllGroupSessionsForBackup(): Promise<number> {\n        if (!this.crypto) {\n            throw new Error(\"End-to-end encryption disabled\");\n        }\n\n        return this.crypto.backupManager.flagAllGroupSessionsForBackup();\n    }\n\n    public isValidRecoveryKey(recoveryKey: string): boolean {\n        try {\n            decodeRecoveryKey(recoveryKey);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    /**\n     * Get the raw key for a key backup from the password\n     * Used when migrating key backups into SSSS\n     *\n     * The cross-signing API is currently UNSTABLE and may change without notice.\n     *\n     * @param {string} password Passphrase\n     * @param {object} backupInfo Backup metadata from `checkKeyBackup`\n     * @return {Promise<Uint8Array>} key backup key\n     */\n    public keyBackupKeyFromPassword(password: string, backupInfo: IKeyBackupInfo): Promise<Uint8Array> {\n        return keyFromAuthData(backupInfo.auth_data, password);\n    }\n\n    /**\n     * Get the raw key for a key backup from the recovery key\n     * Used when migrating key backups into SSSS\n     *\n     * The cross-signing API is currently UNSTABLE and may change without notice.\n     *\n     * @param {string} recoveryKey The recovery key\n     * @return {Uint8Array} key backup key\n     */\n    public keyBackupKeyFromRecoveryKey(recoveryKey: string): Uint8Array {\n        return decodeRecoveryKey(recoveryKey);\n    }\n\n    /**\n     * Restore from an existing key backup via a passphrase.\n     *\n     * @param {string} password Passphrase\n     * @param {string} [targetRoomId] Room ID to target a specific room.\n     * Restores all rooms if omitted.\n     * @param {string} [targetSessionId] Session ID to target a specific session.\n     * Restores all sessions if omitted.\n     * @param {object} backupInfo Backup metadata from `checkKeyBackup`\n     * @param {object} opts Optional params such as callbacks\n     * @return {Promise<object>} Status of restoration with `total` and `imported`\n     * key counts.\n     */\n    public async restoreKeyBackupWithPassword(\n        password: string,\n        targetRoomId: undefined,\n        targetSessionId: undefined,\n        backupInfo: IKeyBackupInfo,\n        opts: IKeyBackupRestoreOpts,\n    ): Promise<IKeyBackupRestoreResult>;\n    public async restoreKeyBackupWithPassword(\n        password: string,\n        targetRoomId: string,\n        targetSessionId: undefined,\n        backupInfo: IKeyBackupInfo,\n        opts: IKeyBackupRestoreOpts,\n    ): Promise<IKeyBackupRestoreResult>;\n    public async restoreKeyBackupWithPassword(\n        password: string,\n        targetRoomId: string,\n        targetSessionId: string,\n        backupInfo: IKeyBackupInfo,\n        opts: IKeyBackupRestoreOpts,\n    ): Promise<IKeyBackupRestoreResult>;\n    public async restoreKeyBackupWithPassword(\n        password: string,\n        targetRoomId: string | undefined,\n        targetSessionId: string | undefined,\n        backupInfo: IKeyBackupInfo,\n        opts: IKeyBackupRestoreOpts,\n    ): Promise<IKeyBackupRestoreResult> {\n        const privKey = await keyFromAuthData(backupInfo.auth_data, password);\n        return this.restoreKeyBackup(\n            privKey, targetRoomId, targetSessionId, backupInfo, opts,\n        );\n    }\n\n    /**\n     * Restore from an existing key backup via a private key stored in secret\n     * storage.\n     *\n     * @param {object} backupInfo Backup metadata from `checkKeyBackup`\n     * @param {string} [targetRoomId] Room ID to target a specific room.\n     * Restores all rooms if omitted.\n     * @param {string} [targetSessionId] Session ID to target a specific session.\n     * Restores all sessions if omitted.\n     * @param {object} opts Optional params such as callbacks\n     * @return {Promise<object>} Status of restoration with `total` and `imported`\n     * key counts.\n     */\n    public async restoreKeyBackupWithSecretStorage(\n        backupInfo: IKeyBackupInfo,\n        targetRoomId?: string,\n        targetSessionId?: string,\n        opts?: IKeyBackupRestoreOpts,\n    ): Promise<IKeyBackupRestoreResult> {\n        const storedKey = await this.getSecret(\"m.megolm_backup.v1\");\n\n        // ensure that the key is in the right format.  If not, fix the key and\n        // store the fixed version\n        const fixedKey = fixBackupKey(storedKey);\n        if (fixedKey) {\n            const [keyId] = await this.crypto.getSecretStorageKey();\n            await this.storeSecret(\"m.megolm_backup.v1\", fixedKey, [keyId]);\n        }\n\n        const privKey = decodeBase64(fixedKey || storedKey);\n        return this.restoreKeyBackup(\n            privKey, targetRoomId, targetSessionId, backupInfo, opts,\n        );\n    }\n\n    /**\n     * Restore from an existing key backup via an encoded recovery key.\n     *\n     * @param {string} recoveryKey Encoded recovery key\n     * @param {string} [targetRoomId] Room ID to target a specific room.\n     * Restores all rooms if omitted.\n     * @param {string} [targetSessionId] Session ID to target a specific session.\n     * Restores all sessions if omitted.\n     * @param {object} backupInfo Backup metadata from `checkKeyBackup`\n     * @param {object} opts Optional params such as callbacks\n\n     * @return {Promise<object>} Status of restoration with `total` and `imported`\n     * key counts.\n     */\n    public restoreKeyBackupWithRecoveryKey(\n        recoveryKey: string,\n        targetRoomId: undefined,\n        targetSessionId: undefined,\n        backupInfo: IKeyBackupInfo,\n        opts: IKeyBackupRestoreOpts,\n    ): Promise<IKeyBackupRestoreResult>;\n    public restoreKeyBackupWithRecoveryKey(\n        recoveryKey: string,\n        targetRoomId: string,\n        targetSessionId: undefined,\n        backupInfo: IKeyBackupInfo,\n        opts: IKeyBackupRestoreOpts,\n    ): Promise<IKeyBackupRestoreResult>;\n    public restoreKeyBackupWithRecoveryKey(\n        recoveryKey: string,\n        targetRoomId: string,\n        targetSessionId: string,\n        backupInfo: IKeyBackupInfo,\n        opts: IKeyBackupRestoreOpts,\n    ): Promise<IKeyBackupRestoreResult>;\n    public restoreKeyBackupWithRecoveryKey(\n        recoveryKey: string,\n        targetRoomId: string | undefined,\n        targetSessionId: string | undefined,\n        backupInfo: IKeyBackupInfo,\n        opts: IKeyBackupRestoreOpts,\n    ): Promise<IKeyBackupRestoreResult> {\n        const privKey = decodeRecoveryKey(recoveryKey);\n        return this.restoreKeyBackup(privKey, targetRoomId, targetSessionId, backupInfo, opts);\n    }\n\n    public async restoreKeyBackupWithCache(\n        targetRoomId: undefined,\n        targetSessionId: undefined,\n        backupInfo: IKeyBackupInfo,\n        opts?: IKeyBackupRestoreOpts,\n    ): Promise<IKeyBackupRestoreResult>;\n    public async restoreKeyBackupWithCache(\n        targetRoomId: string,\n        targetSessionId: undefined,\n        backupInfo: IKeyBackupInfo,\n        opts?: IKeyBackupRestoreOpts,\n    ): Promise<IKeyBackupRestoreResult>;\n    public async restoreKeyBackupWithCache(\n        targetRoomId: string,\n        targetSessionId: string,\n        backupInfo: IKeyBackupInfo,\n        opts?: IKeyBackupRestoreOpts,\n    ): Promise<IKeyBackupRestoreResult>;\n    public async restoreKeyBackupWithCache(\n        targetRoomId: string | undefined,\n        targetSessionId: string | undefined,\n        backupInfo: IKeyBackupInfo,\n        opts?: IKeyBackupRestoreOpts,\n    ): Promise<IKeyBackupRestoreResult> {\n        const privKey = await this.crypto.getSessionBackupPrivateKey();\n        if (!privKey) {\n            throw new Error(\"Couldn't get key\");\n        }\n        return this.restoreKeyBackup(privKey, targetRoomId, targetSessionId, backupInfo, opts);\n    }\n\n    private async restoreKeyBackup(\n        privKey: ArrayLike<number>,\n        targetRoomId: undefined,\n        targetSessionId: undefined,\n        backupInfo: IKeyBackupInfo,\n        opts?: IKeyBackupRestoreOpts,\n    ): Promise<IKeyBackupRestoreResult>;\n    private async restoreKeyBackup(\n        privKey: ArrayLike<number>,\n        targetRoomId: string,\n        targetSessionId: undefined,\n        backupInfo: IKeyBackupInfo,\n        opts?: IKeyBackupRestoreOpts,\n    ): Promise<IKeyBackupRestoreResult>;\n    private async restoreKeyBackup(\n        privKey: ArrayLike<number>,\n        targetRoomId: string,\n        targetSessionId: string,\n        backupInfo: IKeyBackupInfo,\n        opts?: IKeyBackupRestoreOpts,\n    ): Promise<IKeyBackupRestoreResult>;\n    private async restoreKeyBackup(\n        privKey: ArrayLike<number>,\n        targetRoomId: string | undefined,\n        targetSessionId: string | undefined,\n        backupInfo: IKeyBackupInfo,\n        opts?: IKeyBackupRestoreOpts,\n    ): Promise<IKeyBackupRestoreResult> {\n        const cacheCompleteCallback = opts?.cacheCompleteCallback;\n        const progressCallback = opts?.progressCallback;\n\n        if (!this.crypto) {\n            throw new Error(\"End-to-end encryption disabled\");\n        }\n\n        let totalKeyCount = 0;\n        let keys: IMegolmSessionData[] = [];\n\n        const path = this.makeKeyBackupPath(targetRoomId, targetSessionId, backupInfo.version);\n\n        const algorithm = await BackupManager.makeAlgorithm(backupInfo, async () => { return privKey; });\n\n        const untrusted = algorithm.untrusted;\n\n        try {\n            // If the pubkey computed from the private data we've been given\n            // doesn't match the one in the auth_data, the user has entered\n            // a different recovery key / the wrong passphrase.\n            if (!await algorithm.keyMatches(privKey)) {\n                return Promise.reject(new MatrixError({ errcode: MatrixClient.RESTORE_BACKUP_ERROR_BAD_KEY }));\n            }\n\n            // Cache the key, if possible.\n            // This is async.\n            this.crypto.storeSessionBackupPrivateKey(privKey)\n                .catch((e) => {\n                    logger.warn(\"Error caching session backup key:\", e);\n                }).then(cacheCompleteCallback);\n\n            if (progressCallback) {\n                progressCallback({\n                    stage: \"fetch\",\n                });\n            }\n\n            const res = await this.http.authedRequest(\n                undefined, Method.Get, path.path, path.queryData, undefined,\n                { prefix: PREFIX_UNSTABLE },\n            ) as IRoomsKeysResponse | IRoomKeysResponse | IKeyBackupSession;\n\n            if ((res as IRoomsKeysResponse).rooms) {\n                const rooms = (res as IRoomsKeysResponse).rooms;\n                for (const [roomId, roomData] of Object.entries(rooms)) {\n                    if (!roomData.sessions) continue;\n\n                    totalKeyCount += Object.keys(roomData.sessions).length;\n                    const roomKeys = await algorithm.decryptSessions(roomData.sessions);\n                    for (const k of roomKeys) {\n                        k.room_id = roomId;\n                        keys.push(k);\n                    }\n                }\n            } else if ((res as IRoomKeysResponse).sessions) {\n                const sessions = (res as IRoomKeysResponse).sessions;\n                totalKeyCount = Object.keys(sessions).length;\n                keys = await algorithm.decryptSessions(sessions);\n                for (const k of keys) {\n                    k.room_id = targetRoomId;\n                }\n            } else {\n                totalKeyCount = 1;\n                try {\n                    const [key] = await algorithm.decryptSessions({\n                        [targetSessionId]: res as IKeyBackupSession,\n                    });\n                    key.room_id = targetRoomId;\n                    key.session_id = targetSessionId;\n                    keys.push(key);\n                } catch (e) {\n                    logger.log(\"Failed to decrypt megolm session from backup\", e);\n                }\n            }\n        } finally {\n            algorithm.free();\n        }\n\n        await this.importRoomKeys(keys, {\n            progressCallback,\n            untrusted,\n            source: \"backup\",\n        });\n\n        await this.checkKeyBackup();\n\n        return { total: totalKeyCount, imported: keys.length };\n    }\n\n    public deleteKeysFromBackup(roomId: undefined, sessionId: undefined, version: string): Promise<void>;\n    public deleteKeysFromBackup(roomId: string, sessionId: undefined, version: string): Promise<void>;\n    public deleteKeysFromBackup(roomId: string, sessionId: string, version: string): Promise<void>;\n    public deleteKeysFromBackup(\n        roomId: string | undefined,\n        sessionId: string | undefined,\n        version: string,\n    ): Promise<void> {\n        if (!this.crypto) {\n            throw new Error(\"End-to-end encryption disabled\");\n        }\n\n        const path = this.makeKeyBackupPath(roomId, sessionId, version);\n        return this.http.authedRequest(\n            undefined, Method.Delete, path.path, path.queryData, undefined,\n            { prefix: PREFIX_UNSTABLE },\n        );\n    }\n\n    /**\n     * Share shared-history decryption keys with the given users.\n     *\n     * @param {string} roomId the room for which keys should be shared.\n     * @param {array} userIds a list of users to share with.  The keys will be sent to\n     *     all of the user's current devices.\n     */\n    public async sendSharedHistoryKeys(roomId: string, userIds: string[]) {\n        if (!this.crypto) {\n            throw new Error(\"End-to-end encryption disabled\");\n        }\n\n        const roomEncryption = this.roomList.getRoomEncryption(roomId);\n        if (!roomEncryption) {\n            // unknown room, or unencrypted room\n            logger.error(\"Unknown room.  Not sharing decryption keys\");\n            return;\n        }\n\n        const deviceInfos = await this.crypto.downloadKeys(userIds);\n        const devicesByUser = {};\n        for (const [userId, devices] of Object.entries(deviceInfos)) {\n            devicesByUser[userId] = Object.values(devices);\n        }\n\n        // XXX: Private member access\n        const alg = this.crypto.getRoomDecryptor(roomId, roomEncryption.algorithm);\n        if (alg.sendSharedHistoryInboundSessions) {\n            await alg.sendSharedHistoryInboundSessions(devicesByUser);\n        } else {\n            logger.warn(\"Algorithm does not support sharing previous keys\", roomEncryption.algorithm);\n        }\n    }\n\n    /**\n     * Get the config for the media repository.\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves with an object containing the config.\n     */\n    public getMediaConfig(callback?: Callback): Promise<IMediaConfig> {\n        return this.http.authedRequest(\n            callback, Method.Get, \"/config\", undefined, undefined, {\n                prefix: PREFIX_MEDIA_R0,\n            },\n        );\n    }\n\n    /**\n     * Get the room for the given room ID.\n     * This function will return a valid room for any room for which a Room event\n     * has been emitted. Note in particular that other events, eg. RoomState.members\n     * will be emitted for a room before this function will return the given room.\n     * @param {string} roomId The room ID\n     * @return {Room|null} The Room or null if it doesn't exist or there is no data store.\n     */\n    public getRoom(roomId: string): Room | null {\n        return this.store.getRoom(roomId);\n    }\n\n    /**\n     * Retrieve all known rooms.\n     * @return {Room[]} A list of rooms, or an empty list if there is no data store.\n     */\n    public getRooms(): Room[] {\n        return this.store.getRooms();\n    }\n\n    /**\n     * Retrieve all rooms that should be displayed to the user\n     * This is essentially getRooms() with some rooms filtered out, eg. old versions\n     * of rooms that have been replaced or (in future) other rooms that have been\n     * marked at the protocol level as not to be displayed to the user.\n     * @return {Room[]} A list of rooms, or an empty list if there is no data store.\n     */\n    public getVisibleRooms(): Room[] {\n        const allRooms = this.store.getRooms();\n\n        const replacedRooms = new Set();\n        for (const r of allRooms) {\n            const createEvent = r.currentState.getStateEvents(EventType.RoomCreate, '');\n            // invites are included in this list and we don't know their create events yet\n            if (createEvent) {\n                const predecessor = createEvent.getContent()['predecessor'];\n                if (predecessor && predecessor['room_id']) {\n                    replacedRooms.add(predecessor['room_id']);\n                }\n            }\n        }\n\n        return allRooms.filter((r) => {\n            const tombstone = r.currentState.getStateEvents(EventType.RoomTombstone, '');\n            if (tombstone && replacedRooms.has(r.roomId)) {\n                return false;\n            }\n            return true;\n        });\n    }\n\n    /**\n     * Retrieve a user.\n     * @param {string} userId The user ID to retrieve.\n     * @return {?User} A user or null if there is no data store or the user does\n     * not exist.\n     */\n    public getUser(userId: string): User {\n        return this.store.getUser(userId);\n    }\n\n    /**\n     * Retrieve all known users.\n     * @return {User[]} A list of users, or an empty list if there is no data store.\n     */\n    public getUsers(): User[] {\n        return this.store.getUsers();\n    }\n\n    /**\n     * Set account data event for the current user.\n     * It will retry the request up to 5 times.\n     * @param {string} eventType The event type\n     * @param {Object} content the contents object for the event\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: an empty object\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public setAccountData(eventType: EventType | string, content: IContent, callback?: Callback): Promise<{}> {\n        const path = utils.encodeUri(\"/user/$userId/account_data/$type\", {\n            $userId: this.credentials.userId,\n            $type: eventType,\n        });\n        const promise = retryNetworkOperation(5, () => {\n            return this.http.authedRequest(undefined, Method.Put, path, undefined, content);\n        });\n        if (callback) {\n            promise.then(result => callback(null, result), callback);\n        }\n        return promise;\n    }\n\n    /**\n     * Get account data event of given type for the current user.\n     * @param {string} eventType The event type\n     * @return {?object} The contents of the given account data event\n     */\n    public getAccountData(eventType: string): MatrixEvent {\n        return this.store.getAccountData(eventType);\n    }\n\n    /**\n     * Get account data event of given type for the current user. This variant\n     * gets account data directly from the homeserver if the local store is not\n     * ready, which can be useful very early in startup before the initial sync.\n     * @param {string} eventType The event type\n     * @return {Promise} Resolves: The contents of the given account\n     * data event.\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public async getAccountDataFromServer<T extends {[k: string]: any}>(eventType: string): Promise<T> {\n        if (this.isInitialSyncComplete()) {\n            const event = this.store.getAccountData(eventType);\n            if (!event) {\n                return null;\n            }\n            // The network version below returns just the content, so this branch\n            // does the same to match.\n            return event.getContent();\n        }\n        const path = utils.encodeUri(\"/user/$userId/account_data/$type\", {\n            $userId: this.credentials.userId,\n            $type: eventType,\n        });\n        try {\n            return await this.http.authedRequest(\n                undefined, Method.Get, path, undefined,\n            );\n        } catch (e) {\n            if (e.data && e.data.errcode === 'M_NOT_FOUND') {\n                return null;\n            }\n            throw e;\n        }\n    }\n\n    /**\n     * Gets the users that are ignored by this client\n     * @returns {string[]} The array of users that are ignored (empty if none)\n     */\n    public getIgnoredUsers(): string[] {\n        const event = this.getAccountData(\"m.ignored_user_list\");\n        if (!event || !event.getContent() || !event.getContent()[\"ignored_users\"]) return [];\n        return Object.keys(event.getContent()[\"ignored_users\"]);\n    }\n\n    /**\n     * Sets the users that the current user should ignore.\n     * @param {string[]} userIds the user IDs to ignore\n     * @param {module:client.callback} [callback] Optional.\n     * @return {Promise} Resolves: an empty object\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public setIgnoredUsers(userIds: string[], callback?: Callback): Promise<{}> {\n        const content = { ignored_users: {} };\n        userIds.map((u) => content.ignored_users[u] = {});\n        return this.setAccountData(\"m.ignored_user_list\", content, callback);\n    }\n\n    /**\n     * Gets whether or not a specific user is being ignored by this client.\n     * @param {string} userId the user ID to check\n     * @returns {boolean} true if the user is ignored, false otherwise\n     */\n    public isUserIgnored(userId: string): boolean {\n        return this.getIgnoredUsers().includes(userId);\n    }\n\n    /**\n     * Join a room. If you have already joined the room, this will no-op.\n     * @param {string} roomIdOrAlias The room ID or room alias to join.\n     * @param {Object} opts Options when joining the room.\n     * @param {boolean} opts.syncRoom True to do a room initial sync on the resulting\n     * room. If false, the <strong>returned Room object will have no current state.\n     * </strong> Default: true.\n     * @param {boolean} opts.inviteSignUrl If the caller has a keypair 3pid invite, the signing URL is passed in this parameter.\n     * @param {string[]} opts.viaServers The server names to try and join through in addition to those that are automatically chosen.\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: Room object.\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public async joinRoom(roomIdOrAlias: string, opts?: IJoinRoomOpts, callback?: Callback): Promise<Room> {\n        // to help people when upgrading..\n        if (utils.isFunction(opts)) {\n            throw new Error(\"Expected 'opts' object, got function.\");\n        }\n        opts = opts || {};\n        if (opts.syncRoom === undefined) {\n            opts.syncRoom = true;\n        }\n\n        const room = this.getRoom(roomIdOrAlias);\n        if (room && room.hasMembershipState(this.credentials.userId, \"join\")) {\n            return Promise.resolve(room);\n        }\n\n        let signPromise: Promise<IThirdPartySigned | void> = Promise.resolve();\n\n        if (opts.inviteSignUrl) {\n            signPromise = this.http.requestOtherUrl(\n                undefined, Method.Post,\n                opts.inviteSignUrl, { mxid: this.credentials.userId },\n            );\n        }\n\n        const queryString: Record<string, string | string[]> = {};\n        if (opts.viaServers) {\n            queryString[\"server_name\"] = opts.viaServers;\n        }\n\n        const reqOpts = { qsStringifyOptions: { arrayFormat: 'repeat' } };\n\n        try {\n            const data: IJoinRequestBody = {};\n            const signedInviteObj = await signPromise;\n            if (signedInviteObj) {\n                data.third_party_signed = signedInviteObj;\n            }\n\n            const path = utils.encodeUri(\"/join/$roomid\", { $roomid: roomIdOrAlias });\n            const res = await this.http.authedRequest(undefined, Method.Post, path, queryString, data, reqOpts);\n\n            const roomId = res['room_id'];\n            const syncApi = new SyncApi(this, this.clientOpts);\n            const room = syncApi.createRoom(roomId);\n            if (opts.syncRoom) {\n                // v2 will do this for us\n                // return syncApi.syncRoom(room);\n            }\n            callback?.(null, room);\n            return room;\n        } catch (e) {\n            callback?.(e);\n            throw e; // rethrow for reject\n        }\n    }\n\n    /**\n     * Resend an event.\n     * @param {MatrixEvent} event The event to resend.\n     * @param {Room} room Optional. The room the event is in. Will update the\n     * timeline entry if provided.\n     * @return {Promise} Resolves: to an ISendEventResponse object\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public resendEvent(event: MatrixEvent, room: Room): Promise<ISendEventResponse> {\n        this.updatePendingEventStatus(room, event, EventStatus.SENDING);\n        return this.encryptAndSendEvent(room, event);\n    }\n\n    /**\n     * Cancel a queued or unsent event.\n     *\n     * @param {MatrixEvent} event   Event to cancel\n     * @throws Error if the event is not in QUEUED, NOT_SENT or ENCRYPTING state\n     */\n    public cancelPendingEvent(event: MatrixEvent) {\n        if (![EventStatus.QUEUED, EventStatus.NOT_SENT, EventStatus.ENCRYPTING].includes(event.status)) {\n            throw new Error(\"cannot cancel an event with status \" + event.status);\n        }\n\n        // if the event is currently being encrypted then\n        if (event.status === EventStatus.ENCRYPTING) {\n            this.pendingEventEncryption.delete(event.getId());\n        } else if (this.scheduler && event.status === EventStatus.QUEUED) {\n            // tell the scheduler to forget about it, if it's queued\n            this.scheduler.removeEventFromQueue(event);\n        }\n\n        // then tell the room about the change of state, which will remove it\n        // from the room's list of pending events.\n        const room = this.getRoom(event.getRoomId());\n        this.updatePendingEventStatus(room, event, EventStatus.CANCELLED);\n    }\n\n    /**\n     * @param {string} roomId\n     * @param {string} name\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: TODO\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public setRoomName(roomId: string, name: string, callback?: Callback): Promise<ISendEventResponse> {\n        return this.sendStateEvent(roomId, EventType.RoomName, { name: name }, undefined, callback);\n    }\n\n    /**\n     * @param {string} roomId\n     * @param {string} topic\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: TODO\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public setRoomTopic(roomId: string, topic: string, callback?: Callback): Promise<ISendEventResponse> {\n        return this.sendStateEvent(roomId, EventType.RoomTopic, { topic: topic }, undefined, callback);\n    }\n\n    /**\n     * @param {string} roomId\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: TODO\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public getRoomTags(roomId: string, callback?: Callback): Promise<unknown> { // TODO: Types\n        const path = utils.encodeUri(\"/user/$userId/rooms/$roomId/tags/\", {\n            $userId: this.credentials.userId,\n            $roomId: roomId,\n        });\n        return this.http.authedRequest(\n            callback, Method.Get, path, undefined,\n        );\n    }\n\n    /**\n     * @param {string} roomId\n     * @param {string} tagName name of room tag to be set\n     * @param {object} metadata associated with that tag to be stored\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: to an empty object\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public setRoomTag(roomId: string, tagName: string, metadata: ITagMetadata, callback?: Callback): Promise<{}> {\n        const path = utils.encodeUri(\"/user/$userId/rooms/$roomId/tags/$tag\", {\n            $userId: this.credentials.userId,\n            $roomId: roomId,\n            $tag: tagName,\n        });\n        return this.http.authedRequest(callback, Method.Put, path, undefined, metadata);\n    }\n\n    /**\n     * @param {string} roomId\n     * @param {string} tagName name of room tag to be removed\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: TODO\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public deleteRoomTag(roomId: string, tagName: string, callback?: Callback): Promise<void> {\n        const path = utils.encodeUri(\"/user/$userId/rooms/$roomId/tags/$tag\", {\n            $userId: this.credentials.userId,\n            $roomId: roomId,\n            $tag: tagName,\n        });\n        return this.http.authedRequest(callback, Method.Delete, path, undefined, undefined);\n    }\n\n    /**\n     * @param {string} roomId\n     * @param {string} eventType event type to be set\n     * @param {object} content event content\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: to an empty object {}\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public setRoomAccountData(\n        roomId: string,\n        eventType: string,\n        content: Record<string, any>,\n        callback?: Callback,\n    ): Promise<{}> {\n        const path = utils.encodeUri(\"/user/$userId/rooms/$roomId/account_data/$type\", {\n            $userId: this.credentials.userId,\n            $roomId: roomId,\n            $type: eventType,\n        });\n        return this.http.authedRequest(callback, Method.Put, path, undefined, content);\n    }\n\n    /**\n     * Set a user's power level.\n     * @param {string} roomId\n     * @param {string} userId\n     * @param {Number} powerLevel\n     * @param {MatrixEvent} event\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: to an ISendEventResponse object\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public setPowerLevel(\n        roomId: string,\n        userId: string,\n        powerLevel: number,\n        event: MatrixEvent,\n        callback?: Callback,\n    ): Promise<ISendEventResponse> {\n        let content = {\n            users: {},\n        };\n        if (event?.getType() === EventType.RoomPowerLevels) {\n            // take a copy of the content to ensure we don't corrupt\n            // existing client state with a failed power level change\n            content = utils.deepCopy(event.getContent()) as typeof content;\n        }\n        content.users[userId] = powerLevel;\n        const path = utils.encodeUri(\"/rooms/$roomId/state/m.room.power_levels\", {\n            $roomId: roomId,\n        });\n        return this.http.authedRequest(callback, Method.Put, path, undefined, content);\n    }\n\n    /**\n     * Create an m.beacon_info event\n     * @param {string} roomId\n     * @param {MBeaconInfoEventContent} beaconInfoContent\n     * @returns {ISendEventResponse}\n     */\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    public async unstable_createLiveBeacon(\n        roomId: Room[\"roomId\"],\n        beaconInfoContent: MBeaconInfoEventContent,\n    ) {\n        return this.unstable_setLiveBeacon(roomId, beaconInfoContent);\n    }\n\n    /**\n     * Upsert a live beacon event\n     * using a specific m.beacon_info.* event variable type\n     * @param {string} roomId string\n     * @param {MBeaconInfoEventContent} beaconInfoContent\n     * @returns {ISendEventResponse}\n     */\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    public async unstable_setLiveBeacon(\n        roomId: string,\n        beaconInfoContent: MBeaconInfoEventContent,\n    ) {\n        const userId = this.getUserId();\n        return this.sendStateEvent(roomId, M_BEACON_INFO.name, beaconInfoContent, userId);\n    }\n\n    /**\n     * @param {string} roomId\n     * @param {string} threadId\n     * @param {string} eventType\n     * @param {Object} content\n     * @param {string} txnId Optional.\n     * @param {module:client.callback} callback Optional. Deprecated\n     * @return {Promise} Resolves: to an empty object {}\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public sendEvent(\n        roomId: string,\n        eventType: string,\n        content: IContent,\n        txnId?: string,\n        callback?: Callback,\n    ): Promise<ISendEventResponse>;\n    public sendEvent(\n        roomId: string,\n        threadId: string | null,\n        eventType: string,\n        content: IContent,\n        txnId?: string,\n        callback?: Callback,\n    ): Promise<ISendEventResponse>;\n    public sendEvent(\n        roomId: string,\n        threadId: string | null,\n        eventType: string | IContent,\n        content: IContent | string,\n        txnId?: string | Callback,\n        callback?: Callback,\n    ): Promise<ISendEventResponse> {\n        if (!threadId?.startsWith(EVENT_ID_PREFIX) && threadId !== null) {\n            callback = txnId as Callback;\n            txnId = content as string;\n            content = eventType as IContent;\n            eventType = threadId;\n            threadId = null;\n        }\n\n        // If we expect that an event is part of a thread but is missing the relation\n        // we need to add it manually, as well as the reply fallback\n        if (threadId && !content[\"m.relates_to\"]?.rel_type) {\n            content[\"m.relates_to\"] = {\n                ...content[\"m.relates_to\"],\n                \"rel_type\": THREAD_RELATION_TYPE.name,\n                \"event_id\": threadId,\n            };\n            const thread = this.getRoom(roomId)?.threads.get(threadId);\n            if (thread) {\n                content[\"m.relates_to\"][\"m.in_reply_to\"] = {\n                    \"event_id\": thread.lastReply((ev: MatrixEvent) => {\n                        return ev.isRelation(THREAD_RELATION_TYPE.name) && !ev.status;\n                    })?.getId(),\n                };\n            }\n        }\n\n        return this.sendCompleteEvent(roomId, threadId, { type: eventType, content }, txnId as string, callback);\n    }\n\n    /**\n     * @param {string} roomId\n     * @param {string} threadId\n     * @param {object} eventObject An object with the partial structure of an event, to which event_id, user_id, room_id and origin_server_ts will be added.\n     * @param {string} txnId Optional.\n     * @param {module:client.callback} callback Optional. Deprecated\n     * @return {Promise} Resolves: to an empty object {}\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    private sendCompleteEvent(\n        roomId: string,\n        threadId: string | null,\n        eventObject: any,\n        txnId?: string,\n        callback?: Callback,\n    ): Promise<ISendEventResponse> {\n        if (utils.isFunction(txnId)) {\n            callback = txnId as any as Callback; // convert for legacy\n            txnId = undefined;\n        }\n\n        if (!txnId) {\n            txnId = this.makeTxnId();\n        }\n\n        // We always construct a MatrixEvent when sending because the store and scheduler use them.\n        // We'll extract the params back out if it turns out the client has no scheduler or store.\n        const localEvent = new MatrixEvent(Object.assign(eventObject, {\n            event_id: \"~\" + roomId + \":\" + txnId,\n            user_id: this.credentials.userId,\n            sender: this.credentials.userId,\n            room_id: roomId,\n            origin_server_ts: new Date().getTime(),\n        }));\n\n        const room = this.getRoom(roomId);\n        const thread = room?.threads.get(threadId);\n        if (thread) {\n            localEvent.setThread(thread);\n        }\n\n        // set up re-emitter for this new event - this is normally the job of EventMapper but we don't use it here\n        this.reEmitter.reEmit(localEvent, [\n            MatrixEventEvent.Replaced,\n            MatrixEventEvent.VisibilityChange,\n        ]);\n        room?.reEmitter.reEmit(localEvent, [\n            MatrixEventEvent.BeforeRedaction,\n        ]);\n\n        // if this is a relation or redaction of an event\n        // that hasn't been sent yet (e.g. with a local id starting with a ~)\n        // then listen for the remote echo of that event so that by the time\n        // this event does get sent, we have the correct event_id\n        const targetId = localEvent.getAssociatedId();\n        if (targetId?.startsWith(\"~\")) {\n            const target = room.getPendingEvents().find(e => e.getId() === targetId);\n            target.once(MatrixEventEvent.LocalEventIdReplaced, () => {\n                localEvent.updateAssociatedId(target.getId());\n            });\n        }\n\n        const type = localEvent.getType();\n        logger.log(`sendEvent of type ${type} in ${roomId} with txnId ${txnId}`);\n\n        localEvent.setTxnId(txnId);\n        localEvent.setStatus(EventStatus.SENDING);\n\n        // add this event immediately to the local store as 'sending'.\n        room?.addPendingEvent(localEvent, txnId);\n\n        // addPendingEvent can change the state to NOT_SENT if it believes\n        // that there's other events that have failed. We won't bother to\n        // try sending the event if the state has changed as such.\n        if (localEvent.status === EventStatus.NOT_SENT) {\n            return Promise.reject(new Error(\"Event blocked by other events not yet sent\"));\n        }\n\n        return this.encryptAndSendEvent(room, localEvent, callback);\n    }\n\n    /**\n     * encrypts the event if necessary; adds the event to the queue, or sends it; marks the event as sent/unsent\n     * @param room\n     * @param event\n     * @param callback\n     * @returns {Promise} returns a promise which resolves with the result of the send request\n     * @private\n     */\n    private encryptAndSendEvent(room: Room, event: MatrixEvent, callback?: Callback): Promise<ISendEventResponse> {\n        let cancelled = false;\n        // Add an extra Promise.resolve() to turn synchronous exceptions into promise rejections,\n        // so that we can handle synchronous and asynchronous exceptions with the\n        // same code path.\n        return Promise.resolve().then(() => {\n            const encryptionPromise = this.encryptEventIfNeeded(event, room);\n            if (!encryptionPromise) return null; // doesn't need encryption\n\n            this.pendingEventEncryption.set(event.getId(), encryptionPromise);\n            this.updatePendingEventStatus(room, event, EventStatus.ENCRYPTING);\n            return encryptionPromise.then(() => {\n                if (!this.pendingEventEncryption.has(event.getId())) {\n                    // cancelled via MatrixClient::cancelPendingEvent\n                    cancelled = true;\n                    return;\n                }\n                this.updatePendingEventStatus(room, event, EventStatus.SENDING);\n            });\n        }).then(() => {\n            if (cancelled) return {} as ISendEventResponse;\n            let promise: Promise<ISendEventResponse>;\n            if (this.scheduler) {\n                // if this returns a promise then the scheduler has control now and will\n                // resolve/reject when it is done. Internally, the scheduler will invoke\n                // processFn which is set to this._sendEventHttpRequest so the same code\n                // path is executed regardless.\n                promise = this.scheduler.queueEvent(event);\n                if (promise && this.scheduler.getQueueForEvent(event).length > 1) {\n                    // event is processed FIFO so if the length is 2 or more we know\n                    // this event is stuck behind an earlier event.\n                    this.updatePendingEventStatus(room, event, EventStatus.QUEUED);\n                }\n            }\n\n            if (!promise) {\n                promise = this.sendEventHttpRequest(event);\n                if (room) {\n                    promise = promise.then(res => {\n                        room.updatePendingEvent(event, EventStatus.SENT, res['event_id']);\n                        return res;\n                    });\n                }\n            }\n\n            return promise;\n        }).then(res => {\n            callback?.(null, res);\n            return res;\n        }).catch(err => {\n            logger.error(\"Error sending event\", err.stack || err);\n            try {\n                // set the error on the event before we update the status:\n                // updating the status emits the event, so the state should be\n                // consistent at that point.\n                event.error = err;\n                this.updatePendingEventStatus(room, event, EventStatus.NOT_SENT);\n                // also put the event object on the error: the caller will need this\n                // to resend or cancel the event\n                err.event = event;\n\n                callback?.(err);\n            } catch (e) {\n                logger.error(\"Exception in error handler!\", e.stack || err);\n            }\n            throw err;\n        });\n    }\n\n    private encryptEventIfNeeded(event: MatrixEvent, room?: Room): Promise<void> | null {\n        if (event.isEncrypted()) {\n            // this event has already been encrypted; this happens if the\n            // encryption step succeeded, but the send step failed on the first\n            // attempt.\n            return null;\n        }\n\n        if (event.isRedaction()) {\n            // Redactions do not support encryption in the spec at this time,\n            // whilst it mostly worked in some clients, it wasn't compliant.\n            return null;\n        }\n\n        if (!this.isRoomEncrypted(event.getRoomId())) {\n            return null;\n        }\n\n        if (!this.crypto && this.usingExternalCrypto) {\n            // The client has opted to allow sending messages to encrypted\n            // rooms even if the room is encrypted, and we haven't setup\n            // crypto. This is useful for users of matrix-org/pantalaimon\n            return null;\n        }\n\n        if (event.getType() === EventType.Reaction) {\n            // For reactions, there is a very little gained by encrypting the entire\n            // event, as relation data is already kept in the clear. Event\n            // encryption for a reaction effectively only obscures the event type,\n            // but the purpose is still obvious from the relation data, so nothing\n            // is really gained. It also causes quite a few problems, such as:\n            //   * triggers notifications via default push rules\n            //   * prevents server-side bundling for reactions\n            // The reaction key / content / emoji value does warrant encrypting, but\n            // this will be handled separately by encrypting just this value.\n            // See https://github.com/matrix-org/matrix-doc/pull/1849#pullrequestreview-248763642\n            return null;\n        }\n\n        if (!this.crypto) {\n            throw new Error(\n                \"This room is configured to use encryption, but your client does \" +\n                \"not support encryption.\",\n            );\n        }\n\n        return this.crypto.encryptEvent(event, room);\n    }\n\n    /**\n     * Returns the eventType that should be used taking encryption into account\n     * for a given eventType.\n     * @param {string} roomId the room for the events `eventType` relates to\n     * @param {string} eventType the event type\n     * @return {string} the event type taking encryption into account\n     */\n    private getEncryptedIfNeededEventType(roomId: string, eventType: string): string {\n        if (eventType === EventType.Reaction) return eventType;\n        return this.isRoomEncrypted(roomId) ? EventType.RoomMessageEncrypted : eventType;\n    }\n\n    private updatePendingEventStatus(room: Room | null, event: MatrixEvent, newStatus: EventStatus) {\n        if (room) {\n            room.updatePendingEvent(event, newStatus);\n        } else {\n            event.setStatus(newStatus);\n        }\n    }\n\n    private sendEventHttpRequest(event: MatrixEvent): Promise<ISendEventResponse> {\n        let txnId = event.getTxnId();\n        if (!txnId) {\n            txnId = this.makeTxnId();\n            event.setTxnId(txnId);\n        }\n\n        const pathParams = {\n            $roomId: event.getRoomId(),\n            $eventType: event.getWireType(),\n            $stateKey: event.getStateKey(),\n            $txnId: txnId,\n        };\n\n        let path;\n\n        if (event.isState()) {\n            let pathTemplate = \"/rooms/$roomId/state/$eventType\";\n            if (event.getStateKey() && event.getStateKey().length > 0) {\n                pathTemplate = \"/rooms/$roomId/state/$eventType/$stateKey\";\n            }\n            path = utils.encodeUri(pathTemplate, pathParams);\n        } else if (event.isRedaction()) {\n            const pathTemplate = `/rooms/$roomId/redact/$redactsEventId/$txnId`;\n            path = utils.encodeUri(pathTemplate, Object.assign({\n                $redactsEventId: event.event.redacts,\n            }, pathParams));\n        } else {\n            path = utils.encodeUri(\"/rooms/$roomId/send/$eventType/$txnId\", pathParams);\n        }\n\n        return this.http.authedRequest<ISendEventResponse>(\n            undefined, Method.Put, path, undefined, event.getWireContent(),\n        ).then((res) => {\n            logger.log(`Event sent to ${event.getRoomId()} with event id ${res.event_id}`);\n            return res;\n        });\n    }\n\n    /**\n     * @param {string} roomId\n     * @param {string} eventId\n     * @param {string} [txnId]  transaction id. One will be made up if not\n     *    supplied.\n     * @param {object|module:client.callback} cbOrOpts\n     *    Options to pass on, may contain `reason`.\n     *    Can be callback for backwards compatibility. Deprecated\n     * @return {Promise} Resolves: TODO\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public redactEvent(\n        roomId: string,\n        eventId: string,\n        txnId?: string | undefined,\n        cbOrOpts?: Callback | IRedactOpts,\n    ): Promise<ISendEventResponse>;\n    public redactEvent(\n        roomId: string,\n        threadId: string | null,\n        eventId: string,\n        txnId?: string | undefined,\n        cbOrOpts?: Callback | IRedactOpts,\n    ): Promise<ISendEventResponse>;\n    public redactEvent(\n        roomId: string,\n        threadId: string | null,\n        eventId?: string,\n        txnId?: string | Callback | IRedactOpts,\n        cbOrOpts?: Callback | IRedactOpts,\n    ): Promise<ISendEventResponse> {\n        if (!eventId?.startsWith(EVENT_ID_PREFIX)) {\n            cbOrOpts = txnId as (Callback | IRedactOpts);\n            txnId = eventId;\n            eventId = threadId;\n            threadId = null;\n        }\n        const opts = typeof (cbOrOpts) === 'object' ? cbOrOpts : {};\n        const reason = opts.reason;\n        const callback = typeof (cbOrOpts) === 'function' ? cbOrOpts : undefined;\n        return this.sendCompleteEvent(roomId, threadId, {\n            type: EventType.RoomRedaction,\n            content: { reason },\n            redacts: eventId,\n        }, txnId as string, callback);\n    }\n\n    /**\n     * @param {string} roomId\n     * @param {string} threadId\n     * @param {Object} content\n     * @param {string} txnId Optional.\n     * @param {module:client.callback} callback Optional. Deprecated\n     * @return {Promise} Resolves: to an ISendEventResponse object\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public sendMessage(\n        roomId: string,\n        content: IContent,\n        txnId?: string,\n        callback?: Callback,\n    ): Promise<ISendEventResponse>;\n    public sendMessage(\n        roomId: string,\n        threadId: string | null,\n        content: IContent,\n        txnId?: string,\n        callback?: Callback,\n    ): Promise<ISendEventResponse>;\n    public sendMessage(\n        roomId: string,\n        threadId: string | null | IContent,\n        content: IContent | string,\n        txnId?: string | Callback,\n        callback?: Callback,\n    ): Promise<ISendEventResponse> {\n        if (typeof threadId !== \"string\" && threadId !== null) {\n            callback = txnId as Callback;\n            txnId = content as string;\n            content = threadId as IContent;\n            threadId = null;\n        }\n        if (utils.isFunction(txnId)) {\n            callback = txnId as any as Callback; // for legacy\n            txnId = undefined;\n        }\n\n        // Populate all outbound events with Extensible Events metadata to ensure there's a\n        // reasonably large pool of messages to parse.\n        let eventType: string = EventType.RoomMessage;\n        let sendContent: IContent = content as IContent;\n        const makeContentExtensible = (content: IContent = {}, recurse = true): IPartialEvent<object> => {\n            let newEvent: IPartialEvent<object> = null;\n\n            if (content['msgtype'] === MsgType.Text) {\n                newEvent = MessageEvent.from(content['body'], content['formatted_body']).serialize();\n            } else if (content['msgtype'] === MsgType.Emote) {\n                newEvent = EmoteEvent.from(content['body'], content['formatted_body']).serialize();\n            } else if (content['msgtype'] === MsgType.Notice) {\n                newEvent = NoticeEvent.from(content['body'], content['formatted_body']).serialize();\n            }\n\n            if (newEvent && content['m.new_content'] && recurse) {\n                const newContent = makeContentExtensible(content['m.new_content'], false);\n                if (newContent) {\n                    newEvent.content['m.new_content'] = newContent.content;\n                }\n            }\n\n            if (newEvent) {\n                // copy over all other fields we don't know about\n                for (const [k, v] of Object.entries(content)) {\n                    if (!newEvent.content.hasOwnProperty(k)) {\n                        newEvent.content[k] = v;\n                    }\n                }\n            }\n\n            return newEvent;\n        };\n        const result = makeContentExtensible(sendContent);\n        if (result) {\n            eventType = result.type;\n            sendContent = result.content;\n        }\n\n        return this.sendEvent(\n            roomId,\n            threadId as (string | null),\n            eventType,\n            sendContent,\n            txnId as string,\n            callback,\n        );\n    }\n\n    /**\n     * @param {string} roomId\n     * @param {string} threadId\n     * @param {string} body\n     * @param {string} txnId Optional.\n     * @param {module:client.callback} callback Optional. Deprecated\n     * @return {Promise} Resolves: to an empty object {}\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public sendTextMessage(\n        roomId: string,\n        body: string,\n        txnId?: string,\n        callback?: Callback,\n    ): Promise<ISendEventResponse>;\n    public sendTextMessage(\n        roomId: string,\n        threadId: string | null,\n        body: string,\n        txnId?: string,\n        callback?: Callback,\n    ): Promise<ISendEventResponse>;\n    public sendTextMessage(\n        roomId: string,\n        threadId: string | null,\n        body: string,\n        txnId?: string | Callback,\n        callback?: Callback,\n    ): Promise<ISendEventResponse> {\n        if (!threadId?.startsWith(EVENT_ID_PREFIX) && threadId !== null) {\n            callback = txnId as Callback;\n            txnId = body;\n            body = threadId;\n            threadId = null;\n        }\n        const content = ContentHelpers.makeTextMessage(body);\n        return this.sendMessage(roomId, threadId, content, txnId as string, callback);\n    }\n\n    /**\n     * @param {string} roomId\n     * @param {string} threadId\n     * @param {string} body\n     * @param {string} txnId Optional.\n     * @param {module:client.callback} callback Optional. Deprecated\n     * @return {Promise} Resolves: to a ISendEventResponse object\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public sendNotice(\n        roomId: string,\n        body: string,\n        txnId?: string,\n        callback?: Callback,\n    ): Promise<ISendEventResponse>;\n    public sendNotice(\n        roomId: string,\n        threadId: string | null,\n        body: string,\n        txnId?: string,\n        callback?: Callback,\n    ): Promise<ISendEventResponse>;\n    public sendNotice(\n        roomId: string,\n        threadId: string | null,\n        body: string,\n        txnId?: string | Callback,\n        callback?: Callback,\n    ): Promise<ISendEventResponse> {\n        if (!threadId?.startsWith(EVENT_ID_PREFIX) && threadId !== null) {\n            callback = txnId as Callback;\n            txnId = body;\n            body = threadId;\n            threadId = null;\n        }\n        const content = ContentHelpers.makeNotice(body);\n        return this.sendMessage(roomId, threadId, content, txnId as string, callback);\n    }\n\n    /**\n     * @param {string} roomId\n     * @param {string} threadId\n     * @param {string} body\n     * @param {string} txnId Optional.\n     * @param {module:client.callback} callback Optional. Deprecated\n     * @return {Promise} Resolves: to a ISendEventResponse object\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public sendEmoteMessage(\n        roomId: string,\n        body: string,\n        txnId?: string,\n        callback?: Callback,\n    ): Promise<ISendEventResponse>;\n    public sendEmoteMessage(\n        roomId: string,\n        threadId: string | null,\n        body: string,\n        txnId?: string,\n        callback?: Callback,\n    ): Promise<ISendEventResponse>;\n    public sendEmoteMessage(\n        roomId: string,\n        threadId: string | null,\n        body: string,\n        txnId?: string | Callback,\n        callback?: Callback,\n    ): Promise<ISendEventResponse> {\n        if (!threadId?.startsWith(EVENT_ID_PREFIX) && threadId !== null) {\n            callback = txnId as Callback;\n            txnId = body;\n            body = threadId;\n            threadId = null;\n        }\n        const content = ContentHelpers.makeEmoteMessage(body);\n        return this.sendMessage(roomId, threadId, content, txnId as string, callback);\n    }\n\n    /**\n     * @param {string} roomId\n     * @param {string} threadId\n     * @param {string} url\n     * @param {Object} info\n     * @param {string} text\n     * @param {module:client.callback} callback Optional. Deprecated\n     * @return {Promise} Resolves: to a ISendEventResponse object\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public sendImageMessage(\n        roomId: string,\n        url: string,\n        info?: IImageInfo,\n        text?: string,\n        callback?: Callback,\n    ): Promise<ISendEventResponse>;\n    public sendImageMessage(\n        roomId: string,\n        threadId: string | null,\n        url: string,\n        info?: IImageInfo,\n        text?: string,\n        callback?: Callback,\n    ): Promise<ISendEventResponse>;\n    public sendImageMessage(\n        roomId: string,\n        threadId: string | null,\n        url: string | IImageInfo,\n        info?: IImageInfo | string,\n        text: Callback | string = \"Image\",\n        callback?: Callback,\n    ): Promise<ISendEventResponse> {\n        if (!threadId?.startsWith(EVENT_ID_PREFIX) && threadId !== null) {\n            callback = text as Callback;\n            text = info as string || \"Image\";\n            info = url as IImageInfo;\n            url = threadId as string;\n            threadId = null;\n        }\n        if (utils.isFunction(text)) {\n            callback = text as any as Callback; // legacy\n            text = undefined;\n        }\n        const content = {\n            msgtype: MsgType.Image,\n            url: url,\n            info: info,\n            body: text,\n        };\n        return this.sendMessage(roomId, threadId, content, undefined, callback);\n    }\n\n    /**\n     * @param {string} roomId\n     * @param {string} threadId\n     * @param {string} url\n     * @param {Object} info\n     * @param {string} text\n     * @param {module:client.callback} callback Optional. Deprecated\n     * @return {Promise} Resolves: to a ISendEventResponse object\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public sendStickerMessage(\n        roomId: string,\n        url: string,\n        info?: IImageInfo,\n        text?: string,\n        callback?: Callback,\n    ): Promise<ISendEventResponse>;\n    public sendStickerMessage(\n        roomId: string,\n        threadId: string | null,\n        url: string,\n        info?: IImageInfo,\n        text?: string,\n        callback?: Callback,\n    ): Promise<ISendEventResponse>;\n    public sendStickerMessage(\n        roomId: string,\n        threadId: string | null,\n        url: string | IImageInfo,\n        info?: IImageInfo | string,\n        text: Callback | string = \"Sticker\",\n        callback?: Callback,\n    ): Promise<ISendEventResponse> {\n        if (!threadId?.startsWith(EVENT_ID_PREFIX) && threadId !== null) {\n            callback = text as Callback;\n            text = info as string || \"Sticker\";\n            info = url as IImageInfo;\n            url = threadId as string;\n            threadId = null;\n        }\n        if (utils.isFunction(text)) {\n            callback = text as any as Callback; // legacy\n            text = undefined;\n        }\n        const content = {\n            url: url,\n            info: info,\n            body: text,\n        };\n\n        return this.sendEvent(roomId, threadId, EventType.Sticker, content, undefined, callback);\n    }\n\n    /**\n     * @param {string} roomId\n     * @param {string} threadId\n     * @param {string} body\n     * @param {string} htmlBody\n     * @param {module:client.callback} callback Optional. Deprecated\n     * @return {Promise} Resolves: to a ISendEventResponse object\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public sendHtmlMessage(\n        roomId: string,\n        body: string,\n        htmlBody: string,\n        callback?: Callback,\n    ): Promise<ISendEventResponse>;\n    public sendHtmlMessage(\n        roomId: string,\n        threadId: string | null,\n        body: string,\n        htmlBody: string,\n        callback?: Callback,\n    ): Promise<ISendEventResponse>;\n    public sendHtmlMessage(\n        roomId: string,\n        threadId: string | null,\n        body: string,\n        htmlBody: string | Callback,\n        callback?: Callback,\n    ): Promise<ISendEventResponse> {\n        if (!threadId?.startsWith(EVENT_ID_PREFIX) && threadId !== null) {\n            callback = htmlBody as Callback;\n            htmlBody = body as string;\n            body = threadId;\n            threadId = null;\n        }\n        const content = ContentHelpers.makeHtmlMessage(body, htmlBody as string);\n        return this.sendMessage(roomId, threadId, content, undefined, callback);\n    }\n\n    /**\n     * @param {string} roomId\n     * @param {string} body\n     * @param {string} htmlBody\n     * @param {module:client.callback} callback Optional. Deprecated\n     * @return {Promise} Resolves: to a ISendEventResponse object\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public sendHtmlNotice(\n        roomId: string,\n        body: string,\n        htmlBody: string,\n        callback?: Callback,\n    ): Promise<ISendEventResponse>;\n    public sendHtmlNotice(\n        roomId: string,\n        threadId: string | null,\n        body: string,\n        htmlBody: string,\n        callback?: Callback,\n    ): Promise<ISendEventResponse>;\n    public sendHtmlNotice(\n        roomId: string,\n        threadId: string | null,\n        body: string,\n        htmlBody: string | Callback,\n        callback?: Callback,\n    ): Promise<ISendEventResponse> {\n        if (!threadId?.startsWith(EVENT_ID_PREFIX) && threadId !== null) {\n            callback = htmlBody as Callback;\n            htmlBody = body as string;\n            body = threadId;\n            threadId = null;\n        }\n        const content = ContentHelpers.makeHtmlNotice(body, htmlBody as string);\n        return this.sendMessage(roomId, threadId, content, undefined, callback);\n    }\n\n    /**\n     * @param {string} roomId\n     * @param {string} threadId\n     * @param {string} body\n     * @param {string} htmlBody\n     * @param {module:client.callback} callback Optional. Deprecated\n     * @return {Promise} Resolves: to a ISendEventResponse object\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public sendHtmlEmote(\n        roomId: string,\n        body: string,\n        htmlBody: string,\n        callback?: Callback,\n    ): Promise<ISendEventResponse>;\n    public sendHtmlEmote(\n        roomId: string,\n        threadId: string | null,\n        body: string,\n        htmlBody: string,\n        callback?: Callback,\n    ): Promise<ISendEventResponse>;\n    public sendHtmlEmote(\n        roomId: string,\n        threadId: string | null,\n        body: string,\n        htmlBody: string | Callback,\n        callback?: Callback,\n    ): Promise<ISendEventResponse> {\n        if (!threadId?.startsWith(EVENT_ID_PREFIX) && threadId !== null) {\n            callback = htmlBody as Callback;\n            htmlBody = body as string;\n            body = threadId;\n            threadId = null;\n        }\n        const content = ContentHelpers.makeHtmlEmote(body, htmlBody as string);\n        return this.sendMessage(roomId, threadId, content, undefined, callback);\n    }\n\n    /**\n     * Send a receipt.\n     * @param {Event} event The event being acknowledged\n     * @param {string} receiptType The kind of receipt e.g. \"m.read\"\n     * @param {object} body Additional content to send alongside the receipt.\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: to an empty object {}\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public sendReceipt(event: MatrixEvent, receiptType: string, body: any, callback?: Callback): Promise<{}> {\n        if (typeof (body) === 'function') {\n            callback = body as any as Callback; // legacy\n            body = {};\n        }\n\n        if (this.isGuest()) {\n            return Promise.resolve({}); // guests cannot send receipts so don't bother.\n        }\n\n        const path = utils.encodeUri(\"/rooms/$roomId/receipt/$receiptType/$eventId\", {\n            $roomId: event.getRoomId(),\n            $receiptType: receiptType,\n            $eventId: event.getId(),\n        });\n        const promise = this.http.authedRequest(callback, Method.Post, path, undefined, body || {});\n\n        const room = this.getRoom(event.getRoomId());\n        if (room) {\n            room.addLocalEchoReceipt(this.credentials.userId, event, receiptType);\n        }\n        return promise;\n    }\n\n    /**\n     * Send a read receipt.\n     * @param {Event} event The event that has been read.\n     * @param {object} opts The options for the read receipt.\n     * @param {boolean} opts.hidden True to prevent the receipt from being sent to\n     * other users and homeservers. Default false (send to everyone). <b>This\n     * property is unstable and may change in the future.</b>\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: to an empty object\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public async sendReadReceipt(event: MatrixEvent, opts?: { hidden?: boolean }, callback?: Callback): Promise<{}> {\n        if (typeof (opts) === 'function') {\n            callback = opts as any as Callback; // legacy\n            opts = {};\n        }\n        if (!opts) opts = {};\n\n        const eventId = event.getId();\n        const room = this.getRoom(event.getRoomId());\n        if (room && room.hasPendingEvent(eventId)) {\n            throw new Error(`Cannot set read receipt to a pending event (${eventId})`);\n        }\n\n        const addlContent = {\n            \"org.matrix.msc2285.hidden\": Boolean(opts.hidden),\n        };\n\n        return this.sendReceipt(event, \"m.read\", addlContent, callback);\n    }\n\n    /**\n     * Set a marker to indicate the point in a room before which the user has read every\n     * event. This can be retrieved from room account data (the event type is `m.fully_read`)\n     * and displayed as a horizontal line in the timeline that is visually distinct to the\n     * position of the user's own read receipt.\n     * @param {string} roomId ID of the room that has been read\n     * @param {string} rmEventId ID of the event that has been read\n     * @param {MatrixEvent} rrEvent the event tracked by the read receipt. This is here for\n     * convenience because the RR and the RM are commonly updated at the same time as each\n     * other. The local echo of this receipt will be done if set. Optional.\n     * @param {object} opts Options for the read markers\n     * @param {object} opts.hidden True to hide the receipt from other users and homeservers.\n     * <b>This property is unstable and may change in the future.</b>\n     * @return {Promise} Resolves: the empty object, {}.\n     */\n    public async setRoomReadMarkers(\n        roomId: string,\n        rmEventId: string,\n        rrEvent: MatrixEvent,\n        opts: { hidden?: boolean },\n    ): Promise<{}> {\n        const room = this.getRoom(roomId);\n        if (room && room.hasPendingEvent(rmEventId)) {\n            throw new Error(`Cannot set read marker to a pending event (${rmEventId})`);\n        }\n\n        // Add the optional RR update, do local echo like `sendReceipt`\n        let rrEventId;\n        if (rrEvent) {\n            rrEventId = rrEvent.getId();\n            if (room && room.hasPendingEvent(rrEventId)) {\n                throw new Error(`Cannot set read receipt to a pending event (${rrEventId})`);\n            }\n            if (room) {\n                room.addLocalEchoReceipt(this.credentials.userId, rrEvent, \"m.read\");\n            }\n        }\n\n        return this.setRoomReadMarkersHttpRequest(roomId, rmEventId, rrEventId, opts);\n    }\n\n    /**\n     * Get a preview of the given URL as of (roughly) the given point in time,\n     * described as an object with OpenGraph keys and associated values.\n     * Attributes may be synthesized where actual OG metadata is lacking.\n     * Caches results to prevent hammering the server.\n     * @param {string} url The URL to get preview data for\n     * @param {Number} ts The preferred point in time that the preview should\n     * describe (ms since epoch).  The preview returned will either be the most\n     * recent one preceding this timestamp if available, or failing that the next\n     * most recent available preview.\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: Object of OG metadata.\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     * May return synthesized attributes if the URL lacked OG meta.\n     */\n    public getUrlPreview(url: string, ts: number, callback?: Callback): Promise<IPreviewUrlResponse> {\n        // bucket the timestamp to the nearest minute to prevent excessive spam to the server\n        // Surely 60-second accuracy is enough for anyone.\n        ts = Math.floor(ts / 60000) * 60000;\n\n        const parsed = new URL(url);\n        parsed.hash = \"\"; // strip the hash as it won't affect the preview\n        url = parsed.toString();\n\n        const key = ts + \"_\" + url;\n\n        // If there's already a request in flight (or we've handled it), return that instead.\n        const cachedPreview = this.urlPreviewCache[key];\n        if (cachedPreview) {\n            if (callback) {\n                cachedPreview.then(callback).catch(callback);\n            }\n            return cachedPreview;\n        }\n\n        const resp = this.http.authedRequest(\n            callback, Method.Get, \"/preview_url\", {\n                url,\n                ts: ts.toString(),\n            }, undefined, {\n                prefix: PREFIX_MEDIA_R0,\n            },\n        );\n        // TODO: Expire the URL preview cache sometimes\n        this.urlPreviewCache[key] = resp;\n        return resp;\n    }\n\n    /**\n     * @param {string} roomId\n     * @param {boolean} isTyping\n     * @param {Number} timeoutMs\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: to an empty object {}\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public sendTyping(roomId: string, isTyping: boolean, timeoutMs: number, callback?: Callback): Promise<{}> {\n        if (this.isGuest()) {\n            return Promise.resolve({}); // guests cannot send typing notifications so don't bother.\n        }\n\n        const path = utils.encodeUri(\"/rooms/$roomId/typing/$userId\", {\n            $roomId: roomId,\n            $userId: this.credentials.userId,\n        });\n        const data: any = {\n            typing: isTyping,\n        };\n        if (isTyping) {\n            data.timeout = timeoutMs ? timeoutMs : 20000;\n        }\n        return this.http.authedRequest(callback, Method.Put, path, undefined, data);\n    }\n\n    /**\n     * Determines the history of room upgrades for a given room, as far as the\n     * client can see. Returns an array of Rooms where the first entry is the\n     * oldest and the last entry is the newest (likely current) room. If the\n     * provided room is not found, this returns an empty list. This works in\n     * both directions, looking for older and newer rooms of the given room.\n     * @param {string} roomId The room ID to search from\n     * @param {boolean} verifyLinks If true, the function will only return rooms\n     * which can be proven to be linked. For example, rooms which have a create\n     * event pointing to an old room which the client is not aware of or doesn't\n     * have a matching tombstone would not be returned.\n     * @return {Room[]} An array of rooms representing the upgrade\n     * history.\n     */\n    public getRoomUpgradeHistory(roomId: string, verifyLinks = false): Room[] {\n        let currentRoom = this.getRoom(roomId);\n        if (!currentRoom) return [];\n\n        const upgradeHistory = [currentRoom];\n\n        // Work backwards first, looking at create events.\n        let createEvent = currentRoom.currentState.getStateEvents(EventType.RoomCreate, \"\");\n        while (createEvent) {\n            const predecessor = createEvent.getContent()['predecessor'];\n            if (predecessor && predecessor['room_id']) {\n                const refRoom = this.getRoom(predecessor['room_id']);\n                if (!refRoom) break; // end of the chain\n\n                if (verifyLinks) {\n                    const tombstone = refRoom.currentState.getStateEvents(EventType.RoomTombstone, \"\");\n\n                    if (!tombstone\n                        || tombstone.getContent()['replacement_room'] !== refRoom.roomId) {\n                        break;\n                    }\n                }\n\n                // Insert at the front because we're working backwards from the currentRoom\n                upgradeHistory.splice(0, 0, refRoom);\n                createEvent = refRoom.currentState.getStateEvents(EventType.RoomCreate, \"\");\n            } else {\n                // No further create events to look at\n                break;\n            }\n        }\n\n        // Work forwards next, looking at tombstone events\n        let tombstoneEvent = currentRoom.currentState.getStateEvents(EventType.RoomTombstone, \"\");\n        while (tombstoneEvent) {\n            const refRoom = this.getRoom(tombstoneEvent.getContent()['replacement_room']);\n            if (!refRoom) break; // end of the chain\n            if (refRoom.roomId === currentRoom.roomId) break; // Tombstone is referencing it's own room\n\n            if (verifyLinks) {\n                createEvent = refRoom.currentState.getStateEvents(EventType.RoomCreate, \"\");\n                if (!createEvent || !createEvent.getContent()['predecessor']) break;\n\n                const predecessor = createEvent.getContent()['predecessor'];\n                if (predecessor['room_id'] !== currentRoom.roomId) break;\n            }\n\n            // Push to the end because we're looking forwards\n            upgradeHistory.push(refRoom);\n            const roomIds = new Set(upgradeHistory.map((ref) => ref.roomId));\n            if (roomIds.size < upgradeHistory.length) {\n                // The last room added to the list introduced a previous roomId\n                // To avoid recursion, return the last rooms - 1\n                return upgradeHistory.slice(0, upgradeHistory.length - 1);\n            }\n\n            // Set the current room to the reference room so we know where we're at\n            currentRoom = refRoom;\n            tombstoneEvent = currentRoom.currentState.getStateEvents(EventType.RoomTombstone, \"\");\n        }\n\n        return upgradeHistory;\n    }\n\n    /**\n     * @param {string} roomId\n     * @param {string} userId\n     * @param {module:client.callback} callback Optional.\n     * @param {string} reason Optional.\n     * @return {Promise} Resolves: {} an empty object.\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public invite(roomId: string, userId: string, callback?: Callback, reason?: string): Promise<{}> {\n        return this.membershipChange(roomId, userId, \"invite\", reason, callback);\n    }\n\n    /**\n     * Invite a user to a room based on their email address.\n     * @param {string} roomId The room to invite the user to.\n     * @param {string} email The email address to invite.\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: {} an empty object.\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public inviteByEmail(roomId: string, email: string, callback?: Callback): Promise<{}> {\n        return this.inviteByThreePid(roomId, \"email\", email, callback);\n    }\n\n    /**\n     * Invite a user to a room based on a third-party identifier.\n     * @param {string} roomId The room to invite the user to.\n     * @param {string} medium The medium to invite the user e.g. \"email\".\n     * @param {string} address The address for the specified medium.\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: {} an empty object.\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public async inviteByThreePid(roomId: string, medium: string, address: string, callback?: Callback): Promise<{}> {\n        const path = utils.encodeUri(\n            \"/rooms/$roomId/invite\",\n            { $roomId: roomId },\n        );\n\n        const identityServerUrl = this.getIdentityServerUrl(true);\n        if (!identityServerUrl) {\n            return Promise.reject(new MatrixError({\n                error: \"No supplied identity server URL\",\n                errcode: \"ORG.MATRIX.JSSDK_MISSING_PARAM\",\n            }));\n        }\n        const params: Record<string, string> = {\n            id_server: identityServerUrl,\n            medium: medium,\n            address: address,\n        };\n\n        if (\n            this.identityServer &&\n            this.identityServer.getAccessToken &&\n            await this.doesServerAcceptIdentityAccessToken()\n        ) {\n            const identityAccessToken = await this.identityServer.getAccessToken();\n            if (identityAccessToken) {\n                params['id_access_token'] = identityAccessToken;\n            }\n        }\n\n        return this.http.authedRequest(callback, Method.Post, path, undefined, params);\n    }\n\n    /**\n     * @param {string} roomId\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: {} an empty object.\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public leave(roomId: string, callback?: Callback): Promise<{}> {\n        return this.membershipChange(roomId, undefined, \"leave\", undefined, callback);\n    }\n\n    /**\n     * Leaves all rooms in the chain of room upgrades based on the given room. By\n     * default, this will leave all the previous and upgraded rooms, including the\n     * given room. To only leave the given room and any previous rooms, keeping the\n     * upgraded (modern) rooms untouched supply `false` to `includeFuture`.\n     * @param {string} roomId The room ID to start leaving at\n     * @param {boolean} includeFuture If true, the whole chain (past and future) of\n     * upgraded rooms will be left.\n     * @return {Promise} Resolves when completed with an object keyed\n     * by room ID and value of the error encountered when leaving or null.\n     */\n    public leaveRoomChain(\n        roomId: string,\n        includeFuture = true,\n    ): Promise<{ [roomId: string]: Error | MatrixError | null }> {\n        const upgradeHistory = this.getRoomUpgradeHistory(roomId);\n\n        let eligibleToLeave = upgradeHistory;\n        if (!includeFuture) {\n            eligibleToLeave = [];\n            for (const room of upgradeHistory) {\n                eligibleToLeave.push(room);\n                if (room.roomId === roomId) {\n                    break;\n                }\n            }\n        }\n\n        const populationResults: Record<string, Error> = {}; // {roomId: Error}\n        const promises = [];\n\n        const doLeave = (roomId: string) => {\n            return this.leave(roomId).then(() => {\n                populationResults[roomId] = null;\n            }).catch((err) => {\n                populationResults[roomId] = err;\n                return null; // suppress error\n            });\n        };\n\n        for (const room of eligibleToLeave) {\n            promises.push(doLeave(room.roomId));\n        }\n\n        return Promise.all(promises).then(() => populationResults);\n    }\n\n    /**\n     * @param {string} roomId\n     * @param {string} userId\n     * @param {string} reason Optional.\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: TODO\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public ban(roomId: string, userId: string, reason?: string, callback?: Callback) {\n        return this.membershipChange(roomId, userId, \"ban\", reason, callback);\n    }\n\n    /**\n     * @param {string} roomId\n     * @param {boolean} deleteRoom True to delete the room from the store on success.\n     * Default: true.\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: {} an empty object.\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public forget(roomId: string, deleteRoom?: boolean, callback?: Callback): Promise<{}> {\n        if (deleteRoom === undefined) {\n            deleteRoom = true;\n        }\n        const promise = this.membershipChange(roomId, undefined, \"forget\", undefined,\n            callback);\n        if (!deleteRoom) {\n            return promise;\n        }\n        return promise.then((response) => {\n            this.store.removeRoom(roomId);\n            this.emit(ClientEvent.DeleteRoom, roomId);\n            return response;\n        });\n    }\n\n    /**\n     * @param {string} roomId\n     * @param {string} userId\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: Object (currently empty)\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public unban(roomId: string, userId: string, callback?: Callback): Promise<void> {\n        // unbanning != set their state to leave: this used to be\n        // the case, but was then changed so that leaving was always\n        // a revoking of privilege, otherwise two people racing to\n        // kick / ban someone could end up banning and then un-banning\n        // them.\n        const path = utils.encodeUri(\"/rooms/$roomId/unban\", {\n            $roomId: roomId,\n        });\n        const data = {\n            user_id: userId,\n        };\n        return this.http.authedRequest(\n            callback, Method.Post, path, undefined, data,\n        );\n    }\n\n    /**\n     * @param {string} roomId\n     * @param {string} userId\n     * @param {string} reason Optional.\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: {} an empty object.\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public kick(roomId: string, userId: string, reason?: string, callback?: Callback): Promise<{}> {\n        const path = utils.encodeUri(\"/rooms/$roomId/kick\", {\n            $roomId: roomId,\n        });\n        const data = {\n            user_id: userId,\n            reason: reason,\n        };\n        return this.http.authedRequest(\n            callback, Method.Post, path, undefined, data,\n        );\n    }\n\n    private membershipChange(\n        roomId: string,\n        userId: string,\n        membership: string,\n        reason?: string,\n        callback?: Callback,\n    ): Promise<{}> {\n        if (utils.isFunction(reason)) {\n            callback = reason as any as Callback; // legacy\n            reason = undefined;\n        }\n\n        const path = utils.encodeUri(\"/rooms/$room_id/$membership\", {\n            $room_id: roomId,\n            $membership: membership,\n        });\n        return this.http.authedRequest(\n            callback, Method.Post, path, undefined, {\n                user_id: userId,  // may be undefined e.g. on leave\n                reason: reason,\n            },\n        );\n    }\n\n    /**\n     * Obtain a dict of actions which should be performed for this event according\n     * to the push rules for this user.  Caches the dict on the event.\n     * @param {MatrixEvent} event The event to get push actions for.\n     * @param {boolean} forceRecalculate forces to recalculate actions for an event\n     * Useful when an event just got decrypted\n     * @return {module:pushprocessor~PushAction} A dict of actions to perform.\n     */\n    public getPushActionsForEvent(event: MatrixEvent, forceRecalculate = false): IActionsObject {\n        if (!event.getPushActions() || forceRecalculate) {\n            event.setPushActions(this.pushProcessor.actionsForEvent(event));\n        }\n        return event.getPushActions();\n    }\n\n    /**\n     * @param {string} info The kind of info to set (e.g. 'avatar_url')\n     * @param {Object} data The JSON object to set.\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: to an empty object {}\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    // eslint-disable-next-line camelcase\n    public setProfileInfo(info: \"avatar_url\", data: { avatar_url: string }, callback?: Callback): Promise<{}>;\n    public setProfileInfo(info: \"displayname\", data: { displayname: string }, callback?: Callback): Promise<{}>;\n    public setProfileInfo(info: \"avatar_url\" | \"displayname\", data: object, callback?: Callback): Promise<{}> {\n        const path = utils.encodeUri(\"/profile/$userId/$info\", {\n            $userId: this.credentials.userId,\n            $info: info,\n        });\n        return this.http.authedRequest(callback, Method.Put, path, undefined, data);\n    }\n\n    /**\n     * @param {string} name\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: {} an empty object.\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public async setDisplayName(name: string, callback?: Callback): Promise<{}> {\n        const prom = await this.setProfileInfo(\"displayname\", { displayname: name }, callback);\n        // XXX: synthesise a profile update for ourselves because Synapse is broken and won't\n        const user = this.getUser(this.getUserId());\n        if (user) {\n            user.displayName = name;\n            user.emit(UserEvent.DisplayName, user.events.presence, user);\n        }\n        return prom;\n    }\n\n    /**\n     * @param {string} url\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: {} an empty object.\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public async setAvatarUrl(url: string, callback?: Callback): Promise<{}> {\n        const prom = await this.setProfileInfo(\"avatar_url\", { avatar_url: url }, callback);\n        // XXX: synthesise a profile update for ourselves because Synapse is broken and won't\n        const user = this.getUser(this.getUserId());\n        if (user) {\n            user.avatarUrl = url;\n            user.emit(UserEvent.AvatarUrl, user.events.presence, user);\n        }\n        return prom;\n    }\n\n    /**\n     * Turn an MXC URL into an HTTP one. <strong>This method is experimental and\n     * may change.</strong>\n     * @param {string} mxcUrl The MXC URL\n     * @param {Number} width The desired width of the thumbnail.\n     * @param {Number} height The desired height of the thumbnail.\n     * @param {string} resizeMethod The thumbnail resize method to use, either\n     * \"crop\" or \"scale\".\n     * @param {Boolean} allowDirectLinks If true, return any non-mxc URLs\n     * directly. Fetching such URLs will leak information about the user to\n     * anyone they share a room with. If false, will return null for such URLs.\n     * @return {?string} the avatar URL or null.\n     */\n    public mxcUrlToHttp(\n        mxcUrl: string,\n        width?: number,\n        height?: number,\n        resizeMethod?: string,\n        allowDirectLinks?: boolean,\n    ): string | null {\n        return getHttpUriForMxc(this.baseUrl, mxcUrl, width, height, resizeMethod, allowDirectLinks);\n    }\n\n    /**\n     * Sets a new status message for the user. The message may be null/falsey\n     * to clear the message.\n     * @param {string} newMessage The new message to set.\n     * @return {Promise} Resolves: to nothing\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public _unstable_setStatusMessage(newMessage: string): Promise<void> { // eslint-disable-line\n        const type = \"im.vector.user_status\";\n        return Promise.all(this.getRooms().map(async (room) => {\n            const isJoined = room.getMyMembership() === \"join\";\n            const looksLikeDm = room.getInvitedAndJoinedMemberCount() === 2;\n            if (!isJoined || !looksLikeDm) return;\n            // Check power level separately as it's a bit more expensive.\n            const maySend = room.currentState.mayClientSendStateEvent(type, this);\n            if (!maySend) return;\n            await this.sendStateEvent(room.roomId, type, { status: newMessage }, this.getUserId());\n        })).then(); // .then to fix return type\n    }\n\n    /**\n     * @param {Object} opts Options to apply\n     * @param {string} opts.presence One of \"online\", \"offline\" or \"unavailable\"\n     * @param {string} opts.status_msg The status message to attach.\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: TODO\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     * @throws If 'presence' isn't a valid presence enum value.\n     */\n    public setPresence(opts: IPresenceOpts, callback?: Callback): Promise<void> {\n        const path = utils.encodeUri(\"/presence/$userId/status\", {\n            $userId: this.credentials.userId,\n        });\n\n        if (typeof opts === \"string\") {\n            opts = { presence: opts }; // legacy\n        }\n\n        const validStates = [\"offline\", \"online\", \"unavailable\"];\n        if (validStates.indexOf(opts.presence) === -1) {\n            throw new Error(\"Bad presence value: \" + opts.presence);\n        }\n        return this.http.authedRequest(\n            callback, Method.Put, path, undefined, opts,\n        );\n    }\n\n    /**\n     * @param {string} userId The user to get presence for\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: The presence state for this user.\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public getPresence(userId: string, callback?: Callback): Promise<unknown> { // TODO: Types\n        const path = utils.encodeUri(\"/presence/$userId/status\", {\n            $userId: userId,\n        });\n\n        return this.http.authedRequest(callback, Method.Get, path, undefined, undefined);\n    }\n\n    /**\n     * Retrieve older messages from the given room and put them in the timeline.\n     *\n     * If this is called multiple times whilst a request is ongoing, the <i>same</i>\n     * Promise will be returned. If there was a problem requesting scrollback, there\n     * will be a small delay before another request can be made (to prevent tight-looping\n     * when there is no connection).\n     *\n     * @param {Room} room The room to get older messages in.\n     * @param {Integer} limit Optional. The maximum number of previous events to\n     * pull in. Default: 30.\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: Room. If you are at the beginning\n     * of the timeline, <code>Room.oldState.paginationToken</code> will be\n     * <code>null</code>.\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public scrollback(room: Room, limit = 30, callback?: Callback): Promise<Room> {\n        if (utils.isFunction(limit)) {\n            callback = limit as any as Callback; // legacy\n            limit = undefined;\n        }\n        let timeToWaitMs = 0;\n\n        let info = this.ongoingScrollbacks[room.roomId] || {};\n        if (info.promise) {\n            return info.promise;\n        } else if (info.errorTs) {\n            const timeWaitedMs = Date.now() - info.errorTs;\n            timeToWaitMs = Math.max(SCROLLBACK_DELAY_MS - timeWaitedMs, 0);\n        }\n\n        if (room.oldState.paginationToken === null) {\n            return Promise.resolve(room); // already at the start.\n        }\n        // attempt to grab more events from the store first\n        const numAdded = this.store.scrollback(room, limit).length;\n        if (numAdded === limit) {\n            // store contained everything we needed.\n            return Promise.resolve(room);\n        }\n        // reduce the required number of events appropriately\n        limit = limit - numAdded;\n\n        const prom = new Promise<Room>((resolve, reject) => {\n            // wait for a time before doing this request\n            // (which may be 0 in order not to special case the code paths)\n            sleep(timeToWaitMs).then(() => {\n                return this.createMessagesRequest(\n                    room.roomId,\n                    room.oldState.paginationToken,\n                    limit,\n                    Direction.Backward,\n                );\n            }).then(async (res: IMessagesResponse) => {\n                const matrixEvents = res.chunk.map(this.getEventMapper());\n                if (res.state) {\n                    const stateEvents = res.state.map(this.getEventMapper());\n                    room.currentState.setUnknownStateEvents(stateEvents);\n                }\n\n                const [timelineEvents, threadedEvents] = room.partitionThreadedEvents(matrixEvents);\n\n                this.processBeaconEvents(room, matrixEvents);\n                room.addEventsToTimeline(timelineEvents, true, room.getLiveTimeline());\n                await this.processThreadEvents(room, threadedEvents, true);\n\n                room.oldState.paginationToken = res.end;\n                if (res.chunk.length === 0) {\n                    room.oldState.paginationToken = null;\n                }\n                this.store.storeEvents(room, matrixEvents, res.end, true);\n                this.ongoingScrollbacks[room.roomId] = null;\n                callback?.(null, room);\n                resolve(room);\n            }).catch((err) => {\n                this.ongoingScrollbacks[room.roomId] = {\n                    errorTs: Date.now(),\n                };\n                callback?.(err);\n                reject(err);\n            });\n        });\n\n        info = {\n            promise: prom,\n            errorTs: null,\n        };\n\n        this.ongoingScrollbacks[room.roomId] = info;\n        return prom;\n    }\n\n    /**\n     * @param {object} [options]\n     * @param {boolean} options.preventReEmit don't re-emit events emitted on an event mapped by this mapper on the client\n     * @param {boolean} options.decrypt decrypt event proactively\n     * @return {Function}\n     */\n    public getEventMapper(options?: MapperOpts): EventMapper {\n        return eventMapperFor(this, options || {});\n    }\n\n    /**\n     * Get an EventTimeline for the given event\n     *\n     * <p>If the EventTimelineSet object already has the given event in its store, the\n     * corresponding timeline will be returned. Otherwise, a /context request is\n     * made, and used to construct an EventTimeline.\n     *\n     * @param {EventTimelineSet} timelineSet  The timelineSet to look for the event in\n     * @param {string} eventId  The ID of the event to look for\n     *\n     * @return {Promise} Resolves:\n     *    {@link module:models/event-timeline~EventTimeline} including the given event\n     */\n    public async getEventTimeline(timelineSet: EventTimelineSet, eventId: string): Promise<EventTimeline> {\n        // don't allow any timeline support unless it's been enabled.\n        if (!this.timelineSupport) {\n            throw new Error(\"timeline support is disabled. Set the 'timelineSupport'\" +\n                \" parameter to true when creating MatrixClient to enable it.\");\n        }\n\n        if (timelineSet.getTimelineForEvent(eventId)) {\n            return timelineSet.getTimelineForEvent(eventId);\n        }\n\n        const path = utils.encodeUri(\n            \"/rooms/$roomId/context/$eventId\", {\n                $roomId: timelineSet.room.roomId,\n                $eventId: eventId,\n            },\n        );\n\n        let params: Record<string, string | string[]> = undefined;\n        if (this.clientOpts.lazyLoadMembers) {\n            params = { filter: JSON.stringify(Filter.LAZY_LOADING_MESSAGES_FILTER) };\n        }\n\n        // TODO: we should implement a backoff (as per scrollback()) to deal more nicely with HTTP errors.\n        const res = await this.http.authedRequest<any>(undefined, Method.Get, path, params); // TODO types\n        if (!res.event) {\n            throw new Error(\"'event' not in '/context' result - homeserver too old?\");\n        }\n\n        // by the time the request completes, the event might have ended up in the timeline.\n        if (timelineSet.getTimelineForEvent(eventId)) {\n            return timelineSet.getTimelineForEvent(eventId);\n        }\n\n        const mapper = this.getEventMapper();\n        const event = mapper(res.event);\n        const events = [\n            // we start with the last event, since that's the point at which we have known state.\n            // events_after is already backwards; events_before is forwards.\n            ...res.events_after.reverse().map(mapper),\n            event,\n            ...res.events_before.map(mapper),\n        ];\n\n        // Where the event is a thread reply (not a root) and running in MSC-enabled mode the Thread timeline only\n        // functions contiguously, so we have to jump through some hoops to get our target event in it.\n        // XXX: workaround for https://github.com/vector-im/element-meta/issues/150\n        if (Thread.hasServerSideSupport &&\n            this.supportsExperimentalThreads() &&\n            event.isRelation(THREAD_RELATION_TYPE.name)\n        ) {\n            const [, threadedEvents] = timelineSet.room.partitionThreadedEvents(events);\n            const thread = await timelineSet.room.createThreadFetchRoot(event.threadRootId, threadedEvents, true);\n\n            let nextBatch: string;\n            const response = await thread.fetchInitialEvents();\n            if (response?.nextBatch) {\n                nextBatch = response.nextBatch;\n            }\n\n            const opts: IRelationsRequestOpts = {\n                limit: 50,\n            };\n\n            // Fetch events until we find the one we were asked for\n            while (!thread.findEventById(eventId)) {\n                if (nextBatch) {\n                    opts.from = nextBatch;\n                }\n\n                ({ nextBatch } = await thread.fetchEvents(opts));\n            }\n\n            return thread.liveTimeline;\n        }\n\n        // Here we handle non-thread timelines only, but still process any thread events to populate thread summaries.\n        let timeline = timelineSet.getTimelineForEvent(events[0].getId());\n        if (timeline) {\n            timeline.getState(EventTimeline.BACKWARDS).setUnknownStateEvents(res.state.map(mapper));\n        } else {\n            timeline = timelineSet.addTimeline();\n            timeline.initialiseState(res.state.map(mapper));\n            timeline.getState(EventTimeline.FORWARDS).paginationToken = res.end;\n        }\n\n        const [timelineEvents, threadedEvents] = timelineSet.room.partitionThreadedEvents(events);\n        timelineSet.addEventsToTimeline(timelineEvents, true, timeline, res.start);\n        // The target event is not in a thread but process the contextual events, so we can show any threads around it.\n        await this.processThreadEvents(timelineSet.room, threadedEvents, true);\n        this.processBeaconEvents(timelineSet.room, events);\n\n        // There is no guarantee that the event ended up in \"timeline\" (we might have switched to a neighbouring\n        // timeline) - so check the room's index again. On the other hand, there's no guarantee the event ended up\n        // anywhere, if it was later redacted, so we just return the timeline we first thought of.\n        return timelineSet.getTimelineForEvent(eventId)\n            ?? timelineSet.room.findThreadForEvent(event)?.liveTimeline // for Threads degraded support\n            ?? timeline;\n    }\n\n    /**\n     * Makes a request to /messages with the appropriate lazy loading filter set.\n     * XXX: if we do get rid of scrollback (as it's not used at the moment),\n     * we could inline this method again in paginateEventTimeline as that would\n     * then be the only call-site\n     * @param {string} roomId\n     * @param {string} fromToken\n     * @param {number} limit the maximum amount of events the retrieve\n     * @param {string} dir 'f' or 'b'\n     * @param {Filter} timelineFilter the timeline filter to pass\n     * @return {Promise}\n     */\n    // XXX: Intended private, used in code.\n    public createMessagesRequest(\n        roomId: string,\n        fromToken: string | null,\n        limit = 30,\n        dir: Direction,\n        timelineFilter?: Filter,\n    ): Promise<IMessagesResponse> {\n        const path = utils.encodeUri(\"/rooms/$roomId/messages\", { $roomId: roomId });\n\n        const params: Record<string, string> = {\n            limit: limit.toString(),\n            dir: dir,\n        };\n\n        if (fromToken) {\n            params.from = fromToken;\n        }\n\n        let filter = null;\n        if (this.clientOpts.lazyLoadMembers) {\n            // create a shallow copy of LAZY_LOADING_MESSAGES_FILTER,\n            // so the timelineFilter doesn't get written into it below\n            filter = Object.assign({}, Filter.LAZY_LOADING_MESSAGES_FILTER);\n        }\n        if (timelineFilter) {\n            // XXX: it's horrific that /messages' filter parameter doesn't match\n            // /sync's one - see https://matrix.org/jira/browse/SPEC-451\n            filter = filter || {};\n            Object.assign(filter, timelineFilter.getRoomTimelineFilterComponent()?.toJSON());\n        }\n        if (filter) {\n            params.filter = JSON.stringify(filter);\n        }\n        return this.http.authedRequest(undefined, Method.Get, path, params);\n    }\n\n    /**\n     * Take an EventTimeline, and back/forward-fill results.\n     *\n     * @param {module:models/event-timeline~EventTimeline} eventTimeline timeline\n     *    object to be updated\n     * @param {Object}   [opts]\n     * @param {boolean}     [opts.backwards = false]  true to fill backwards,\n     *    false to go forwards\n     * @param {number}   [opts.limit = 30]         number of events to request\n     *\n     * @return {Promise} Resolves to a boolean: false if there are no\n     *    events and we reached either end of the timeline; else true.\n     */\n    public paginateEventTimeline(eventTimeline: EventTimeline, opts: IPaginateOpts): Promise<boolean> {\n        const isNotifTimeline = (eventTimeline.getTimelineSet() === this.notifTimelineSet);\n\n        // TODO: we should implement a backoff (as per scrollback()) to deal more\n        // nicely with HTTP errors.\n        opts = opts || {};\n        const backwards = opts.backwards || false;\n\n        if (isNotifTimeline) {\n            if (!backwards) {\n                throw new Error(\"paginateNotifTimeline can only paginate backwards\");\n            }\n        }\n\n        const dir = backwards ? EventTimeline.BACKWARDS : EventTimeline.FORWARDS;\n\n        const token = eventTimeline.getPaginationToken(dir);\n        const pendingRequest = eventTimeline.paginationRequests[dir];\n\n        if (pendingRequest) {\n            // already a request in progress - return the existing promise\n            return pendingRequest;\n        }\n\n        let path: string;\n        let params: Record<string, string>;\n        let promise: Promise<boolean>;\n\n        if (isNotifTimeline) {\n            path = \"/notifications\";\n            params = {\n                limit: (opts.limit ?? 30).toString(),\n                only: 'highlight',\n            };\n\n            if (token !== \"end\") {\n                params.from = token;\n            }\n\n            promise = this.http.authedRequest<any>( // TODO types\n                undefined, Method.Get, path, params, undefined,\n            ).then(async (res) => {\n                const token = res.next_token;\n                const matrixEvents = [];\n\n                for (let i = 0; i < res.notifications.length; i++) {\n                    const notification = res.notifications[i];\n                    const event = this.getEventMapper()(notification.event);\n                    event.setPushActions(\n                        PushProcessor.actionListToActionsObject(notification.actions),\n                    );\n                    event.event.room_id = notification.room_id; // XXX: gutwrenching\n                    matrixEvents[i] = event;\n                }\n\n                // No need to partition events for threads here, everything lives\n                // in the notification timeline set\n                const timelineSet = eventTimeline.getTimelineSet();\n                timelineSet.addEventsToTimeline(matrixEvents, backwards, eventTimeline, token);\n                this.processBeaconEvents(timelineSet.room, matrixEvents);\n\n                // if we've hit the end of the timeline, we need to stop trying to\n                // paginate. We need to keep the 'forwards' token though, to make sure\n                // we can recover from gappy syncs.\n                if (backwards && !res.next_token) {\n                    eventTimeline.setPaginationToken(null, dir);\n                }\n                return res.next_token ? true : false;\n            }).finally(() => {\n                eventTimeline.paginationRequests[dir] = null;\n            });\n            eventTimeline.paginationRequests[dir] = promise;\n        } else {\n            const room = this.getRoom(eventTimeline.getRoomId());\n            if (!room) {\n                throw new Error(\"Unknown room \" + eventTimeline.getRoomId());\n            }\n\n            promise = this.createMessagesRequest(\n                eventTimeline.getRoomId(),\n                token,\n                opts.limit,\n                dir,\n                eventTimeline.getFilter(),\n            ).then(async (res) => {\n                if (res.state) {\n                    const roomState = eventTimeline.getState(dir);\n                    const stateEvents = res.state.map(this.getEventMapper());\n                    roomState.setUnknownStateEvents(stateEvents);\n                }\n                const token = res.end;\n                const matrixEvents = res.chunk.map(this.getEventMapper());\n\n                const timelineSet = eventTimeline.getTimelineSet();\n                const [timelineEvents, threadedEvents] = timelineSet.room.partitionThreadedEvents(matrixEvents);\n                timelineSet.addEventsToTimeline(timelineEvents, backwards, eventTimeline, token);\n                this.processBeaconEvents(timelineSet.room, matrixEvents);\n                await this.processThreadEvents(room, threadedEvents, backwards);\n\n                // if we've hit the end of the timeline, we need to stop trying to\n                // paginate. We need to keep the 'forwards' token though, to make sure\n                // we can recover from gappy syncs.\n                if (backwards && res.end == res.start) {\n                    eventTimeline.setPaginationToken(null, dir);\n                }\n                return res.end != res.start;\n            }).finally(() => {\n                eventTimeline.paginationRequests[dir] = null;\n            });\n            eventTimeline.paginationRequests[dir] = promise;\n        }\n\n        return promise;\n    }\n\n    /**\n     * Reset the notifTimelineSet entirely, paginating in some historical notifs as\n     * a starting point for subsequent pagination.\n     */\n    public resetNotifTimelineSet() {\n        if (!this.notifTimelineSet) {\n            return;\n        }\n\n        // FIXME: This thing is a total hack, and results in duplicate events being\n        // added to the timeline both from /sync and /notifications, and lots of\n        // slow and wasteful processing and pagination.  The correct solution is to\n        // extend /messages or /search or something to filter on notifications.\n\n        // use the fictitious token 'end'. in practice we would ideally give it\n        // the oldest backwards pagination token from /sync, but /sync doesn't\n        // know about /notifications, so we have no choice but to start paginating\n        // from the current point in time.  This may well overlap with historical\n        // notifs which are then inserted into the timeline by /sync responses.\n        this.notifTimelineSet.resetLiveTimeline('end', null);\n\n        // we could try to paginate a single event at this point in order to get\n        // a more valid pagination token, but it just ends up with an out of order\n        // timeline. given what a mess this is and given we're going to have duplicate\n        // events anyway, just leave it with the dummy token for now.\n        /*\n        this.paginateNotifTimeline(this._notifTimelineSet.getLiveTimeline(), {\n            backwards: true,\n            limit: 1\n        });\n        */\n    }\n\n    /**\n     * Peek into a room and receive updates about the room. This only works if the\n     * history visibility for the room is world_readable.\n     * @param {String} roomId The room to attempt to peek into.\n     * @return {Promise} Resolves: Room object\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public peekInRoom(roomId: string): Promise<Room> {\n        if (this.peekSync) {\n            this.peekSync.stopPeeking();\n        }\n        this.peekSync = new SyncApi(this, this.clientOpts);\n        return this.peekSync.peek(roomId);\n    }\n\n    /**\n     * Stop any ongoing room peeking.\n     */\n    public stopPeeking() {\n        if (this.peekSync) {\n            this.peekSync.stopPeeking();\n            this.peekSync = null;\n        }\n    }\n\n    /**\n     * Set r/w flags for guest access in a room.\n     * @param {string} roomId The room to configure guest access in.\n     * @param {Object} opts Options\n     * @param {boolean} opts.allowJoin True to allow guests to join this room. This\n     * implicitly gives guests write access. If false or not given, guests are\n     * explicitly forbidden from joining the room.\n     * @param {boolean} opts.allowRead True to set history visibility to\n     * be world_readable. This gives guests read access *from this point forward*.\n     * If false or not given, history visibility is not modified.\n     * @return {Promise} Resolves: TODO\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public setGuestAccess(roomId: string, opts: IGuestAccessOpts): Promise<void> {\n        const writePromise = this.sendStateEvent(roomId, EventType.RoomGuestAccess, {\n            guest_access: opts.allowJoin ? \"can_join\" : \"forbidden\",\n        }, \"\");\n\n        let readPromise: Promise<any> = Promise.resolve<any>(undefined);\n        if (opts.allowRead) {\n            readPromise = this.sendStateEvent(roomId, EventType.RoomHistoryVisibility, {\n                history_visibility: \"world_readable\",\n            }, \"\");\n        }\n\n        return Promise.all([readPromise, writePromise]).then(); // .then() to hide results for contract\n    }\n\n    /**\n     * Requests an email verification token for the purposes of registration.\n     * This API requests a token from the homeserver.\n     * The doesServerRequireIdServerParam() method can be used to determine if\n     * the server requires the id_server parameter to be provided.\n     *\n     * Parameters and return value are as for requestEmailToken\n\n     * @param {string} email As requestEmailToken\n     * @param {string} clientSecret As requestEmailToken\n     * @param {number} sendAttempt As requestEmailToken\n     * @param {string} nextLink As requestEmailToken\n     * @return {Promise} Resolves: As requestEmailToken\n     */\n    public requestRegisterEmailToken(\n        email: string,\n        clientSecret: string,\n        sendAttempt: number,\n        nextLink?: string,\n    ): Promise<IRequestTokenResponse> {\n        return this.requestTokenFromEndpoint(\n            \"/register/email/requestToken\",\n            {\n                email: email,\n                client_secret: clientSecret,\n                send_attempt: sendAttempt,\n                next_link: nextLink,\n            },\n        );\n    }\n\n    /**\n     * Requests a text message verification token for the purposes of registration.\n     * This API requests a token from the homeserver.\n     * The doesServerRequireIdServerParam() method can be used to determine if\n     * the server requires the id_server parameter to be provided.\n     *\n     * @param {string} phoneCountry The ISO 3166-1 alpha-2 code for the country in which\n     *    phoneNumber should be parsed relative to.\n     * @param {string} phoneNumber The phone number, in national or international format\n     * @param {string} clientSecret As requestEmailToken\n     * @param {number} sendAttempt As requestEmailToken\n     * @param {string} nextLink As requestEmailToken\n     * @return {Promise} Resolves: As requestEmailToken\n     */\n    public requestRegisterMsisdnToken(\n        phoneCountry: string,\n        phoneNumber: string,\n        clientSecret: string,\n        sendAttempt: number,\n        nextLink?: string,\n    ): Promise<IRequestMsisdnTokenResponse> {\n        return this.requestTokenFromEndpoint(\n            \"/register/msisdn/requestToken\",\n            {\n                country: phoneCountry,\n                phone_number: phoneNumber,\n                client_secret: clientSecret,\n                send_attempt: sendAttempt,\n                next_link: nextLink,\n            },\n        );\n    }\n\n    /**\n     * Requests an email verification token for the purposes of adding a\n     * third party identifier to an account.\n     * This API requests a token from the homeserver.\n     * The doesServerRequireIdServerParam() method can be used to determine if\n     * the server requires the id_server parameter to be provided.\n     * If an account with the given email address already exists and is\n     * associated with an account other than the one the user is authed as,\n     * it will either send an email to the address informing them of this\n     * or return M_THREEPID_IN_USE (which one is up to the homeserver).\n     *\n     * @param {string} email As requestEmailToken\n     * @param {string} clientSecret As requestEmailToken\n     * @param {number} sendAttempt As requestEmailToken\n     * @param {string} nextLink As requestEmailToken\n     * @return {Promise} Resolves: As requestEmailToken\n     */\n    public requestAdd3pidEmailToken(\n        email: string,\n        clientSecret: string,\n        sendAttempt: number,\n        nextLink?: string,\n    ): Promise<IRequestTokenResponse> {\n        return this.requestTokenFromEndpoint(\n            \"/account/3pid/email/requestToken\",\n            {\n                email: email,\n                client_secret: clientSecret,\n                send_attempt: sendAttempt,\n                next_link: nextLink,\n            },\n        );\n    }\n\n    /**\n     * Requests a text message verification token for the purposes of adding a\n     * third party identifier to an account.\n     * This API proxies the identity server /validate/email/requestToken API,\n     * adding specific behaviour for the addition of phone numbers to an\n     * account, as requestAdd3pidEmailToken.\n     *\n     * @param {string} phoneCountry As requestRegisterMsisdnToken\n     * @param {string} phoneNumber As requestRegisterMsisdnToken\n     * @param {string} clientSecret As requestEmailToken\n     * @param {number} sendAttempt As requestEmailToken\n     * @param {string} nextLink As requestEmailToken\n     * @return {Promise} Resolves: As requestEmailToken\n     */\n    public requestAdd3pidMsisdnToken(\n        phoneCountry: string,\n        phoneNumber: string,\n        clientSecret: string,\n        sendAttempt: number,\n        nextLink?: string,\n    ): Promise<IRequestMsisdnTokenResponse> {\n        return this.requestTokenFromEndpoint(\n            \"/account/3pid/msisdn/requestToken\",\n            {\n                country: phoneCountry,\n                phone_number: phoneNumber,\n                client_secret: clientSecret,\n                send_attempt: sendAttempt,\n                next_link: nextLink,\n            },\n        );\n    }\n\n    /**\n     * Requests an email verification token for the purposes of resetting\n     * the password on an account.\n     * This API proxies the identity server /validate/email/requestToken API,\n     * adding specific behaviour for the password resetting. Specifically,\n     * if no account with the given email address exists, it may either\n     * return M_THREEPID_NOT_FOUND or send an email\n     * to the address informing them of this (which one is up to the homeserver).\n     *\n     * requestEmailToken calls the equivalent API directly on the identity server,\n     * therefore bypassing the password reset specific logic.\n     *\n     * @param {string} email As requestEmailToken\n     * @param {string} clientSecret As requestEmailToken\n     * @param {number} sendAttempt As requestEmailToken\n     * @param {string} nextLink As requestEmailToken\n     * @param {module:client.callback} callback Optional. As requestEmailToken\n     * @return {Promise} Resolves: As requestEmailToken\n     */\n    public requestPasswordEmailToken(\n        email: string,\n        clientSecret: string,\n        sendAttempt: number,\n        nextLink?: string,\n    ): Promise<IRequestTokenResponse> {\n        return this.requestTokenFromEndpoint(\n            \"/account/password/email/requestToken\",\n            {\n                email: email,\n                client_secret: clientSecret,\n                send_attempt: sendAttempt,\n                next_link: nextLink,\n            },\n        );\n    }\n\n    /**\n     * Requests a text message verification token for the purposes of resetting\n     * the password on an account.\n     * This API proxies the identity server /validate/email/requestToken API,\n     * adding specific behaviour for the password resetting, as requestPasswordEmailToken.\n     *\n     * @param {string} phoneCountry As requestRegisterMsisdnToken\n     * @param {string} phoneNumber As requestRegisterMsisdnToken\n     * @param {string} clientSecret As requestEmailToken\n     * @param {number} sendAttempt As requestEmailToken\n     * @param {string} nextLink As requestEmailToken\n     * @return {Promise} Resolves: As requestEmailToken\n     */\n    public requestPasswordMsisdnToken(\n        phoneCountry: string,\n        phoneNumber: string,\n        clientSecret: string,\n        sendAttempt: number,\n        nextLink: string,\n    ): Promise<IRequestMsisdnTokenResponse> {\n        return this.requestTokenFromEndpoint(\n            \"/account/password/msisdn/requestToken\",\n            {\n                country: phoneCountry,\n                phone_number: phoneNumber,\n                client_secret: clientSecret,\n                send_attempt: sendAttempt,\n                next_link: nextLink,\n            },\n        );\n    }\n\n    /**\n     * Internal utility function for requesting validation tokens from usage-specific\n     * requestToken endpoints.\n     *\n     * @param {string} endpoint The endpoint to send the request to\n     * @param {object} params Parameters for the POST request\n     * @return {Promise} Resolves: As requestEmailToken\n     */\n    private async requestTokenFromEndpoint<T extends IRequestTokenResponse>(\n        endpoint: string,\n        params: Record<string, any>,\n    ): Promise<T> {\n        const postParams = Object.assign({}, params);\n\n        // If the HS supports separate add and bind, then requestToken endpoints\n        // don't need an IS as they are all validated by the HS directly.\n        if (!await this.doesServerSupportSeparateAddAndBind() && this.idBaseUrl) {\n            const idServerUrl = new URL(this.idBaseUrl);\n            postParams.id_server = idServerUrl.host;\n\n            if (\n                this.identityServer &&\n                this.identityServer.getAccessToken &&\n                await this.doesServerAcceptIdentityAccessToken()\n            ) {\n                const identityAccessToken = await this.identityServer.getAccessToken();\n                if (identityAccessToken) {\n                    postParams.id_access_token = identityAccessToken;\n                }\n            }\n        }\n\n        return this.http.request(undefined, Method.Post, endpoint, undefined, postParams);\n    }\n\n    /**\n     * Get the room-kind push rule associated with a room.\n     * @param {string} scope \"global\" or device-specific.\n     * @param {string} roomId the id of the room.\n     * @return {object} the rule or undefined.\n     */\n    public getRoomPushRule(scope: string, roomId: string): any { // TODO: Types\n        // There can be only room-kind push rule per room\n        // and its id is the room id.\n        if (this.pushRules) {\n            for (let i = 0; i < this.pushRules[scope].room.length; i++) {\n                const rule = this.pushRules[scope].room[i];\n                if (rule.rule_id === roomId) {\n                    return rule;\n                }\n            }\n        } else {\n            throw new Error(\n                \"SyncApi.sync() must be done before accessing to push rules.\",\n            );\n        }\n    }\n\n    /**\n     * Set a room-kind muting push rule in a room.\n     * The operation also updates MatrixClient.pushRules at the end.\n     * @param {string} scope \"global\" or device-specific.\n     * @param {string} roomId the id of the room.\n     * @param {boolean} mute the mute state.\n     * @return {Promise} Resolves: result object\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public setRoomMutePushRule(scope: string, roomId: string, mute: boolean): Promise<void> | void {\n        let promise: Promise<void>;\n        let hasDontNotifyRule;\n\n        // Get the existing room-kind push rule if any\n        const roomPushRule = this.getRoomPushRule(scope, roomId);\n        if (roomPushRule) {\n            if (0 <= roomPushRule.actions.indexOf(\"dont_notify\")) {\n                hasDontNotifyRule = true;\n            }\n        }\n\n        if (!mute) {\n            // Remove the rule only if it is a muting rule\n            if (hasDontNotifyRule) {\n                promise = this.deletePushRule(scope, PushRuleKind.RoomSpecific, roomPushRule.rule_id);\n            }\n        } else {\n            if (!roomPushRule) {\n                promise = this.addPushRule(scope, PushRuleKind.RoomSpecific, roomId, {\n                    actions: [\"dont_notify\"],\n                });\n            } else if (!hasDontNotifyRule) {\n                // Remove the existing one before setting the mute push rule\n                // This is a workaround to SYN-590 (Push rule update fails)\n                const deferred = utils.defer();\n                this.deletePushRule(scope, PushRuleKind.RoomSpecific, roomPushRule.rule_id)\n                    .then(() => {\n                        this.addPushRule(scope, PushRuleKind.RoomSpecific, roomId, {\n                            actions: [\"dont_notify\"],\n                        }).then(() => {\n                            deferred.resolve();\n                        }).catch((err) => {\n                            deferred.reject(err);\n                        });\n                    }).catch((err) => {\n                        deferred.reject(err);\n                    });\n\n                promise = deferred.promise;\n            }\n        }\n\n        if (promise) {\n            return new Promise<void>((resolve, reject) => {\n                // Update this.pushRules when the operation completes\n                promise.then(() => {\n                    this.getPushRules().then((result) => {\n                        this.pushRules = result;\n                        resolve();\n                    }).catch((err) => {\n                        reject(err);\n                    });\n                }).catch((err: Error) => {\n                    // Update it even if the previous operation fails. This can help the\n                    // app to recover when push settings has been modifed from another client\n                    this.getPushRules().then((result) => {\n                        this.pushRules = result;\n                        reject(err);\n                    }).catch((err2) => {\n                        reject(err);\n                    });\n                });\n            });\n        }\n    }\n\n    public searchMessageText(opts: ISearchOpts, callback?: Callback): Promise<ISearchResponse> {\n        const roomEvents: ISearchRequestBody[\"search_categories\"][\"room_events\"] = {\n            search_term: opts.query,\n        };\n\n        if ('keys' in opts) {\n            roomEvents.keys = opts.keys;\n        }\n\n        return this.search({\n            body: {\n                search_categories: {\n                    room_events: roomEvents,\n                },\n            },\n        }, callback);\n    }\n\n    /**\n     * Perform a server-side search for room events.\n     *\n     * The returned promise resolves to an object containing the fields:\n     *\n     *  * {number}  count:       estimate of the number of results\n     *  * {string}  next_batch:  token for back-pagination; if undefined, there are\n     *                           no more results\n     *  * {Array}   highlights:  a list of words to highlight from the stemming\n     *                           algorithm\n     *  * {Array}   results:     a list of results\n     *\n     * Each entry in the results list is a {module:models/search-result.SearchResult}.\n     *\n     * @param {Object} opts\n     * @param {string} opts.term     the term to search for\n     * @param {Object} opts.filter   a JSON filter object to pass in the request\n     * @return {Promise} Resolves: result object\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public searchRoomEvents(opts: IEventSearchOpts): Promise<ISearchResults> {\n        // TODO: support search groups\n\n        const body = {\n            search_categories: {\n                room_events: {\n                    search_term: opts.term,\n                    filter: opts.filter,\n                    order_by: SearchOrderBy.Recent,\n                    event_context: {\n                        before_limit: 1,\n                        after_limit: 1,\n                        include_profile: true,\n                    },\n                },\n            },\n        };\n\n        const searchResults: ISearchResults = {\n            _query: body,\n            results: [],\n            highlights: [],\n        };\n\n        return this.search({ body: body }).then(res => this.processRoomEventsSearch(searchResults, res));\n    }\n\n    /**\n     * Take a result from an earlier searchRoomEvents call, and backfill results.\n     *\n     * @param  {object} searchResults  the results object to be updated\n     * @return {Promise} Resolves: updated result object\n     * @return {Error} Rejects: with an error response.\n     */\n    public backPaginateRoomEventsSearch<T extends ISearchResults>(searchResults: T): Promise<T> {\n        // TODO: we should implement a backoff (as per scrollback()) to deal more\n        // nicely with HTTP errors.\n\n        if (!searchResults.next_batch) {\n            return Promise.reject(new Error(\"Cannot backpaginate event search any further\"));\n        }\n\n        if (searchResults.pendingRequest) {\n            // already a request in progress - return the existing promise\n            return searchResults.pendingRequest as Promise<T>;\n        }\n\n        const searchOpts = {\n            body: searchResults._query,\n            next_batch: searchResults.next_batch,\n        };\n\n        const promise = this.search(searchOpts)\n            .then(res => this.processRoomEventsSearch(searchResults, res))\n            .finally(() => {\n                searchResults.pendingRequest = null;\n            });\n        searchResults.pendingRequest = promise;\n\n        return promise;\n    }\n\n    /**\n     * helper for searchRoomEvents and backPaginateRoomEventsSearch. Processes the\n     * response from the API call and updates the searchResults\n     *\n     * @param {Object} searchResults\n     * @param {Object} response\n     * @return {Object} searchResults\n     * @private\n     */\n    // XXX: Intended private, used in code\n    public processRoomEventsSearch<T extends ISearchResults>(searchResults: T, response: ISearchResponse): T {\n        const roomEvents = response.search_categories.room_events;\n\n        searchResults.count = roomEvents.count;\n        searchResults.next_batch = roomEvents.next_batch;\n\n        // combine the highlight list with our existing list;\n        const highlights = new Set<string>(roomEvents.highlights);\n        searchResults.highlights.forEach((hl) => {\n            highlights.add(hl);\n        });\n\n        // turn it back into a list.\n        searchResults.highlights = Array.from(highlights);\n\n        const mapper = this.getEventMapper();\n\n        // append the new results to our existing results\n        const resultsLength = roomEvents.results?.length ?? 0;\n        for (let i = 0; i < resultsLength; i++) {\n            const sr = SearchResult.fromJson(roomEvents.results[i], mapper);\n            const room = this.getRoom(sr.context.getEvent().getRoomId());\n            if (room) {\n                // Copy over a known event sender if we can\n                for (const ev of sr.context.getTimeline()) {\n                    const sender = room.getMember(ev.getSender());\n                    if (!ev.sender && sender) ev.sender = sender;\n                }\n            }\n            searchResults.results.push(sr);\n        }\n        return searchResults;\n    }\n\n    /**\n     * Populate the store with rooms the user has left.\n     * @return {Promise} Resolves: TODO - Resolved when the rooms have\n     * been added to the data store.\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public syncLeftRooms(): Promise<Room[]> {\n        // Guard against multiple calls whilst ongoing and multiple calls post success\n        if (this.syncedLeftRooms) {\n            return Promise.resolve([]); // don't call syncRooms again if it succeeded.\n        }\n        if (this.syncLeftRoomsPromise) {\n            return this.syncLeftRoomsPromise; // return the ongoing request\n        }\n        const syncApi = new SyncApi(this, this.clientOpts);\n        this.syncLeftRoomsPromise = syncApi.syncLeftRooms();\n\n        // cleanup locks\n        this.syncLeftRoomsPromise.then((res) => {\n            logger.log(\"Marking success of sync left room request\");\n            this.syncedLeftRooms = true; // flip the bit on success\n        }).finally(() => {\n            this.syncLeftRoomsPromise = null; // cleanup ongoing request state\n        });\n\n        return this.syncLeftRoomsPromise;\n    }\n\n    /**\n     * Create a new filter.\n     * @param {Object} content The HTTP body for the request\n     * @return {Filter} Resolves to a Filter object.\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public createFilter(content: IFilterDefinition): Promise<Filter> {\n        const path = utils.encodeUri(\"/user/$userId/filter\", {\n            $userId: this.credentials.userId,\n        });\n        // TODO types\n        return this.http.authedRequest<any>(undefined, Method.Post, path, undefined, content).then((response) => {\n            // persist the filter\n            const filter = Filter.fromJson(\n                this.credentials.userId, response.filter_id, content,\n            );\n            this.store.storeFilter(filter);\n            return filter;\n        });\n    }\n\n    /**\n     * Retrieve a filter.\n     * @param {string} userId The user ID of the filter owner\n     * @param {string} filterId The filter ID to retrieve\n     * @param {boolean} allowCached True to allow cached filters to be returned.\n     * Default: True.\n     * @return {Promise} Resolves: a Filter object\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public getFilter(userId: string, filterId: string, allowCached: boolean): Promise<Filter> {\n        if (allowCached) {\n            const filter = this.store.getFilter(userId, filterId);\n            if (filter) {\n                return Promise.resolve(filter);\n            }\n        }\n\n        const path = utils.encodeUri(\"/user/$userId/filter/$filterId\", {\n            $userId: userId,\n            $filterId: filterId,\n        });\n\n        return this.http.authedRequest<IFilterDefinition>(\n            undefined, Method.Get, path, undefined, undefined,\n        ).then((response) => {\n            // persist the filter\n            const filter = Filter.fromJson(userId, filterId, response);\n            this.store.storeFilter(filter);\n            return filter;\n        });\n    }\n\n    /**\n     * @param {string} filterName\n     * @param {Filter} filter\n     * @return {Promise<String>} Filter ID\n     */\n    public async getOrCreateFilter(filterName: string, filter: Filter): Promise<string> {\n        const filterId = this.store.getFilterIdByName(filterName);\n        let existingId = undefined;\n\n        if (filterId) {\n            // check that the existing filter matches our expectations\n            try {\n                const existingFilter =\n                    await this.getFilter(this.credentials.userId, filterId, true);\n                if (existingFilter) {\n                    const oldDef = existingFilter.getDefinition();\n                    const newDef = filter.getDefinition();\n\n                    if (utils.deepCompare(oldDef, newDef)) {\n                        // super, just use that.\n                        // debuglog(\"Using existing filter ID %s: %s\", filterId,\n                        //          JSON.stringify(oldDef));\n                        existingId = filterId;\n                    }\n                }\n            } catch (error) {\n                // Synapse currently returns the following when the filter cannot be found:\n                // {\n                //     errcode: \"M_UNKNOWN\",\n                //     name: \"M_UNKNOWN\",\n                //     message: \"No row found\",\n                // }\n                if (error.errcode !== \"M_UNKNOWN\" && error.errcode !== \"M_NOT_FOUND\") {\n                    throw error;\n                }\n            }\n            // if the filter doesn't exist anymore on the server, remove from store\n            if (!existingId) {\n                this.store.setFilterIdByName(filterName, undefined);\n            }\n        }\n\n        if (existingId) {\n            return existingId;\n        }\n\n        // create a new filter\n        const createdFilter = await this.createFilter(filter.getDefinition());\n\n        // debuglog(\"Created new filter ID %s: %s\", createdFilter.filterId,\n        //          JSON.stringify(createdFilter.getDefinition()));\n        this.store.setFilterIdByName(filterName, createdFilter.filterId);\n        return createdFilter.filterId;\n    }\n\n    /**\n     * Gets a bearer token from the homeserver that the user can\n     * present to a third party in order to prove their ownership\n     * of the Matrix account they are logged into.\n     * @return {Promise} Resolves: Token object\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public getOpenIdToken(): Promise<IOpenIDToken> {\n        const path = utils.encodeUri(\"/user/$userId/openid/request_token\", {\n            $userId: this.credentials.userId,\n        });\n\n        return this.http.authedRequest(\n            undefined, Method.Post, path, undefined, {},\n        );\n    }\n\n    private startCallEventHandler = (): void => {\n        if (this.isInitialSyncComplete()) {\n            this.callEventHandler.start();\n            this.off(ClientEvent.Sync, this.startCallEventHandler);\n        }\n    };\n\n    /**\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: ITurnServerResponse object\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public turnServer(callback?: Callback): Promise<ITurnServerResponse> {\n        return this.http.authedRequest(callback, Method.Get, \"/voip/turnServer\");\n    }\n\n    /**\n     * Get the TURN servers for this homeserver.\n     * @return {Array<Object>} The servers or an empty list.\n     */\n    public getTurnServers(): ITurnServer[] {\n        return this.turnServers || [];\n    }\n\n    /**\n     * Get the unix timestamp (in seconds) at which the current\n     * TURN credentials (from getTurnServers) expire\n     * @return {number} The expiry timestamp, in seconds, or null if no credentials\n     */\n    public getTurnServersExpiry(): number | null {\n        return this.turnServersExpiry;\n    }\n\n    // XXX: Intended private, used in code.\n    public async checkTurnServers(): Promise<boolean> {\n        if (!this.canSupportVoip) {\n            return;\n        }\n\n        let credentialsGood = false;\n        const remainingTime = this.turnServersExpiry - Date.now();\n        if (remainingTime > TURN_CHECK_INTERVAL) {\n            logger.debug(\"TURN creds are valid for another \" + remainingTime + \" ms: not fetching new ones.\");\n            credentialsGood = true;\n        } else {\n            logger.debug(\"Fetching new TURN credentials\");\n            try {\n                const res = await this.turnServer();\n                if (res.uris) {\n                    logger.log(\"Got TURN URIs: \" + res.uris + \" refresh in \" + res.ttl + \" secs\");\n                    // map the response to a format that can be fed to RTCPeerConnection\n                    const servers: ITurnServer = {\n                        urls: res.uris,\n                        username: res.username,\n                        credential: res.password,\n                    };\n                    this.turnServers = [servers];\n                    // The TTL is in seconds but we work in ms\n                    this.turnServersExpiry = Date.now() + (res.ttl * 1000);\n                    credentialsGood = true;\n                }\n            } catch (err) {\n                logger.error(\"Failed to get TURN URIs\", err);\n                // If we get a 403, there's no point in looping forever.\n                if (err.httpStatus === 403) {\n                    logger.info(\"TURN access unavailable for this account: stopping credentials checks\");\n                    if (this.checkTurnServersIntervalID !== null) global.clearInterval(this.checkTurnServersIntervalID);\n                    this.checkTurnServersIntervalID = null;\n                }\n            }\n            // otherwise, if we failed for whatever reason, try again the next time we're called.\n        }\n\n        return credentialsGood;\n    }\n\n    /**\n     * Set whether to allow a fallback ICE server should be used for negotiating a\n     * WebRTC connection if the homeserver doesn't provide any servers. Defaults to\n     * false.\n     *\n     * @param {boolean} allow\n     */\n    public setFallbackICEServerAllowed(allow: boolean) {\n        this.fallbackICEServerAllowed = allow;\n    }\n\n    /**\n     * Get whether to allow a fallback ICE server should be used for negotiating a\n     * WebRTC connection if the homeserver doesn't provide any servers. Defaults to\n     * false.\n     *\n     * @returns {boolean}\n     */\n    public isFallbackICEServerAllowed(): boolean {\n        return this.fallbackICEServerAllowed;\n    }\n\n    /**\n     * Determines if the current user is an administrator of the Synapse homeserver.\n     * Returns false if untrue or the homeserver does not appear to be a Synapse\n     * homeserver. <strong>This function is implementation specific and may change\n     * as a result.</strong>\n     * @return {boolean} true if the user appears to be a Synapse administrator.\n     */\n    public isSynapseAdministrator(): Promise<boolean> {\n        const path = utils.encodeUri(\n            \"/_synapse/admin/v1/users/$userId/admin\",\n            { $userId: this.getUserId() },\n        );\n        return this.http.authedRequest(\n            undefined, Method.Get, path, undefined, undefined, { prefix: '' },\n        ).then(r => r['admin']); // pull out the specific boolean we want\n    }\n\n    /**\n     * Performs a whois lookup on a user using Synapse's administrator API.\n     * <strong>This function is implementation specific and may change as a\n     * result.</strong>\n     * @param {string} userId the User ID to look up.\n     * @return {object} the whois response - see Synapse docs for information.\n     */\n    public whoisSynapseUser(userId: string): Promise<ISynapseAdminWhoisResponse> {\n        const path = utils.encodeUri(\n            \"/_synapse/admin/v1/whois/$userId\",\n            { $userId: userId },\n        );\n        return this.http.authedRequest(undefined, Method.Get, path, undefined, undefined, { prefix: '' });\n    }\n\n    /**\n     * Deactivates a user using Synapse's administrator API. <strong>This\n     * function is implementation specific and may change as a result.</strong>\n     * @param {string} userId the User ID to deactivate.\n     * @return {object} the deactivate response - see Synapse docs for information.\n     */\n    public deactivateSynapseUser(userId: string): Promise<ISynapseAdminDeactivateResponse> {\n        const path = utils.encodeUri(\n            \"/_synapse/admin/v1/deactivate/$userId\",\n            { $userId: userId },\n        );\n        return this.http.authedRequest(\n            undefined, Method.Post, path, undefined, undefined, { prefix: '' },\n        );\n    }\n\n    private async fetchClientWellKnown(): Promise<void> {\n        // `getRawClientConfig` does not throw or reject on network errors, instead\n        // it absorbs errors and returns `{}`.\n        this.clientWellKnownPromise = AutoDiscovery.getRawClientConfig(this.getDomain());\n        this.clientWellKnown = await this.clientWellKnownPromise;\n        this.emit(ClientEvent.ClientWellKnown, this.clientWellKnown);\n    }\n\n    public getClientWellKnown(): IClientWellKnown {\n        return this.clientWellKnown;\n    }\n\n    public waitForClientWellKnown(): Promise<IClientWellKnown> {\n        return this.clientWellKnownPromise;\n    }\n\n    /**\n     * store client options with boolean/string/numeric values\n     * to know in the next session what flags the sync data was\n     * created with (e.g. lazy loading)\n     * @param {object} opts the complete set of client options\n     * @return {Promise} for store operation\n     */\n    public storeClientOptions(): Promise<void> { // XXX: Intended private, used in code\n        const primTypes = [\"boolean\", \"string\", \"number\"];\n        const serializableOpts = Object.entries(this.clientOpts)\n            .filter(([key, value]) => {\n                return primTypes.includes(typeof value);\n            })\n            .reduce((obj, [key, value]) => {\n                obj[key] = value;\n                return obj;\n            }, {});\n        return this.store.storeClientOptions(serializableOpts);\n    }\n\n    /**\n     * Gets a set of room IDs in common with another user\n     * @param {string} userId The userId to check.\n     * @return {Promise<string[]>} Resolves to a set of rooms\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public async _unstable_getSharedRooms(userId: string): Promise<string[]> { // eslint-disable-line\n        const sharedRoomsSupport = await this.doesServerSupportUnstableFeature(\"uk.half-shot.msc2666\");\n        const mutualRoomsSupport = await this.doesServerSupportUnstableFeature(\"uk.half-shot.msc2666.mutual_rooms\");\n\n        if (!sharedRoomsSupport && !mutualRoomsSupport) {\n            throw Error('Server does not support mutual_rooms API');\n        }\n\n        const path = utils.encodeUri(\n            `/uk.half-shot.msc2666/user/${mutualRoomsSupport ? 'mutual_rooms' : 'shared_rooms'}/$userId`,\n            { $userId: userId },\n        );\n\n        const res = await this.http.authedRequest<{ joined: string[] }>(\n            undefined, Method.Get, path, undefined, undefined,\n            { prefix: PREFIX_UNSTABLE },\n        );\n        return res.joined;\n    }\n\n    /**\n     * Get the API versions supported by the server, along with any\n     * unstable APIs it supports\n     * @return {Promise<object>} The server /versions response\n     */\n    public getVersions(): Promise<IServerVersions> {\n        if (this.serverVersionsPromise) {\n            return this.serverVersionsPromise;\n        }\n\n        this.serverVersionsPromise = this.http.request<IServerVersions>(\n            undefined, // callback\n            Method.Get, \"/_matrix/client/versions\",\n            undefined, // queryParams\n            undefined, // data\n            {\n                prefix: '',\n            },\n        ).catch((e: Error) => {\n            // Need to unset this if it fails, otherwise we'll never retry\n            this.serverVersionsPromise = null;\n            // but rethrow the exception to anything that was waiting\n            throw e;\n        });\n\n        return this.serverVersionsPromise;\n    }\n\n    /**\n     * Check if a particular spec version is supported by the server.\n     * @param {string} version The spec version (such as \"r0.5.0\") to check for.\n     * @return {Promise<boolean>} Whether it is supported\n     */\n    public async isVersionSupported(version: string): Promise<boolean> {\n        const { versions } = await this.getVersions();\n        return versions && versions.includes(version);\n    }\n\n    /**\n     * Query the server to see if it supports members lazy loading\n     * @return {Promise<boolean>} true if server supports lazy loading\n     */\n    public async doesServerSupportLazyLoading(): Promise<boolean> {\n        const response = await this.getVersions();\n        if (!response) return false;\n\n        const versions = response[\"versions\"];\n        const unstableFeatures = response[\"unstable_features\"];\n\n        return (versions && versions.includes(\"r0.5.0\"))\n            || (unstableFeatures && unstableFeatures[\"m.lazy_load_members\"]);\n    }\n\n    /**\n     * Query the server to see if the `id_server` parameter is required\n     * when registering with an 3pid, adding a 3pid or resetting password.\n     * @return {Promise<boolean>} true if id_server parameter is required\n     */\n    public async doesServerRequireIdServerParam(): Promise<boolean> {\n        const response = await this.getVersions();\n        if (!response) return true;\n\n        const versions = response[\"versions\"];\n\n        // Supporting r0.6.0 is the same as having the flag set to false\n        if (versions && versions.includes(\"r0.6.0\")) {\n            return false;\n        }\n\n        const unstableFeatures = response[\"unstable_features\"];\n        if (!unstableFeatures) return true;\n        if (unstableFeatures[\"m.require_identity_server\"] === undefined) {\n            return true;\n        } else {\n            return unstableFeatures[\"m.require_identity_server\"];\n        }\n    }\n\n    /**\n     * Query the server to see if the `id_access_token` parameter can be safely\n     * passed to the homeserver. Some homeservers may trigger errors if they are not\n     * prepared for the new parameter.\n     * @return {Promise<boolean>} true if id_access_token can be sent\n     */\n    public async doesServerAcceptIdentityAccessToken(): Promise<boolean> {\n        const response = await this.getVersions();\n        if (!response) return false;\n\n        const versions = response[\"versions\"];\n        const unstableFeatures = response[\"unstable_features\"];\n        return (versions && versions.includes(\"r0.6.0\"))\n            || (unstableFeatures && unstableFeatures[\"m.id_access_token\"]);\n    }\n\n    /**\n     * Query the server to see if it supports separate 3PID add and bind functions.\n     * This affects the sequence of API calls clients should use for these operations,\n     * so it's helpful to be able to check for support.\n     * @return {Promise<boolean>} true if separate functions are supported\n     */\n    public async doesServerSupportSeparateAddAndBind(): Promise<boolean> {\n        const response = await this.getVersions();\n        if (!response) return false;\n\n        const versions = response[\"versions\"];\n        const unstableFeatures = response[\"unstable_features\"];\n\n        return (versions && versions.includes(\"r0.6.0\"))\n            || (unstableFeatures && unstableFeatures[\"m.separate_add_and_bind\"]);\n    }\n\n    /**\n     * Query the server to see if it lists support for an unstable feature\n     * in the /versions response\n     * @param {string} feature the feature name\n     * @return {Promise<boolean>} true if the feature is supported\n     */\n    public async doesServerSupportUnstableFeature(feature: string): Promise<boolean> {\n        const response = await this.getVersions();\n        if (!response) return false;\n        const unstableFeatures = response[\"unstable_features\"];\n        return unstableFeatures && !!unstableFeatures[feature];\n    }\n\n    /**\n     * Query the server to see if it is forcing encryption to be enabled for\n     * a given room preset, based on the /versions response.\n     * @param {Preset} presetName The name of the preset to check.\n     * @returns {Promise<boolean>} true if the server is forcing encryption\n     * for the preset.\n     */\n    public async doesServerForceEncryptionForPreset(presetName: Preset): Promise<boolean> {\n        const response = await this.getVersions();\n        if (!response) return false;\n        const unstableFeatures = response[\"unstable_features\"];\n\n        // The preset name in the versions response will be without the _chat suffix.\n        const versionsPresetName = presetName.includes(\"_chat\")\n            ? presetName.substring(0, presetName.indexOf(\"_chat\"))\n            : presetName;\n\n        return unstableFeatures && !!unstableFeatures[`io.element.e2ee_forced.${versionsPresetName}`];\n    }\n\n    public async doesServerSupportThread(): Promise<{\n        serverSupport: boolean;\n        stable: boolean;\n    } | null> {\n        try {\n            const hasUnstableSupport = await this.doesServerSupportUnstableFeature(\"org.matrix.msc3440\");\n            const hasStableSupport = await this.doesServerSupportUnstableFeature(\"org.matrix.msc3440.stable\")\n                || await this.isVersionSupported(\"v1.3\");\n\n            return {\n                serverSupport: hasUnstableSupport || hasStableSupport,\n                stable: hasStableSupport,\n            };\n        } catch (e) {\n            return null;\n        }\n    }\n\n    /**\n     * Query the server to see if it supports the MSC2457 `logout_devices` parameter when setting password\n     * @return {Promise<boolean>} true if server supports the `logout_devices` parameter\n     */\n    public doesServerSupportLogoutDevices(): Promise<boolean> {\n        return this.isVersionSupported(\"r0.6.1\");\n    }\n\n    /**\n     * Get if lazy loading members is being used.\n     * @return {boolean} Whether or not members are lazy loaded by this client\n     */\n    public hasLazyLoadMembersEnabled(): boolean {\n        return !!this.clientOpts.lazyLoadMembers;\n    }\n\n    /**\n     * Set a function which is called when /sync returns a 'limited' response.\n     * It is called with a room ID and returns a boolean. It should return 'true' if the SDK\n     * can SAFELY remove events from this room. It may not be safe to remove events if there\n     * are other references to the timelines for this room, e.g because the client is\n     * actively viewing events in this room.\n     * Default: returns false.\n     * @param {Function} cb The callback which will be invoked.\n     */\n    public setCanResetTimelineCallback(cb: ResetTimelineCallback) {\n        this.canResetTimelineCallback = cb;\n    }\n\n    /**\n     * Get the callback set via `setCanResetTimelineCallback`.\n     * @return {?Function} The callback or null\n     */\n    public getCanResetTimelineCallback(): ResetTimelineCallback {\n        return this.canResetTimelineCallback;\n    }\n\n    /**\n     * Returns relations for a given event. Handles encryption transparently,\n     * with the caveat that the amount of events returned might be 0, even though you get a nextBatch.\n     * When the returned promise resolves, all messages should have finished trying to decrypt.\n     * @param {string} roomId the room of the event\n     * @param {string} eventId the id of the event\n     * @param {string} relationType the rel_type of the relations requested\n     * @param {string} eventType the event type of the relations requested\n     * @param {Object} opts options with optional values for the request.\n     * @return {Object} an object with `events` as `MatrixEvent[]` and optionally `nextBatch` if more relations are available.\n     */\n    public async relations(\n        roomId: string,\n        eventId: string,\n        relationType?: RelationType | string | null,\n        eventType?: EventType | string | null,\n        opts: IRelationsRequestOpts = {},\n    ): Promise<{\n        originalEvent: MatrixEvent;\n        events: MatrixEvent[];\n        nextBatch?: string;\n        prevBatch?: string;\n    }> {\n        const fetchedEventType = this.getEncryptedIfNeededEventType(roomId, eventType);\n        const result = await this.fetchRelations(\n            roomId,\n            eventId,\n            relationType,\n            fetchedEventType,\n            opts);\n        const mapper = this.getEventMapper();\n\n        const originalEvent = result.original_event ? mapper(result.original_event) : undefined;\n        let events = result.chunk.map(mapper);\n\n        if (fetchedEventType === EventType.RoomMessageEncrypted) {\n            const allEvents = originalEvent ? events.concat(originalEvent) : events;\n            await Promise.all(allEvents.map(e => this.decryptEventIfNeeded(e)));\n            if (eventType !== null) {\n                events = events.filter(e => e.getType() === eventType);\n            }\n        }\n\n        if (originalEvent && relationType === RelationType.Replace) {\n            events = events.filter(e => e.getSender() === originalEvent.getSender());\n        }\n        return {\n            originalEvent,\n            events,\n            nextBatch: result.next_batch,\n            prevBatch: result.prev_batch,\n        };\n    }\n\n    /**\n     * The app may wish to see if we have a key cached without\n     * triggering a user interaction.\n     * @return {object}\n     */\n    public getCrossSigningCacheCallbacks(): ICacheCallbacks {\n        // XXX: Private member access\n        return this.crypto?.crossSigningInfo.getCacheCallbacks();\n    }\n\n    /**\n     * Generates a random string suitable for use as a client secret. <strong>This\n     * method is experimental and may change.</strong>\n     * @return {string} A new client secret\n     */\n    public generateClientSecret(): string {\n        return randomString(32);\n    }\n\n    /**\n     * Attempts to decrypt an event\n     * @param {MatrixEvent} event The event to decrypt\n     * @returns {Promise<void>} A decryption promise\n     * @param {object} options\n     * @param {boolean} options.isRetry True if this is a retry (enables more logging)\n     * @param {boolean} options.emit Emits \"event.decrypted\" if set to true\n     */\n    public decryptEventIfNeeded(event: MatrixEvent, options?: IDecryptOptions): Promise<void> {\n        if (event.shouldAttemptDecryption()) {\n            event.attemptDecryption(this.crypto, options);\n        }\n\n        if (event.isBeingDecrypted()) {\n            return event.getDecryptionPromise();\n        } else {\n            return Promise.resolve();\n        }\n    }\n\n    private termsUrlForService(serviceType: SERVICE_TYPES, baseUrl: string) {\n        switch (serviceType) {\n            case SERVICE_TYPES.IS:\n                return baseUrl + PREFIX_IDENTITY_V2 + '/terms';\n            case SERVICE_TYPES.IM:\n                return baseUrl + '/_matrix/integrations/v1/terms';\n            default:\n                throw new Error('Unsupported service type');\n        }\n    }\n\n    /**\n     * Get the Homeserver URL of this client\n     * @return {string} Homeserver URL of this client\n     */\n    public getHomeserverUrl(): string {\n        return this.baseUrl;\n    }\n\n    /**\n     * Get the identity server URL of this client\n     * @param {boolean} stripProto whether or not to strip the protocol from the URL\n     * @return {string} Identity server URL of this client\n     */\n    public getIdentityServerUrl(stripProto = false): string {\n        if (stripProto && (this.idBaseUrl.startsWith(\"http://\") ||\n            this.idBaseUrl.startsWith(\"https://\"))) {\n            return this.idBaseUrl.split(\"://\")[1];\n        }\n        return this.idBaseUrl;\n    }\n\n    /**\n     * Set the identity server URL of this client\n     * @param {string} url New identity server URL\n     */\n    public setIdentityServerUrl(url: string) {\n        this.idBaseUrl = utils.ensureNoTrailingSlash(url);\n        this.http.setIdBaseUrl(this.idBaseUrl);\n    }\n\n    /**\n     * Get the access token associated with this account.\n     * @return {?String} The access_token or null\n     */\n    public getAccessToken(): string {\n        return this.http.opts.accessToken || null;\n    }\n\n    /**\n     * Set the access token associated with this account.\n     * @param {string} token The new access token.\n     */\n    public setAccessToken(token: string) {\n        this.http.opts.accessToken = token;\n    }\n\n    /**\n     * @return {boolean} true if there is a valid access_token for this client.\n     */\n    public isLoggedIn(): boolean {\n        return this.http.opts.accessToken !== undefined;\n    }\n\n    /**\n     * Make up a new transaction id\n     *\n     * @return {string} a new, unique, transaction id\n     */\n    public makeTxnId(): string {\n        return \"m\" + new Date().getTime() + \".\" + (this.txnCtr++);\n    }\n\n    /**\n     * Check whether a username is available prior to registration. An error response\n     * indicates an invalid/unavailable username.\n     * @param {string} username The username to check the availability of.\n     * @return {Promise} Resolves: to boolean of whether the username is available.\n     */\n    public isUsernameAvailable(username: string): Promise<boolean> {\n        return this.http.authedRequest<{ available: true }>(\n            undefined, Method.Get, '/register/available', { username },\n        ).then((response) => {\n            return response.available;\n        }).catch(response => {\n            if (response.errcode === \"M_USER_IN_USE\") {\n                return false;\n            }\n            return Promise.reject(response);\n        });\n    }\n\n    /**\n     * @param {string} username\n     * @param {string} password\n     * @param {string} sessionId\n     * @param {Object} auth\n     * @param {Object} bindThreepids Set key 'email' to true to bind any email\n     *     threepid uses during registration in the identity server. Set 'msisdn' to\n     *     true to bind msisdn.\n     * @param {string} guestAccessToken\n     * @param {string} inhibitLogin\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: TODO\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public register(\n        username: string,\n        password: string,\n        sessionId: string | null,\n        auth: { session?: string, type: string },\n        bindThreepids?: boolean | null | { email?: boolean, msisdn?: boolean },\n        guestAccessToken?: string,\n        inhibitLogin?: boolean,\n        callback?: Callback,\n    ): Promise<any> { // TODO: Types (many)\n        // backwards compat\n        if (bindThreepids === true) {\n            bindThreepids = { email: true };\n        } else if (bindThreepids === null || bindThreepids === undefined || bindThreepids === false) {\n            bindThreepids = {};\n        }\n        if (typeof inhibitLogin === 'function') {\n            callback = inhibitLogin;\n            inhibitLogin = undefined;\n        }\n\n        if (sessionId) {\n            auth.session = sessionId;\n        }\n\n        const params: any = {\n            auth: auth,\n            refresh_token: true, // always ask for a refresh token - does nothing if unsupported\n        };\n        if (username !== undefined && username !== null) {\n            params.username = username;\n        }\n        if (password !== undefined && password !== null) {\n            params.password = password;\n        }\n        if (bindThreepids.email) {\n            params.bind_email = true;\n        }\n        if (bindThreepids.msisdn) {\n            params.bind_msisdn = true;\n        }\n        if (guestAccessToken !== undefined && guestAccessToken !== null) {\n            params.guest_access_token = guestAccessToken;\n        }\n        if (inhibitLogin !== undefined && inhibitLogin !== null) {\n            params.inhibit_login = inhibitLogin;\n        }\n        // Temporary parameter added to make the register endpoint advertise\n        // msisdn flows. This exists because there are clients that break\n        // when given stages they don't recognise. This parameter will cease\n        // to be necessary once these old clients are gone.\n        // Only send it if we send any params at all (the password param is\n        // mandatory, so if we send any params, we'll send the password param)\n        if (password !== undefined && password !== null) {\n            params.x_show_msisdn = true;\n        }\n\n        return this.registerRequest(params, undefined, callback);\n    }\n\n    /**\n     * Register a guest account.\n     * This method returns the auth info needed to create a new authenticated client,\n     * Remember to call `setGuest(true)` on the (guest-)authenticated client, e.g:\n     * ```javascript\n     * const tmpClient = await sdk.createClient(MATRIX_INSTANCE);\n     * const { user_id, device_id, access_token } = tmpClient.registerGuest();\n     * const client = createClient({\n     *   baseUrl: MATRIX_INSTANCE,\n     *   accessToken: access_token,\n     *   userId: user_id,\n     *   deviceId: device_id,\n     * })\n     * client.setGuest(true);\n     * ```\n     *\n     * @param {Object=} opts Registration options\n     * @param {Object} opts.body JSON HTTP body to provide.\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: JSON object that contains:\n     *                   { user_id, device_id, access_token, home_server }\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public registerGuest(opts: { body?: any }, callback?: Callback): Promise<any> { // TODO: Types\n        opts = opts || {};\n        opts.body = opts.body || {};\n        return this.registerRequest(opts.body, \"guest\", callback);\n    }\n\n    /**\n     * @param {Object} data   parameters for registration request\n     * @param {string=} kind  type of user to register. may be \"guest\"\n     * @param {module:client.callback=} callback\n     * @return {Promise} Resolves: to the /register response\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public registerRequest(data: any, kind?: string, callback?: Callback): Promise<any> { // TODO: Types\n        const params: any = {};\n        if (kind) {\n            params.kind = kind;\n        }\n\n        return this.http.request(callback, Method.Post, \"/register\", params, data);\n    }\n\n    /**\n     * Refreshes an access token using a provided refresh token. The refresh token\n     * must be valid for the current access token known to the client instance.\n     *\n     * Note that this function will not cause a logout if the token is deemed\n     * unknown by the server - the caller is responsible for managing logout\n     * actions on error.\n     * @param {string} refreshToken The refresh token.\n     * @return {Promise<IRefreshTokenResponse>} Resolves to the new token.\n     * @return {module:http-api.MatrixError} Rejects with an error response.\n     */\n    public refreshToken(refreshToken: string): Promise<IRefreshTokenResponse> {\n        return this.http.authedRequest(\n            undefined,\n            Method.Post,\n            \"/refresh\",\n            undefined,\n            { refresh_token: refreshToken },\n            {\n                prefix: PREFIX_V1,\n                inhibitLogoutEmit: true, // we don't want to cause logout loops\n            },\n        );\n    }\n\n    /**\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: TODO\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public loginFlows(callback?: Callback): Promise<any> { // TODO: Types\n        return this.http.request(callback, Method.Get, \"/login\");\n    }\n\n    /**\n     * @param {string} loginType\n     * @param {Object} data\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: TODO\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public login(loginType: string, data: any, callback?: Callback): Promise<any> { // TODO: Types\n        const loginData = {\n            type: loginType,\n        };\n\n        // merge data into loginData\n        Object.assign(loginData, data);\n\n        return this.http.authedRequest(\n            (error, response) => {\n                if (response && response.access_token && response.user_id) {\n                    this.http.opts.accessToken = response.access_token;\n                    this.credentials = {\n                        userId: response.user_id,\n                    };\n                }\n\n                if (callback) {\n                    callback(error, response);\n                }\n            }, Method.Post, \"/login\", undefined, loginData,\n        );\n    }\n\n    /**\n     * @param {string} user\n     * @param {string} password\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: TODO\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public loginWithPassword(user: string, password: string, callback?: Callback): Promise<any> { // TODO: Types\n        return this.login(\"m.login.password\", {\n            user: user,\n            password: password,\n        }, callback);\n    }\n\n    /**\n     * @param {string} relayState URL Callback after SAML2 Authentication\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: TODO\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public loginWithSAML2(relayState: string, callback?: Callback): Promise<any> { // TODO: Types\n        return this.login(\"m.login.saml2\", {\n            relay_state: relayState,\n        }, callback);\n    }\n\n    /**\n     * @param {string} redirectUrl The URL to redirect to after the HS\n     * authenticates with CAS.\n     * @return {string} The HS URL to hit to begin the CAS login process.\n     */\n    public getCasLoginUrl(redirectUrl: string): string {\n        return this.getSsoLoginUrl(redirectUrl, \"cas\");\n    }\n\n    /**\n     * @param {string} redirectUrl The URL to redirect to after the HS\n     *     authenticates with the SSO.\n     * @param {string} loginType The type of SSO login we are doing (sso or cas).\n     *     Defaults to 'sso'.\n     * @param {string} idpId The ID of the Identity Provider being targeted, optional.\n     * @return {string} The HS URL to hit to begin the SSO login process.\n     */\n    public getSsoLoginUrl(redirectUrl: string, loginType = \"sso\", idpId?: string): string {\n        let url = \"/login/\" + loginType + \"/redirect\";\n        if (idpId) {\n            url += \"/\" + idpId;\n        }\n\n        return this.http.getUrl(url, { redirectUrl }, PREFIX_R0);\n    }\n\n    /**\n     * @param {string} token Login token previously received from homeserver\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: TODO\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public loginWithToken(token: string, callback?: Callback): Promise<any> { // TODO: Types\n        return this.login(\"m.login.token\", {\n            token: token,\n        }, callback);\n    }\n\n    /**\n     * Logs out the current session.\n     * Obviously, further calls that require authorisation should fail after this\n     * method is called. The state of the MatrixClient object is not affected:\n     * it is up to the caller to either reset or destroy the MatrixClient after\n     * this method succeeds.\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: On success, the empty object\n     */\n    public async logout(callback?: Callback): Promise<{}> {\n        if (this.crypto?.backupManager?.getKeyBackupEnabled()) {\n            try {\n                while (await this.crypto.backupManager.backupPendingKeys(200) > 0);\n            } catch (err) {\n                logger.error(\n                    \"Key backup request failed when logging out. Some keys may be missing from backup\",\n                    err,\n                );\n            }\n        }\n        return this.http.authedRequest(\n            callback, Method.Post, '/logout',\n        );\n    }\n\n    /**\n     * Deactivates the logged-in account.\n     * Obviously, further calls that require authorisation should fail after this\n     * method is called. The state of the MatrixClient object is not affected:\n     * it is up to the caller to either reset or destroy the MatrixClient after\n     * this method succeeds.\n     * @param {object} auth Optional. Auth data to supply for User-Interactive auth.\n     * @param {boolean} erase Optional. If set, send as `erase` attribute in the\n     * JSON request body, indicating whether the account should be erased. Defaults\n     * to false.\n     * @return {Promise} Resolves: On success, the empty object\n     */\n    public deactivateAccount(auth?: any, erase?: boolean): Promise<{}> {\n        if (typeof (erase) === 'function') {\n            throw new Error('deactivateAccount no longer accepts a callback parameter');\n        }\n\n        const body: any = {};\n        if (auth) {\n            body.auth = auth;\n        }\n        if (erase !== undefined) {\n            body.erase = erase;\n        }\n\n        return this.http.authedRequest(undefined, Method.Post, '/account/deactivate', undefined, body);\n    }\n\n    /**\n     * Get the fallback URL to use for unknown interactive-auth stages.\n     *\n     * @param {string} loginType     the type of stage being attempted\n     * @param {string} authSessionId the auth session ID provided by the homeserver\n     *\n     * @return {string} HS URL to hit to for the fallback interface\n     */\n    public getFallbackAuthUrl(loginType: string, authSessionId: string): string {\n        const path = utils.encodeUri(\"/auth/$loginType/fallback/web\", {\n            $loginType: loginType,\n        });\n\n        return this.http.getUrl(path, {\n            session: authSessionId,\n        }, PREFIX_R0);\n    }\n\n    /**\n     * Create a new room.\n     * @param {Object} options a list of options to pass to the /createRoom API.\n     * @param {string} options.room_alias_name The alias localpart to assign to\n     * this room.\n     * @param {string} options.visibility Either 'public' or 'private'.\n     * @param {string[]} options.invite A list of user IDs to invite to this room.\n     * @param {string} options.name The name to give this room.\n     * @param {string} options.topic The topic to give this room.\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: <code>{room_id: {string}}</code>\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public async createRoom(\n        options: ICreateRoomOpts,\n        callback?: Callback,\n    ): Promise<{ room_id: string }> { // eslint-disable-line camelcase\n        // some valid options include: room_alias_name, visibility, invite\n\n        // inject the id_access_token if inviting 3rd party addresses\n        const invitesNeedingToken = (options.invite_3pid || [])\n            .filter(i => !i.id_access_token);\n        if (\n            invitesNeedingToken.length > 0 &&\n            this.identityServer &&\n            this.identityServer.getAccessToken &&\n            await this.doesServerAcceptIdentityAccessToken()\n        ) {\n            const identityAccessToken = await this.identityServer.getAccessToken();\n            if (identityAccessToken) {\n                for (const invite of invitesNeedingToken) {\n                    invite.id_access_token = identityAccessToken;\n                }\n            }\n        }\n\n        return this.http.authedRequest(callback, Method.Post, \"/createRoom\", undefined, options);\n    }\n\n    /**\n     * Fetches relations for a given event\n     * @param {string} roomId the room of the event\n     * @param {string} eventId the id of the event\n     * @param {string} [relationType] the rel_type of the relations requested\n     * @param {string} [eventType] the event type of the relations requested\n     * @param {Object} [opts] options with optional values for the request.\n    * @return {Object} the response, with chunk, prev_batch and, next_batch.\n     */\n    public async fetchRelations(\n        roomId: string,\n        eventId: string,\n        relationType?: RelationType | string | null,\n        eventType?: EventType | string | null,\n        opts: IRelationsRequestOpts = {},\n    ): Promise<IRelationsResponse> {\n        const queryString = utils.encodeParams(opts as Record<string, string | number>);\n\n        let templatedUrl = \"/rooms/$roomId/relations/$eventId\";\n        if (relationType !== null) {\n            templatedUrl += \"/$relationType\";\n            if (eventType !== null) {\n                templatedUrl += \"/$eventType\";\n            }\n        } else if (eventType !== null) {\n            logger.warn(`eventType: ${eventType} ignored when fetching\n            relations as relationType is null`);\n            eventType = null;\n        }\n\n        const path = utils.encodeUri(\n            templatedUrl + \"?\" + queryString, {\n                $roomId: roomId,\n                $eventId: eventId,\n                $relationType: relationType,\n                $eventType: eventType,\n            });\n        return await this.http.authedRequest(\n            undefined, Method.Get, path, null, null, {\n                prefix: PREFIX_UNSTABLE,\n            },\n        );\n    }\n\n    /**\n     * @param {string} roomId\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: TODO\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public roomState(roomId: string, callback?: Callback): Promise<IStateEventWithRoomId[]> {\n        const path = utils.encodeUri(\"/rooms/$roomId/state\", { $roomId: roomId });\n        return this.http.authedRequest(callback, Method.Get, path);\n    }\n\n    /**\n     * Get an event in a room by its event id.\n     * @param {string} roomId\n     * @param {string} eventId\n     * @param {module:client.callback} callback Optional.\n     *\n     * @return {Promise} Resolves to an object containing the event.\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public fetchRoomEvent(\n        roomId: string,\n        eventId: string,\n        callback?: Callback,\n    ): Promise<IMinimalEvent> {\n        const path = utils.encodeUri(\n            \"/rooms/$roomId/event/$eventId\", {\n                $roomId: roomId,\n                $eventId: eventId,\n            },\n        );\n        return this.http.authedRequest(callback, Method.Get, path);\n    }\n\n    /**\n     * @param {string} roomId\n     * @param {string} includeMembership the membership type to include in the response\n     * @param {string} excludeMembership the membership type to exclude from the response\n     * @param {string} atEventId the id of the event for which moment in the timeline the members should be returned for\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: dictionary of userid to profile information\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public members(\n        roomId: string,\n        includeMembership?: string[],\n        excludeMembership?: string[],\n        atEventId?: string,\n        callback?: Callback,\n    ): Promise<{ [userId: string]: IStateEventWithRoomId }> {\n        const queryParams: any = {};\n        if (includeMembership) {\n            queryParams.membership = includeMembership;\n        }\n        if (excludeMembership) {\n            queryParams.not_membership = excludeMembership;\n        }\n        if (atEventId) {\n            queryParams.at = atEventId;\n        }\n\n        const queryString = utils.encodeParams(queryParams);\n\n        const path = utils.encodeUri(\"/rooms/$roomId/members?\" + queryString,\n            { $roomId: roomId });\n        return this.http.authedRequest(callback, Method.Get, path);\n    }\n\n    /**\n     * Upgrades a room to a new protocol version\n     * @param {string} roomId\n     * @param {string} newVersion The target version to upgrade to\n     * @return {Promise} Resolves: Object with key 'replacement_room'\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public upgradeRoom(\n        roomId: string,\n        newVersion: string,\n    ): Promise<{ replacement_room: string }> { // eslint-disable-line camelcase\n        const path = utils.encodeUri(\"/rooms/$roomId/upgrade\", { $roomId: roomId });\n        return this.http.authedRequest(\n            undefined, Method.Post, path, undefined, { new_version: newVersion },\n        );\n    }\n\n    /**\n     * Retrieve a state event.\n     * @param {string} roomId\n     * @param {string} eventType\n     * @param {string} stateKey\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: TODO\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public getStateEvent(\n        roomId: string,\n        eventType: string,\n        stateKey: string,\n        callback?: Callback,\n    ): Promise<Record<string, any>> {\n        const pathParams = {\n            $roomId: roomId,\n            $eventType: eventType,\n            $stateKey: stateKey,\n        };\n        let path = utils.encodeUri(\"/rooms/$roomId/state/$eventType\", pathParams);\n        if (stateKey !== undefined) {\n            path = utils.encodeUri(path + \"/$stateKey\", pathParams);\n        }\n        return this.http.authedRequest(\n            callback, Method.Get, path,\n        );\n    }\n\n    /**\n     * @param {string} roomId\n     * @param {string} eventType\n     * @param {Object} content\n     * @param {string} stateKey\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: TODO\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public sendStateEvent(\n        roomId: string,\n        eventType: string,\n        content: any,\n        stateKey = \"\",\n        callback?: Callback,\n    ): Promise<ISendEventResponse> {\n        const pathParams = {\n            $roomId: roomId,\n            $eventType: eventType,\n            $stateKey: stateKey,\n        };\n        let path = utils.encodeUri(\"/rooms/$roomId/state/$eventType\", pathParams);\n        if (stateKey !== undefined) {\n            path = utils.encodeUri(path + \"/$stateKey\", pathParams);\n        }\n        return this.http.authedRequest(callback, Method.Put, path, undefined, content);\n    }\n\n    /**\n     * @param {string} roomId\n     * @param {Number} limit\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: TODO\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public roomInitialSync(roomId: string, limit: number, callback?: Callback): Promise<IRoomInitialSyncResponse> {\n        if (utils.isFunction(limit)) {\n            callback = limit as any as Callback; // legacy\n            limit = undefined;\n        }\n\n        const path = utils.encodeUri(\"/rooms/$roomId/initialSync\",\n            { $roomId: roomId },\n        );\n\n        return this.http.authedRequest(callback, Method.Get, path, { limit: limit?.toString() ?? \"30\" });\n    }\n\n    /**\n     * Set a marker to indicate the point in a room before which the user has read every\n     * event. This can be retrieved from room account data (the event type is `m.fully_read`)\n     * and displayed as a horizontal line in the timeline that is visually distinct to the\n     * position of the user's own read receipt.\n     * @param {string} roomId ID of the room that has been read\n     * @param {string} rmEventId ID of the event that has been read\n     * @param {string} rrEventId ID of the event tracked by the read receipt. This is here\n     * for convenience because the RR and the RM are commonly updated at the same time as\n     * each other. Optional.\n     * @param {object} opts Options for the read markers.\n     * @param {object} opts.hidden True to hide the read receipt from other users. <b>This\n     * property is currently unstable and may change in the future.</b>\n     * @return {Promise} Resolves: the empty object, {}.\n     */\n    public setRoomReadMarkersHttpRequest(\n        roomId: string,\n        rmEventId: string,\n        rrEventId: string,\n        opts: { hidden?: boolean },\n    ): Promise<{}> {\n        const path = utils.encodeUri(\"/rooms/$roomId/read_markers\", {\n            $roomId: roomId,\n        });\n\n        const content = {\n            \"m.fully_read\": rmEventId,\n            \"m.read\": rrEventId,\n            \"org.matrix.msc2285.hidden\": Boolean(opts ? opts.hidden : false),\n        };\n\n        return this.http.authedRequest(undefined, Method.Post, path, undefined, content);\n    }\n\n    /**\n     * @return {Promise} Resolves: A list of the user's current rooms\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public getJoinedRooms(): Promise<IJoinedRoomsResponse> {\n        const path = utils.encodeUri(\"/joined_rooms\", {});\n        return this.http.authedRequest(undefined, Method.Get, path);\n    }\n\n    /**\n     * Retrieve membership info. for a room.\n     * @param {string} roomId ID of the room to get membership for\n     * @return {Promise} Resolves: A list of currently joined users\n     *                                 and their profile data.\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public getJoinedRoomMembers(roomId: string): Promise<IJoinedMembersResponse> {\n        const path = utils.encodeUri(\"/rooms/$roomId/joined_members\", {\n            $roomId: roomId,\n        });\n        return this.http.authedRequest(undefined, Method.Get, path);\n    }\n\n    /**\n     * @param {Object} options Options for this request\n     * @param {string} options.server The remote server to query for the room list.\n     *                                Optional. If unspecified, get the local home\n     *                                server's public room list.\n     * @param {number} options.limit Maximum number of entries to return\n     * @param {string} options.since Token to paginate from\n     * @param {object} options.filter Filter parameters\n     * @param {string} options.filter.generic_search_term String to search for\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: TODO\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public publicRooms(options: IRoomDirectoryOptions, callback?: Callback): Promise<IPublicRoomsResponse> {\n        if (typeof (options) == 'function') {\n            callback = options;\n            options = {};\n        }\n        if (options === undefined) {\n            options = {};\n        }\n\n        const queryParams: any = {};\n        if (options.server) {\n            queryParams.server = options.server;\n            delete options.server;\n        }\n\n        if (Object.keys(options).length === 0 && Object.keys(queryParams).length === 0) {\n            return this.http.authedRequest(callback, Method.Get, \"/publicRooms\");\n        } else {\n            return this.http.authedRequest(callback, Method.Post, \"/publicRooms\", queryParams, options);\n        }\n    }\n\n    /**\n     * Create an alias to room ID mapping.\n     * @param {string} alias The room alias to create.\n     * @param {string} roomId The room ID to link the alias to.\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: an empty object {}\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public createAlias(alias: string, roomId: string, callback?: Callback): Promise<{}> {\n        const path = utils.encodeUri(\"/directory/room/$alias\", {\n            $alias: alias,\n        });\n        const data = {\n            room_id: roomId,\n        };\n        return this.http.authedRequest(callback, Method.Put, path, undefined, data);\n    }\n\n    /**\n     * Delete an alias to room ID mapping.  This alias must be on your local server\n     * and you must have sufficient access to do this operation.\n     * @param {string} alias The room alias to delete.\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: an empty object.\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public deleteAlias(alias: string, callback?: Callback): Promise<{}> {\n        const path = utils.encodeUri(\"/directory/room/$alias\", {\n            $alias: alias,\n        });\n        return this.http.authedRequest(callback, Method.Delete, path, undefined, undefined);\n    }\n\n    /**\n     * @param {string} roomId\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: an object with an `aliases` property, containing an array of local aliases\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public unstableGetLocalAliases(roomId: string, callback?: Callback): Promise<{ aliases: string[] }> {\n        const path = utils.encodeUri(\"/rooms/$roomId/aliases\",\n            { $roomId: roomId });\n        const prefix = PREFIX_UNSTABLE + \"/org.matrix.msc2432\";\n        return this.http.authedRequest(callback, Method.Get, path, null, null, { prefix });\n    }\n\n    /**\n     * Get room info for the given alias.\n     * @param {string} alias The room alias to resolve.\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: Object with room_id and servers.\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public getRoomIdForAlias(\n        alias: string,\n        callback?: Callback,\n    ): Promise<{ room_id: string, servers: string[] }> { // eslint-disable-line camelcase\n        // TODO: deprecate this or resolveRoomAlias\n        const path = utils.encodeUri(\"/directory/room/$alias\", {\n            $alias: alias,\n        });\n        return this.http.authedRequest(callback, Method.Get, path);\n    }\n\n    /**\n     * @param {string} roomAlias\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: Object with room_id and servers.\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    // eslint-disable-next-line camelcase\n    public resolveRoomAlias(roomAlias: string, callback?: Callback): Promise<{ room_id: string, servers: string[] }> {\n        // TODO: deprecate this or getRoomIdForAlias\n        const path = utils.encodeUri(\"/directory/room/$alias\", { $alias: roomAlias });\n        return this.http.request(callback, Method.Get, path);\n    }\n\n    /**\n     * Get the visibility of a room in the current HS's room directory\n     * @param {string} roomId\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: TODO\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public getRoomDirectoryVisibility(roomId: string, callback?: Callback): Promise<{ visibility: Visibility }> {\n        const path = utils.encodeUri(\"/directory/list/room/$roomId\", {\n            $roomId: roomId,\n        });\n        return this.http.authedRequest(callback, Method.Get, path);\n    }\n\n    /**\n     * Set the visbility of a room in the current HS's room directory\n     * @param {string} roomId\n     * @param {string} visibility \"public\" to make the room visible\n     *                 in the public directory, or \"private\" to make\n     *                 it invisible.\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: result object\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public setRoomDirectoryVisibility(roomId: string, visibility: Visibility, callback?: Callback): Promise<{}> {\n        const path = utils.encodeUri(\"/directory/list/room/$roomId\", {\n            $roomId: roomId,\n        });\n        return this.http.authedRequest(callback, Method.Put, path, undefined, { visibility });\n    }\n\n    /**\n     * Set the visbility of a room bridged to a 3rd party network in\n     * the current HS's room directory.\n     * @param {string} networkId the network ID of the 3rd party\n     *                 instance under which this room is published under.\n     * @param {string} roomId\n     * @param {string} visibility \"public\" to make the room visible\n     *                 in the public directory, or \"private\" to make\n     *                 it invisible.\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: result object\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public setRoomDirectoryVisibilityAppService(\n        networkId: string,\n        roomId: string,\n        visibility: \"public\" | \"private\",\n        callback?: Callback,\n    ): Promise<any> { // TODO: Types\n        const path = utils.encodeUri(\"/directory/list/appservice/$networkId/$roomId\", {\n            $networkId: networkId,\n            $roomId: roomId,\n        });\n        return this.http.authedRequest(\n            callback, Method.Put, path, undefined, { \"visibility\": visibility },\n        );\n    }\n\n    /**\n     * Query the user directory with a term matching user IDs, display names and domains.\n     * @param {object} opts options\n     * @param {string} opts.term the term with which to search.\n     * @param {number} opts.limit the maximum number of results to return. The server will\n     *                 apply a limit if unspecified.\n     * @return {Promise} Resolves: an array of results.\n     */\n    public searchUserDirectory(opts: { term: string, limit?: number }): Promise<IUserDirectoryResponse> {\n        const body: any = {\n            search_term: opts.term,\n        };\n\n        if (opts.limit !== undefined) {\n            body.limit = opts.limit;\n        }\n\n        return this.http.authedRequest(undefined, Method.Post, \"/user_directory/search\", undefined, body);\n    }\n\n    /**\n     * Upload a file to the media repository on the homeserver.\n     *\n     * @param {object} file The object to upload. On a browser, something that\n     *   can be sent to XMLHttpRequest.send (typically a File).  Under node.js,\n     *   a a Buffer, String or ReadStream.\n     *\n     * @param {object} opts  options object\n     *\n     * @param {string=} opts.name   Name to give the file on the server. Defaults\n     *   to <tt>file.name</tt>.\n     *\n     * @param {boolean=} opts.includeFilename if false will not send the filename,\n     *   e.g for encrypted file uploads where filename leaks are undesirable.\n     *   Defaults to true.\n     *\n     * @param {string=} opts.type   Content-type for the upload. Defaults to\n     *   <tt>file.type</tt>, or <tt>applicaton/octet-stream</tt>.\n     *\n     * @param {boolean=} opts.rawResponse Return the raw body, rather than\n     *   parsing the JSON. Defaults to false (except on node.js, where it\n     *   defaults to true for backwards compatibility).\n     *\n     * @param {boolean=} opts.onlyContentUri Just return the content URI,\n     *   rather than the whole body. Defaults to false (except on browsers,\n     *   where it defaults to true for backwards compatibility). Ignored if\n     *   opts.rawResponse is true.\n     *\n     * @param {Function=} opts.callback Deprecated. Optional. The callback to\n     *    invoke on success/failure. See the promise return values for more\n     *    information.\n     *\n     * @param {Function=} opts.progressHandler Optional. Called when a chunk of\n     *    data has been uploaded, with an object containing the fields `loaded`\n     *    (number of bytes transferred) and `total` (total size, if known).\n     *\n     * @return {Promise} Resolves to response object, as\n     *    determined by this.opts.onlyData, opts.rawResponse, and\n     *    opts.onlyContentUri.  Rejects with an error (usually a MatrixError).\n     */\n    public uploadContent<O extends IUploadOpts>(\n        file: FileType,\n        opts?: O,\n    ): IAbortablePromise<UploadContentResponseType<O>> {\n        return this.http.uploadContent<O>(file, opts);\n    }\n\n    /**\n     * Cancel a file upload in progress\n     * @param {Promise} promise The promise returned from uploadContent\n     * @return {boolean} true if canceled, otherwise false\n     */\n    public cancelUpload(promise: IAbortablePromise<any>): boolean {\n        return this.http.cancelUpload(promise);\n    }\n\n    /**\n     * Get a list of all file uploads in progress\n     * @return {array} Array of objects representing current uploads.\n     * Currently in progress is element 0. Keys:\n     *  - promise: The promise associated with the upload\n     *  - loaded: Number of bytes uploaded\n     *  - total: Total number of bytes to upload\n     */\n    public getCurrentUploads(): IUpload[] {\n        return this.http.getCurrentUploads();\n    }\n\n    /**\n     * @param {string} userId\n     * @param {string} info The kind of info to retrieve (e.g. 'displayname',\n     * 'avatar_url').\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: TODO\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public getProfileInfo(\n        userId: string,\n        info?: string,\n        callback?: Callback,\n        // eslint-disable-next-line camelcase\n    ): Promise<{ avatar_url?: string, displayname?: string }> {\n        if (utils.isFunction(info)) {\n            callback = info as any as Callback; // legacy\n            info = undefined;\n        }\n\n        const path = info ?\n            utils.encodeUri(\"/profile/$userId/$info\",\n                { $userId: userId, $info: info }) :\n            utils.encodeUri(\"/profile/$userId\",\n                { $userId: userId });\n        return this.http.authedRequest(callback, Method.Get, path);\n    }\n\n    /**\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves to a list of the user's threepids.\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public getThreePids(callback?: Callback): Promise<{ threepids: IThreepid[] }> {\n        const path = \"/account/3pid\";\n        return this.http.authedRequest(callback, Method.Get, path, undefined, undefined);\n    }\n\n    /**\n     * Add a 3PID to your homeserver account and optionally bind it to an identity\n     * server as well. An identity server is required as part of the `creds` object.\n     *\n     * This API is deprecated, and you should instead use `addThreePidOnly`\n     * for homeservers that support it.\n     *\n     * @param {Object} creds\n     * @param {boolean} bind\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: on success\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public addThreePid(creds: any, bind: boolean, callback?: Callback): Promise<any> { // TODO: Types\n        const path = \"/account/3pid\";\n        const data = {\n            'threePidCreds': creds,\n            'bind': bind,\n        };\n        return this.http.authedRequest(\n            callback, Method.Post, path, null, data,\n        );\n    }\n\n    /**\n     * Add a 3PID to your homeserver account. This API does not use an identity\n     * server, as the homeserver is expected to handle 3PID ownership validation.\n     *\n     * You can check whether a homeserver supports this API via\n     * `doesServerSupportSeparateAddAndBind`.\n     *\n     * @param {Object} data A object with 3PID validation data from having called\n     * `account/3pid/<medium>/requestToken` on the homeserver.\n     * @return {Promise} Resolves: on success\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public async addThreePidOnly(data: IAddThreePidOnlyBody): Promise<{}> {\n        const path = \"/account/3pid/add\";\n        const prefix = await this.isVersionSupported(\"r0.6.0\") ? PREFIX_R0 : PREFIX_UNSTABLE;\n        return this.http.authedRequest(undefined, Method.Post, path, null, data, { prefix });\n    }\n\n    /**\n     * Bind a 3PID for discovery onto an identity server via the homeserver. The\n     * identity server handles 3PID ownership validation and the homeserver records\n     * the new binding to track where all 3PIDs for the account are bound.\n     *\n     * You can check whether a homeserver supports this API via\n     * `doesServerSupportSeparateAddAndBind`.\n     *\n     * @param {Object} data A object with 3PID validation data from having called\n     * `validate/<medium>/requestToken` on the identity server. It should also\n     * contain `id_server` and `id_access_token` fields as well.\n     * @return {Promise} Resolves: on success\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public async bindThreePid(data: IBindThreePidBody): Promise<{}> {\n        const path = \"/account/3pid/bind\";\n        const prefix = await this.isVersionSupported(\"r0.6.0\") ?\n            PREFIX_R0 : PREFIX_UNSTABLE;\n        return this.http.authedRequest(\n            undefined, Method.Post, path, null, data, { prefix },\n        );\n    }\n\n    /**\n     * Unbind a 3PID for discovery on an identity server via the homeserver. The\n     * homeserver removes its record of the binding to keep an updated record of\n     * where all 3PIDs for the account are bound.\n     *\n     * @param {string} medium The threepid medium (eg. 'email')\n     * @param {string} address The threepid address (eg. 'bob@example.com')\n     *        this must be as returned by getThreePids.\n     * @return {Promise} Resolves: on success\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public async unbindThreePid(\n        medium: string,\n        address: string,\n        // eslint-disable-next-line camelcase\n    ): Promise<{ id_server_unbind_result: IdServerUnbindResult }> {\n        const path = \"/account/3pid/unbind\";\n        const data = {\n            medium,\n            address,\n            id_server: this.getIdentityServerUrl(true),\n        };\n        const prefix = await this.isVersionSupported(\"r0.6.0\") ? PREFIX_R0 : PREFIX_UNSTABLE;\n        return this.http.authedRequest(undefined, Method.Post, path, null, data, { prefix });\n    }\n\n    /**\n     * @param {string} medium The threepid medium (eg. 'email')\n     * @param {string} address The threepid address (eg. 'bob@example.com')\n     *        this must be as returned by getThreePids.\n     * @return {Promise} Resolves: The server response on success\n     *     (generally the empty JSON object)\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public deleteThreePid(\n        medium: string,\n        address: string,\n        // eslint-disable-next-line camelcase\n    ): Promise<{ id_server_unbind_result: IdServerUnbindResult }> {\n        const path = \"/account/3pid/delete\";\n        return this.http.authedRequest(undefined, Method.Post, path, null, { medium, address });\n    }\n\n    /**\n     * Make a request to change your password.\n     * @param {Object} authDict\n     * @param {string} newPassword The new desired password.\n     * @param {boolean} logoutDevices Should all sessions be logged out after the password change. Defaults to true.\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: TODO\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public setPassword(\n        authDict: any,\n        newPassword: string,\n        callback?: Callback,\n    ): Promise<{}>;\n    public setPassword(\n        authDict: any,\n        newPassword: string,\n        logoutDevices: boolean,\n        callback?: Callback,\n    ): Promise<{}>;\n    public setPassword(\n        authDict: any,\n        newPassword: string,\n        logoutDevices?: Callback | boolean,\n        callback?: Callback,\n    ): Promise<{}> {\n        if (typeof logoutDevices === 'function') {\n            callback = logoutDevices;\n        }\n        if (typeof logoutDevices !== 'boolean') {\n            // Use backwards compatible behaviour of not specifying logout_devices\n            // This way it is left up to the server:\n            logoutDevices = undefined;\n        }\n\n        const path = \"/account/password\";\n        const data = {\n            'auth': authDict,\n            'new_password': newPassword,\n            'logout_devices': logoutDevices,\n        };\n\n        return this.http.authedRequest<{}>(\n            callback, Method.Post, path, null, data,\n        );\n    }\n\n    /**\n     * Gets all devices recorded for the logged-in user\n     * @return {Promise} Resolves: result object\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public getDevices(): Promise<{ devices: IMyDevice[] }> {\n        return this.http.authedRequest(undefined, Method.Get, \"/devices\", undefined, undefined);\n    }\n\n    /**\n     * Gets specific device details for the logged-in user\n     * @param {string} deviceId  device to query\n     * @return {Promise} Resolves: result object\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public getDevice(deviceId: string): Promise<IMyDevice> {\n        const path = utils.encodeUri(\"/devices/$device_id\", {\n            $device_id: deviceId,\n        });\n        return this.http.authedRequest(undefined, Method.Get, path, undefined, undefined);\n    }\n\n    /**\n     * Update the given device\n     *\n     * @param {string} deviceId  device to update\n     * @param {Object} body       body of request\n     * @return {Promise} Resolves: result object\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    // eslint-disable-next-line camelcase\n    public setDeviceDetails(deviceId: string, body: { display_name: string }): Promise<{}> {\n        const path = utils.encodeUri(\"/devices/$device_id\", {\n            $device_id: deviceId,\n        });\n\n        return this.http.authedRequest(undefined, Method.Put, path, undefined, body);\n    }\n\n    /**\n     * Delete the given device\n     *\n     * @param {string} deviceId  device to delete\n     * @param {object} auth Optional. Auth data to supply for User-Interactive auth.\n     * @return {Promise} Resolves: result object\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public deleteDevice(deviceId: string, auth?: any): Promise<any> { // TODO: Types\n        const path = utils.encodeUri(\"/devices/$device_id\", {\n            $device_id: deviceId,\n        });\n\n        const body: any = {};\n\n        if (auth) {\n            body.auth = auth;\n        }\n\n        return this.http.authedRequest(undefined, Method.Delete, path, undefined, body);\n    }\n\n    /**\n     * Delete multiple device\n     *\n     * @param {string[]} devices IDs of the devices to delete\n     * @param {object} auth Optional. Auth data to supply for User-Interactive auth.\n     * @return {Promise} Resolves: result object\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public deleteMultipleDevices(devices: string[], auth?: any): Promise<any> { // TODO: Types\n        const body: any = { devices };\n\n        if (auth) {\n            body.auth = auth;\n        }\n\n        const path = \"/delete_devices\";\n        return this.http.authedRequest(undefined, Method.Post, path, undefined, body);\n    }\n\n    /**\n     * Gets all pushers registered for the logged-in user\n     *\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: Array of objects representing pushers\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public getPushers(callback?: Callback): Promise<{ pushers: IPusher[] }> {\n        const path = \"/pushers\";\n        return this.http.authedRequest(callback, Method.Get, path, undefined, undefined);\n    }\n\n    /**\n     * Adds a new pusher or updates an existing pusher\n     *\n     * @param {IPusherRequest} pusher Object representing a pusher\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: Empty json object on success\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public setPusher(pusher: IPusherRequest, callback?: Callback): Promise<{}> {\n        const path = \"/pushers/set\";\n        return this.http.authedRequest(callback, Method.Post, path, null, pusher);\n    }\n\n    /**\n     * Get the push rules for the account from the server.\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves to the push rules.\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public getPushRules(callback?: Callback): Promise<IPushRules> {\n        return this.http.authedRequest(callback, Method.Get, \"/pushrules/\").then((rules: IPushRules) => {\n            return PushProcessor.rewriteDefaultRules(rules);\n        });\n    }\n\n    /**\n     * @param {string} scope\n     * @param {string} kind\n     * @param {string} ruleId\n     * @param {Object} body\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: an empty object {}\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public addPushRule(\n        scope: string,\n        kind: PushRuleKind,\n        ruleId: Exclude<string, RuleId>,\n        body: any,\n        callback?: Callback,\n    ): Promise<any> { // TODO: Types\n        // NB. Scope not uri encoded because devices need the '/'\n        const path = utils.encodeUri(\"/pushrules/\" + scope + \"/$kind/$ruleId\", {\n            $kind: kind,\n            $ruleId: ruleId,\n        });\n        return this.http.authedRequest(callback, Method.Put, path, undefined, body);\n    }\n\n    /**\n     * @param {string} scope\n     * @param {string} kind\n     * @param {string} ruleId\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: an empty object {}\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public deletePushRule(\n        scope: string,\n        kind: PushRuleKind,\n        ruleId: Exclude<string, RuleId>,\n        callback?: Callback,\n    ): Promise<any> { // TODO: Types\n        // NB. Scope not uri encoded because devices need the '/'\n        const path = utils.encodeUri(\"/pushrules/\" + scope + \"/$kind/$ruleId\", {\n            $kind: kind,\n            $ruleId: ruleId,\n        });\n        return this.http.authedRequest(callback, Method.Delete, path);\n    }\n\n    /**\n     * Enable or disable a push notification rule.\n     * @param {string} scope\n     * @param {string} kind\n     * @param {string} ruleId\n     * @param {boolean} enabled\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: result object\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public setPushRuleEnabled(\n        scope: string,\n        kind: PushRuleKind,\n        ruleId: RuleId | string,\n        enabled: boolean,\n        callback?: Callback,\n    ): Promise<{}> {\n        const path = utils.encodeUri(\"/pushrules/\" + scope + \"/$kind/$ruleId/enabled\", {\n            $kind: kind,\n            $ruleId: ruleId,\n        });\n        return this.http.authedRequest(\n            callback, Method.Put, path, undefined, { \"enabled\": enabled },\n        );\n    }\n\n    /**\n     * Set the actions for a push notification rule.\n     * @param {string} scope\n     * @param {string} kind\n     * @param {string} ruleId\n     * @param {array} actions\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: result object\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public setPushRuleActions(\n        scope: string,\n        kind: PushRuleKind,\n        ruleId: RuleId | string,\n        actions: PushRuleAction[],\n        callback?: Callback,\n    ): Promise<{}> {\n        const path = utils.encodeUri(\"/pushrules/\" + scope + \"/$kind/$ruleId/actions\", {\n            $kind: kind,\n            $ruleId: ruleId,\n        });\n        return this.http.authedRequest(\n            callback, Method.Put, path, undefined, { \"actions\": actions },\n        );\n    }\n\n    /**\n     * Perform a server-side search.\n     * @param {Object} opts\n     * @param {string} opts.next_batch the batch token to pass in the query string\n     * @param {Object} opts.body the JSON object to pass to the request body.\n     * @param {module:client.callback} callback Optional.\n     * @return {Promise} Resolves: TODO\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public search(\n        opts: { body: ISearchRequestBody, next_batch?: string }, // eslint-disable-line camelcase\n        callback?: Callback,\n    ): Promise<ISearchResponse> {\n        const queryParams: any = {};\n        if (opts.next_batch) {\n            queryParams.next_batch = opts.next_batch;\n        }\n        return this.http.authedRequest(callback, Method.Post, \"/search\", queryParams, opts.body);\n    }\n\n    /**\n     * Upload keys\n     *\n     * @param {Object} content  body of upload request\n     *\n     * @param {Object=} opts this method no longer takes any opts,\n     *  used to take opts.device_id but this was not removed from the spec as a redundant parameter\n     *\n     * @param {module:client.callback=} callback\n     *\n     * @return {Promise} Resolves: result object. Rejects: with\n     *     an error response ({@link module:http-api.MatrixError}).\n     */\n    public uploadKeysRequest(\n        content: IUploadKeysRequest,\n        opts?: void,\n        callback?: Callback,\n    ): Promise<IKeysUploadResponse> {\n        return this.http.authedRequest(callback, Method.Post, \"/keys/upload\", undefined, content);\n    }\n\n    public uploadKeySignatures(content: KeySignatures): Promise<IUploadKeySignaturesResponse> {\n        return this.http.authedRequest(\n            undefined, Method.Post, '/keys/signatures/upload', undefined,\n            content, {\n                prefix: PREFIX_UNSTABLE,\n            },\n        );\n    }\n\n    /**\n     * Download device keys\n     *\n     * @param {string[]} userIds  list of users to get keys for\n     *\n     * @param {Object=} opts\n     *\n     * @param {string=} opts.token   sync token to pass in the query request, to help\n     *   the HS give the most recent results\n     *\n     * @return {Promise} Resolves: result object. Rejects: with\n     *     an error response ({@link module:http-api.MatrixError}).\n     */\n    public downloadKeysForUsers(userIds: string[], opts: { token?: string }): Promise<IDownloadKeyResult> {\n        if (utils.isFunction(opts)) {\n            // opts used to be 'callback'.\n            throw new Error('downloadKeysForUsers no longer accepts a callback parameter');\n        }\n        opts = opts || {};\n\n        const content: any = {\n            device_keys: {},\n        };\n        if ('token' in opts) {\n            content.token = opts.token;\n        }\n        userIds.forEach((u) => {\n            content.device_keys[u] = [];\n        });\n\n        return this.http.authedRequest(undefined, Method.Post, \"/keys/query\", undefined, content);\n    }\n\n    /**\n     * Claim one-time keys\n     *\n     * @param {string[]} devices  a list of [userId, deviceId] pairs\n     *\n     * @param {string} [keyAlgorithm = signed_curve25519]  desired key type\n     *\n     * @param {number} [timeout] the time (in milliseconds) to wait for keys from remote\n     *     servers\n     *\n     * @return {Promise} Resolves: result object. Rejects: with\n     *     an error response ({@link module:http-api.MatrixError}).\n     */\n    public claimOneTimeKeys(\n        devices: [string, string][],\n        keyAlgorithm = \"signed_curve25519\",\n        timeout?: number,\n    ): Promise<IClaimOTKsResult> {\n        const queries: Record<string, Record<string, string>> = {};\n\n        if (keyAlgorithm === undefined) {\n            keyAlgorithm = \"signed_curve25519\";\n        }\n\n        for (let i = 0; i < devices.length; ++i) {\n            const userId = devices[i][0];\n            const deviceId = devices[i][1];\n            const query = queries[userId] || {};\n            queries[userId] = query;\n            query[deviceId] = keyAlgorithm;\n        }\n        const content: any = { one_time_keys: queries };\n        if (timeout) {\n            content.timeout = timeout;\n        }\n        const path = \"/keys/claim\";\n        return this.http.authedRequest(undefined, Method.Post, path, undefined, content);\n    }\n\n    /**\n     * Ask the server for a list of users who have changed their device lists\n     * between a pair of sync tokens\n     *\n     * @param {string} oldToken\n     * @param {string} newToken\n     *\n     * @return {Promise} Resolves: result object. Rejects: with\n     *     an error response ({@link module:http-api.MatrixError}).\n     */\n    public getKeyChanges(oldToken: string, newToken: string): Promise<{ changed: string[], left: string[] }> {\n        const qps = {\n            from: oldToken,\n            to: newToken,\n        };\n\n        const path = \"/keys/changes\";\n        return this.http.authedRequest(undefined, Method.Get, path, qps, undefined);\n    }\n\n    public uploadDeviceSigningKeys(auth?: IAuthData, keys?: CrossSigningKeys): Promise<{}> {\n        const data = Object.assign({}, keys);\n        if (auth) Object.assign(data, { auth });\n        return this.http.authedRequest(\n            undefined, Method.Post, \"/keys/device_signing/upload\", undefined, data, {\n                prefix: PREFIX_UNSTABLE,\n            },\n        );\n    }\n\n    /**\n     * Register with an identity server using the OpenID token from the user's\n     * Homeserver, which can be retrieved via\n     * {@link module:client~MatrixClient#getOpenIdToken}.\n     *\n     * Note that the `/account/register` endpoint (as well as IS authentication in\n     * general) was added as part of the v2 API version.\n     *\n     * @param {object} hsOpenIdToken\n     * @return {Promise} Resolves: with object containing an Identity\n     * Server access token.\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public registerWithIdentityServer(hsOpenIdToken: any): Promise<any> { // TODO: Types\n        if (!this.idBaseUrl) {\n            throw new Error(\"No identity server base URL set\");\n        }\n\n        const uri = this.idBaseUrl + PREFIX_IDENTITY_V2 + \"/account/register\";\n        return this.http.requestOtherUrl(\n            undefined, Method.Post, uri,\n            null, hsOpenIdToken,\n        );\n    }\n\n    /**\n     * Requests an email verification token directly from an identity server.\n     *\n     * This API is used as part of binding an email for discovery on an identity\n     * server. The validation data that results should be passed to the\n     * `bindThreePid` method to complete the binding process.\n     *\n     * @param {string} email The email address to request a token for\n     * @param {string} clientSecret A secret binary string generated by the client.\n     *                 It is recommended this be around 16 ASCII characters.\n     * @param {number} sendAttempt If an identity server sees a duplicate request\n     *                 with the same sendAttempt, it will not send another email.\n     *                 To request another email to be sent, use a larger value for\n     *                 the sendAttempt param as was used in the previous request.\n     * @param {string} nextLink Optional If specified, the client will be redirected\n     *                 to this link after validation.\n     * @param {module:client.callback} callback Optional.\n     * @param {string} identityAccessToken The `access_token` field of the identity\n     * server `/account/register` response (see {@link registerWithIdentityServer}).\n     *\n     * @return {Promise} Resolves: TODO\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     * @throws Error if no identity server is set\n     */\n    public async requestEmailToken(\n        email: string,\n        clientSecret: string,\n        sendAttempt: number,\n        nextLink: string,\n        callback?: Callback,\n        identityAccessToken?: string,\n    ): Promise<any> { // TODO: Types\n        const params = {\n            client_secret: clientSecret,\n            email: email,\n            send_attempt: sendAttempt?.toString(),\n            next_link: nextLink,\n        };\n\n        return await this.http.idServerRequest(\n            callback, Method.Post, \"/validate/email/requestToken\",\n            params, PREFIX_IDENTITY_V2, identityAccessToken,\n        );\n    }\n\n    /**\n     * Requests a MSISDN verification token directly from an identity server.\n     *\n     * This API is used as part of binding a MSISDN for discovery on an identity\n     * server. The validation data that results should be passed to the\n     * `bindThreePid` method to complete the binding process.\n     *\n     * @param {string} phoneCountry The ISO 3166-1 alpha-2 code for the country in\n     *                 which phoneNumber should be parsed relative to.\n     * @param {string} phoneNumber The phone number, in national or international\n     *                 format\n     * @param {string} clientSecret A secret binary string generated by the client.\n     *                 It is recommended this be around 16 ASCII characters.\n     * @param {number} sendAttempt If an identity server sees a duplicate request\n     *                 with the same sendAttempt, it will not send another SMS.\n     *                 To request another SMS to be sent, use a larger value for\n     *                 the sendAttempt param as was used in the previous request.\n     * @param {string} nextLink Optional If specified, the client will be redirected\n     *                 to this link after validation.\n     * @param {module:client.callback} callback Optional.\n     * @param {string} identityAccessToken The `access_token` field of the Identity\n     * Server `/account/register` response (see {@link registerWithIdentityServer}).\n     *\n     * @return {Promise} Resolves: TODO\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     * @throws Error if no identity server is set\n     */\n    public async requestMsisdnToken(\n        phoneCountry: string,\n        phoneNumber: string,\n        clientSecret: string,\n        sendAttempt: number,\n        nextLink: string,\n        callback?: Callback,\n        identityAccessToken?: string,\n    ): Promise<any> { // TODO: Types\n        const params = {\n            client_secret: clientSecret,\n            country: phoneCountry,\n            phone_number: phoneNumber,\n            send_attempt: sendAttempt?.toString(),\n            next_link: nextLink,\n        };\n\n        return await this.http.idServerRequest(\n            callback, Method.Post, \"/validate/msisdn/requestToken\",\n            params, PREFIX_IDENTITY_V2, identityAccessToken,\n        );\n    }\n\n    /**\n     * Submits a MSISDN token to the identity server\n     *\n     * This is used when submitting the code sent by SMS to a phone number.\n     * The identity server has an equivalent API for email but the js-sdk does\n     * not expose this, since email is normally validated by the user clicking\n     * a link rather than entering a code.\n     *\n     * @param {string} sid The sid given in the response to requestToken\n     * @param {string} clientSecret A secret binary string generated by the client.\n     *                 This must be the same value submitted in the requestToken call.\n     * @param {string} msisdnToken The MSISDN token, as enetered by the user.\n     * @param {string} identityAccessToken The `access_token` field of the Identity\n     * Server `/account/register` response (see {@link registerWithIdentityServer}).\n     *\n     * @return {Promise} Resolves: Object, currently with no parameters.\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     * @throws Error if No identity server is set\n     */\n    public async submitMsisdnToken(\n        sid: string,\n        clientSecret: string,\n        msisdnToken: string,\n        identityAccessToken: string,\n    ): Promise<any> { // TODO: Types\n        const params = {\n            sid: sid,\n            client_secret: clientSecret,\n            token: msisdnToken,\n        };\n\n        return await this.http.idServerRequest(\n            undefined, Method.Post, \"/validate/msisdn/submitToken\",\n            params, PREFIX_IDENTITY_V2, identityAccessToken,\n        );\n    }\n\n    /**\n     * Submits a MSISDN token to an arbitrary URL.\n     *\n     * This is used when submitting the code sent by SMS to a phone number in the\n     * newer 3PID flow where the homeserver validates 3PID ownership (as part of\n     * `requestAdd3pidMsisdnToken`). The homeserver response may include a\n     * `submit_url` to specify where the token should be sent, and this helper can\n     * be used to pass the token to this URL.\n     *\n     * @param {string} url The URL to submit the token to\n     * @param {string} sid The sid given in the response to requestToken\n     * @param {string} clientSecret A secret binary string generated by the client.\n     *                 This must be the same value submitted in the requestToken call.\n     * @param {string} msisdnToken The MSISDN token, as enetered by the user.\n     *\n     * @return {Promise} Resolves: Object, currently with no parameters.\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public submitMsisdnTokenOtherUrl(\n        url: string,\n        sid: string,\n        clientSecret: string,\n        msisdnToken: string,\n    ): Promise<any> { // TODO: Types\n        const params = {\n            sid: sid,\n            client_secret: clientSecret,\n            token: msisdnToken,\n        };\n\n        return this.http.requestOtherUrl(\n            undefined, Method.Post, url, undefined, params,\n        );\n    }\n\n    /**\n     * Gets the V2 hashing information from the identity server. Primarily useful for\n     * lookups.\n     * @param {string} identityAccessToken The access token for the identity server.\n     * @returns {Promise<object>} The hashing information for the identity server.\n     */\n    public getIdentityHashDetails(identityAccessToken: string): Promise<any> { // TODO: Types\n        return this.http.idServerRequest(\n            undefined, Method.Get, \"/hash_details\",\n            null, PREFIX_IDENTITY_V2, identityAccessToken,\n        );\n    }\n\n    /**\n     * Performs a hashed lookup of addresses against the identity server. This is\n     * only supported on identity servers which have at least the version 2 API.\n     * @param {Array<Array<string,string>>} addressPairs An array of 2 element arrays.\n     * The first element of each pair is the address, the second is the 3PID medium.\n     * Eg: [\"email@example.org\", \"email\"]\n     * @param {string} identityAccessToken The access token for the identity server.\n     * @returns {Promise<Array<{address, mxid}>>} A collection of address mappings to\n     * found MXIDs. Results where no user could be found will not be listed.\n     */\n    public async identityHashedLookup(\n        addressPairs: [string, string][],\n        identityAccessToken: string,\n    ): Promise<{ address: string, mxid: string }[]> {\n        const params: Record<string, string | string[]> = {\n            // addresses: [\"email@example.org\", \"10005550000\"],\n            // algorithm: \"sha256\",\n            // pepper: \"abc123\"\n        };\n\n        // Get hash information first before trying to do a lookup\n        const hashes = await this.getIdentityHashDetails(identityAccessToken);\n        if (!hashes || !hashes['lookup_pepper'] || !hashes['algorithms']) {\n            throw new Error(\"Unsupported identity server: bad response\");\n        }\n\n        params['pepper'] = hashes['lookup_pepper'];\n\n        const localMapping: Record<string, string> = {\n            // hashed identifier => plain text address\n            // For use in this function's return format\n        };\n\n        // When picking an algorithm, we pick the hashed over no hashes\n        if (hashes['algorithms'].includes('sha256')) {\n            // Abuse the olm hashing\n            const olmutil = new global.Olm.Utility();\n            params[\"addresses\"] = addressPairs.map(p => {\n                const addr = p[0].toLowerCase(); // lowercase to get consistent hashes\n                const med = p[1].toLowerCase();\n                const hashed = olmutil.sha256(`${addr} ${med} ${params['pepper']}`)\n                    .replace(/\\+/g, '-').replace(/\\//g, '_'); // URL-safe base64\n                // Map the hash to a known (case-sensitive) address. We use the case\n                // sensitive version because the caller might be expecting that.\n                localMapping[hashed] = p[0];\n                return hashed;\n            });\n            params[\"algorithm\"] = \"sha256\";\n        } else if (hashes['algorithms'].includes('none')) {\n            params[\"addresses\"] = addressPairs.map(p => {\n                const addr = p[0].toLowerCase(); // lowercase to get consistent hashes\n                const med = p[1].toLowerCase();\n                const unhashed = `${addr} ${med}`;\n                // Map the unhashed values to a known (case-sensitive) address. We use\n                // the case sensitive version because the caller might be expecting that.\n                localMapping[unhashed] = p[0];\n                return unhashed;\n            });\n            params[\"algorithm\"] = \"none\";\n        } else {\n            throw new Error(\"Unsupported identity server: unknown hash algorithm\");\n        }\n\n        const response = await this.http.idServerRequest(\n            undefined, Method.Post, \"/lookup\",\n            params, PREFIX_IDENTITY_V2, identityAccessToken,\n        );\n\n        if (!response || !response['mappings']) return []; // no results\n\n        const foundAddresses = [/* {address: \"plain@example.org\", mxid} */];\n        for (const hashed of Object.keys(response['mappings'])) {\n            const mxid = response['mappings'][hashed];\n            const plainAddress = localMapping[hashed];\n            if (!plainAddress) {\n                throw new Error(\"Identity server returned more results than expected\");\n            }\n\n            foundAddresses.push({ address: plainAddress, mxid });\n        }\n        return foundAddresses;\n    }\n\n    /**\n     * Looks up the public Matrix ID mapping for a given 3rd party\n     * identifier from the identity server\n     *\n     * @param {string} medium The medium of the threepid, eg. 'email'\n     * @param {string} address The textual address of the threepid\n     * @param {module:client.callback} callback Optional.\n     * @param {string} identityAccessToken The `access_token` field of the Identity\n     * Server `/account/register` response (see {@link registerWithIdentityServer}).\n     *\n     * @return {Promise} Resolves: A threepid mapping\n     *                                 object or the empty object if no mapping\n     *                                 exists\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public async lookupThreePid(\n        medium: string,\n        address: string,\n        callback?: Callback,\n        identityAccessToken?: string,\n    ): Promise<any> { // TODO: Types\n        // Note: we're using the V2 API by calling this function, but our\n        // function contract requires a V1 response. We therefore have to\n        // convert it manually.\n        const response = await this.identityHashedLookup(\n            [[address, medium]], identityAccessToken,\n        );\n        const result = response.find(p => p.address === address);\n        if (!result) {\n            if (callback) callback(null, {});\n            return {};\n        }\n\n        const mapping = {\n            address,\n            medium,\n            mxid: result.mxid,\n\n            // We can't reasonably fill these parameters:\n            // not_before\n            // not_after\n            // ts\n            // signatures\n        };\n\n        if (callback) callback(null, mapping);\n        return mapping;\n    }\n\n    /**\n     * Looks up the public Matrix ID mappings for multiple 3PIDs.\n     *\n     * @param {Array.<Array.<string>>} query Array of arrays containing\n     * [medium, address]\n     * @param {string} identityAccessToken The `access_token` field of the Identity\n     * Server `/account/register` response (see {@link registerWithIdentityServer}).\n     *\n     * @return {Promise} Resolves: Lookup results from IS.\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public async bulkLookupThreePids(query: [string, string][], identityAccessToken: string): Promise<any> { // TODO: Types\n        // Note: we're using the V2 API by calling this function, but our\n        // function contract requires a V1 response. We therefore have to\n        // convert it manually.\n        const response = await this.identityHashedLookup(\n            // We have to reverse the query order to get [address, medium] pairs\n            query.map(p => [p[1], p[0]]), identityAccessToken,\n        );\n\n        const v1results = [];\n        for (const mapping of response) {\n            const originalQuery = query.find(p => p[1] === mapping.address);\n            if (!originalQuery) {\n                throw new Error(\"Identity sever returned unexpected results\");\n            }\n\n            v1results.push([\n                originalQuery[0], // medium\n                mapping.address,\n                mapping.mxid,\n            ]);\n        }\n\n        return { threepids: v1results };\n    }\n\n    /**\n     * Get account info from the identity server. This is useful as a neutral check\n     * to verify that other APIs are likely to approve access by testing that the\n     * token is valid, terms have been agreed, etc.\n     *\n     * @param {string} identityAccessToken The `access_token` field of the Identity\n     * Server `/account/register` response (see {@link registerWithIdentityServer}).\n     *\n     * @return {Promise} Resolves: an object with account info.\n     * @return {module:http-api.MatrixError} Rejects: with an error response.\n     */\n    public getIdentityAccount(identityAccessToken: string): Promise<any> { // TODO: Types\n        return this.http.idServerRequest(\n            undefined, Method.Get, \"/account\",\n            undefined, PREFIX_IDENTITY_V2, identityAccessToken,\n        );\n    }\n\n    /**\n     * Send an event to a specific list of devices\n     *\n     * @param {string} eventType  type of event to send\n     * @param {Object.<string, Object<string, Object>>} contentMap\n     *    content to send. Map from user_id to device_id to content object.\n     * @param {string=} txnId     transaction id. One will be made up if not\n     *    supplied.\n     * @return {Promise} Resolves to the result object\n     */\n    public sendToDevice(\n        eventType: string,\n        contentMap: { [userId: string]: { [deviceId: string]: Record<string, any> } },\n        txnId?: string,\n    ): Promise<{}> {\n        const path = utils.encodeUri(\"/sendToDevice/$eventType/$txnId\", {\n            $eventType: eventType,\n            $txnId: txnId ? txnId : this.makeTxnId(),\n        });\n\n        const body = {\n            messages: contentMap,\n        };\n\n        const targets = Object.keys(contentMap).reduce((obj, key) => {\n            obj[key] = Object.keys(contentMap[key]);\n            return obj;\n        }, {});\n        logger.log(`PUT ${path}`, targets);\n\n        return this.http.authedRequest(undefined, Method.Put, path, undefined, body);\n    }\n\n    /**\n     * Get the third party protocols that can be reached using\n     * this HS\n     * @return {Promise} Resolves to the result object\n     */\n    public getThirdpartyProtocols(): Promise<{ [protocol: string]: IProtocol }> {\n        return this.http.authedRequest<Record<string, IProtocol>>(\n            undefined, Method.Get, \"/thirdparty/protocols\", undefined, undefined,\n        ).then((response) => {\n            // sanity check\n            if (!response || typeof (response) !== 'object') {\n                throw new Error(`/thirdparty/protocols did not return an object: ${response}`);\n            }\n            return response;\n        });\n    }\n\n    /**\n     * Get information on how a specific place on a third party protocol\n     * may be reached.\n     * @param {string} protocol The protocol given in getThirdpartyProtocols()\n     * @param {object} params Protocol-specific parameters, as given in the\n     *                        response to getThirdpartyProtocols()\n     * @return {Promise} Resolves to the result object\n     */\n    public getThirdpartyLocation(\n        protocol: string,\n        params: { searchFields?: string[] },\n    ): Promise<IThirdPartyLocation[]> {\n        const path = utils.encodeUri(\"/thirdparty/location/$protocol\", {\n            $protocol: protocol,\n        });\n\n        return this.http.authedRequest(undefined, Method.Get, path, params, undefined);\n    }\n\n    /**\n     * Get information on how a specific user on a third party protocol\n     * may be reached.\n     * @param {string} protocol The protocol given in getThirdpartyProtocols()\n     * @param {object} params Protocol-specific parameters, as given in the\n     *                        response to getThirdpartyProtocols()\n     * @return {Promise} Resolves to the result object\n     */\n    public getThirdpartyUser(protocol: string, params: any): Promise<IThirdPartyUser[]> { // TODO: Types\n        const path = utils.encodeUri(\"/thirdparty/user/$protocol\", {\n            $protocol: protocol,\n        });\n\n        return this.http.authedRequest(undefined, Method.Get, path, params, undefined);\n    }\n\n    public getTerms(serviceType: SERVICE_TYPES, baseUrl: string): Promise<any> { // TODO: Types\n        const url = this.termsUrlForService(serviceType, baseUrl);\n        return this.http.requestOtherUrl(undefined, Method.Get, url);\n    }\n\n    public agreeToTerms(\n        serviceType: SERVICE_TYPES,\n        baseUrl: string,\n        accessToken: string,\n        termsUrls: string[],\n    ): Promise<any> { // TODO: Types\n        const url = this.termsUrlForService(serviceType, baseUrl);\n        const headers = {\n            Authorization: \"Bearer \" + accessToken,\n        };\n        return this.http.requestOtherUrl(undefined, Method.Post, url, null, { user_accepts: termsUrls }, { headers });\n    }\n\n    /**\n     * Reports an event as inappropriate to the server, which may then notify the appropriate people.\n     * @param {string} roomId The room in which the event being reported is located.\n     * @param {string} eventId The event to report.\n     * @param {number} score The score to rate this content as where -100 is most offensive and 0 is inoffensive.\n     * @param {string} reason The reason the content is being reported. May be blank.\n     * @returns {Promise} Resolves to an empty object if successful\n     */\n    public reportEvent(roomId: string, eventId: string, score: number, reason: string): Promise<{}> {\n        const path = utils.encodeUri(\"/rooms/$roomId/report/$eventId\", {\n            $roomId: roomId,\n            $eventId: eventId,\n        });\n\n        return this.http.authedRequest(undefined, Method.Post, path, null, { score, reason });\n    }\n\n    /**\n     * Fetches or paginates a room hierarchy as defined by MSC2946.\n     * Falls back gracefully to sourcing its data from `getSpaceSummary` if this API is not yet supported by the server.\n     * @param {string} roomId The ID of the space-room to use as the root of the summary.\n     * @param {number?} limit The maximum number of rooms to return per page.\n     * @param {number?} maxDepth The maximum depth in the tree from the root room to return.\n     * @param {boolean?} suggestedOnly Whether to only return rooms with suggested=true.\n     * @param {string?} fromToken The opaque token to paginate a previous request.\n     * @returns {Promise} the response, with next_batch & rooms fields.\n     */\n    public getRoomHierarchy(\n        roomId: string,\n        limit?: number,\n        maxDepth?: number,\n        suggestedOnly = false,\n        fromToken?: string,\n    ): Promise<IRoomHierarchy> {\n        const path = utils.encodeUri(\"/rooms/$roomId/hierarchy\", {\n            $roomId: roomId,\n        });\n\n        const queryParams: Record<string, string | string[]> = {\n            suggested_only: String(suggestedOnly),\n            max_depth: maxDepth?.toString(),\n            from: fromToken,\n            limit: limit?.toString(),\n        };\n\n        return this.http.authedRequest<IRoomHierarchy>(undefined, Method.Get, path, queryParams, undefined, {\n            prefix: PREFIX_V1,\n        }).catch(e => {\n            if (e.errcode === \"M_UNRECOGNIZED\") {\n                // fall back to the prefixed hierarchy API.\n                return this.http.authedRequest<IRoomHierarchy>(undefined, Method.Get, path, queryParams, undefined, {\n                    prefix: \"/_matrix/client/unstable/org.matrix.msc2946\",\n                });\n            }\n\n            throw e;\n        });\n    }\n\n    /**\n     * Creates a new file tree space with the given name. The client will pick\n     * defaults for how it expects to be able to support the remaining API offered\n     * by the returned class.\n     *\n     * Note that this is UNSTABLE and may have breaking changes without notice.\n     * @param {string} name The name of the tree space.\n     * @returns {Promise<MSC3089TreeSpace>} Resolves to the created space.\n     */\n    public async unstableCreateFileTree(name: string): Promise<MSC3089TreeSpace> {\n        const { room_id: roomId } = await this.createRoom({\n            name: name,\n            preset: Preset.PrivateChat,\n            power_level_content_override: {\n                ...DEFAULT_TREE_POWER_LEVELS_TEMPLATE,\n                users: {\n                    [this.getUserId()]: 100,\n                },\n            },\n            creation_content: {\n                [RoomCreateTypeField]: RoomType.Space,\n            },\n            initial_state: [\n                {\n                    type: UNSTABLE_MSC3088_PURPOSE.name,\n                    state_key: UNSTABLE_MSC3089_TREE_SUBTYPE.name,\n                    content: {\n                        [UNSTABLE_MSC3088_ENABLED.name]: true,\n                    },\n                },\n                {\n                    type: EventType.RoomEncryption,\n                    state_key: \"\",\n                    content: {\n                        algorithm: olmlib.MEGOLM_ALGORITHM,\n                    },\n                },\n            ],\n        });\n        return new MSC3089TreeSpace(this, roomId);\n    }\n\n    /**\n     * Gets a reference to a tree space, if the room ID given is a tree space. If the room\n     * does not appear to be a tree space then null is returned.\n     *\n     * Note that this is UNSTABLE and may have breaking changes without notice.\n     * @param {string} roomId The room ID to get a tree space reference for.\n     * @returns {MSC3089TreeSpace} The tree space, or null if not a tree space.\n     */\n    public unstableGetFileTreeSpace(roomId: string): MSC3089TreeSpace {\n        const room = this.getRoom(roomId);\n        if (room?.getMyMembership() !== 'join') return null;\n\n        const createEvent = room.currentState.getStateEvents(EventType.RoomCreate, \"\");\n        const purposeEvent = room.currentState.getStateEvents(\n            UNSTABLE_MSC3088_PURPOSE.name,\n            UNSTABLE_MSC3089_TREE_SUBTYPE.name);\n\n        if (!createEvent) throw new Error(\"Expected single room create event\");\n\n        if (!purposeEvent?.getContent()?.[UNSTABLE_MSC3088_ENABLED.name]) return null;\n        if (createEvent.getContent()?.[RoomCreateTypeField] !== RoomType.Space) return null;\n\n        return new MSC3089TreeSpace(this, roomId);\n    }\n\n    /**\n     * @experimental\n     */\n    public supportsExperimentalThreads(): boolean {\n        return this.clientOpts?.experimentalThreadSupport || false;\n    }\n\n    /**\n     * Fetches the summary of a room as defined by an initial version of MSC3266 and implemented in Synapse\n     * Proposed at https://github.com/matrix-org/matrix-doc/pull/3266\n     * @param {string} roomIdOrAlias The ID or alias of the room to get the summary of.\n     * @param {string[]?} via The list of servers which know about the room if only an ID was provided.\n     */\n    public async getRoomSummary(roomIdOrAlias: string, via?: string[]): Promise<IRoomSummary> {\n        const path = utils.encodeUri(\"/rooms/$roomid/summary\", { $roomid: roomIdOrAlias });\n        return this.http.authedRequest(undefined, Method.Get, path, { via }, null, {\n            qsStringifyOptions: { arrayFormat: 'repeat' },\n            prefix: \"/_matrix/client/unstable/im.nheko.summary\",\n        });\n    }\n\n    /**\n     * @experimental\n     */\n    public async processThreadEvents(\n        room: Room,\n        threadedEvents: MatrixEvent[],\n        toStartOfTimeline: boolean,\n    ): Promise<void> {\n        await room.processThreadedEvents(threadedEvents, toStartOfTimeline);\n    }\n\n    public processBeaconEvents(\n        room: Room,\n        events?: MatrixEvent[],\n    ): void {\n        if (!events?.length) {\n            return;\n        }\n        const beaconEvents = events.filter(event => M_BEACON.matches(event.getType()));\n        room.currentState.processBeaconEvents(beaconEvents);\n    }\n\n    /**\n     * Fetches the user_id of the configured access token.\n     */\n    public async whoami(): Promise<{ user_id: string }> { // eslint-disable-line camelcase\n        return this.http.authedRequest(undefined, Method.Get, \"/account/whoami\");\n    }\n\n    /**\n     * Find the event_id closest to the given timestamp in the given direction.\n     * @return {Promise} A promise of an object containing the event_id and\n     *    origin_server_ts of the closest event to the timestamp in the given\n     *    direction\n     */\n    public async timestampToEvent(\n        roomId: string,\n        timestamp: number,\n        dir: Direction,\n    ): Promise<ITimestampToEventResponse> {\n        const path = utils.encodeUri(\"/rooms/$roomId/timestamp_to_event\", {\n            $roomId: roomId,\n        });\n\n        return await this.http.authedRequest(\n            undefined,\n            Method.Get,\n            path,\n            {\n                ts: timestamp.toString(),\n                dir: dir,\n            },\n            undefined,\n            {\n                prefix: \"/_matrix/client/unstable/org.matrix.msc3030\",\n            },\n        );\n    }\n}\n\n/**\n * Fires whenever the SDK receives a new event.\n * <p>\n * This is only fired for live events received via /sync - it is not fired for\n * events received over context, search, or pagination APIs.\n *\n * @event module:client~MatrixClient#\"event\"\n * @param {MatrixEvent} event The matrix event which caused this event to fire.\n * @example\n * matrixClient.on(\"event\", function(event){\n *   var sender = event.getSender();\n * });\n */\n\n/**\n * Fires whenever the SDK receives a new to-device event.\n * @event module:client~MatrixClient#\"toDeviceEvent\"\n * @param {MatrixEvent} event The matrix event which caused this event to fire.\n * @example\n * matrixClient.on(\"toDeviceEvent\", function(event){\n *   var sender = event.getSender();\n * });\n */\n\n/**\n * Fires whenever the SDK's syncing state is updated. The state can be one of:\n * <ul>\n *\n * <li>PREPARED: The client has synced with the server at least once and is\n * ready for methods to be called on it. This will be immediately followed by\n * a state of SYNCING. <i>This is the equivalent of \"syncComplete\" in the\n * previous API.</i></li>\n *\n * <li>CATCHUP: The client has detected the connection to the server might be\n * available again and will now try to do a sync again. As this sync might take\n * a long time (depending how long ago was last synced, and general server\n * performance) the client is put in this mode so the UI can reflect trying\n * to catch up with the server after losing connection.</li>\n *\n * <li>SYNCING : The client is currently polling for new events from the server.\n * This will be called <i>after</i> processing latest events from a sync.</li>\n *\n * <li>ERROR : The client has had a problem syncing with the server. If this is\n * called <i>before</i> PREPARED then there was a problem performing the initial\n * sync. If this is called <i>after</i> PREPARED then there was a problem polling\n * the server for updates. This may be called multiple times even if the state is\n * already ERROR. <i>This is the equivalent of \"syncError\" in the previous\n * API.</i></li>\n *\n * <li>RECONNECTING: The sync connection has dropped, but not (yet) in a way that\n * should be considered erroneous.\n * </li>\n *\n * <li>STOPPED: The client has stopped syncing with server due to stopClient\n * being called.\n * </li>\n * </ul>\n * State transition diagram:\n * <pre>\n *                                          +---->STOPPED\n *                                          |\n *              +----->PREPARED -------> SYNCING <--+\n *              |                        ^  |  ^    |\n *              |      CATCHUP ----------+  |  |    |\n *              |        ^                  V  |    |\n *   null ------+        |  +------- RECONNECTING   |\n *              |        V  V                       |\n *              +------->ERROR ---------------------+\n *\n * NB: 'null' will never be emitted by this event.\n *\n * </pre>\n * Transitions:\n * <ul>\n *\n * <li><code>null -> PREPARED</code> : Occurs when the initial sync is completed\n * first time. This involves setting up filters and obtaining push rules.\n *\n * <li><code>null -> ERROR</code> : Occurs when the initial sync failed first time.\n *\n * <li><code>ERROR -> PREPARED</code> : Occurs when the initial sync succeeds\n * after previously failing.\n *\n * <li><code>PREPARED -> SYNCING</code> : Occurs immediately after transitioning\n * to PREPARED. Starts listening for live updates rather than catching up.\n *\n * <li><code>SYNCING -> RECONNECTING</code> : Occurs when the live update fails.\n *\n * <li><code>RECONNECTING -> RECONNECTING</code> : Can occur if the update calls\n * continue to fail, but the keepalive calls (to /versions) succeed.\n *\n * <li><code>RECONNECTING -> ERROR</code> : Occurs when the keepalive call also fails\n *\n * <li><code>ERROR -> SYNCING</code> : Occurs when the client has performed a\n * live update after having previously failed.\n *\n * <li><code>ERROR -> ERROR</code> : Occurs when the client has failed to keepalive\n * for a second time or more.</li>\n *\n * <li><code>SYNCING -> SYNCING</code> : Occurs when the client has performed a live\n * update. This is called <i>after</i> processing.</li>\n *\n * <li><code>* -> STOPPED</code> : Occurs once the client has stopped syncing or\n * trying to sync after stopClient has been called.</li>\n * </ul>\n *\n * @event module:client~MatrixClient#\"sync\"\n *\n * @param {string} state An enum representing the syncing state. One of \"PREPARED\",\n * \"SYNCING\", \"ERROR\", \"STOPPED\".\n *\n * @param {?string} prevState An enum representing the previous syncing state.\n * One of \"PREPARED\", \"SYNCING\", \"ERROR\", \"STOPPED\" <b>or null</b>.\n *\n * @param {?Object} data Data about this transition.\n *\n * @param {MatrixError} data.error The matrix error if <code>state=ERROR</code>.\n *\n * @param {String} data.oldSyncToken The 'since' token passed to /sync.\n *    <code>null</code> for the first successful sync since this client was\n *    started. Only present if <code>state=PREPARED</code> or\n *    <code>state=SYNCING</code>.\n *\n * @param {String} data.nextSyncToken The 'next_batch' result from /sync, which\n *    will become the 'since' token for the next call to /sync. Only present if\n *    <code>state=PREPARED</code> or <code>state=SYNCING</code>.\n *\n * @param {boolean} data.catchingUp True if we are working our way through a\n *    backlog of events after connecting. Only present if <code>state=SYNCING</code>.\n *\n * @example\n * matrixClient.on(\"sync\", function(state, prevState, data) {\n *   switch (state) {\n *     case \"ERROR\":\n *       // update UI to say \"Connection Lost\"\n *       break;\n *     case \"SYNCING\":\n *       // update UI to remove any \"Connection Lost\" message\n *       break;\n *     case \"PREPARED\":\n *       // the client instance is ready to be queried.\n *       var rooms = matrixClient.getRooms();\n *       break;\n *   }\n * });\n */\n\n/**\n * Fires whenever a new Room is added. This will fire when you are invited to a\n * room, as well as when you join a room. <strong>This event is experimental and\n * may change.</strong>\n * @event module:client~MatrixClient#\"Room\"\n * @param {Room} room The newly created, fully populated room.\n * @example\n * matrixClient.on(\"Room\", function(room){\n *   var roomId = room.roomId;\n * });\n */\n\n/**\n * Fires whenever a Room is removed. This will fire when you forget a room.\n * <strong>This event is experimental and may change.</strong>\n * @event module:client~MatrixClient#\"deleteRoom\"\n * @param {string} roomId The deleted room ID.\n * @example\n * matrixClient.on(\"deleteRoom\", function(roomId){\n *   // update UI from getRooms()\n * });\n */\n\n/**\n * Fires whenever an incoming call arrives.\n * @event module:client~MatrixClient#\"Call.incoming\"\n * @param {module:webrtc/call~MatrixCall} call The incoming call.\n * @example\n * matrixClient.on(\"Call.incoming\", function(call){\n *   call.answer(); // auto-answer\n * });\n */\n\n/**\n * Fires whenever the login session the JS SDK is using is no\n * longer valid and the user must log in again.\n * NB. This only fires when action is required from the user, not\n * when then login session can be renewed by using a refresh token.\n * @event module:client~MatrixClient#\"Session.logged_out\"\n * @example\n * matrixClient.on(\"Session.logged_out\", function(errorObj){\n *   // show the login screen\n * });\n */\n\n/**\n * Fires when the JS SDK receives a M_CONSENT_NOT_GIVEN error in response\n * to a HTTP request.\n * @event module:client~MatrixClient#\"no_consent\"\n * @example\n * matrixClient.on(\"no_consent\", function(message, contentUri) {\n *     console.info(message + ' Go to ' + contentUri);\n * });\n */\n\n/**\n * Fires when a device is marked as verified/unverified/blocked/unblocked by\n * {@link module:client~MatrixClient#setDeviceVerified|MatrixClient.setDeviceVerified} or\n * {@link module:client~MatrixClient#setDeviceBlocked|MatrixClient.setDeviceBlocked}.\n *\n * @event module:client~MatrixClient#\"deviceVerificationChanged\"\n * @param {string} userId the owner of the verified device\n * @param {string} deviceId the id of the verified device\n * @param {module:crypto/deviceinfo} deviceInfo updated device information\n */\n\n/**\n * Fires when the trust status of a user changes\n * If userId is the userId of the logged in user, this indicated a change\n * in the trust status of the cross-signing data on the account.\n *\n * The cross-signing API is currently UNSTABLE and may change without notice.\n *\n * @event module:client~MatrixClient#\"userTrustStatusChanged\"\n * @param {string} userId the userId of the user in question\n * @param {UserTrustLevel} trustLevel The new trust level of the user\n */\n\n/**\n * Fires when the user's cross-signing keys have changed or cross-signing\n * has been enabled/disabled. The client can use getStoredCrossSigningForUser\n * with the user ID of the logged in user to check if cross-signing is\n * enabled on the account. If enabled, it can test whether the current key\n * is trusted using with checkUserTrust with the user ID of the logged\n * in user. The checkOwnCrossSigningTrust function may be used to reconcile\n * the trust in the account key.\n *\n * The cross-signing API is currently UNSTABLE and may change without notice.\n *\n * @event module:client~MatrixClient#\"crossSigning.keysChanged\"\n */\n\n/**\n * Fires whenever new user-scoped account_data is added.\n * @event module:client~MatrixClient#\"accountData\"\n * @param {MatrixEvent} event The event describing the account_data just added\n * @param {MatrixEvent} event The previous account data, if known.\n * @example\n * matrixClient.on(\"accountData\", function(event, oldEvent){\n *   myAccountData[event.type] = event.content;\n * });\n */\n\n/**\n * Fires whenever the stored devices for a user have changed\n * @event module:client~MatrixClient#\"crypto.devicesUpdated\"\n * @param {String[]} users A list of user IDs that were updated\n * @param {boolean} initialFetch If true, the store was empty (apart\n *     from our own device) and has been seeded.\n */\n\n/**\n * Fires whenever the stored devices for a user will be updated\n * @event module:client~MatrixClient#\"crypto.willUpdateDevices\"\n * @param {String[]} users A list of user IDs that will be updated\n * @param {boolean} initialFetch If true, the store is empty (apart\n *     from our own device) and is being seeded.\n */\n\n/**\n * Fires whenever the status of e2e key backup changes, as returned by getKeyBackupEnabled()\n * @event module:client~MatrixClient#\"crypto.keyBackupStatus\"\n * @param {boolean} enabled true if key backup has been enabled, otherwise false\n * @example\n * matrixClient.on(\"crypto.keyBackupStatus\", function(enabled){\n *   if (enabled) {\n *     [...]\n *   }\n * });\n */\n\n/**\n * Fires when we want to suggest to the user that they restore their megolm keys\n * from backup or by cross-signing the device.\n *\n * @event module:client~MatrixClient#\"crypto.suggestKeyRestore\"\n */\n\n/**\n * Fires when a key verification is requested.\n * @event module:client~MatrixClient#\"crypto.verification.request\"\n * @param {object} data\n * @param {MatrixEvent} data.event the original verification request message\n * @param {Array} data.methods the verification methods that can be used\n * @param {Number} data.timeout the amount of milliseconds that should be waited\n *                 before cancelling the request automatically.\n * @param {Function} data.beginKeyVerification a function to call if a key\n *     verification should be performed.  The function takes one argument: the\n *     name of the key verification method (taken from data.methods) to use.\n * @param {Function} data.cancel a function to call if the key verification is\n *     rejected.\n */\n\n/**\n * Fires when a key verification is requested with an unknown method.\n * @event module:client~MatrixClient#\"crypto.verification.request.unknown\"\n * @param {string} userId the user ID who requested the key verification\n * @param {Function} cancel a function that will send a cancellation message to\n *     reject the key verification.\n */\n\n/**\n * Fires when a secret request has been cancelled.  If the client is prompting\n * the user to ask whether they want to share a secret, the prompt can be\n * dismissed.\n *\n * The Secure Secret Storage API is currently UNSTABLE and may change without notice.\n *\n * @event module:client~MatrixClient#\"crypto.secrets.requestCancelled\"\n * @param {object} data\n * @param {string} data.user_id The user ID of the client that had requested the secret.\n * @param {string} data.device_id The device ID of the client that had requested the\n *     secret.\n * @param {string} data.request_id The ID of the original request.\n */\n\n/**\n * Fires when the client .well-known info is fetched.\n *\n * @event module:client~MatrixClient#\"WellKnown.client\"\n * @param {object} data The JSON object returned by the server\n */\n",
    "/*\nCopyright 2018 - 2022 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/** @module ContentHelpers */\n\nimport { REFERENCE_RELATION } from \"matrix-events-sdk\";\n\nimport { MBeaconEventContent, MBeaconInfoContent, MBeaconInfoEventContent } from \"./@types/beacon\";\nimport { MsgType } from \"./@types/event\";\nimport { TEXT_NODE_TYPE } from \"./@types/extensible_events\";\nimport {\n    M_ASSET,\n    LocationAssetType,\n    M_LOCATION,\n    M_TIMESTAMP,\n    LocationEventWireContent,\n    MLocationEventContent,\n    MLocationContent,\n    MAssetContent,\n    LegacyLocationEventContent,\n} from \"./@types/location\";\n\n/**\n * Generates the content for a HTML Message event\n * @param {string} body the plaintext body of the message\n * @param {string} htmlBody the HTML representation of the message\n * @returns {{msgtype: string, format: string, body: string, formatted_body: string}}\n */\nexport function makeHtmlMessage(body: string, htmlBody: string) {\n    return {\n        msgtype: MsgType.Text,\n        format: \"org.matrix.custom.html\",\n        body: body,\n        formatted_body: htmlBody,\n    };\n}\n\n/**\n * Generates the content for a HTML Notice event\n * @param {string} body the plaintext body of the notice\n * @param {string} htmlBody the HTML representation of the notice\n * @returns {{msgtype: string, format: string, body: string, formatted_body: string}}\n */\nexport function makeHtmlNotice(body: string, htmlBody: string) {\n    return {\n        msgtype: MsgType.Notice,\n        format: \"org.matrix.custom.html\",\n        body: body,\n        formatted_body: htmlBody,\n    };\n}\n\n/**\n * Generates the content for a HTML Emote event\n * @param {string} body the plaintext body of the emote\n * @param {string} htmlBody the HTML representation of the emote\n * @returns {{msgtype: string, format: string, body: string, formatted_body: string}}\n */\nexport function makeHtmlEmote(body: string, htmlBody: string) {\n    return {\n        msgtype: MsgType.Emote,\n        format: \"org.matrix.custom.html\",\n        body: body,\n        formatted_body: htmlBody,\n    };\n}\n\n/**\n * Generates the content for a Plaintext Message event\n * @param {string} body the plaintext body of the emote\n * @returns {{msgtype: string, body: string}}\n */\nexport function makeTextMessage(body: string) {\n    return {\n        msgtype: MsgType.Text,\n        body: body,\n    };\n}\n\n/**\n * Generates the content for a Plaintext Notice event\n * @param {string} body the plaintext body of the notice\n * @returns {{msgtype: string, body: string}}\n */\nexport function makeNotice(body: string) {\n    return {\n        msgtype: MsgType.Notice,\n        body: body,\n    };\n}\n\n/**\n * Generates the content for a Plaintext Emote event\n * @param {string} body the plaintext body of the emote\n * @returns {{msgtype: string, body: string}}\n */\nexport function makeEmoteMessage(body: string) {\n    return {\n        msgtype: MsgType.Emote,\n        body: body,\n    };\n}\n\n/** Location content helpers */\n\nexport const getTextForLocationEvent = (\n    uri: string,\n    assetType: LocationAssetType,\n    timestamp: number,\n    description?: string,\n): string => {\n    const date = `at ${new Date(timestamp).toISOString()}`;\n    const assetName = assetType === LocationAssetType.Self ? 'User' : undefined;\n    const quotedDescription = description ? `\"${description}\"` : undefined;\n\n    return [\n        assetName,\n        'Location',\n        quotedDescription,\n        uri,\n        date,\n    ].filter(Boolean).join(' ');\n};\n\n/**\n * Generates the content for a Location event\n * @param uri a geo:// uri for the location\n * @param ts the timestamp when the location was correct (milliseconds since\n *           the UNIX epoch)\n * @param description the (optional) label for this location on the map\n * @param asset_type the (optional) asset type of this location e.g. \"m.self\"\n * @param text optional. A text for the location\n */\nexport const makeLocationContent = (\n    // this is first but optional\n    // to avoid a breaking change\n    text: string | undefined,\n    uri: string,\n    timestamp?: number,\n    description?: string,\n    assetType?: LocationAssetType,\n): LegacyLocationEventContent & MLocationEventContent => {\n    const defaultedText = text ??\n        getTextForLocationEvent(uri, assetType || LocationAssetType.Self, timestamp, description);\n    const timestampEvent = timestamp ? { [M_TIMESTAMP.name]: timestamp } : {};\n    return {\n        msgtype: MsgType.Location,\n        body: defaultedText,\n        geo_uri: uri,\n        [M_LOCATION.name]: {\n            description,\n            uri,\n        },\n        [M_ASSET.name]: {\n            type: assetType || LocationAssetType.Self,\n        },\n        [TEXT_NODE_TYPE.name]: defaultedText,\n        ...timestampEvent,\n    } as LegacyLocationEventContent & MLocationEventContent;\n};\n\n/**\n * Parse location event content and transform to\n * a backwards compatible modern m.location event format\n */\nexport const parseLocationEvent = (wireEventContent: LocationEventWireContent): MLocationEventContent => {\n    const location = M_LOCATION.findIn<MLocationContent>(wireEventContent);\n    const asset = M_ASSET.findIn<MAssetContent>(wireEventContent);\n    const timestamp = M_TIMESTAMP.findIn<number>(wireEventContent);\n    const text = TEXT_NODE_TYPE.findIn<string>(wireEventContent);\n\n    const geoUri = location?.uri ?? wireEventContent?.geo_uri;\n    const description = location?.description;\n    const assetType = asset?.type ?? LocationAssetType.Self;\n    const fallbackText = text ?? wireEventContent.body;\n\n    return makeLocationContent(fallbackText, geoUri, timestamp, description, assetType);\n};\n\n/**\n * Beacon event helpers\n */\nexport type MakeBeaconInfoContent = (\n    timeout: number,\n    isLive?: boolean,\n    description?: string,\n    assetType?: LocationAssetType,\n    timestamp?: number\n) => MBeaconInfoEventContent;\n\nexport const makeBeaconInfoContent: MakeBeaconInfoContent = (\n    timeout,\n    isLive,\n    description,\n    assetType,\n    timestamp,\n) => ({\n    description,\n    timeout,\n    live: isLive,\n    [M_TIMESTAMP.name]: timestamp || Date.now(),\n    [M_ASSET.name]: {\n        type: assetType ?? LocationAssetType.Self,\n    },\n});\n\nexport type BeaconInfoState = MBeaconInfoContent & {\n    assetType: LocationAssetType;\n    timestamp: number;\n};\n/**\n * Flatten beacon info event content\n */\nexport const parseBeaconInfoContent = (content: MBeaconInfoEventContent): BeaconInfoState => {\n    const { description, timeout, live } = content;\n    const { type: assetType } = M_ASSET.findIn<MAssetContent>(content);\n    const timestamp = M_TIMESTAMP.findIn<number>(content);\n\n    return {\n        description,\n        timeout,\n        live,\n        assetType,\n        timestamp,\n    };\n};\n\nexport type MakeBeaconContent = (\n    uri: string,\n    timestamp: number,\n    beaconInfoEventId: string,\n    description?: string,\n) => MBeaconEventContent;\n\nexport const makeBeaconContent: MakeBeaconContent = (\n    uri,\n    timestamp,\n    beaconInfoEventId,\n    description,\n) => ({\n    [M_LOCATION.name]: {\n        description,\n        uri,\n    },\n    [M_TIMESTAMP.name]: timestamp,\n    \"m.relates_to\": {\n        rel_type: REFERENCE_RELATION.name,\n        event_id: beaconInfoEventId,\n    },\n});\n\nexport type BeaconLocationState = MLocationContent & {\n    timestamp: number;\n};\n\nexport const parseBeaconContent = (content: MBeaconEventContent): BeaconLocationState => {\n    const { description, uri } = M_LOCATION.findIn<MLocationContent>(content);\n    const timestamp = M_TIMESTAMP.findIn<number>(content);\n\n    return {\n        description,\n        uri,\n        timestamp,\n    };\n};\n",
    "/*\nCopyright 2015 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n/**\n * @module content-repo\n */\n\nimport * as utils from \"./utils\";\n\n/**\n * Get the HTTP URL for an MXC URI.\n * @param {string} baseUrl The base homeserver url which has a content repo.\n * @param {string} mxc The mxc:// URI.\n * @param {Number} width The desired width of the thumbnail.\n * @param {Number} height The desired height of the thumbnail.\n * @param {string} resizeMethod The thumbnail resize method to use, either\n * \"crop\" or \"scale\".\n * @param {Boolean} allowDirectLinks If true, return any non-mxc URLs\n * directly. Fetching such URLs will leak information about the user to\n * anyone they share a room with. If false, will return the emptry string\n * for such URLs.\n * @return {string} The complete URL to the content.\n */\nexport function getHttpUriForMxc(\n    baseUrl: string,\n    mxc: string,\n    width: number,\n    height: number,\n    resizeMethod: string,\n    allowDirectLinks = false,\n): string {\n    if (typeof mxc !== \"string\" || !mxc) {\n        return '';\n    }\n    if (mxc.indexOf(\"mxc://\") !== 0) {\n        if (allowDirectLinks) {\n            return mxc;\n        } else {\n            return '';\n        }\n    }\n    let serverAndMediaId = mxc.slice(6); // strips mxc://\n    let prefix = \"/_matrix/media/r0/download/\";\n    const params: Record<string, string> = {};\n\n    if (width) {\n        params[\"width\"] = Math.round(width).toString();\n    }\n    if (height) {\n        params[\"height\"] = Math.round(height).toString();\n    }\n    if (resizeMethod) {\n        params[\"method\"] = resizeMethod;\n    }\n    if (Object.keys(params).length > 0) {\n        // these are thumbnailing params so they probably want the\n        // thumbnailing API...\n        prefix = \"/_matrix/media/r0/thumbnail/\";\n    }\n\n    const fragmentOffset = serverAndMediaId.indexOf(\"#\");\n    let fragment = \"\";\n    if (fragmentOffset >= 0) {\n        fragment = serverAndMediaId.slice(fragmentOffset);\n        serverAndMediaId = serverAndMediaId.slice(0, fragmentOffset);\n    }\n\n    const urlParams = (Object.keys(params).length === 0 ? \"\" : (\"?\" + utils.encodeParams(params)));\n    return baseUrl + prefix + serverAndMediaId + urlParams + fragment;\n}\n",
    "/*\nCopyright 2019 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * Cross signing methods\n * @module crypto/CrossSigning\n */\n\nimport { PkSigning } from \"@matrix-org/olm\";\n\nimport { decodeBase64, encodeBase64, pkSign, pkVerify } from './olmlib';\nimport { logger } from '../logger';\nimport { IndexedDBCryptoStore } from '../crypto/store/indexeddb-crypto-store';\nimport { decryptAES, encryptAES } from './aes';\nimport { DeviceInfo } from \"./deviceinfo\";\nimport { SecretStorage } from \"./SecretStorage\";\nimport { ICrossSigningKey, ISignedKey, MatrixClient } from \"../client\";\nimport { OlmDevice } from \"./OlmDevice\";\nimport { ICryptoCallbacks } from \"../matrix\";\nimport { ISignatures } from \"../@types/signed\";\nimport { CryptoStore } from \"./store/base\";\nimport { ISecretStorageKeyInfo } from \"./api\";\n\nconst KEY_REQUEST_TIMEOUT_MS = 1000 * 60;\n\nfunction publicKeyFromKeyInfo(keyInfo: ICrossSigningKey): string {\n    // `keys` is an object with { [`ed25519:${pubKey}`]: pubKey }\n    // We assume only a single key, and we want the bare form without type\n    // prefix, so we select the values.\n    return Object.values(keyInfo.keys)[0];\n}\n\nexport interface ICacheCallbacks {\n    getCrossSigningKeyCache?(type: string, expectedPublicKey?: string): Promise<Uint8Array>;\n    storeCrossSigningKeyCache?(type: string, key: Uint8Array): Promise<void>;\n}\n\nexport interface ICrossSigningInfo {\n    keys: Record<string, ICrossSigningKey>;\n    firstUse: boolean;\n    crossSigningVerifiedBefore: boolean;\n}\n\nexport class CrossSigningInfo {\n    public keys: Record<string, ICrossSigningKey> = {};\n    public firstUse = true;\n    // This tracks whether we've ever verified this user with any identity.\n    // When you verify a user, any devices online at the time that receive\n    // the verifying signature via the homeserver will latch this to true\n    // and can use it in the future to detect cases where the user has\n    // become unverified later for any reason.\n    private crossSigningVerifiedBefore = false;\n\n    /**\n     * Information about a user's cross-signing keys\n     *\n     * @class\n     *\n     * @param {string} userId the user that the information is about\n     * @param {object} callbacks Callbacks used to interact with the app\n     *     Requires getCrossSigningKey and saveCrossSigningKeys\n     * @param {object} cacheCallbacks Callbacks used to interact with the cache\n     */\n    constructor(\n        public readonly userId: string,\n        private callbacks: ICryptoCallbacks = {},\n        private cacheCallbacks: ICacheCallbacks = {},\n    ) {}\n\n    public static fromStorage(obj: ICrossSigningInfo, userId: string): CrossSigningInfo {\n        const res = new CrossSigningInfo(userId);\n        for (const prop in obj) {\n            if (obj.hasOwnProperty(prop)) {\n                res[prop] = obj[prop];\n            }\n        }\n        return res;\n    }\n\n    public toStorage(): ICrossSigningInfo {\n        return {\n            keys: this.keys,\n            firstUse: this.firstUse,\n            crossSigningVerifiedBefore: this.crossSigningVerifiedBefore,\n        };\n    }\n\n    /**\n     * Calls the app callback to ask for a private key\n     *\n     * @param {string} type The key type (\"master\", \"self_signing\", or \"user_signing\")\n     * @param {string} expectedPubkey The matching public key or undefined to use\n     *     the stored public key for the given key type.\n     * @returns {Array} An array with [ public key, Olm.PkSigning ]\n     */\n    public async getCrossSigningKey(type: string, expectedPubkey?: string): Promise<[string, PkSigning]> {\n        const shouldCache = [\"master\", \"self_signing\", \"user_signing\"].indexOf(type) >= 0;\n\n        if (!this.callbacks.getCrossSigningKey) {\n            throw new Error(\"No getCrossSigningKey callback supplied\");\n        }\n\n        if (expectedPubkey === undefined) {\n            expectedPubkey = this.getId(type);\n        }\n\n        function validateKey(key: Uint8Array): [string, PkSigning] {\n            if (!key) return;\n            const signing = new global.Olm.PkSigning();\n            const gotPubkey = signing.init_with_seed(key);\n            if (gotPubkey === expectedPubkey) {\n                return [gotPubkey, signing];\n            }\n            signing.free();\n        }\n\n        let privkey;\n        if (this.cacheCallbacks.getCrossSigningKeyCache && shouldCache) {\n            privkey = await this.cacheCallbacks.getCrossSigningKeyCache(type, expectedPubkey);\n        }\n\n        const cacheresult = validateKey(privkey);\n        if (cacheresult) {\n            return cacheresult;\n        }\n\n        privkey = await this.callbacks.getCrossSigningKey(type, expectedPubkey);\n        const result = validateKey(privkey);\n        if (result) {\n            if (this.cacheCallbacks.storeCrossSigningKeyCache && shouldCache) {\n                await this.cacheCallbacks.storeCrossSigningKeyCache(type, privkey);\n            }\n            return result;\n        }\n\n        /* No keysource even returned a key */\n        if (!privkey) {\n            throw new Error(\n                \"getCrossSigningKey callback for \" + type + \" returned falsey\",\n            );\n        }\n\n        /* We got some keys from the keysource, but none of them were valid */\n        throw new Error(\n            \"Key type \" + type + \" from getCrossSigningKey callback did not match\",\n        );\n    }\n\n    /**\n     * Check whether the private keys exist in secret storage.\n     * XXX: This could be static, be we often seem to have an instance when we\n     * want to know this anyway...\n     *\n     * @param {SecretStorage} secretStorage The secret store using account data\n     * @returns {object} map of key name to key info the secret is encrypted\n     *     with, or null if it is not present or not encrypted with a trusted\n     *     key\n     */\n    public async isStoredInSecretStorage(secretStorage: SecretStorage): Promise<Record<string, object>> {\n        // check what SSSS keys have encrypted the master key (if any)\n        const stored = await secretStorage.isStored(\"m.cross_signing.master\", false) || {};\n        // then check which of those SSSS keys have also encrypted the SSK and USK\n        function intersect(s: Record<string, ISecretStorageKeyInfo>) {\n            for (const k of Object.keys(stored)) {\n                if (!s[k]) {\n                    delete stored[k];\n                }\n            }\n        }\n        for (const type of [\"self_signing\", \"user_signing\"]) {\n            intersect(await secretStorage.isStored(`m.cross_signing.${type}`, false) || {});\n        }\n        return Object.keys(stored).length ? stored : null;\n    }\n\n    /**\n     * Store private keys in secret storage for use by other devices. This is\n     * typically called in conjunction with the creation of new cross-signing\n     * keys.\n     *\n     * @param {Map} keys The keys to store\n     * @param {SecretStorage} secretStorage The secret store using account data\n     */\n    public static async storeInSecretStorage(\n        keys: Map<string, Uint8Array>,\n        secretStorage: SecretStorage,\n    ): Promise<void> {\n        for (const [type, privateKey] of keys) {\n            const encodedKey = encodeBase64(privateKey);\n            await secretStorage.store(`m.cross_signing.${type}`, encodedKey);\n        }\n    }\n\n    /**\n     * Get private keys from secret storage created by some other device. This\n     * also passes the private keys to the app-specific callback.\n     *\n     * @param {string} type The type of key to get.  One of \"master\",\n     * \"self_signing\", or \"user_signing\".\n     * @param {SecretStorage} secretStorage The secret store using account data\n     * @return {Uint8Array} The private key\n     */\n    public static async getFromSecretStorage(type: string, secretStorage: SecretStorage): Promise<Uint8Array> {\n        const encodedKey = await secretStorage.get(`m.cross_signing.${type}`);\n        if (!encodedKey) {\n            return null;\n        }\n        return decodeBase64(encodedKey);\n    }\n\n    /**\n     * Check whether the private keys exist in the local key cache.\n     *\n     * @param {string} [type] The type of key to get. One of \"master\",\n     * \"self_signing\", or \"user_signing\". Optional, will check all by default.\n     * @returns {boolean} True if all keys are stored in the local cache.\n     */\n    public async isStoredInKeyCache(type?: string): Promise<boolean> {\n        const cacheCallbacks = this.cacheCallbacks;\n        if (!cacheCallbacks) return false;\n        const types = type ? [type] : [\"master\", \"self_signing\", \"user_signing\"];\n        for (const t of types) {\n            if (!await cacheCallbacks.getCrossSigningKeyCache(t)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Get cross-signing private keys from the local cache.\n     *\n     * @returns {Map} A map from key type (string) to private key (Uint8Array)\n     */\n    public async getCrossSigningKeysFromCache(): Promise<Map<string, Uint8Array>> {\n        const keys = new Map();\n        const cacheCallbacks = this.cacheCallbacks;\n        if (!cacheCallbacks) return keys;\n        for (const type of [\"master\", \"self_signing\", \"user_signing\"]) {\n            const privKey = await cacheCallbacks.getCrossSigningKeyCache(type);\n            if (!privKey) {\n                continue;\n            }\n            keys.set(type, privKey);\n        }\n        return keys;\n    }\n\n    /**\n     * Get the ID used to identify the user. This can also be used to test for\n     * the existence of a given key type.\n     *\n     * @param {string} type The type of key to get the ID of.  One of \"master\",\n     * \"self_signing\", or \"user_signing\".  Defaults to \"master\".\n     *\n     * @return {string} the ID\n     */\n    public getId(type = \"master\"): string {\n        if (!this.keys[type]) return null;\n        const keyInfo = this.keys[type];\n        return publicKeyFromKeyInfo(keyInfo);\n    }\n\n    /**\n     * Create new cross-signing keys for the given key types. The public keys\n     * will be held in this class, while the private keys are passed off to the\n     * `saveCrossSigningKeys` application callback.\n     *\n     * @param {CrossSigningLevel} level The key types to reset\n     */\n    public async resetKeys(level?: CrossSigningLevel): Promise<void> {\n        if (!this.callbacks.saveCrossSigningKeys) {\n            throw new Error(\"No saveCrossSigningKeys callback supplied\");\n        }\n\n        // If we're resetting the master key, we reset all keys\n        if (\n            level === undefined ||\n            level & CrossSigningLevel.MASTER ||\n            !this.keys.master\n        ) {\n            level = (\n                CrossSigningLevel.MASTER |\n                CrossSigningLevel.USER_SIGNING |\n                CrossSigningLevel.SELF_SIGNING\n            );\n        } else if (level === 0 as CrossSigningLevel) {\n            return;\n        }\n\n        const privateKeys: Record<string, Uint8Array> = {};\n        const keys: Record<string, ICrossSigningKey> = {};\n        let masterSigning;\n        let masterPub;\n\n        try {\n            if (level & CrossSigningLevel.MASTER) {\n                masterSigning = new global.Olm.PkSigning();\n                privateKeys.master = masterSigning.generate_seed();\n                masterPub = masterSigning.init_with_seed(privateKeys.master);\n                keys.master = {\n                    user_id: this.userId,\n                    usage: ['master'],\n                    keys: {\n                        ['ed25519:' + masterPub]: masterPub,\n                    },\n                };\n            } else {\n                [masterPub, masterSigning] = await this.getCrossSigningKey(\"master\");\n            }\n\n            if (level & CrossSigningLevel.SELF_SIGNING) {\n                const sskSigning = new global.Olm.PkSigning();\n                try {\n                    privateKeys.self_signing = sskSigning.generate_seed();\n                    const sskPub = sskSigning.init_with_seed(privateKeys.self_signing);\n                    keys.self_signing = {\n                        user_id: this.userId,\n                        usage: ['self_signing'],\n                        keys: {\n                            ['ed25519:' + sskPub]: sskPub,\n                        },\n                    };\n                    pkSign(keys.self_signing, masterSigning, this.userId, masterPub);\n                } finally {\n                    sskSigning.free();\n                }\n            }\n\n            if (level & CrossSigningLevel.USER_SIGNING) {\n                const uskSigning = new global.Olm.PkSigning();\n                try {\n                    privateKeys.user_signing = uskSigning.generate_seed();\n                    const uskPub = uskSigning.init_with_seed(privateKeys.user_signing);\n                    keys.user_signing = {\n                        user_id: this.userId,\n                        usage: ['user_signing'],\n                        keys: {\n                            ['ed25519:' + uskPub]: uskPub,\n                        },\n                    };\n                    pkSign(keys.user_signing, masterSigning, this.userId, masterPub);\n                } finally {\n                    uskSigning.free();\n                }\n            }\n\n            Object.assign(this.keys, keys);\n            this.callbacks.saveCrossSigningKeys(privateKeys);\n        } finally {\n            if (masterSigning) {\n                masterSigning.free();\n            }\n        }\n    }\n\n    /**\n     * unsets the keys, used when another session has reset the keys, to disable cross-signing\n     */\n    public clearKeys(): void {\n        this.keys = {};\n    }\n\n    public setKeys(keys: Record<string, ICrossSigningKey>): void {\n        const signingKeys: Record<string, ICrossSigningKey> = {};\n        if (keys.master) {\n            if (keys.master.user_id !== this.userId) {\n                const error = \"Mismatched user ID \" + keys.master.user_id +\n                      \" in master key from \" + this.userId;\n                logger.error(error);\n                throw new Error(error);\n            }\n            if (!this.keys.master) {\n                // this is the first key we've seen, so first-use is true\n                this.firstUse = true;\n            } else if (publicKeyFromKeyInfo(keys.master) !== this.getId()) {\n                // this is a different key, so first-use is false\n                this.firstUse = false;\n            } // otherwise, same key, so no change\n            signingKeys.master = keys.master;\n        } else if (this.keys.master) {\n            signingKeys.master = this.keys.master;\n        } else {\n            throw new Error(\"Tried to set cross-signing keys without a master key\");\n        }\n        const masterKey = publicKeyFromKeyInfo(signingKeys.master);\n\n        // verify signatures\n        if (keys.user_signing) {\n            if (keys.user_signing.user_id !== this.userId) {\n                const error = \"Mismatched user ID \" + keys.master.user_id +\n                      \" in user_signing key from \" + this.userId;\n                logger.error(error);\n                throw new Error(error);\n            }\n            try {\n                pkVerify(keys.user_signing, masterKey, this.userId);\n            } catch (e) {\n                logger.error(\"invalid signature on user-signing key\");\n                // FIXME: what do we want to do here?\n                throw e;\n            }\n        }\n        if (keys.self_signing) {\n            if (keys.self_signing.user_id !== this.userId) {\n                const error = \"Mismatched user ID \" + keys.master.user_id +\n                      \" in self_signing key from \" + this.userId;\n                logger.error(error);\n                throw new Error(error);\n            }\n            try {\n                pkVerify(keys.self_signing, masterKey, this.userId);\n            } catch (e) {\n                logger.error(\"invalid signature on self-signing key\");\n                // FIXME: what do we want to do here?\n                throw e;\n            }\n        }\n\n        // if everything checks out, then save the keys\n        if (keys.master) {\n            this.keys.master = keys.master;\n            // if the master key is set, then the old self-signing and\n            // user-signing keys are obsolete\n            this.keys.self_signing = null;\n            this.keys.user_signing = null;\n        }\n        if (keys.self_signing) {\n            this.keys.self_signing = keys.self_signing;\n        }\n        if (keys.user_signing) {\n            this.keys.user_signing = keys.user_signing;\n        }\n    }\n\n    public updateCrossSigningVerifiedBefore(isCrossSigningVerified: boolean): void {\n        // It is critical that this value latches forward from false to true but\n        // never back to false to avoid a downgrade attack.\n        if (!this.crossSigningVerifiedBefore && isCrossSigningVerified) {\n            this.crossSigningVerifiedBefore = true;\n        }\n    }\n\n    public async signObject<T extends object>(data: T, type: string): Promise<T & { signatures: ISignatures }> {\n        if (!this.keys[type]) {\n            throw new Error(\n                \"Attempted to sign with \" + type + \" key but no such key present\",\n            );\n        }\n        const [pubkey, signing] = await this.getCrossSigningKey(type);\n        try {\n            pkSign(data, signing, this.userId, pubkey);\n            return data as T & { signatures: ISignatures };\n        } finally {\n            signing.free();\n        }\n    }\n\n    public async signUser(key: CrossSigningInfo): Promise<ICrossSigningKey> {\n        if (!this.keys.user_signing) {\n            logger.info(\"No user signing key: not signing user\");\n            return;\n        }\n        return this.signObject(key.keys.master, \"user_signing\");\n    }\n\n    public async signDevice(userId: string, device: DeviceInfo): Promise<ISignedKey> {\n        if (userId !== this.userId) {\n            throw new Error(\n                `Trying to sign ${userId}'s device; can only sign our own device`,\n            );\n        }\n        if (!this.keys.self_signing) {\n            logger.info(\"No self signing key: not signing device\");\n            return;\n        }\n        return this.signObject<Omit<ISignedKey, \"signatures\">>(\n            {\n                algorithms: device.algorithms,\n                keys: device.keys,\n                device_id: device.deviceId,\n                user_id: userId,\n            }, \"self_signing\",\n        );\n    }\n\n    /**\n     * Check whether a given user is trusted.\n     *\n     * @param {CrossSigningInfo} userCrossSigning Cross signing info for user\n     *\n     * @returns {UserTrustLevel}\n     */\n    public checkUserTrust(userCrossSigning: CrossSigningInfo): UserTrustLevel {\n        // if we're checking our own key, then it's trusted if the master key\n        // and self-signing key match\n        if (this.userId === userCrossSigning.userId\n            && this.getId() && this.getId() === userCrossSigning.getId()\n            && this.getId(\"self_signing\")\n            && this.getId(\"self_signing\") === userCrossSigning.getId(\"self_signing\")\n        ) {\n            return new UserTrustLevel(true, true, this.firstUse);\n        }\n\n        if (!this.keys.user_signing) {\n            // If there's no user signing key, they can't possibly be verified.\n            // They may be TOFU trusted though.\n            return new UserTrustLevel(false, false, userCrossSigning.firstUse);\n        }\n\n        let userTrusted;\n        const userMaster = userCrossSigning.keys.master;\n        const uskId = this.getId('user_signing');\n        try {\n            pkVerify(userMaster, uskId, this.userId);\n            userTrusted = true;\n        } catch (e) {\n            userTrusted = false;\n        }\n        return new UserTrustLevel(\n            userTrusted,\n            userCrossSigning.crossSigningVerifiedBefore,\n            userCrossSigning.firstUse,\n        );\n    }\n\n    /**\n     * Check whether a given device is trusted.\n     *\n     * @param {CrossSigningInfo} userCrossSigning Cross signing info for user\n     * @param {module:crypto/deviceinfo} device The device to check\n     * @param {boolean} localTrust Whether the device is trusted locally\n     * @param {boolean} trustCrossSignedDevices Whether we trust cross signed devices\n     *\n     * @returns {DeviceTrustLevel}\n     */\n    public checkDeviceTrust(\n        userCrossSigning: CrossSigningInfo,\n        device: DeviceInfo,\n        localTrust: boolean,\n        trustCrossSignedDevices: boolean,\n    ): DeviceTrustLevel {\n        const userTrust = this.checkUserTrust(userCrossSigning);\n\n        const userSSK = userCrossSigning.keys.self_signing;\n        if (!userSSK) {\n            // if the user has no self-signing key then we cannot make any\n            // trust assertions about this device from cross-signing\n            return new DeviceTrustLevel(\n                false, false, localTrust, trustCrossSignedDevices,\n            );\n        }\n\n        const deviceObj = deviceToObject(device, userCrossSigning.userId);\n        try {\n            // if we can verify the user's SSK from their master key...\n            pkVerify(userSSK, userCrossSigning.getId(), userCrossSigning.userId);\n            // ...and this device's key from their SSK...\n            pkVerify(deviceObj, publicKeyFromKeyInfo(userSSK), userCrossSigning.userId);\n            // ...then we trust this device as much as far as we trust the user\n            return DeviceTrustLevel.fromUserTrustLevel(userTrust, localTrust, trustCrossSignedDevices);\n        } catch (e) {\n            return new DeviceTrustLevel(false, false, localTrust, trustCrossSignedDevices);\n        }\n    }\n\n    /**\n     * @returns {object} Cache callbacks\n     */\n    public getCacheCallbacks(): ICacheCallbacks {\n        return this.cacheCallbacks;\n    }\n}\n\nfunction deviceToObject(device: DeviceInfo, userId: string) {\n    return {\n        algorithms: device.algorithms,\n        keys: device.keys,\n        device_id: device.deviceId,\n        user_id: userId,\n        signatures: device.signatures,\n    };\n}\n\nexport enum CrossSigningLevel {\n    MASTER = 4,\n    USER_SIGNING = 2,\n    SELF_SIGNING = 1,\n}\n\n/**\n * Represents the ways in which we trust a user\n */\nexport class UserTrustLevel {\n    constructor(\n        private readonly crossSigningVerified: boolean,\n        private readonly crossSigningVerifiedBefore: boolean,\n        private readonly tofu: boolean,\n    ) {}\n\n    /**\n     * @returns {boolean} true if this user is verified via any means\n     */\n    public isVerified(): boolean {\n        return this.isCrossSigningVerified();\n    }\n\n    /**\n     * @returns {boolean} true if this user is verified via cross signing\n     */\n    public isCrossSigningVerified(): boolean {\n        return this.crossSigningVerified;\n    }\n\n    /**\n     * @returns {boolean} true if we ever verified this user before (at least for\n     * the history of verifications observed by this device).\n     */\n    public wasCrossSigningVerified(): boolean {\n        return this.crossSigningVerifiedBefore;\n    }\n\n    /**\n     * @returns {boolean} true if this user's key is trusted on first use\n     */\n    public isTofu(): boolean {\n        return this.tofu;\n    }\n}\n\n/**\n * Represents the ways in which we trust a device\n */\nexport class DeviceTrustLevel {\n    constructor(\n        public readonly crossSigningVerified: boolean,\n        public readonly tofu: boolean,\n        private readonly localVerified: boolean,\n        private readonly trustCrossSignedDevices: boolean,\n    ) {}\n\n    public static fromUserTrustLevel(\n        userTrustLevel: UserTrustLevel,\n        localVerified: boolean,\n        trustCrossSignedDevices: boolean,\n    ): DeviceTrustLevel {\n        return new DeviceTrustLevel(\n            userTrustLevel.isCrossSigningVerified(),\n            userTrustLevel.isTofu(),\n            localVerified,\n            trustCrossSignedDevices,\n        );\n    }\n\n    /**\n     * @returns {boolean} true if this device is verified via any means\n     */\n    public isVerified(): boolean {\n        return Boolean(this.isLocallyVerified() || (\n            this.trustCrossSignedDevices && this.isCrossSigningVerified()\n        ));\n    }\n\n    /**\n     * @returns {boolean} true if this device is verified via cross signing\n     */\n    public isCrossSigningVerified(): boolean {\n        return this.crossSigningVerified;\n    }\n\n    /**\n     * @returns {boolean} true if this device is verified locally\n     */\n    public isLocallyVerified(): boolean {\n        return this.localVerified;\n    }\n\n    /**\n     * @returns {boolean} true if this device is trusted from a user's key\n     * that is trusted on first use\n     */\n    public isTofu(): boolean {\n        return this.tofu;\n    }\n}\n\nexport function createCryptoStoreCacheCallbacks(store: CryptoStore, olmDevice: OlmDevice): ICacheCallbacks {\n    return {\n        getCrossSigningKeyCache: async function(type: string, _expectedPublicKey: string): Promise<Uint8Array> {\n            const key = await new Promise<any>((resolve) => {\n                return store.doTxn(\n                    'readonly',\n                    [IndexedDBCryptoStore.STORE_ACCOUNT],\n                    (txn) => {\n                        store.getSecretStorePrivateKey(txn, resolve, type);\n                    },\n                );\n            });\n\n            if (key && key.ciphertext) {\n                const pickleKey = Buffer.from(olmDevice.pickleKey);\n                const decrypted = await decryptAES(key, pickleKey, type);\n                return decodeBase64(decrypted);\n            } else {\n                return key;\n            }\n        },\n        storeCrossSigningKeyCache: async function(type: string, key: Uint8Array): Promise<void> {\n            if (!(key instanceof Uint8Array)) {\n                throw new Error(\n                    `storeCrossSigningKeyCache expects Uint8Array, got ${key}`,\n                );\n            }\n            const pickleKey = Buffer.from(olmDevice.pickleKey);\n            const encryptedKey = await encryptAES(encodeBase64(key), pickleKey, type);\n            return store.doTxn(\n                'readwrite',\n                [IndexedDBCryptoStore.STORE_ACCOUNT],\n                (txn) => {\n                    store.storeSecretStorePrivateKey(txn, type, encryptedKey);\n                },\n            );\n        },\n    };\n}\n\nexport type KeysDuringVerification = [[string, PkSigning], [string, PkSigning], [string, PkSigning], void];\n\n/**\n * Request cross-signing keys from another device during verification.\n *\n * @param {MatrixClient} baseApis base Matrix API interface\n * @param {string} userId The user ID being verified\n * @param {string} deviceId The device ID being verified\n */\nexport function requestKeysDuringVerification(\n    baseApis: MatrixClient,\n    userId: string,\n    deviceId: string,\n): Promise<KeysDuringVerification | void> {\n    // If this is a self-verification, ask the other party for keys\n    if (baseApis.getUserId() !== userId) {\n        return;\n    }\n    logger.log(\"Cross-signing: Self-verification done; requesting keys\");\n    // This happens asynchronously, and we're not concerned about waiting for\n    // it. We return here in order to test.\n    return new Promise<KeysDuringVerification | void>((resolve, reject) => {\n        const client = baseApis;\n        const original = client.crypto.crossSigningInfo;\n\n        // We already have all of the infrastructure we need to validate and\n        // cache cross-signing keys, so instead of replicating that, here we set\n        // up callbacks that request them from the other device and call\n        // CrossSigningInfo.getCrossSigningKey() to validate/cache\n        const crossSigning = new CrossSigningInfo(\n            original.userId,\n            { getCrossSigningKey: async (type) => {\n                logger.debug(\"Cross-signing: requesting secret\", type, deviceId);\n                const { promise } = client.requestSecret(\n                    `m.cross_signing.${type}`, [deviceId],\n                );\n                const result = await promise;\n                const decoded = decodeBase64(result);\n                return Uint8Array.from(decoded);\n            } },\n            original.getCacheCallbacks(),\n        );\n        crossSigning.keys = original.keys;\n\n        // XXX: get all keys out if we get one key out\n        // https://github.com/vector-im/element-web/issues/12604\n        // then change here to reject on the timeout\n        // Requests can be ignored, so don't wait around forever\n        const timeout = new Promise<void>((resolve) => {\n            setTimeout(\n                resolve,\n                KEY_REQUEST_TIMEOUT_MS,\n                new Error(\"Timeout\"),\n            );\n        });\n\n        // also request and cache the key backup key\n        const backupKeyPromise = (async () => {\n            const cachedKey = await client.crypto.getSessionBackupPrivateKey();\n            if (!cachedKey) {\n                logger.info(\"No cached backup key found. Requesting...\");\n                const secretReq = client.requestSecret(\n                    'm.megolm_backup.v1', [deviceId],\n                );\n                const base64Key = await secretReq.promise;\n                logger.info(\"Got key backup key, decoding...\");\n                const decodedKey = decodeBase64(base64Key);\n                logger.info(\"Decoded backup key, storing...\");\n                await client.crypto.storeSessionBackupPrivateKey(\n                    Uint8Array.from(decodedKey),\n                );\n                logger.info(\"Backup key stored. Starting backup restore...\");\n                const backupInfo = await client.getKeyBackupVersion();\n                // no need to await for this - just let it go in the bg\n                client.restoreKeyBackupWithCache(undefined, undefined, backupInfo).then(() => {\n                    logger.info(\"Backup restored.\");\n                });\n            }\n        })();\n\n        // We call getCrossSigningKey() for its side-effects\n        return Promise.race<KeysDuringVerification | void>([\n            Promise.all([\n                crossSigning.getCrossSigningKey(\"master\"),\n                crossSigning.getCrossSigningKey(\"self_signing\"),\n                crossSigning.getCrossSigningKey(\"user_signing\"),\n                backupKeyPromise,\n            ]) as Promise<KeysDuringVerification>,\n            timeout,\n        ]).then(resolve, reject);\n    }).catch((e) => {\n        logger.warn(\"Cross-signing: failure while requesting keys:\", e);\n    });\n}\n",
    "/*\nCopyright 2017 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * @module crypto/DeviceList\n *\n * Manages the list of other users' devices\n */\n\nimport { logger } from '../logger';\nimport { DeviceInfo, IDevice } from './deviceinfo';\nimport { CrossSigningInfo, ICrossSigningInfo } from './CrossSigning';\nimport * as olmlib from './olmlib';\nimport { IndexedDBCryptoStore } from './store/indexeddb-crypto-store';\nimport { chunkPromises, defer, IDeferred, sleep } from '../utils';\nimport { IDownloadKeyResult, MatrixClient } from \"../client\";\nimport { OlmDevice } from \"./OlmDevice\";\nimport { CryptoStore } from \"./store/base\";\nimport { TypedEventEmitter } from \"../models/typed-event-emitter\";\nimport { CryptoEvent, CryptoEventHandlerMap } from \"./index\";\n\n/* State transition diagram for DeviceList.deviceTrackingStatus\n *\n *                                |\n *     stopTrackingDeviceList     V\n *   +---------------------> NOT_TRACKED\n *   |                            |\n *   +<--------------------+      | startTrackingDeviceList\n *   |                     |      V\n *   |   +-------------> PENDING_DOWNLOAD <--------------------+-+\n *   |   |                      ^ |                            | |\n *   |   | restart     download | |  start download            | | invalidateUserDeviceList\n *   |   | client        failed | |                            | |\n *   |   |                      | V                            | |\n *   |   +------------ DOWNLOAD_IN_PROGRESS -------------------+ |\n *   |                    |       |                              |\n *   +<-------------------+       |  download successful         |\n *   ^                            V                              |\n *   +----------------------- UP_TO_DATE ------------------------+\n */\n\n// constants for DeviceList.deviceTrackingStatus\nexport enum TrackingStatus {\n    NotTracked,\n    PendingDownload,\n    DownloadInProgress,\n    UpToDate,\n}\n\nexport type DeviceInfoMap = Record<string, Record<string, DeviceInfo>>;\n\ntype EmittedEvents = CryptoEvent.WillUpdateDevices | CryptoEvent.DevicesUpdated | CryptoEvent.UserCrossSigningUpdated;\n\n/**\n * @alias module:crypto/DeviceList\n */\nexport class DeviceList extends TypedEventEmitter<EmittedEvents, CryptoEventHandlerMap> {\n    private devices: { [userId: string]: { [deviceId: string]: IDevice } } = {};\n\n    public crossSigningInfo: { [userId: string]: ICrossSigningInfo } = {};\n\n    // map of identity keys to the user who owns it\n    private userByIdentityKey: Record<string, string> = {};\n\n    // which users we are tracking device status for.\n    private deviceTrackingStatus: { [userId: string]: TrackingStatus } = {}; // loaded from storage in load()\n\n    // The 'next_batch' sync token at the point the data was written,\n    // ie. a token representing the point immediately after the\n    // moment represented by the snapshot in the db.\n    private syncToken: string = null;\n\n    private keyDownloadsInProgressByUser: { [userId: string]: Promise<void> } = {};\n\n    // Set whenever changes are made other than setting the sync token\n    private dirty = false;\n\n    // Promise resolved when device data is saved\n    private savePromise: Promise<boolean> = null;\n    // Function that resolves the save promise\n    private resolveSavePromise: (saved: boolean) => void = null;\n    // The time the save is scheduled for\n    private savePromiseTime: number = null;\n    // The timer used to delay the save\n    private saveTimer: number = null;\n    // True if we have fetched data from the server or loaded a non-empty\n    // set of device data from the store\n    private hasFetched: boolean = null;\n\n    private readonly serialiser: DeviceListUpdateSerialiser;\n\n    constructor(\n        baseApis: MatrixClient,\n        private readonly cryptoStore: CryptoStore,\n        olmDevice: OlmDevice,\n        // Maximum number of user IDs per request to prevent server overload (#1619)\n        public readonly keyDownloadChunkSize = 250,\n    ) {\n        super();\n\n        this.serialiser = new DeviceListUpdateSerialiser(baseApis, olmDevice, this);\n    }\n\n    /**\n     * Load the device tracking state from storage\n     */\n    public async load() {\n        await this.cryptoStore.doTxn(\n            'readonly', [IndexedDBCryptoStore.STORE_DEVICE_DATA], (txn) => {\n                this.cryptoStore.getEndToEndDeviceData(txn, (deviceData) => {\n                    this.hasFetched = Boolean(deviceData && deviceData.devices);\n                    this.devices = deviceData ? deviceData.devices : {},\n                    this.crossSigningInfo = deviceData ?\n                        deviceData.crossSigningInfo || {} : {};\n                    this.deviceTrackingStatus = deviceData ?\n                        deviceData.trackingStatus : {};\n                    this.syncToken = deviceData ? deviceData.syncToken : null;\n                    this.userByIdentityKey = {};\n                    for (const user of Object.keys(this.devices)) {\n                        const userDevices = this.devices[user];\n                        for (const device of Object.keys(userDevices)) {\n                            const idKey = userDevices[device].keys['curve25519:'+device];\n                            if (idKey !== undefined) {\n                                this.userByIdentityKey[idKey] = user;\n                            }\n                        }\n                    }\n                });\n            },\n        );\n\n        for (const u of Object.keys(this.deviceTrackingStatus)) {\n            // if a download was in progress when we got shut down, it isn't any more.\n            if (this.deviceTrackingStatus[u] == TrackingStatus.DownloadInProgress) {\n                this.deviceTrackingStatus[u] = TrackingStatus.PendingDownload;\n            }\n        }\n    }\n\n    public stop() {\n        if (this.saveTimer !== null) {\n            clearTimeout(this.saveTimer);\n        }\n    }\n\n    /**\n     * Save the device tracking state to storage, if any changes are\n     * pending other than updating the sync token\n     *\n     * The actual save will be delayed by a short amount of time to\n     * aggregate multiple writes to the database.\n     *\n     * @param {number} delay Time in ms before which the save actually happens.\n     *     By default, the save is delayed for a short period in order to batch\n     *     multiple writes, but this behaviour can be disabled by passing 0.\n     *\n     * @return {Promise<boolean>} true if the data was saved, false if\n     *     it was not (eg. because no changes were pending). The promise\n     *     will only resolve once the data is saved, so may take some time\n     *     to resolve.\n     */\n    public async saveIfDirty(delay = 500): Promise<boolean> {\n        if (!this.dirty) return Promise.resolve(false);\n        // Delay saves for a bit so we can aggregate multiple saves that happen\n        // in quick succession (eg. when a whole room's devices are marked as known)\n\n        const targetTime = Date.now() + delay;\n        if (this.savePromiseTime && targetTime < this.savePromiseTime) {\n            // There's a save scheduled but for after we would like: cancel\n            // it & schedule one for the time we want\n            clearTimeout(this.saveTimer);\n            this.saveTimer = null;\n            this.savePromiseTime = null;\n            // (but keep the save promise since whatever called save before\n            // will still want to know when the save is done)\n        }\n\n        let savePromise = this.savePromise;\n        if (savePromise === null) {\n            savePromise = new Promise((resolve, reject) => {\n                this.resolveSavePromise = resolve;\n            });\n            this.savePromise = savePromise;\n        }\n\n        if (this.saveTimer === null) {\n            const resolveSavePromise = this.resolveSavePromise;\n            this.savePromiseTime = targetTime;\n            this.saveTimer = setTimeout(() => {\n                logger.log('Saving device tracking data', this.syncToken);\n\n                // null out savePromise now (after the delay but before the write),\n                // otherwise we could return the existing promise when the save has\n                // actually already happened.\n                this.savePromiseTime = null;\n                this.saveTimer = null;\n                this.savePromise = null;\n                this.resolveSavePromise = null;\n\n                this.cryptoStore.doTxn(\n                    'readwrite', [IndexedDBCryptoStore.STORE_DEVICE_DATA], (txn) => {\n                        this.cryptoStore.storeEndToEndDeviceData({\n                            devices: this.devices,\n                            crossSigningInfo: this.crossSigningInfo,\n                            trackingStatus: this.deviceTrackingStatus,\n                            syncToken: this.syncToken,\n                        }, txn);\n                    },\n                ).then(() => {\n                    // The device list is considered dirty until the write completes.\n                    this.dirty = false;\n                    resolveSavePromise(true);\n                }, err => {\n                    logger.error('Failed to save device tracking data', this.syncToken);\n                    logger.error(err);\n                });\n            }, delay);\n        }\n\n        return savePromise;\n    }\n\n    /**\n     * Gets the sync token last set with setSyncToken\n     *\n     * @return {string} The sync token\n     */\n    public getSyncToken(): string {\n        return this.syncToken;\n    }\n\n    /**\n     * Sets the sync token that the app will pass as the 'since' to the /sync\n     * endpoint next time it syncs.\n     * The sync token must always be set after any changes made as a result of\n     * data in that sync since setting the sync token to a newer one will mean\n     * those changed will not be synced from the server if a new client starts\n     * up with that data.\n     *\n     * @param {string} st The sync token\n     */\n    public setSyncToken(st: string): void {\n        this.syncToken = st;\n    }\n\n    /**\n     * Ensures up to date keys for a list of users are stored in the session store,\n     * downloading and storing them if they're not (or if forceDownload is\n     * true).\n     * @param {Array} userIds The users to fetch.\n     * @param {boolean} forceDownload Always download the keys even if cached.\n     *\n     * @return {Promise} A promise which resolves to a map userId->deviceId->{@link\n     * module:crypto/deviceinfo|DeviceInfo}.\n     */\n    public downloadKeys(userIds: string[], forceDownload: boolean): Promise<DeviceInfoMap> {\n        const usersToDownload: string[] = [];\n        const promises: Promise<unknown>[] = [];\n\n        userIds.forEach((u) => {\n            const trackingStatus = this.deviceTrackingStatus[u];\n            if (this.keyDownloadsInProgressByUser[u]) {\n                // already a key download in progress/queued for this user; its results\n                // will be good enough for us.\n                logger.log(\n                    `downloadKeys: already have a download in progress for ` +\n                    `${u}: awaiting its result`,\n                );\n                promises.push(this.keyDownloadsInProgressByUser[u]);\n            } else if (forceDownload || trackingStatus != TrackingStatus.UpToDate) {\n                usersToDownload.push(u);\n            }\n        });\n\n        if (usersToDownload.length != 0) {\n            logger.log(\"downloadKeys: downloading for\", usersToDownload);\n            const downloadPromise = this.doKeyDownload(usersToDownload);\n            promises.push(downloadPromise);\n        }\n\n        if (promises.length === 0) {\n            logger.log(\"downloadKeys: already have all necessary keys\");\n        }\n\n        return Promise.all(promises).then(() => {\n            return this.getDevicesFromStore(userIds);\n        });\n    }\n\n    /**\n     * Get the stored device keys for a list of user ids\n     *\n     * @param {string[]} userIds the list of users to list keys for.\n     *\n     * @return {Object} userId->deviceId->{@link module:crypto/deviceinfo|DeviceInfo}.\n     */\n    private getDevicesFromStore(userIds: string[]): DeviceInfoMap {\n        const stored: DeviceInfoMap = {};\n        userIds.map((u) => {\n            stored[u] = {};\n            const devices = this.getStoredDevicesForUser(u) || [];\n            devices.map(function(dev) {\n                stored[u][dev.deviceId] = dev;\n            });\n        });\n        return stored;\n    }\n\n    /**\n     * Returns a list of all user IDs the DeviceList knows about\n     *\n     * @return {array} All known user IDs\n     */\n    public getKnownUserIds(): string[] {\n        return Object.keys(this.devices);\n    }\n\n    /**\n     * Get the stored device keys for a user id\n     *\n     * @param {string} userId the user to list keys for.\n     *\n     * @return {module:crypto/deviceinfo[]|null} list of devices, or null if we haven't\n     * managed to get a list of devices for this user yet.\n     */\n    public getStoredDevicesForUser(userId: string): DeviceInfo[] | null {\n        const devs = this.devices[userId];\n        if (!devs) {\n            return null;\n        }\n        const res = [];\n        for (const deviceId in devs) {\n            if (devs.hasOwnProperty(deviceId)) {\n                res.push(DeviceInfo.fromStorage(devs[deviceId], deviceId));\n            }\n        }\n        return res;\n    }\n\n    /**\n     * Get the stored device data for a user, in raw object form\n     *\n     * @param {string} userId the user to get data for\n     *\n     * @return {Object} deviceId->{object} devices, or undefined if\n     * there is no data for this user.\n     */\n    public getRawStoredDevicesForUser(userId: string): Record<string, IDevice> {\n        return this.devices[userId];\n    }\n\n    public getStoredCrossSigningForUser(userId: string): CrossSigningInfo {\n        if (!this.crossSigningInfo[userId]) return null;\n\n        return CrossSigningInfo.fromStorage(this.crossSigningInfo[userId], userId);\n    }\n\n    public storeCrossSigningForUser(userId: string, info: ICrossSigningInfo): void {\n        this.crossSigningInfo[userId] = info;\n        this.dirty = true;\n    }\n\n    /**\n     * Get the stored keys for a single device\n     *\n     * @param {string} userId\n     * @param {string} deviceId\n     *\n     * @return {module:crypto/deviceinfo?} device, or undefined\n     * if we don't know about this device\n     */\n    public getStoredDevice(userId: string, deviceId: string): DeviceInfo {\n        const devs = this.devices[userId];\n        if (!devs || !devs[deviceId]) {\n            return undefined;\n        }\n        return DeviceInfo.fromStorage(devs[deviceId], deviceId);\n    }\n\n    /**\n     * Get a user ID by one of their device's curve25519 identity key\n     *\n     * @param {string} algorithm  encryption algorithm\n     * @param {string} senderKey  curve25519 key to match\n     *\n     * @return {string} user ID\n     */\n    public getUserByIdentityKey(algorithm: string, senderKey: string): string {\n        if (\n            algorithm !== olmlib.OLM_ALGORITHM &&\n            algorithm !== olmlib.MEGOLM_ALGORITHM\n        ) {\n            // we only deal in olm keys\n            return null;\n        }\n\n        return this.userByIdentityKey[senderKey];\n    }\n\n    /**\n     * Find a device by curve25519 identity key\n     *\n     * @param {string} algorithm  encryption algorithm\n     * @param {string} senderKey  curve25519 key to match\n     *\n     * @return {module:crypto/deviceinfo?}\n     */\n    public getDeviceByIdentityKey(algorithm: string, senderKey: string): DeviceInfo | null {\n        const userId = this.getUserByIdentityKey(algorithm, senderKey);\n        if (!userId) {\n            return null;\n        }\n\n        const devices = this.devices[userId];\n        if (!devices) {\n            return null;\n        }\n\n        for (const deviceId in devices) {\n            if (!devices.hasOwnProperty(deviceId)) {\n                continue;\n            }\n\n            const device = devices[deviceId];\n            for (const keyId in device.keys) {\n                if (!device.keys.hasOwnProperty(keyId)) {\n                    continue;\n                }\n                if (keyId.indexOf(\"curve25519:\") !== 0) {\n                    continue;\n                }\n                const deviceKey = device.keys[keyId];\n                if (deviceKey == senderKey) {\n                    return DeviceInfo.fromStorage(device, deviceId);\n                }\n            }\n        }\n\n        // doesn't match a known device\n        return null;\n    }\n\n    /**\n     * Replaces the list of devices for a user with the given device list\n     *\n     * @param {string} userId The user ID\n     * @param {Object} devices New device info for user\n     */\n    public storeDevicesForUser(userId: string, devices: Record<string, IDevice>): void {\n        this.setRawStoredDevicesForUser(userId, devices);\n        this.dirty = true;\n    }\n\n    /**\n     * flag the given user for device-list tracking, if they are not already.\n     *\n     * This will mean that a subsequent call to refreshOutdatedDeviceLists()\n     * will download the device list for the user, and that subsequent calls to\n     * invalidateUserDeviceList will trigger more updates.\n     *\n     * @param {String} userId\n     */\n    public startTrackingDeviceList(userId: string): void {\n        // sanity-check the userId. This is mostly paranoia, but if synapse\n        // can't parse the userId we give it as an mxid, it 500s the whole\n        // request and we can never update the device lists again (because\n        // the broken userId is always 'invalid' and always included in any\n        // refresh request).\n        // By checking it is at least a string, we can eliminate a class of\n        // silly errors.\n        if (typeof userId !== 'string') {\n            throw new Error('userId must be a string; was '+userId);\n        }\n        if (!this.deviceTrackingStatus[userId]) {\n            logger.log('Now tracking device list for ' + userId);\n            this.deviceTrackingStatus[userId] = TrackingStatus.PendingDownload;\n            // we don't yet persist the tracking status, since there may be a lot\n            // of calls; we save all data together once the sync is done\n            this.dirty = true;\n        }\n    }\n\n    /**\n     * Mark the given user as no longer being tracked for device-list updates.\n     *\n     * This won't affect any in-progress downloads, which will still go on to\n     * complete; it will just mean that we don't think that we have an up-to-date\n     * list for future calls to downloadKeys.\n     *\n     * @param {String} userId\n     */\n    public stopTrackingDeviceList(userId: string): void {\n        if (this.deviceTrackingStatus[userId]) {\n            logger.log('No longer tracking device list for ' + userId);\n            this.deviceTrackingStatus[userId] = TrackingStatus.NotTracked;\n\n            // we don't yet persist the tracking status, since there may be a lot\n            // of calls; we save all data together once the sync is done\n            this.dirty = true;\n        }\n    }\n\n    /**\n     * Set all users we're currently tracking to untracked\n     *\n     * This will flag each user whose devices we are tracking as in need of an\n     * update.\n     */\n    public stopTrackingAllDeviceLists(): void {\n        for (const userId of Object.keys(this.deviceTrackingStatus)) {\n            this.deviceTrackingStatus[userId] = TrackingStatus.NotTracked;\n        }\n        this.dirty = true;\n    }\n\n    /**\n     * Mark the cached device list for the given user outdated.\n     *\n     * If we are not tracking this user's devices, we'll do nothing. Otherwise\n     * we flag the user as needing an update.\n     *\n     * This doesn't actually set off an update, so that several users can be\n     * batched together. Call refreshOutdatedDeviceLists() for that.\n     *\n     * @param {String} userId\n     */\n    public invalidateUserDeviceList(userId: string): void {\n        if (this.deviceTrackingStatus[userId]) {\n            logger.log(\"Marking device list outdated for\", userId);\n            this.deviceTrackingStatus[userId] = TrackingStatus.PendingDownload;\n\n            // we don't yet persist the tracking status, since there may be a lot\n            // of calls; we save all data together once the sync is done\n            this.dirty = true;\n        }\n    }\n\n    /**\n     * If we have users who have outdated device lists, start key downloads for them\n     *\n     * @returns {Promise} which completes when the download completes; normally there\n     *    is no need to wait for this (it's mostly for the unit tests).\n     */\n    public refreshOutdatedDeviceLists(): Promise<void> {\n        this.saveIfDirty();\n\n        const usersToDownload = [];\n        for (const userId of Object.keys(this.deviceTrackingStatus)) {\n            const stat = this.deviceTrackingStatus[userId];\n            if (stat == TrackingStatus.PendingDownload) {\n                usersToDownload.push(userId);\n            }\n        }\n\n        return this.doKeyDownload(usersToDownload);\n    }\n\n    /**\n     * Set the stored device data for a user, in raw object form\n     * Used only by internal class DeviceListUpdateSerialiser\n     *\n     * @param {string} userId the user to get data for\n     *\n     * @param {Object} devices deviceId->{object} the new devices\n     */\n    public setRawStoredDevicesForUser(userId: string, devices: Record<string, IDevice>): void {\n        // remove old devices from userByIdentityKey\n        if (this.devices[userId] !== undefined) {\n            for (const [deviceId, dev] of Object.entries(this.devices[userId])) {\n                const identityKey = dev.keys['curve25519:'+deviceId];\n\n                delete this.userByIdentityKey[identityKey];\n            }\n        }\n\n        this.devices[userId] = devices;\n\n        // add new devices into userByIdentityKey\n        for (const [deviceId, dev] of Object.entries(devices)) {\n            const identityKey = dev.keys['curve25519:'+deviceId];\n\n            this.userByIdentityKey[identityKey] = userId;\n        }\n    }\n\n    public setRawStoredCrossSigningForUser(userId: string, info: ICrossSigningInfo): void {\n        this.crossSigningInfo[userId] = info;\n    }\n\n    /**\n     * Fire off download update requests for the given users, and update the\n     * device list tracking status for them, and the\n     * keyDownloadsInProgressByUser map for them.\n     *\n     * @param {String[]} users  list of userIds\n     *\n     * @return {Promise} resolves when all the users listed have\n     *     been updated. rejects if there was a problem updating any of the\n     *     users.\n     */\n    private doKeyDownload(users: string[]): Promise<void> {\n        if (users.length === 0) {\n            // nothing to do\n            return Promise.resolve();\n        }\n\n        const prom = this.serialiser.updateDevicesForUsers(users, this.syncToken).then(() => {\n            finished(true);\n        }, (e) => {\n            logger.error(\n                'Error downloading keys for ' + users + \":\", e,\n            );\n            finished(false);\n            throw e;\n        });\n\n        users.forEach((u) => {\n            this.keyDownloadsInProgressByUser[u] = prom;\n            const stat = this.deviceTrackingStatus[u];\n            if (stat == TrackingStatus.PendingDownload) {\n                this.deviceTrackingStatus[u] = TrackingStatus.DownloadInProgress;\n            }\n        });\n\n        const finished = (success: boolean): void => {\n            this.emit(CryptoEvent.WillUpdateDevices, users, !this.hasFetched);\n            users.forEach((u) => {\n                this.dirty = true;\n\n                // we may have queued up another download request for this user\n                // since we started this request. If that happens, we should\n                // ignore the completion of the first one.\n                if (this.keyDownloadsInProgressByUser[u] !== prom) {\n                    logger.log('Another update in the queue for', u, '- not marking up-to-date');\n                    return;\n                }\n                delete this.keyDownloadsInProgressByUser[u];\n                const stat = this.deviceTrackingStatus[u];\n                if (stat == TrackingStatus.DownloadInProgress) {\n                    if (success) {\n                        // we didn't get any new invalidations since this download started:\n                        // this user's device list is now up to date.\n                        this.deviceTrackingStatus[u] = TrackingStatus.UpToDate;\n                        logger.log(\"Device list for\", u, \"now up to date\");\n                    } else {\n                        this.deviceTrackingStatus[u] = TrackingStatus.PendingDownload;\n                    }\n                }\n            });\n            this.saveIfDirty();\n            this.emit(CryptoEvent.DevicesUpdated, users, !this.hasFetched);\n            this.hasFetched = true;\n        };\n\n        return prom;\n    }\n}\n\n/**\n * Serialises updates to device lists\n *\n * Ensures that results from /keys/query are not overwritten if a second call\n * completes *before* an earlier one.\n *\n * It currently does this by ensuring only one call to /keys/query happens at a\n * time (and queuing other requests up).\n */\nclass DeviceListUpdateSerialiser {\n    private downloadInProgress = false;\n\n    // users which are queued for download\n    // userId -> true\n    private keyDownloadsQueuedByUser: Record<string, boolean> = {};\n\n    // deferred which is resolved when the queued users are downloaded.\n    // non-null indicates that we have users queued for download.\n    private queuedQueryDeferred: IDeferred<void> = null;\n\n    private syncToken: string = null; // The sync token we send with the requests\n\n    /*\n     * @param {object} baseApis Base API object\n     * @param {object} olmDevice The Olm Device\n     * @param {object} deviceList The device list object, the device list to be updated\n     */\n    constructor(\n        private readonly baseApis: MatrixClient,\n        private readonly olmDevice: OlmDevice,\n        private readonly deviceList: DeviceList,\n    ) {}\n\n    /**\n     * Make a key query request for the given users\n     *\n     * @param {String[]} users list of user ids\n     *\n     * @param {String} syncToken sync token to pass in the query request, to\n     *     help the HS give the most recent results\n     *\n     * @return {Promise} resolves when all the users listed have\n     *     been updated. rejects if there was a problem updating any of the\n     *     users.\n     */\n    public updateDevicesForUsers(users: string[], syncToken: string): Promise<void> {\n        users.forEach((u) => {\n            this.keyDownloadsQueuedByUser[u] = true;\n        });\n\n        if (!this.queuedQueryDeferred) {\n            this.queuedQueryDeferred = defer();\n        }\n\n        // We always take the new sync token and just use the latest one we've\n        // been given, since it just needs to be at least as recent as the\n        // sync response the device invalidation message arrived in\n        this.syncToken = syncToken;\n\n        if (this.downloadInProgress) {\n            // just queue up these users\n            logger.log('Queued key download for', users);\n            return this.queuedQueryDeferred.promise;\n        }\n\n        // start a new download.\n        return this.doQueuedQueries();\n    }\n\n    private doQueuedQueries(): Promise<void> {\n        if (this.downloadInProgress) {\n            throw new Error(\n                \"DeviceListUpdateSerialiser.doQueuedQueries called with request active\",\n            );\n        }\n\n        const downloadUsers = Object.keys(this.keyDownloadsQueuedByUser);\n        this.keyDownloadsQueuedByUser = {};\n        const deferred = this.queuedQueryDeferred;\n        this.queuedQueryDeferred = null;\n\n        logger.log('Starting key download for', downloadUsers);\n        this.downloadInProgress = true;\n\n        const opts: Parameters<MatrixClient[\"downloadKeysForUsers\"]>[1] = {};\n        if (this.syncToken) {\n            opts.token = this.syncToken;\n        }\n\n        const factories: Array<() => Promise<IDownloadKeyResult>> = [];\n        for (let i = 0; i < downloadUsers.length; i += this.deviceList.keyDownloadChunkSize) {\n            const userSlice = downloadUsers.slice(i, i + this.deviceList.keyDownloadChunkSize);\n            factories.push(() => this.baseApis.downloadKeysForUsers(userSlice, opts));\n        }\n\n        chunkPromises(factories, 3).then(async (responses: IDownloadKeyResult[]) => {\n            const dk: IDownloadKeyResult[\"device_keys\"]\n                = Object.assign({}, ...(responses.map(res => res.device_keys || {})));\n            const masterKeys: IDownloadKeyResult[\"master_keys\"]\n                = Object.assign({}, ...(responses.map(res => res.master_keys || {})));\n            const ssks: IDownloadKeyResult[\"self_signing_keys\"]\n                = Object.assign({}, ...(responses.map(res => res.self_signing_keys || {})));\n            const usks: IDownloadKeyResult[\"user_signing_keys\"]\n                = Object.assign({}, ...(responses.map(res => res.user_signing_keys || {})));\n\n            // yield to other things that want to execute in between users, to\n            // avoid wedging the CPU\n            // (https://github.com/vector-im/element-web/issues/3158)\n            //\n            // of course we ought to do this in a web worker or similar, but\n            // this serves as an easy solution for now.\n            for (const userId of downloadUsers) {\n                await sleep(5);\n                try {\n                    await this.processQueryResponseForUser(\n                        userId, dk[userId], {\n                            master: masterKeys[userId],\n                            self_signing: ssks[userId],\n                            user_signing: usks[userId],\n                        },\n                    );\n                } catch (e) {\n                    // log the error but continue, so that one bad key\n                    // doesn't kill the whole process\n                    logger.error(`Error processing keys for ${userId}:`, e);\n                }\n            }\n        }).then(() => {\n            logger.log('Completed key download for ' + downloadUsers);\n\n            this.downloadInProgress = false;\n            deferred.resolve();\n\n            // if we have queued users, fire off another request.\n            if (this.queuedQueryDeferred) {\n                this.doQueuedQueries();\n            }\n        }, (e) => {\n            logger.warn('Error downloading keys for ' + downloadUsers + ':', e);\n            this.downloadInProgress = false;\n            deferred.reject(e);\n        });\n\n        return deferred.promise;\n    }\n\n    private async processQueryResponseForUser(\n        userId: string,\n        dkResponse: IDownloadKeyResult[\"device_keys\"][\"user_id\"],\n        crossSigningResponse: {\n            master: IDownloadKeyResult[\"master_keys\"][\"user_id\"];\n            self_signing: IDownloadKeyResult[\"master_keys\"][\"user_id\"]; // eslint-disable-line camelcase\n            user_signing: IDownloadKeyResult[\"user_signing_keys\"][\"user_id\"]; // eslint-disable-line camelcase\n        },\n    ): Promise<void> {\n        logger.log('got device keys for ' + userId + ':', dkResponse);\n        logger.log('got cross-signing keys for ' + userId + ':', crossSigningResponse);\n\n        {\n            // map from deviceid -> deviceinfo for this user\n            const userStore: Record<string, DeviceInfo> = {};\n            const devs = this.deviceList.getRawStoredDevicesForUser(userId);\n            if (devs) {\n                Object.keys(devs).forEach((deviceId) => {\n                    const d = DeviceInfo.fromStorage(devs[deviceId], deviceId);\n                    userStore[deviceId] = d;\n                });\n            }\n\n            await updateStoredDeviceKeysForUser(\n                this.olmDevice, userId, userStore, dkResponse || {},\n                this.baseApis.getUserId(), this.baseApis.deviceId,\n            );\n\n            // put the updates into the object that will be returned as our results\n            const storage: Record<string, IDevice> = {};\n            Object.keys(userStore).forEach((deviceId) => {\n                storage[deviceId] = userStore[deviceId].toStorage();\n            });\n\n            this.deviceList.setRawStoredDevicesForUser(userId, storage);\n        }\n\n        // now do the same for the cross-signing keys\n        {\n            // FIXME: should we be ignoring empty cross-signing responses, or\n            // should we be dropping the keys?\n            if (crossSigningResponse\n                && (crossSigningResponse.master || crossSigningResponse.self_signing\n                    || crossSigningResponse.user_signing)) {\n                const crossSigning\n                      = this.deviceList.getStoredCrossSigningForUser(userId)\n                      || new CrossSigningInfo(userId);\n\n                crossSigning.setKeys(crossSigningResponse);\n\n                this.deviceList.setRawStoredCrossSigningForUser(userId, crossSigning.toStorage());\n\n                // NB. Unlike most events in the js-sdk, this one is internal to the\n                // js-sdk and is not re-emitted\n                this.deviceList.emit(CryptoEvent.UserCrossSigningUpdated, userId);\n            }\n        }\n    }\n}\n\nasync function updateStoredDeviceKeysForUser(\n    olmDevice: OlmDevice,\n    userId: string,\n    userStore: Record<string, DeviceInfo>,\n    userResult: IDownloadKeyResult[\"device_keys\"][\"user_id\"],\n    localUserId: string,\n    localDeviceId: string,\n): Promise<boolean> {\n    let updated = false;\n\n    // remove any devices in the store which aren't in the response\n    for (const deviceId in userStore) {\n        if (!userStore.hasOwnProperty(deviceId)) {\n            continue;\n        }\n\n        if (!(deviceId in userResult)) {\n            if (userId === localUserId && deviceId === localDeviceId) {\n                logger.warn(\n                    `Local device ${deviceId} missing from sync, skipping removal`,\n                );\n                continue;\n            }\n\n            logger.log(\"Device \" + userId + \":\" + deviceId +\n                \" has been removed\");\n            delete userStore[deviceId];\n            updated = true;\n        }\n    }\n\n    for (const deviceId in userResult) {\n        if (!userResult.hasOwnProperty(deviceId)) {\n            continue;\n        }\n\n        const deviceResult = userResult[deviceId];\n\n        // check that the user_id and device_id in the response object are\n        // correct\n        if (deviceResult.user_id !== userId) {\n            logger.warn(\"Mismatched user_id \" + deviceResult.user_id +\n               \" in keys from \" + userId + \":\" + deviceId);\n            continue;\n        }\n        if (deviceResult.device_id !== deviceId) {\n            logger.warn(\"Mismatched device_id \" + deviceResult.device_id +\n               \" in keys from \" + userId + \":\" + deviceId);\n            continue;\n        }\n\n        if (await storeDeviceKeys(olmDevice, userStore, deviceResult)) {\n            updated = true;\n        }\n    }\n\n    return updated;\n}\n\n/*\n * Process a device in a /query response, and add it to the userStore\n *\n * returns (a promise for) true if a change was made, else false\n */\nasync function storeDeviceKeys(\n    olmDevice: OlmDevice,\n    userStore: Record<string, DeviceInfo>,\n    deviceResult: any, // TODO types\n): Promise<boolean> {\n    if (!deviceResult.keys) {\n        // no keys?\n        return false;\n    }\n\n    const deviceId = deviceResult.device_id;\n    const userId = deviceResult.user_id;\n\n    const signKeyId = \"ed25519:\" + deviceId;\n    const signKey = deviceResult.keys[signKeyId];\n    if (!signKey) {\n        logger.warn(\"Device \" + userId + \":\" + deviceId + \" has no ed25519 key\");\n        return false;\n    }\n\n    const unsigned = deviceResult.unsigned || {};\n    const signatures = deviceResult.signatures || {};\n\n    try {\n        await olmlib.verifySignature(olmDevice, deviceResult, userId, deviceId, signKey);\n    } catch (e) {\n        logger.warn(\"Unable to verify signature on device \" + userId + \":\" + deviceId + \":\" + e);\n        return false;\n    }\n\n    // DeviceInfo\n    let deviceStore;\n\n    if (deviceId in userStore) {\n        // already have this device.\n        deviceStore = userStore[deviceId];\n\n        if (deviceStore.getFingerprint() != signKey) {\n            // this should only happen if the list has been MITMed; we are\n            // best off sticking with the original keys.\n            //\n            // Should we warn the user about it somehow?\n            logger.warn(\"Ed25519 key for device \" + userId + \":\" +\n               deviceId + \" has changed\");\n            return false;\n        }\n    } else {\n        userStore[deviceId] = deviceStore = new DeviceInfo(deviceId);\n    }\n\n    deviceStore.keys = deviceResult.keys || {};\n    deviceStore.algorithms = deviceResult.algorithms || [];\n    deviceStore.unsigned = unsigned;\n    deviceStore.signatures = signatures;\n    return true;\n}\n",
    "/*\nCopyright 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { logger } from \"../logger\";\nimport { MatrixEvent } from \"../models/event\";\nimport { createCryptoStoreCacheCallbacks, ICacheCallbacks } from \"./CrossSigning\";\nimport { IndexedDBCryptoStore } from './store/indexeddb-crypto-store';\nimport { Method, PREFIX_UNSTABLE } from \"../http-api\";\nimport { Crypto, IBootstrapCrossSigningOpts } from \"./index\";\nimport {\n    ClientEvent,\n    CrossSigningKeys,\n    ClientEventHandlerMap,\n    ICrossSigningKey,\n    ICryptoCallbacks,\n    ISignedKey,\n    KeySignatures,\n} from \"../matrix\";\nimport { ISecretStorageKeyInfo } from \"./api\";\nimport { IKeyBackupInfo } from \"./keybackup\";\nimport { TypedEventEmitter } from \"../models/typed-event-emitter\";\nimport { IAccountDataClient } from \"./SecretStorage\";\n\ninterface ICrossSigningKeys {\n    authUpload: IBootstrapCrossSigningOpts[\"authUploadDeviceSigningKeys\"];\n    keys: Record<string, ICrossSigningKey>;\n}\n\n/**\n * Builds an EncryptionSetupOperation by calling any of the add.. methods.\n * Once done, `buildOperation()` can be called which allows to apply to operation.\n *\n * This is used as a helper by Crypto to keep track of all the network requests\n * and other side-effects of bootstrapping, so it can be applied in one go (and retried in the future)\n * Also keeps track of all the private keys created during bootstrapping, so we don't need to prompt for them\n * more than once.\n */\nexport class EncryptionSetupBuilder {\n    public readonly accountDataClientAdapter: AccountDataClientAdapter;\n    public readonly crossSigningCallbacks: CrossSigningCallbacks;\n    public readonly ssssCryptoCallbacks: SSSSCryptoCallbacks;\n\n    private crossSigningKeys: ICrossSigningKeys = null;\n    private keySignatures: KeySignatures = null;\n    private keyBackupInfo: IKeyBackupInfo = null;\n    private sessionBackupPrivateKey: Uint8Array;\n\n    /**\n     * @param {Object.<String, MatrixEvent>} accountData pre-existing account data, will only be read, not written.\n     * @param {CryptoCallbacks} delegateCryptoCallbacks crypto callbacks to delegate to if the key isn't in cache yet\n     */\n    constructor(accountData: Record<string, MatrixEvent>, delegateCryptoCallbacks?: ICryptoCallbacks) {\n        this.accountDataClientAdapter = new AccountDataClientAdapter(accountData);\n        this.crossSigningCallbacks = new CrossSigningCallbacks();\n        this.ssssCryptoCallbacks = new SSSSCryptoCallbacks(delegateCryptoCallbacks);\n    }\n\n    /**\n     * Adds new cross-signing public keys\n     *\n     * @param {function} authUpload Function called to await an interactive auth\n     * flow when uploading device signing keys.\n     * Args:\n     *     {function} A function that makes the request requiring auth. Receives\n     *     the auth data as an object. Can be called multiple times, first with\n     *     an empty authDict, to obtain the flows.\n     * @param {Object} keys the new keys\n     */\n    public addCrossSigningKeys(authUpload: ICrossSigningKeys[\"authUpload\"], keys: ICrossSigningKeys[\"keys\"]): void {\n        this.crossSigningKeys = { authUpload, keys };\n    }\n\n    /**\n     * Adds the key backup info to be updated on the server\n     *\n     * Used either to create a new key backup, or add signatures\n     * from the new MSK.\n     *\n     * @param {Object} keyBackupInfo as received from/sent to the server\n     */\n    public addSessionBackup(keyBackupInfo: IKeyBackupInfo): void {\n        this.keyBackupInfo = keyBackupInfo;\n    }\n\n    /**\n     * Adds the session backup private key to be updated in the local cache\n     *\n     * Used after fixing the format of the key\n     *\n     * @param {Uint8Array} privateKey\n     */\n    public addSessionBackupPrivateKeyToCache(privateKey: Uint8Array): void {\n        this.sessionBackupPrivateKey = privateKey;\n    }\n\n    /**\n     * Add signatures from a given user and device/x-sign key\n     * Used to sign the new cross-signing key with the device key\n     *\n     * @param {String} userId\n     * @param {String} deviceId\n     * @param {Object} signature\n     */\n    public addKeySignature(userId: string, deviceId: string, signature: ISignedKey): void {\n        if (!this.keySignatures) {\n            this.keySignatures = {};\n        }\n        const userSignatures = this.keySignatures[userId] || {};\n        this.keySignatures[userId] = userSignatures;\n        userSignatures[deviceId] = signature;\n    }\n\n    /**\n     * @param {String} type\n     * @param {Object} content\n     * @return {Promise}\n     */\n    public async setAccountData(type: string, content: object): Promise<void> {\n        await this.accountDataClientAdapter.setAccountData(type, content);\n    }\n\n    /**\n     * builds the operation containing all the parts that have been added to the builder\n     * @return {EncryptionSetupOperation}\n     */\n    public buildOperation(): EncryptionSetupOperation {\n        const accountData = this.accountDataClientAdapter.values;\n        return new EncryptionSetupOperation(\n            accountData,\n            this.crossSigningKeys,\n            this.keyBackupInfo,\n            this.keySignatures,\n        );\n    }\n\n    /**\n     * Stores the created keys locally.\n     *\n     * This does not yet store the operation in a way that it can be restored,\n     * but that is the idea in the future.\n     *\n     * @param  {Crypto} crypto\n     * @return {Promise}\n     */\n    public async persist(crypto: Crypto): Promise<void> {\n        // store private keys in cache\n        if (this.crossSigningKeys) {\n            const cacheCallbacks = createCryptoStoreCacheCallbacks(crypto.cryptoStore, crypto.olmDevice);\n            for (const type of [\"master\", \"self_signing\", \"user_signing\"]) {\n                logger.log(`Cache ${type} cross-signing private key locally`);\n                const privateKey = this.crossSigningCallbacks.privateKeys.get(type);\n                await cacheCallbacks.storeCrossSigningKeyCache(type, privateKey);\n            }\n            // store own cross-sign pubkeys as trusted\n            await crypto.cryptoStore.doTxn(\n                'readwrite', [IndexedDBCryptoStore.STORE_ACCOUNT],\n                (txn) => {\n                    crypto.cryptoStore.storeCrossSigningKeys(\n                        txn, this.crossSigningKeys.keys);\n                },\n            );\n        }\n        // store session backup key in cache\n        if (this.sessionBackupPrivateKey) {\n            await crypto.storeSessionBackupPrivateKey(this.sessionBackupPrivateKey);\n        }\n    }\n}\n\n/**\n * Can be created from EncryptionSetupBuilder, or\n * (in a follow-up PR, not implemented yet) restored from storage, to retry.\n *\n * It does not have knowledge of any private keys, unlike the builder.\n */\nexport class EncryptionSetupOperation {\n    /**\n     * @param  {Map<String, Object>} accountData\n     * @param  {Object} crossSigningKeys\n     * @param  {Object} keyBackupInfo\n     * @param  {Object} keySignatures\n     */\n    constructor(\n        private readonly accountData: Map<string, object>,\n        private readonly crossSigningKeys: ICrossSigningKeys,\n        private readonly keyBackupInfo: IKeyBackupInfo,\n        private readonly keySignatures: KeySignatures,\n    ) {}\n\n    /**\n     * Runs the (remaining part of, in the future) operation by sending requests to the server.\n     * @param {Crypto} crypto\n     */\n    public async apply(crypto: Crypto): Promise<void> {\n        const baseApis = crypto.baseApis;\n        // upload cross-signing keys\n        if (this.crossSigningKeys) {\n            const keys: Partial<CrossSigningKeys> = {};\n            for (const [name, key] of Object.entries(this.crossSigningKeys.keys)) {\n                keys[name + \"_key\"] = key;\n            }\n\n            // We must only call `uploadDeviceSigningKeys` from inside this auth\n            // helper to ensure we properly handle auth errors.\n            await this.crossSigningKeys.authUpload(authDict => {\n                return baseApis.uploadDeviceSigningKeys(authDict, keys as CrossSigningKeys);\n            });\n\n            // pass the new keys to the main instance of our own CrossSigningInfo.\n            crypto.crossSigningInfo.setKeys(this.crossSigningKeys.keys);\n        }\n        // set account data\n        if (this.accountData) {\n            for (const [type, content] of this.accountData) {\n                await baseApis.setAccountData(type, content);\n            }\n        }\n        // upload first cross-signing signatures with the new key\n        // (e.g. signing our own device)\n        if (this.keySignatures) {\n            await baseApis.uploadKeySignatures(this.keySignatures);\n        }\n        // need to create/update key backup info\n        if (this.keyBackupInfo) {\n            if (this.keyBackupInfo.version) {\n                // session backup signature\n                // The backup is trusted because the user provided the private key.\n                // Sign the backup with the cross signing key so the key backup can\n                // be trusted via cross-signing.\n                await baseApis.http.authedRequest(\n                    undefined, Method.Put, \"/room_keys/version/\" + this.keyBackupInfo.version,\n                    undefined, {\n                        algorithm: this.keyBackupInfo.algorithm,\n                        auth_data: this.keyBackupInfo.auth_data,\n                    },\n                    { prefix: PREFIX_UNSTABLE },\n                );\n            } else {\n                // add new key backup\n                await baseApis.http.authedRequest(\n                    undefined, Method.Post, \"/room_keys/version\",\n                    undefined, this.keyBackupInfo,\n                    { prefix: PREFIX_UNSTABLE },\n                );\n            }\n        }\n    }\n}\n\n/**\n * Catches account data set by SecretStorage during bootstrapping by\n * implementing the methods related to account data in MatrixClient\n */\nclass AccountDataClientAdapter\n    extends TypedEventEmitter<ClientEvent.AccountData, ClientEventHandlerMap>\n    implements IAccountDataClient {\n    //\n    public readonly values = new Map<string, MatrixEvent>();\n\n    /**\n     * @param  {Object.<String, MatrixEvent>} existingValues existing account data\n     */\n    constructor(private readonly existingValues: Record<string, MatrixEvent>) {\n        super();\n    }\n\n    /**\n     * @param  {String} type\n     * @return {Promise<Object>} the content of the account data\n     */\n    public getAccountDataFromServer(type: string): Promise<any> {\n        return Promise.resolve(this.getAccountData(type));\n    }\n\n    /**\n     * @param  {String} type\n     * @return {Object} the content of the account data\n     */\n    public getAccountData(type: string): MatrixEvent {\n        const modifiedValue = this.values.get(type);\n        if (modifiedValue) {\n            return modifiedValue;\n        }\n        const existingValue = this.existingValues[type];\n        if (existingValue) {\n            return existingValue.getContent();\n        }\n        return null;\n    }\n\n    /**\n     * @param {String} type\n     * @param {Object} content\n     * @return {Promise}\n     */\n    public setAccountData(type: string, content: any): Promise<{}> {\n        const lastEvent = this.values.get(type);\n        this.values.set(type, content);\n        // ensure accountData is emitted on the next tick,\n        // as SecretStorage listens for it while calling this method\n        // and it seems to rely on this.\n        return Promise.resolve().then(() => {\n            const event = new MatrixEvent({ type, content });\n            this.emit(ClientEvent.AccountData, event, lastEvent);\n            return {};\n        });\n    }\n}\n\n/**\n * Catches the private cross-signing keys set during bootstrapping\n * by both cache callbacks (see createCryptoStoreCacheCallbacks) as non-cache callbacks.\n * See CrossSigningInfo constructor\n */\nclass CrossSigningCallbacks implements ICryptoCallbacks, ICacheCallbacks {\n    public readonly privateKeys = new Map<string, Uint8Array>();\n\n    // cache callbacks\n    public getCrossSigningKeyCache(type: string, expectedPublicKey: string): Promise<Uint8Array> {\n        return this.getCrossSigningKey(type, expectedPublicKey);\n    }\n\n    public storeCrossSigningKeyCache(type: string, key: Uint8Array): Promise<void> {\n        this.privateKeys.set(type, key);\n        return Promise.resolve();\n    }\n\n    // non-cache callbacks\n    public getCrossSigningKey(type: string, expectedPubkey: string): Promise<Uint8Array> {\n        return Promise.resolve(this.privateKeys.get(type));\n    }\n\n    public saveCrossSigningKeys(privateKeys: Record<string, Uint8Array>) {\n        for (const [type, privateKey] of Object.entries(privateKeys)) {\n            this.privateKeys.set(type, privateKey);\n        }\n    }\n}\n\n/**\n * Catches the 4S private key set during bootstrapping by implementing\n * the SecretStorage crypto callbacks\n */\nclass SSSSCryptoCallbacks {\n    private readonly privateKeys = new Map<string, Uint8Array>();\n\n    constructor(private readonly delegateCryptoCallbacks?: ICryptoCallbacks) {}\n\n    public async getSecretStorageKey(\n        { keys }: { keys: Record<string, ISecretStorageKeyInfo> },\n        name: string,\n    ): Promise<[string, Uint8Array]|null> {\n        for (const keyId of Object.keys(keys)) {\n            const privateKey = this.privateKeys.get(keyId);\n            if (privateKey) {\n                return [keyId, privateKey];\n            }\n        }\n        // if we don't have the key cached yet, ask\n        // for it to the general crypto callbacks and cache it\n        if (this?.delegateCryptoCallbacks?.getSecretStorageKey) {\n            const result = await this.delegateCryptoCallbacks.\n                getSecretStorageKey({ keys }, name);\n            if (result) {\n                const [keyId, privateKey] = result;\n                this.privateKeys.set(keyId, privateKey);\n            }\n            return result;\n        }\n        return null;\n    }\n\n    public addPrivateKey(keyId: string, keyInfo: ISecretStorageKeyInfo, privKey: Uint8Array): void {\n        this.privateKeys.set(keyId, privKey);\n        // Also pass along to application to cache if it wishes\n        this.delegateCryptoCallbacks?.cacheSecretStorageKey?.(keyId, keyInfo, privKey);\n    }\n}\n",
    "/*\nCopyright 2016 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { Account, InboundGroupSession, OutboundGroupSession, Session, Utility } from \"@matrix-org/olm\";\nimport { Logger } from \"loglevel\";\n\nimport { logger } from '../logger';\nimport { IndexedDBCryptoStore } from './store/indexeddb-crypto-store';\nimport * as algorithms from './algorithms';\nimport { CryptoStore, IProblem, ISessionInfo, IWithheld } from \"./store/base\";\nimport { IOlmDevice, IOutboundGroupSessionKey } from \"./algorithms/megolm\";\nimport { IMegolmSessionData } from \"./index\";\n\n// The maximum size of an event is 65K, and we base64 the content, so this is a\n// reasonable approximation to the biggest plaintext we can encrypt.\nconst MAX_PLAINTEXT_LENGTH = 65536 * 3 / 4;\n\nfunction checkPayloadLength(payloadString: string): void {\n    if (payloadString === undefined) {\n        throw new Error(\"payloadString undefined\");\n    }\n\n    if (payloadString.length > MAX_PLAINTEXT_LENGTH) {\n        // might as well fail early here rather than letting the olm library throw\n        // a cryptic memory allocation error.\n        //\n        // Note that even if we manage to do the encryption, the message send may fail,\n        // because by the time we've wrapped the ciphertext in the event object, it may\n        // exceed 65K. But at least we won't just fail with \"abort()\" in that case.\n        const err = new Error(\"Message too long (\" + payloadString.length + \" bytes). \" +\n                        \"The maximum for an encrypted message is \" +\n                        MAX_PLAINTEXT_LENGTH + \" bytes.\");\n        // TODO: [TypeScript] We should have our own error types\n        err[\"data\"] = {\n            errcode: \"M_TOO_LARGE\",\n            error: \"Payload too large for encrypted message\",\n        };\n        throw err;\n    }\n}\n\n/**\n * The type of object we use for importing and exporting megolm session data.\n *\n * @typedef {Object} module:crypto/OlmDevice.MegolmSessionData\n * @property {String} sender_key  Sender's Curve25519 device key\n * @property {String[]} forwarding_curve25519_key_chain Devices which forwarded\n *     this session to us (normally empty).\n * @property {Object<string, string>} sender_claimed_keys Other keys the sender claims.\n * @property {String} room_id     Room this session is used in\n * @property {String} session_id  Unique id for the session\n * @property {String} session_key Base64'ed key data\n */\n\ninterface IInitOpts {\n    fromExportedDevice?: IExportedDevice;\n    pickleKey?: string;\n}\n\n/**\n * data stored in the session store about an inbound group session\n *\n * @typedef {Object} InboundGroupSessionData\n * @property {string} room_id\n * @property {string} session   pickled Olm.InboundGroupSession\n * @property {Object<string, string>} keysClaimed\n * @property {Array<string>} forwardingCurve25519KeyChain  Devices involved in forwarding\n *     this session to us (normally empty).\n * @property {boolean=} untrusted whether this session is untrusted.\n * @property {boolean=} sharedHistory whether this session exists during the room being set to shared history.\n */\n\nexport interface InboundGroupSessionData {\n    room_id: string; // eslint-disable-line camelcase\n    session: string;\n    keysClaimed: Record<string, string>;\n    forwardingCurve25519KeyChain: string[];\n    untrusted?: boolean;\n    sharedHistory?: boolean;\n}\n\ninterface IDecryptedGroupMessage {\n    result: string;\n    keysClaimed: Record<string, string>;\n    senderKey: string;\n    forwardingCurve25519KeyChain: string[];\n    untrusted: boolean;\n}\n\nexport interface IExportedDevice {\n    pickleKey: string;\n    pickledAccount: string;\n    sessions: ISessionInfo[];\n}\n\ninterface IUnpickledSessionInfo extends Omit<ISessionInfo, \"session\"> {\n    session: Session;\n}\n\n/* eslint-disable camelcase */\ninterface IInboundGroupSessionKey {\n    chain_index: number;\n    key: string;\n    forwarding_curve25519_key_chain: string[];\n    sender_claimed_ed25519_key: string;\n    shared_history: boolean;\n}\n/* eslint-enable camelcase */\n\n/**\n * Manages the olm cryptography functions. Each OlmDevice has a single\n * OlmAccount and a number of OlmSessions.\n *\n * Accounts and sessions are kept pickled in the cryptoStore.\n *\n * @constructor\n * @alias module:crypto/OlmDevice\n *\n * @param {Object} cryptoStore A store for crypto data\n *\n * @property {string} deviceCurve25519Key   Curve25519 key for the account\n * @property {string} deviceEd25519Key      Ed25519 key for the account\n */\nexport class OlmDevice {\n    public pickleKey = \"DEFAULT_KEY\"; // set by consumers\n\n    // don't know these until we load the account from storage in init()\n    public deviceCurve25519Key: string = null;\n    public deviceEd25519Key: string = null;\n    private maxOneTimeKeys: number = null;\n\n    // we don't bother stashing outboundgroupsessions in the cryptoStore -\n    // instead we keep them here.\n    private outboundGroupSessionStore: Record<string, string> = {};\n\n    // Store a set of decrypted message indexes for each group session.\n    // This partially mitigates a replay attack where a MITM resends a group\n    // message into the room.\n    //\n    // When we decrypt a message and the message index matches a previously\n    // decrypted message, one possible cause of that is that we are decrypting\n    // the same event, and may not indicate an actual replay attack.  For\n    // example, this could happen if we receive events, forget about them, and\n    // then re-fetch them when we backfill.  So we store the event ID and\n    // timestamp corresponding to each message index when we first decrypt it,\n    // and compare these against the event ID and timestamp every time we use\n    // that same index.  If they match, then we're probably decrypting the same\n    // event and we don't consider it a replay attack.\n    //\n    // Keys are strings of form \"<senderKey>|<session_id>|<message_index>\"\n    // Values are objects of the form \"{id: <event id>, timestamp: <ts>}\"\n    private inboundGroupSessionMessageIndexes: Record<string, { id: string, timestamp: number }> = {};\n\n    // Keep track of sessions that we're starting, so that we don't start\n    // multiple sessions for the same device at the same time.\n    public sessionsInProgress: Record<string, Promise<void>> = {}; // set by consumers\n\n    // Used by olm to serialise prekey message decryptions\n    public olmPrekeyPromise: Promise<any> = Promise.resolve(); // set by consumers\n\n    constructor(private readonly cryptoStore: CryptoStore) {\n    }\n\n    /**\n     * @return {array} The version of Olm.\n     */\n    static getOlmVersion(): [number, number, number] {\n        return global.Olm.get_library_version();\n    }\n\n    /**\n     * Initialise the OlmAccount. This must be called before any other operations\n     * on the OlmDevice.\n     *\n     * Data from an exported Olm device can be provided\n     * in order to re-create this device.\n     *\n     * Attempts to load the OlmAccount from the crypto store, or creates one if none is\n     * found.\n     *\n     * Reads the device keys from the OlmAccount object.\n     *\n     * @param {object} opts\n     * @param {object} opts.fromExportedDevice (Optional) data from exported device\n     *     that must be re-created.\n     *     If present, opts.pickleKey is ignored\n     *     (exported data already provides a pickle key)\n     * @param {object} opts.pickleKey (Optional) pickle key to set instead of default one\n     */\n    public async init({ pickleKey, fromExportedDevice }: IInitOpts = {}): Promise<void> {\n        let e2eKeys;\n        const account = new global.Olm.Account();\n\n        try {\n            if (fromExportedDevice) {\n                if (pickleKey) {\n                    logger.warn(\n                        'ignoring opts.pickleKey'\n                        + ' because opts.fromExportedDevice is present.',\n                    );\n                }\n                this.pickleKey = fromExportedDevice.pickleKey;\n                await this.initialiseFromExportedDevice(fromExportedDevice, account);\n            } else {\n                if (pickleKey) {\n                    this.pickleKey = pickleKey;\n                }\n                await this.initialiseAccount(account);\n            }\n            e2eKeys = JSON.parse(account.identity_keys());\n\n            this.maxOneTimeKeys = account.max_number_of_one_time_keys();\n        } finally {\n            account.free();\n        }\n\n        this.deviceCurve25519Key = e2eKeys.curve25519;\n        this.deviceEd25519Key = e2eKeys.ed25519;\n    }\n\n    /**\n     * Populates the crypto store using data that was exported from an existing device.\n     * Note that for now only the “account” and “sessions” stores are populated;\n     * Other stores will be as with a new device.\n     *\n     * @param {IExportedDevice} exportedData Data exported from another device\n     *     through the “export” method.\n     * @param {Olm.Account} account an olm account to initialize\n     */\n    private async initialiseFromExportedDevice(exportedData: IExportedDevice, account: Account): Promise<void> {\n        await this.cryptoStore.doTxn(\n            'readwrite',\n            [\n                IndexedDBCryptoStore.STORE_ACCOUNT,\n                IndexedDBCryptoStore.STORE_SESSIONS,\n            ],\n            (txn) => {\n                this.cryptoStore.storeAccount(txn, exportedData.pickledAccount);\n                exportedData.sessions.forEach((session) => {\n                    const {\n                        deviceKey,\n                        sessionId,\n                    } = session;\n                    const sessionInfo = {\n                        session: session.session,\n                        lastReceivedMessageTs: session.lastReceivedMessageTs,\n                    };\n                    this.cryptoStore.storeEndToEndSession(\n                        deviceKey,\n                        sessionId,\n                        sessionInfo,\n                        txn,\n                    );\n                });\n            });\n        account.unpickle(this.pickleKey, exportedData.pickledAccount);\n    }\n\n    private async initialiseAccount(account: Account): Promise<void> {\n        await this.cryptoStore.doTxn(\n            'readwrite',\n            [IndexedDBCryptoStore.STORE_ACCOUNT],\n            (txn) => {\n                this.cryptoStore.getAccount(txn, (pickledAccount) => {\n                    if (pickledAccount !== null) {\n                        account.unpickle(this.pickleKey, pickledAccount);\n                    } else {\n                        account.create();\n                        pickledAccount = account.pickle(this.pickleKey);\n                        this.cryptoStore.storeAccount(txn, pickledAccount);\n                    }\n                });\n            },\n        );\n    }\n\n    /**\n     * extract our OlmAccount from the crypto store and call the given function\n     * with the account object\n     * The `account` object is usable only within the callback passed to this\n     * function and will be freed as soon the callback returns. It is *not*\n     * usable for the rest of the lifetime of the transaction.\n     * This function requires a live transaction object from cryptoStore.doTxn()\n     * and therefore may only be called in a doTxn() callback.\n     *\n     * @param {*} txn Opaque transaction object from cryptoStore.doTxn()\n     * @param {function} func\n     * @private\n     */\n    private getAccount(txn: unknown, func: (account: Account) => void): void {\n        this.cryptoStore.getAccount(txn, (pickledAccount: string) => {\n            const account = new global.Olm.Account();\n            try {\n                account.unpickle(this.pickleKey, pickledAccount);\n                func(account);\n            } finally {\n                account.free();\n            }\n        });\n    }\n\n    /*\n     * Saves an account to the crypto store.\n     * This function requires a live transaction object from cryptoStore.doTxn()\n     * and therefore may only be called in a doTxn() callback.\n     *\n     * @param {*} txn Opaque transaction object from cryptoStore.doTxn()\n     * @param {object} Olm.Account object\n     * @private\n     */\n    private storeAccount(txn: unknown, account: Account): void {\n        this.cryptoStore.storeAccount(txn, account.pickle(this.pickleKey));\n    }\n\n    /**\n     * Export data for re-creating the Olm device later.\n     * TODO export data other than just account and (P2P) sessions.\n     *\n     * @return {Promise<object>} The exported data\n     */\n    public async export(): Promise<IExportedDevice> {\n        const result: Partial<IExportedDevice> = {\n            pickleKey: this.pickleKey,\n        };\n\n        await this.cryptoStore.doTxn(\n            'readonly',\n            [\n                IndexedDBCryptoStore.STORE_ACCOUNT,\n                IndexedDBCryptoStore.STORE_SESSIONS,\n            ],\n            (txn) => {\n                this.cryptoStore.getAccount(txn, (pickledAccount: string) => {\n                    result.pickledAccount = pickledAccount;\n                });\n                result.sessions = [];\n                // Note that the pickledSession object we get in the callback\n                // is not exactly the same thing you get in method _getSession\n                // see documentation of IndexedDBCryptoStore.getAllEndToEndSessions\n                this.cryptoStore.getAllEndToEndSessions(txn, (pickledSession) => {\n                    result.sessions.push(pickledSession);\n                });\n            },\n        );\n        return result as IExportedDevice;\n    }\n\n    /**\n     * extract an OlmSession from the session store and call the given function\n     * The session is usable only within the callback passed to this\n     * function and will be freed as soon the callback returns. It is *not*\n     * usable for the rest of the lifetime of the transaction.\n     *\n     * @param {string} deviceKey\n     * @param {string} sessionId\n     * @param {*} txn Opaque transaction object from cryptoStore.doTxn()\n     * @param {function} func\n     * @private\n     */\n    private getSession(\n        deviceKey: string,\n        sessionId: string,\n        txn: unknown,\n        func: (unpickledSessionInfo: IUnpickledSessionInfo) => void,\n    ): void {\n        this.cryptoStore.getEndToEndSession(\n            deviceKey, sessionId, txn, (sessionInfo: ISessionInfo) => {\n                this.unpickleSession(sessionInfo, func);\n            },\n        );\n    }\n\n    /**\n     * Creates a session object from a session pickle and executes the given\n     * function with it. The session object is destroyed once the function\n     * returns.\n     *\n     * @param {object} sessionInfo\n     * @param {function} func\n     * @private\n     */\n    private unpickleSession(\n        sessionInfo: ISessionInfo,\n        func: (unpickledSessionInfo: IUnpickledSessionInfo) => void,\n    ): void {\n        const session = new global.Olm.Session();\n        try {\n            session.unpickle(this.pickleKey, sessionInfo.session);\n            const unpickledSessInfo: IUnpickledSessionInfo = Object.assign({}, sessionInfo, { session });\n\n            func(unpickledSessInfo);\n        } finally {\n            session.free();\n        }\n    }\n\n    /**\n     * store our OlmSession in the session store\n     *\n     * @param {string} deviceKey\n     * @param {object} sessionInfo {session: OlmSession, lastReceivedMessageTs: int}\n     * @param {*} txn Opaque transaction object from cryptoStore.doTxn()\n     * @private\n     */\n    private saveSession(deviceKey: string, sessionInfo: IUnpickledSessionInfo, txn: unknown): void {\n        const sessionId = sessionInfo.session.session_id();\n        const pickledSessionInfo = Object.assign(sessionInfo, {\n            session: sessionInfo.session.pickle(this.pickleKey),\n        });\n        this.cryptoStore.storeEndToEndSession(deviceKey, sessionId, pickledSessionInfo, txn);\n    }\n\n    /**\n     * get an OlmUtility and call the given function\n     *\n     * @param {function} func\n     * @return {object} result of func\n     * @private\n     */\n    private getUtility<T>(func: (utility: Utility) => T): T {\n        const utility = new global.Olm.Utility();\n        try {\n            return func(utility);\n        } finally {\n            utility.free();\n        }\n    }\n\n    /**\n     * Signs a message with the ed25519 key for this account.\n     *\n     * @param {string} message  message to be signed\n     * @return {Promise<string>} base64-encoded signature\n     */\n    public async sign(message: string): Promise<string> {\n        let result;\n        await this.cryptoStore.doTxn(\n            'readonly', [IndexedDBCryptoStore.STORE_ACCOUNT],\n            (txn) => {\n                this.getAccount(txn, (account: Account) => {\n                    result = account.sign(message);\n                });\n            });\n        return result;\n    }\n\n    /**\n     * Get the current (unused, unpublished) one-time keys for this account.\n     *\n     * @return {object} one time keys; an object with the single property\n     * <tt>curve25519</tt>, which is itself an object mapping key id to Curve25519\n     * key.\n     */\n    public async getOneTimeKeys(): Promise<{ curve25519: { [keyId: string]: string } }> {\n        let result;\n        await this.cryptoStore.doTxn(\n            'readonly', [IndexedDBCryptoStore.STORE_ACCOUNT],\n            (txn) => {\n                this.getAccount(txn, (account) => {\n                    result = JSON.parse(account.one_time_keys());\n                });\n            },\n        );\n\n        return result;\n    }\n\n    /**\n     * Get the maximum number of one-time keys we can store.\n     *\n     * @return {number} number of keys\n     */\n    public maxNumberOfOneTimeKeys(): number {\n        return this.maxOneTimeKeys;\n    }\n\n    /**\n     * Marks all of the one-time keys as published.\n     */\n    public async markKeysAsPublished(): Promise<void> {\n        await this.cryptoStore.doTxn(\n            'readwrite', [IndexedDBCryptoStore.STORE_ACCOUNT],\n            (txn) => {\n                this.getAccount(txn, (account: Account) => {\n                    account.mark_keys_as_published();\n                    this.storeAccount(txn, account);\n                });\n            },\n        );\n    }\n\n    /**\n     * Generate some new one-time keys\n     *\n     * @param {number} numKeys number of keys to generate\n     * @return {Promise} Resolved once the account is saved back having generated the keys\n     */\n    public generateOneTimeKeys(numKeys: number): Promise<void> {\n        return this.cryptoStore.doTxn(\n            'readwrite', [IndexedDBCryptoStore.STORE_ACCOUNT],\n            (txn) => {\n                this.getAccount(txn, (account) => {\n                    account.generate_one_time_keys(numKeys);\n                    this.storeAccount(txn, account);\n                });\n            },\n        );\n    }\n\n    /**\n     * Generate a new fallback keys\n     *\n     * @return {Promise} Resolved once the account is saved back having generated the key\n     */\n    public async generateFallbackKey(): Promise<void> {\n        await this.cryptoStore.doTxn(\n            'readwrite', [IndexedDBCryptoStore.STORE_ACCOUNT],\n            (txn) => {\n                this.getAccount(txn, (account) => {\n                    account.generate_fallback_key();\n                    this.storeAccount(txn, account);\n                });\n            },\n        );\n    }\n\n    public async getFallbackKey(): Promise<Record<string, Record<string, string>>> {\n        let result: Record<string, Record<string, string>>;\n        await this.cryptoStore.doTxn(\n            'readonly', [IndexedDBCryptoStore.STORE_ACCOUNT],\n            (txn) => {\n                this.getAccount(txn, (account: Account) => {\n                    result = JSON.parse(account.unpublished_fallback_key());\n                });\n            },\n        );\n        return result;\n    }\n\n    public async forgetOldFallbackKey(): Promise<void> {\n        await this.cryptoStore.doTxn(\n            'readwrite', [IndexedDBCryptoStore.STORE_ACCOUNT],\n            (txn) => {\n                this.getAccount(txn, (account: Account) => {\n                    account.forget_old_fallback_key();\n                    this.storeAccount(txn, account);\n                });\n            },\n        );\n    }\n\n    /**\n     * Generate a new outbound session\n     *\n     * The new session will be stored in the cryptoStore.\n     *\n     * @param {string} theirIdentityKey remote user's Curve25519 identity key\n     * @param {string} theirOneTimeKey  remote user's one-time Curve25519 key\n     * @return {string} sessionId for the outbound session.\n     */\n    public async createOutboundSession(theirIdentityKey: string, theirOneTimeKey: string): Promise<string> {\n        let newSessionId: string;\n        await this.cryptoStore.doTxn(\n            'readwrite', [\n                IndexedDBCryptoStore.STORE_ACCOUNT,\n                IndexedDBCryptoStore.STORE_SESSIONS,\n            ],\n            (txn) => {\n                this.getAccount(txn, (account: Account) => {\n                    const session = new global.Olm.Session();\n                    try {\n                        session.create_outbound(account, theirIdentityKey, theirOneTimeKey);\n                        newSessionId = session.session_id();\n                        this.storeAccount(txn, account);\n                        const sessionInfo: IUnpickledSessionInfo = {\n                            session,\n                            // Pretend we've received a message at this point, otherwise\n                            // if we try to send a message to the device, it won't use\n                            // this session\n                            lastReceivedMessageTs: Date.now(),\n                        };\n                        this.saveSession(theirIdentityKey, sessionInfo, txn);\n                    } finally {\n                        session.free();\n                    }\n                });\n            },\n            logger.withPrefix(\"[createOutboundSession]\"),\n        );\n        return newSessionId;\n    }\n\n    /**\n     * Generate a new inbound session, given an incoming message\n     *\n     * @param {string} theirDeviceIdentityKey remote user's Curve25519 identity key\n     * @param {number} messageType  messageType field from the received message (must be 0)\n     * @param {string} ciphertext base64-encoded body from the received message\n     *\n     * @return {{payload: string, session_id: string}} decrypted payload, and\n     *     session id of new session\n     *\n     * @raises {Error} if the received message was not valid (for instance, it\n     *     didn't use a valid one-time key).\n     */\n    public async createInboundSession(\n        theirDeviceIdentityKey: string,\n        messageType: number,\n        ciphertext: string,\n    ): Promise<{ payload: string, session_id: string }> { // eslint-disable-line camelcase\n        if (messageType !== 0) {\n            throw new Error(\"Need messageType == 0 to create inbound session\");\n        }\n\n        let result: { payload: string, session_id: string }; // eslint-disable-line camelcase\n        await this.cryptoStore.doTxn(\n            'readwrite', [\n                IndexedDBCryptoStore.STORE_ACCOUNT,\n                IndexedDBCryptoStore.STORE_SESSIONS,\n            ],\n            (txn) => {\n                this.getAccount(txn, (account: Account) => {\n                    const session = new global.Olm.Session();\n                    try {\n                        session.create_inbound_from(account, theirDeviceIdentityKey, ciphertext);\n                        account.remove_one_time_keys(session);\n                        this.storeAccount(txn, account);\n\n                        const payloadString = session.decrypt(messageType, ciphertext);\n\n                        const sessionInfo: IUnpickledSessionInfo = {\n                            session,\n                            // this counts as a received message: set last received message time\n                            // to now\n                            lastReceivedMessageTs: Date.now(),\n                        };\n                        this.saveSession(theirDeviceIdentityKey, sessionInfo, txn);\n\n                        result = {\n                            payload: payloadString,\n                            session_id: session.session_id(),\n                        };\n                    } finally {\n                        session.free();\n                    }\n                });\n            },\n            logger.withPrefix(\"[createInboundSession]\"),\n        );\n\n        return result;\n    }\n\n    /**\n     * Get a list of known session IDs for the given device\n     *\n     * @param {string} theirDeviceIdentityKey Curve25519 identity key for the\n     *     remote device\n     * @return {Promise<string[]>}  a list of known session ids for the device\n     */\n    public async getSessionIdsForDevice(theirDeviceIdentityKey: string): Promise<string[]> {\n        const log = logger.withPrefix(\"[getSessionIdsForDevice]\");\n\n        if (this.sessionsInProgress[theirDeviceIdentityKey]) {\n            log.debug(`Waiting for Olm session for ${theirDeviceIdentityKey} to be created`);\n            try {\n                await this.sessionsInProgress[theirDeviceIdentityKey];\n            } catch (e) {\n                // if the session failed to be created, just fall through and\n                // return an empty result\n            }\n        }\n        let sessionIds: string[];\n        await this.cryptoStore.doTxn(\n            'readonly', [IndexedDBCryptoStore.STORE_SESSIONS],\n            (txn) => {\n                this.cryptoStore.getEndToEndSessions(\n                    theirDeviceIdentityKey, txn, (sessions) => {\n                        sessionIds = Object.keys(sessions);\n                    },\n                );\n            },\n            log,\n        );\n\n        return sessionIds;\n    }\n\n    /**\n     * Get the right olm session id for encrypting messages to the given identity key\n     *\n     * @param {string} theirDeviceIdentityKey Curve25519 identity key for the\n     *     remote device\n     * @param {boolean} nowait Don't wait for an in-progress session to complete.\n     *     This should only be set to true of the calling function is the function\n     *     that marked the session as being in-progress.\n     * @param {Logger} [log] A possibly customised log\n     * @return {Promise<?string>}  session id, or null if no established session\n     */\n    public async getSessionIdForDevice(\n        theirDeviceIdentityKey: string,\n        nowait = false,\n        log?: Logger,\n    ): Promise<string | null> {\n        const sessionInfos = await this.getSessionInfoForDevice(theirDeviceIdentityKey, nowait, log);\n\n        if (sessionInfos.length === 0) {\n            return null;\n        }\n        // Use the session that has most recently received a message\n        let idxOfBest = 0;\n        for (let i = 1; i < sessionInfos.length; i++) {\n            const thisSessInfo = sessionInfos[i];\n            const thisLastReceived = thisSessInfo.lastReceivedMessageTs === undefined ?\n                0 : thisSessInfo.lastReceivedMessageTs;\n\n            const bestSessInfo = sessionInfos[idxOfBest];\n            const bestLastReceived = bestSessInfo.lastReceivedMessageTs === undefined ?\n                0 : bestSessInfo.lastReceivedMessageTs;\n            if (\n                thisLastReceived > bestLastReceived || (\n                    thisLastReceived === bestLastReceived &&\n                    thisSessInfo.sessionId < bestSessInfo.sessionId\n                )\n            ) {\n                idxOfBest = i;\n            }\n        }\n        return sessionInfos[idxOfBest].sessionId;\n    }\n\n    /**\n     * Get information on the active Olm sessions for a device.\n     * <p>\n     * Returns an array, with an entry for each active session. The first entry in\n     * the result will be the one used for outgoing messages. Each entry contains\n     * the keys 'hasReceivedMessage' (true if the session has received an incoming\n     * message and is therefore past the pre-key stage), and 'sessionId'.\n     *\n     * @param {string} deviceIdentityKey Curve25519 identity key for the device\n     * @param {boolean} nowait Don't wait for an in-progress session to complete.\n     *     This should only be set to true of the calling function is the function\n     *     that marked the session as being in-progress.\n     * @param {Logger} [log] A possibly customised log\n     * @return {Array.<{sessionId: string, hasReceivedMessage: boolean}>}\n     */\n    public async getSessionInfoForDevice(\n        deviceIdentityKey: string,\n        nowait = false,\n        log = logger,\n    ): Promise<{ sessionId: string, lastReceivedMessageTs: number, hasReceivedMessage: boolean }[]> {\n        log = log.withPrefix(\"[getSessionInfoForDevice]\");\n\n        if (this.sessionsInProgress[deviceIdentityKey] && !nowait) {\n            log.debug(`Waiting for Olm session for ${deviceIdentityKey} to be created`);\n            try {\n                await this.sessionsInProgress[deviceIdentityKey];\n            } catch (e) {\n                // if the session failed to be created, then just fall through and\n                // return an empty result\n            }\n        }\n        const info = [];\n\n        await this.cryptoStore.doTxn(\n            'readonly', [IndexedDBCryptoStore.STORE_SESSIONS],\n            (txn) => {\n                this.cryptoStore.getEndToEndSessions(deviceIdentityKey, txn, (sessions) => {\n                    const sessionIds = Object.keys(sessions).sort();\n                    for (const sessionId of sessionIds) {\n                        this.unpickleSession(sessions[sessionId], (sessInfo: IUnpickledSessionInfo) => {\n                            info.push({\n                                lastReceivedMessageTs: sessInfo.lastReceivedMessageTs,\n                                hasReceivedMessage: sessInfo.session.has_received_message(),\n                                sessionId: sessionId,\n                            });\n                        });\n                    }\n                });\n            },\n            log,\n        );\n\n        return info;\n    }\n\n    /**\n     * Encrypt an outgoing message using an existing session\n     *\n     * @param {string} theirDeviceIdentityKey Curve25519 identity key for the\n     *     remote device\n     * @param {string} sessionId  the id of the active session\n     * @param {string} payloadString  payload to be encrypted and sent\n     *\n     * @return {Promise<string>} ciphertext\n     */\n    public async encryptMessage(\n        theirDeviceIdentityKey: string,\n        sessionId: string,\n        payloadString: string,\n    ): Promise<string> {\n        checkPayloadLength(payloadString);\n\n        let res;\n        await this.cryptoStore.doTxn(\n            'readwrite', [IndexedDBCryptoStore.STORE_SESSIONS],\n            (txn) => {\n                this.getSession(theirDeviceIdentityKey, sessionId, txn, (sessionInfo) => {\n                    const sessionDesc = sessionInfo.session.describe();\n                    logger.log(\n                        \"encryptMessage: Olm Session ID \" + sessionId + \" to \" +\n                        theirDeviceIdentityKey + \": \" + sessionDesc,\n                    );\n                    res = sessionInfo.session.encrypt(payloadString);\n                    this.saveSession(theirDeviceIdentityKey, sessionInfo, txn);\n                });\n            },\n            logger.withPrefix(\"[encryptMessage]\"),\n        );\n        return res;\n    }\n\n    /**\n     * Decrypt an incoming message using an existing session\n     *\n     * @param {string} theirDeviceIdentityKey Curve25519 identity key for the\n     *     remote device\n     * @param {string} sessionId  the id of the active session\n     * @param {number} messageType  messageType field from the received message\n     * @param {string} ciphertext base64-encoded body from the received message\n     *\n     * @return {Promise<string>} decrypted payload.\n     */\n    public async decryptMessage(\n        theirDeviceIdentityKey: string,\n        sessionId: string,\n        messageType: number,\n        ciphertext: string,\n    ): Promise<string> {\n        let payloadString;\n        await this.cryptoStore.doTxn(\n            'readwrite', [IndexedDBCryptoStore.STORE_SESSIONS],\n            (txn) => {\n                this.getSession(theirDeviceIdentityKey, sessionId, txn, (sessionInfo: IUnpickledSessionInfo) => {\n                    const sessionDesc = sessionInfo.session.describe();\n                    logger.log(\n                        \"decryptMessage: Olm Session ID \" + sessionId + \" from \" +\n                        theirDeviceIdentityKey + \": \" + sessionDesc,\n                    );\n                    payloadString = sessionInfo.session.decrypt(messageType, ciphertext);\n                    sessionInfo.lastReceivedMessageTs = Date.now();\n                    this.saveSession(theirDeviceIdentityKey, sessionInfo, txn);\n                });\n            },\n            logger.withPrefix(\"[decryptMessage]\"),\n        );\n        return payloadString;\n    }\n\n    /**\n     * Determine if an incoming messages is a prekey message matching an existing session\n     *\n     * @param {string} theirDeviceIdentityKey Curve25519 identity key for the\n     *     remote device\n     * @param {string} sessionId  the id of the active session\n     * @param {number} messageType  messageType field from the received message\n     * @param {string} ciphertext base64-encoded body from the received message\n     *\n     * @return {Promise<boolean>} true if the received message is a prekey message which matches\n     *    the given session.\n     */\n    public async matchesSession(\n        theirDeviceIdentityKey: string,\n        sessionId: string,\n        messageType: number,\n        ciphertext: string,\n    ): Promise<boolean> {\n        if (messageType !== 0) {\n            return false;\n        }\n\n        let matches;\n        await this.cryptoStore.doTxn(\n            'readonly', [IndexedDBCryptoStore.STORE_SESSIONS],\n            (txn) => {\n                this.getSession(theirDeviceIdentityKey, sessionId, txn, (sessionInfo) => {\n                    matches = sessionInfo.session.matches_inbound(ciphertext);\n                });\n            },\n            logger.withPrefix(\"[matchesSession]\"),\n        );\n        return matches;\n    }\n\n    public async recordSessionProblem(deviceKey: string, type: string, fixed: boolean): Promise<void> {\n        await this.cryptoStore.storeEndToEndSessionProblem(deviceKey, type, fixed);\n    }\n\n    public async sessionMayHaveProblems(deviceKey: string, timestamp: number): Promise<IProblem> {\n        return await this.cryptoStore.getEndToEndSessionProblem(deviceKey, timestamp);\n    }\n\n    public async filterOutNotifiedErrorDevices(devices: IOlmDevice[]): Promise<IOlmDevice[]> {\n        return await this.cryptoStore.filterOutNotifiedErrorDevices(devices);\n    }\n\n    // Outbound group session\n    // ======================\n\n    /**\n     * store an OutboundGroupSession in outboundGroupSessionStore\n     *\n     * @param {Olm.OutboundGroupSession} session\n     * @private\n     */\n    private saveOutboundGroupSession(session: OutboundGroupSession): void {\n        this.outboundGroupSessionStore[session.session_id()] = session.pickle(this.pickleKey);\n    }\n\n    /**\n     * extract an OutboundGroupSession from outboundGroupSessionStore and call the\n     * given function\n     *\n     * @param {string} sessionId\n     * @param {function} func\n     * @return {object} result of func\n     * @private\n     */\n    private getOutboundGroupSession<T>(sessionId: string, func: (session: OutboundGroupSession) => T): T {\n        const pickled = this.outboundGroupSessionStore[sessionId];\n        if (pickled === undefined) {\n            throw new Error(\"Unknown outbound group session \" + sessionId);\n        }\n\n        const session = new global.Olm.OutboundGroupSession();\n        try {\n            session.unpickle(this.pickleKey, pickled);\n            return func(session);\n        } finally {\n            session.free();\n        }\n    }\n\n    /**\n     * Generate a new outbound group session\n     *\n     * @return {string} sessionId for the outbound session.\n     */\n    public createOutboundGroupSession(): string {\n        const session = new global.Olm.OutboundGroupSession();\n        try {\n            session.create();\n            this.saveOutboundGroupSession(session);\n            return session.session_id();\n        } finally {\n            session.free();\n        }\n    }\n\n    /**\n     * Encrypt an outgoing message with an outbound group session\n     *\n     * @param {string} sessionId  the id of the outboundgroupsession\n     * @param {string} payloadString  payload to be encrypted and sent\n     *\n     * @return {string} ciphertext\n     */\n    public encryptGroupMessage(sessionId: string, payloadString: string): string {\n        logger.log(`encrypting msg with megolm session ${sessionId}`);\n\n        checkPayloadLength(payloadString);\n\n        return this.getOutboundGroupSession(sessionId, (session: OutboundGroupSession) => {\n            const res = session.encrypt(payloadString);\n            this.saveOutboundGroupSession(session);\n            return res;\n        });\n    }\n\n    /**\n     * Get the session keys for an outbound group session\n     *\n     * @param {string} sessionId  the id of the outbound group session\n     *\n     * @return {{chain_index: number, key: string}} current chain index, and\n     *     base64-encoded secret key.\n     */\n    public getOutboundGroupSessionKey(sessionId: string): IOutboundGroupSessionKey {\n        return this.getOutboundGroupSession(sessionId, function(session: OutboundGroupSession) {\n            return {\n                chain_index: session.message_index(),\n                key: session.session_key(),\n            };\n        });\n    }\n\n    // Inbound group session\n    // =====================\n\n    /**\n     * Unpickle a session from a sessionData object and invoke the given function.\n     * The session is valid only until func returns.\n     *\n     * @param {Object} sessionData Object describing the session.\n     * @param {function(Olm.InboundGroupSession)} func Invoked with the unpickled session\n     * @return {*} result of func\n     */\n    private unpickleInboundGroupSession<T>(\n        sessionData: InboundGroupSessionData,\n        func: (session: InboundGroupSession) => T,\n    ): T {\n        const session = new global.Olm.InboundGroupSession();\n        try {\n            session.unpickle(this.pickleKey, sessionData.session);\n            return func(session);\n        } finally {\n            session.free();\n        }\n    }\n\n    /**\n     * extract an InboundGroupSession from the crypto store and call the given function\n     *\n     * @param {string} roomId The room ID to extract the session for, or null to fetch\n     *     sessions for any room.\n     * @param {string} senderKey\n     * @param {string} sessionId\n     * @param {*} txn Opaque transaction object from cryptoStore.doTxn()\n     * @param {function(Olm.InboundGroupSession, InboundGroupSessionData)} func\n     *   function to call.\n     *\n     * @private\n     */\n    private getInboundGroupSession(\n        roomId: string,\n        senderKey: string,\n        sessionId: string,\n        txn: unknown,\n        func: (session: InboundGroupSession, data: InboundGroupSessionData, withheld?: IWithheld) => void,\n    ): void {\n        this.cryptoStore.getEndToEndInboundGroupSession(\n            senderKey, sessionId, txn, (sessionData: InboundGroupSessionData, withheld: IWithheld | null) => {\n                if (sessionData === null) {\n                    func(null, null, withheld);\n                    return;\n                }\n\n                // if we were given a room ID, check that the it matches the original one for the session. This stops\n                // the HS pretending a message was targeting a different room.\n                if (roomId !== null && roomId !== sessionData.room_id) {\n                    throw new Error(\n                        \"Mismatched room_id for inbound group session (expected \" +\n                        sessionData.room_id + \", was \" + roomId + \")\",\n                    );\n                }\n\n                this.unpickleInboundGroupSession(sessionData, (session: InboundGroupSession) => {\n                    func(session, sessionData, withheld);\n                });\n            },\n        );\n    }\n\n    /**\n     * Add an inbound group session to the session store\n     *\n     * @param {string} roomId     room in which this session will be used\n     * @param {string} senderKey  base64-encoded curve25519 key of the sender\n     * @param {Array<string>} forwardingCurve25519KeyChain  Devices involved in forwarding\n     *     this session to us.\n     * @param {string} sessionId  session identifier\n     * @param {string} sessionKey base64-encoded secret key\n     * @param {Object<string, string>} keysClaimed Other keys the sender claims.\n     * @param {boolean} exportFormat true if the megolm keys are in export format\n     *    (ie, they lack an ed25519 signature)\n     * @param {Object} [extraSessionData={}] any other data to be include with the session\n     */\n    public async addInboundGroupSession(\n        roomId: string,\n        senderKey: string,\n        forwardingCurve25519KeyChain: string[],\n        sessionId: string,\n        sessionKey: string,\n        keysClaimed: Record<string, string>,\n        exportFormat: boolean,\n        extraSessionData: Record<string, any> = {},\n    ): Promise<void> {\n        await this.cryptoStore.doTxn(\n            'readwrite', [\n                IndexedDBCryptoStore.STORE_INBOUND_GROUP_SESSIONS,\n                IndexedDBCryptoStore.STORE_INBOUND_GROUP_SESSIONS_WITHHELD,\n                IndexedDBCryptoStore.STORE_SHARED_HISTORY_INBOUND_GROUP_SESSIONS,\n            ], (txn) => {\n                /* if we already have this session, consider updating it */\n                this.getInboundGroupSession(\n                    roomId, senderKey, sessionId, txn,\n                    (existingSession: InboundGroupSession, existingSessionData: InboundGroupSessionData) => {\n                        // new session.\n                        const session = new global.Olm.InboundGroupSession();\n                        try {\n                            if (exportFormat) {\n                                session.import_session(sessionKey);\n                            } else {\n                                session.create(sessionKey);\n                            }\n                            if (sessionId != session.session_id()) {\n                                throw new Error(\n                                    \"Mismatched group session ID from senderKey: \" +\n                                    senderKey,\n                                );\n                            }\n\n                            if (existingSession) {\n                                logger.log(\n                                    \"Update for megolm session \"\n                                    + senderKey + \"/\" + sessionId,\n                                );\n                                if (existingSession.first_known_index()\n                                    <= session.first_known_index()\n                                    && !(existingSession.first_known_index() == session.first_known_index()\n                                        && !extraSessionData.untrusted\n                                        && existingSessionData.untrusted)) {\n                                    // existing session has lower index (i.e. can\n                                    // decrypt more), or they have the same index and\n                                    // the new sessions trust does not win over the old\n                                    // sessions trust, so keep it\n                                    logger.log(`Keeping existing megolm session ${sessionId}`);\n                                    return;\n                                }\n                            }\n\n                            logger.info(\n                                \"Storing megolm session \" + senderKey + \"/\" + sessionId +\n                                \" with first index \" + session.first_known_index(),\n                            );\n\n                            const sessionData = Object.assign({}, extraSessionData, {\n                                room_id: roomId,\n                                session: session.pickle(this.pickleKey),\n                                keysClaimed: keysClaimed,\n                                forwardingCurve25519KeyChain: forwardingCurve25519KeyChain,\n                            });\n\n                            this.cryptoStore.storeEndToEndInboundGroupSession(\n                                senderKey, sessionId, sessionData, txn,\n                            );\n\n                            if (!existingSession && extraSessionData.sharedHistory) {\n                                this.cryptoStore.addSharedHistoryInboundGroupSession(\n                                    roomId, senderKey, sessionId, txn,\n                                );\n                            }\n                        } finally {\n                            session.free();\n                        }\n                    },\n                );\n            },\n            logger.withPrefix(\"[addInboundGroupSession]\"),\n        );\n    }\n\n    /**\n     * Record in the data store why an inbound group session was withheld.\n     *\n     * @param {string} roomId     room that the session belongs to\n     * @param {string} senderKey  base64-encoded curve25519 key of the sender\n     * @param {string} sessionId  session identifier\n     * @param {string} code       reason code\n     * @param {string} reason     human-readable version of `code`\n     */\n    public async addInboundGroupSessionWithheld(\n        roomId: string,\n        senderKey: string,\n        sessionId: string,\n        code: string,\n        reason: string,\n    ): Promise<void> {\n        await this.cryptoStore.doTxn(\n            'readwrite', [IndexedDBCryptoStore.STORE_INBOUND_GROUP_SESSIONS_WITHHELD],\n            (txn) => {\n                this.cryptoStore.storeEndToEndInboundGroupSessionWithheld(\n                    senderKey, sessionId,\n                    {\n                        room_id: roomId,\n                        code: code,\n                        reason: reason,\n                    },\n                    txn,\n                );\n            },\n        );\n    }\n\n    /**\n     * Decrypt a received message with an inbound group session\n     *\n     * @param {string} roomId    room in which the message was received\n     * @param {string} senderKey base64-encoded curve25519 key of the sender\n     * @param {string} sessionId session identifier\n     * @param {string} body      base64-encoded body of the encrypted message\n     * @param {string} eventId   ID of the event being decrypted\n     * @param {Number} timestamp timestamp of the event being decrypted\n     *\n     * @return {null} the sessionId is unknown\n     *\n     * @return {Promise<{result: string, senderKey: string,\n     *    forwardingCurve25519KeyChain: Array<string>,\n     *    keysClaimed: Object<string, string>}>}\n     */\n    public async decryptGroupMessage(\n        roomId: string,\n        senderKey: string,\n        sessionId: string,\n        body: string,\n        eventId: string,\n        timestamp: number,\n    ): Promise<IDecryptedGroupMessage | null> {\n        let result: IDecryptedGroupMessage;\n        // when the localstorage crypto store is used as an indexeddb backend,\n        // exceptions thrown from within the inner function are not passed through\n        // to the top level, so we store exceptions in a variable and raise them at\n        // the end\n        let error: Error;\n\n        await this.cryptoStore.doTxn(\n            'readwrite', [\n                IndexedDBCryptoStore.STORE_INBOUND_GROUP_SESSIONS,\n                IndexedDBCryptoStore.STORE_INBOUND_GROUP_SESSIONS_WITHHELD,\n            ], (txn) => {\n                this.getInboundGroupSession(\n                    roomId, senderKey, sessionId, txn, (session, sessionData, withheld) => {\n                        if (session === null) {\n                            if (withheld) {\n                                error = new algorithms.DecryptionError(\n                                    \"MEGOLM_UNKNOWN_INBOUND_SESSION_ID\",\n                                    calculateWithheldMessage(withheld),\n                                    {\n                                        session: senderKey + '|' + sessionId,\n                                    },\n                                );\n                            }\n                            result = null;\n                            return;\n                        }\n                        let res;\n                        try {\n                            res = session.decrypt(body);\n                        } catch (e) {\n                            if (e && e.message === 'OLM.UNKNOWN_MESSAGE_INDEX' && withheld) {\n                                error = new algorithms.DecryptionError(\n                                    \"MEGOLM_UNKNOWN_INBOUND_SESSION_ID\",\n                                    calculateWithheldMessage(withheld),\n                                    {\n                                        session: senderKey + '|' + sessionId,\n                                    },\n                                );\n                            } else {\n                                error = e;\n                            }\n                            return;\n                        }\n\n                        let plaintext: string = res.plaintext;\n                        if (plaintext === undefined) {\n                            // Compatibility for older olm versions.\n                            plaintext = res;\n                        } else {\n                            // Check if we have seen this message index before to detect replay attacks.\n                            // If the event ID and timestamp are specified, and the match the event ID\n                            // and timestamp from the last time we used this message index, then we\n                            // don't consider it a replay attack.\n                            const messageIndexKey = (\n                                senderKey + \"|\" + sessionId + \"|\" + res.message_index\n                            );\n                            if (messageIndexKey in this.inboundGroupSessionMessageIndexes) {\n                                const msgInfo = (\n                                    this.inboundGroupSessionMessageIndexes[messageIndexKey]\n                                );\n                                if (\n                                    msgInfo.id !== eventId ||\n                                    msgInfo.timestamp !== timestamp\n                                ) {\n                                    error = new Error(\n                                        \"Duplicate message index, possible replay attack: \" +\n                                        messageIndexKey,\n                                    );\n                                    return;\n                                }\n                            }\n                            this.inboundGroupSessionMessageIndexes[messageIndexKey] = {\n                                id: eventId,\n                                timestamp: timestamp,\n                            };\n                        }\n\n                        sessionData.session = session.pickle(this.pickleKey);\n                        this.cryptoStore.storeEndToEndInboundGroupSession(\n                            senderKey, sessionId, sessionData, txn,\n                        );\n                        result = {\n                            result: plaintext,\n                            keysClaimed: sessionData.keysClaimed || {},\n                            senderKey: senderKey,\n                            forwardingCurve25519KeyChain: (\n                                sessionData.forwardingCurve25519KeyChain || []\n                            ),\n                            untrusted: sessionData.untrusted,\n                        };\n                    },\n                );\n            },\n            logger.withPrefix(\"[decryptGroupMessage]\"),\n        );\n\n        if (error) {\n            throw error;\n        }\n        return result;\n    }\n\n    /**\n     * Determine if we have the keys for a given megolm session\n     *\n     * @param {string} roomId    room in which the message was received\n     * @param {string} senderKey base64-encoded curve25519 key of the sender\n     * @param {string} sessionId session identifier\n     *\n     * @returns {Promise<boolean>} true if we have the keys to this session\n     */\n    public async hasInboundSessionKeys(roomId: string, senderKey: string, sessionId: string): Promise<boolean> {\n        let result: boolean;\n        await this.cryptoStore.doTxn(\n            'readonly', [\n                IndexedDBCryptoStore.STORE_INBOUND_GROUP_SESSIONS,\n                IndexedDBCryptoStore.STORE_INBOUND_GROUP_SESSIONS_WITHHELD,\n            ], (txn) => {\n                this.cryptoStore.getEndToEndInboundGroupSession(\n                    senderKey, sessionId, txn, (sessionData) => {\n                        if (sessionData === null) {\n                            result = false;\n                            return;\n                        }\n\n                        if (roomId !== sessionData.room_id) {\n                            logger.warn(\n                                `requested keys for inbound group session ${senderKey}|` +\n                                `${sessionId}, with incorrect room_id ` +\n                                `(expected ${sessionData.room_id}, ` +\n                                `was ${roomId})`,\n                            );\n                            result = false;\n                        } else {\n                            result = true;\n                        }\n                    },\n                );\n            },\n            logger.withPrefix(\"[hasInboundSessionKeys]\"),\n        );\n\n        return result;\n    }\n\n    /**\n     * Extract the keys to a given megolm session, for sharing\n     *\n     * @param {string} roomId    room in which the message was received\n     * @param {string} senderKey base64-encoded curve25519 key of the sender\n     * @param {string} sessionId session identifier\n     * @param {number} chainIndex The chain index at which to export the session.\n     *     If omitted, export at the first index we know about.\n     *\n     * @returns {Promise<{chain_index: number, key: string,\n     *        forwarding_curve25519_key_chain: Array<string>,\n     *        sender_claimed_ed25519_key: string\n     *    }>}\n     *    details of the session key. The key is a base64-encoded megolm key in\n     *    export format.\n     *\n     * @throws Error If the given chain index could not be obtained from the known\n     *     index (ie. the given chain index is before the first we have).\n     */\n    public async getInboundGroupSessionKey(\n        roomId: string,\n        senderKey: string,\n        sessionId: string,\n        chainIndex?: number,\n    ): Promise<IInboundGroupSessionKey> {\n        let result: IInboundGroupSessionKey;\n        await this.cryptoStore.doTxn(\n            'readonly', [\n                IndexedDBCryptoStore.STORE_INBOUND_GROUP_SESSIONS,\n                IndexedDBCryptoStore.STORE_INBOUND_GROUP_SESSIONS_WITHHELD,\n            ], (txn) => {\n                this.getInboundGroupSession(\n                    roomId, senderKey, sessionId, txn, (session, sessionData) => {\n                        if (session === null) {\n                            result = null;\n                            return;\n                        }\n\n                        if (chainIndex === undefined) {\n                            chainIndex = session.first_known_index();\n                        }\n\n                        const exportedSession = session.export_session(chainIndex);\n\n                        const claimedKeys = sessionData.keysClaimed || {};\n                        const senderEd25519Key = claimedKeys.ed25519 || null;\n\n                        result = {\n                            \"chain_index\": chainIndex,\n                            \"key\": exportedSession,\n                            \"forwarding_curve25519_key_chain\":\n                                sessionData.forwardingCurve25519KeyChain || [],\n                            \"sender_claimed_ed25519_key\": senderEd25519Key,\n                            \"shared_history\": sessionData.sharedHistory || false,\n                        };\n                    },\n                );\n            },\n            logger.withPrefix(\"[getInboundGroupSessionKey]\"),\n        );\n\n        return result;\n    }\n\n    /**\n     * Export an inbound group session\n     *\n     * @param {string} senderKey base64-encoded curve25519 key of the sender\n     * @param {string} sessionId session identifier\n     * @param {ISessionInfo} sessionData The session object from the store\n     * @return {module:crypto/OlmDevice.MegolmSessionData} exported session data\n     */\n    public exportInboundGroupSession(\n        senderKey: string,\n        sessionId: string,\n        sessionData: InboundGroupSessionData,\n    ): IMegolmSessionData {\n        return this.unpickleInboundGroupSession(sessionData, (session) => {\n            const messageIndex = session.first_known_index();\n\n            return {\n                \"sender_key\": senderKey,\n                \"sender_claimed_keys\": sessionData.keysClaimed,\n                \"room_id\": sessionData.room_id,\n                \"session_id\": sessionId,\n                \"session_key\": session.export_session(messageIndex),\n                \"forwarding_curve25519_key_chain\": sessionData.forwardingCurve25519KeyChain || [],\n                \"first_known_index\": session.first_known_index(),\n                \"org.matrix.msc3061.shared_history\": sessionData.sharedHistory || false,\n            } as IMegolmSessionData;\n        });\n    }\n\n    async getSharedHistoryInboundGroupSessions(roomId: string): Promise<[senderKey: string, sessionId: string][]> {\n        let result: Promise<[senderKey: string, sessionId: string][]>;\n        await this.cryptoStore.doTxn(\n            'readonly', [\n                IndexedDBCryptoStore.STORE_SHARED_HISTORY_INBOUND_GROUP_SESSIONS,\n            ], (txn) => {\n                result = this.cryptoStore.getSharedHistoryInboundGroupSessions(roomId, txn);\n            },\n            logger.withPrefix(\"[getSharedHistoryInboundGroupSessionsForRoom]\"),\n        );\n        return result;\n    }\n\n    // Utilities\n    // =========\n\n    /**\n     * Verify an ed25519 signature.\n     *\n     * @param {string} key ed25519 key\n     * @param {string} message message which was signed\n     * @param {string} signature base64-encoded signature to be checked\n     *\n     * @raises {Error} if there is a problem with the verification. If the key was\n     * too small then the message will be \"OLM.INVALID_BASE64\". If the signature\n     * was invalid then the message will be \"OLM.BAD_MESSAGE_MAC\".\n     */\n    public verifySignature(\n        key: string,\n        message: string,\n        signature: string,\n    ): void {\n        this.getUtility(function(util: Utility) {\n            util.ed25519_verify(key, message, signature);\n        });\n    }\n}\n\nexport const WITHHELD_MESSAGES = {\n    \"m.unverified\": \"The sender has disabled encrypting to unverified devices.\",\n    \"m.blacklisted\": \"The sender has blocked you.\",\n    \"m.unauthorised\": \"You are not authorised to read the message.\",\n    \"m.no_olm\": \"Unable to establish a secure channel.\",\n};\n\n/**\n * Calculate the message to use for the exception when a session key is withheld.\n *\n * @param {object} withheld  An object that describes why the key was withheld.\n *\n * @return {string} the message\n *\n * @private\n */\nfunction calculateWithheldMessage(withheld: IWithheld): string {\n    if (withheld.code && withheld.code in WITHHELD_MESSAGES) {\n        return WITHHELD_MESSAGES[withheld.code];\n    } else if (withheld.reason) {\n        return withheld.reason;\n    } else {\n        return \"decryption key withheld\";\n    }\n}\n",
    "/*\nCopyright 2017 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { logger } from '../logger';\nimport { MatrixClient } from \"../client\";\nimport { IRoomKeyRequestBody, IRoomKeyRequestRecipient } from \"./index\";\nimport { CryptoStore, OutgoingRoomKeyRequest } from './store/base';\nimport { EventType } from \"../@types/event\";\n\n/**\n * Internal module. Management of outgoing room key requests.\n *\n * See https://docs.google.com/document/d/1m4gQkcnJkxNuBmb5NoFCIadIY-DyqqNAS3lloE73BlQ\n * for draft documentation on what we're supposed to be implementing here.\n *\n * @module\n */\n\n// delay between deciding we want some keys, and sending out the request, to\n// allow for (a) it turning up anyway, (b) grouping requests together\nconst SEND_KEY_REQUESTS_DELAY_MS = 500;\n\n/** possible states for a room key request\n *\n * The state machine looks like:\n *\n *     |         (cancellation sent)\n *     | .-------------------------------------------------.\n *     | |                                                 |\n *     V V       (cancellation requested)                  |\n *   UNSENT  -----------------------------+                |\n *     |                                  |                |\n *     |                                  |                |\n *     | (send successful)                |  CANCELLATION_PENDING_AND_WILL_RESEND\n *     V                                  |                Λ\n *    SENT                                |                |\n *     |--------------------------------  |  --------------'\n *     |                                  |  (cancellation requested with intent\n *     |                                  |   to resend the original request)\n *     |                                  |\n *     | (cancellation requested)         |\n *     V                                  |\n * CANCELLATION_PENDING                   |\n *     |                                  |\n *     | (cancellation sent)              |\n *     V                                  |\n * (deleted)  <---------------------------+\n *\n * @enum {number}\n */\nexport enum RoomKeyRequestState {\n    /** request not yet sent */\n    Unsent,\n    /** request sent, awaiting reply */\n    Sent,\n    /** reply received, cancellation not yet sent */\n    CancellationPending,\n    /**\n     * Cancellation not yet sent and will transition to UNSENT instead of\n     * being deleted once the cancellation has been sent.\n     */\n    CancellationPendingAndWillResend,\n}\n\nexport class OutgoingRoomKeyRequestManager {\n    // handle for the delayed call to sendOutgoingRoomKeyRequests. Non-null\n    // if the callback has been set, or if it is still running.\n    private sendOutgoingRoomKeyRequestsTimer: number = null;\n\n    // sanity check to ensure that we don't end up with two concurrent runs\n    // of sendOutgoingRoomKeyRequests\n    private sendOutgoingRoomKeyRequestsRunning = false;\n\n    private clientRunning = false;\n\n    constructor(\n        private readonly baseApis: MatrixClient,\n        private readonly deviceId: string,\n        private readonly cryptoStore: CryptoStore,\n    ) {}\n\n    /**\n     * Called when the client is started. Sets background processes running.\n     */\n    public start(): void {\n        this.clientRunning = true;\n    }\n\n    /**\n     * Called when the client is stopped. Stops any running background processes.\n     */\n    public stop(): void {\n        logger.log('stopping OutgoingRoomKeyRequestManager');\n        // stop the timer on the next run\n        this.clientRunning = false;\n    }\n\n    /**\n     * Send any requests that have been queued\n     */\n    public sendQueuedRequests(): void {\n        this.startTimer();\n    }\n\n    /**\n     * Queue up a room key request, if we haven't already queued or sent one.\n     *\n     * The `requestBody` is compared (with a deep-equality check) against\n     * previous queued or sent requests and if it matches, no change is made.\n     * Otherwise, a request is added to the pending list, and a job is started\n     * in the background to send it.\n     *\n     * @param {module:crypto~RoomKeyRequestBody} requestBody\n     * @param {Array<{userId: string, deviceId: string}>} recipients\n     * @param {boolean} resend whether to resend the key request if there is\n     *    already one\n     *\n     * @returns {Promise} resolves when the request has been added to the\n     *    pending list (or we have established that a similar request already\n     *    exists)\n     */\n    public async queueRoomKeyRequest(\n        requestBody: IRoomKeyRequestBody,\n        recipients: IRoomKeyRequestRecipient[],\n        resend = false,\n    ): Promise<void> {\n        const req = await this.cryptoStore.getOutgoingRoomKeyRequest(requestBody);\n        if (!req) {\n            await this.cryptoStore.getOrAddOutgoingRoomKeyRequest({\n                requestBody: requestBody,\n                recipients: recipients,\n                requestId: this.baseApis.makeTxnId(),\n                state: RoomKeyRequestState.Unsent,\n            });\n        } else {\n            switch (req.state) {\n                case RoomKeyRequestState.CancellationPendingAndWillResend:\n                case RoomKeyRequestState.Unsent:\n                    // nothing to do here, since we're going to send a request anyways\n                    return;\n\n                case RoomKeyRequestState.CancellationPending: {\n                    // existing request is about to be cancelled.  If we want to\n                    // resend, then change the state so that it resends after\n                    // cancelling.  Otherwise, just cancel the cancellation.\n                    const state = resend ?\n                        RoomKeyRequestState.CancellationPendingAndWillResend :\n                        RoomKeyRequestState.Sent;\n                    await this.cryptoStore.updateOutgoingRoomKeyRequest(\n                        req.requestId, RoomKeyRequestState.CancellationPending, {\n                            state,\n                            cancellationTxnId: this.baseApis.makeTxnId(),\n                        },\n                    );\n                    break;\n                }\n                case RoomKeyRequestState.Sent: {\n                    // a request has already been sent.  If we don't want to\n                    // resend, then do nothing.  If we do want to, then cancel the\n                    // existing request and send a new one.\n                    if (resend) {\n                        const state =\n                              RoomKeyRequestState.CancellationPendingAndWillResend;\n                        const updatedReq =\n                              await this.cryptoStore.updateOutgoingRoomKeyRequest(\n                                  req.requestId, RoomKeyRequestState.Sent, {\n                                      state,\n                                      cancellationTxnId: this.baseApis.makeTxnId(),\n                                      // need to use a new transaction ID so that\n                                      // the request gets sent\n                                      requestTxnId: this.baseApis.makeTxnId(),\n                                  },\n                              );\n                        if (!updatedReq) {\n                            // updateOutgoingRoomKeyRequest couldn't find the request\n                            // in state ROOM_KEY_REQUEST_STATES.SENT, so we must have\n                            // raced with another tab to mark the request cancelled.\n                            // Try again, to make sure the request is resent.\n                            return await this.queueRoomKeyRequest(\n                                requestBody, recipients, resend,\n                            );\n                        }\n\n                        // We don't want to wait for the timer, so we send it\n                        // immediately. (We might actually end up racing with the timer,\n                        // but that's ok: even if we make the request twice, we'll do it\n                        // with the same transaction_id, so only one message will get\n                        // sent).\n                        //\n                        // (We also don't want to wait for the response from the server\n                        // here, as it will slow down processing of received keys if we\n                        // do.)\n                        try {\n                            await this.sendOutgoingRoomKeyRequestCancellation(\n                                updatedReq,\n                                true,\n                            );\n                        } catch (e) {\n                            logger.error(\n                                \"Error sending room key request cancellation;\"\n                                    + \" will retry later.\", e,\n                            );\n                        }\n                        // The request has transitioned from\n                        // CANCELLATION_PENDING_AND_WILL_RESEND to UNSENT. We\n                        // still need to resend the request which is now UNSENT, so\n                        // start the timer if it isn't already started.\n                    }\n                    break;\n                }\n                default:\n                    throw new Error('unhandled state: ' + req.state);\n            }\n        }\n    }\n\n    /**\n     * Cancel room key requests, if any match the given requestBody\n     *\n     * @param {module:crypto~RoomKeyRequestBody} requestBody\n     *\n     * @returns {Promise} resolves when the request has been updated in our\n     *    pending list.\n     */\n    public cancelRoomKeyRequest(requestBody: IRoomKeyRequestBody): Promise<unknown> {\n        return this.cryptoStore.getOutgoingRoomKeyRequest(\n            requestBody,\n        ).then((req): unknown => {\n            if (!req) {\n                // no request was made for this key\n                return;\n            }\n            switch (req.state) {\n                case RoomKeyRequestState.CancellationPending:\n                case RoomKeyRequestState.CancellationPendingAndWillResend:\n                    // nothing to do here\n                    return;\n\n                case RoomKeyRequestState.Unsent:\n                    // just delete it\n\n                    // FIXME: ghahah we may have attempted to send it, and\n                    // not yet got a successful response. So the server\n                    // may have seen it, so we still need to send a cancellation\n                    // in that case :/\n\n                    logger.log(\n                        'deleting unnecessary room key request for ' +\n                        stringifyRequestBody(requestBody),\n                    );\n                    return this.cryptoStore.deleteOutgoingRoomKeyRequest(req.requestId, RoomKeyRequestState.Unsent);\n\n                case RoomKeyRequestState.Sent: {\n                    // send a cancellation.\n                    return this.cryptoStore.updateOutgoingRoomKeyRequest(\n                        req.requestId, RoomKeyRequestState.Sent, {\n                            state: RoomKeyRequestState.CancellationPending,\n                            cancellationTxnId: this.baseApis.makeTxnId(),\n                        },\n                    ).then((updatedReq) => {\n                        if (!updatedReq) {\n                            // updateOutgoingRoomKeyRequest couldn't find the\n                            // request in state ROOM_KEY_REQUEST_STATES.SENT,\n                            // so we must have raced with another tab to mark\n                            // the request cancelled. There is no point in\n                            // sending another cancellation since the other tab\n                            // will do it.\n                            logger.log(\n                                'Tried to cancel room key request for ' +\n                                stringifyRequestBody(requestBody) +\n                                ' but it was already cancelled in another tab',\n                            );\n                            return;\n                        }\n\n                        // We don't want to wait for the timer, so we send it\n                        // immediately. (We might actually end up racing with the timer,\n                        // but that's ok: even if we make the request twice, we'll do it\n                        // with the same transaction_id, so only one message will get\n                        // sent).\n                        //\n                        // (We also don't want to wait for the response from the server\n                        // here, as it will slow down processing of received keys if we\n                        // do.)\n                        this.sendOutgoingRoomKeyRequestCancellation(\n                            updatedReq,\n                        ).catch((e) => {\n                            logger.error(\n                                \"Error sending room key request cancellation;\"\n                                + \" will retry later.\", e,\n                            );\n                            this.startTimer();\n                        });\n                    });\n                }\n                default:\n                    throw new Error('unhandled state: ' + req.state);\n            }\n        });\n    }\n\n    /**\n     * Look for room key requests by target device and state\n     *\n     * @param {string} userId Target user ID\n     * @param {string} deviceId Target device ID\n     *\n     * @return {Promise} resolves to a list of all the\n     *    {@link module:crypto/store/base~OutgoingRoomKeyRequest}\n     */\n    public getOutgoingSentRoomKeyRequest(userId: string, deviceId: string): Promise<OutgoingRoomKeyRequest[]> {\n        return this.cryptoStore.getOutgoingRoomKeyRequestsByTarget(userId, deviceId, [RoomKeyRequestState.Sent]);\n    }\n\n    /**\n     * Find anything in `sent` state, and kick it around the loop again.\n     * This is intended for situations where something substantial has changed, and we\n     * don't really expect the other end to even care about the cancellation.\n     * For example, after initialization or self-verification.\n     * @return {Promise} An array of `queueRoomKeyRequest` outputs.\n     */\n    public async cancelAndResendAllOutgoingRequests(): Promise<void[]> {\n        const outgoings = await this.cryptoStore.getAllOutgoingRoomKeyRequestsByState(RoomKeyRequestState.Sent);\n        return Promise.all(outgoings.map(({ requestBody, recipients }) =>\n            this.queueRoomKeyRequest(requestBody, recipients, true)));\n    }\n\n    // start the background timer to send queued requests, if the timer isn't\n    // already running\n    private startTimer(): void {\n        if (this.sendOutgoingRoomKeyRequestsTimer) {\n            return;\n        }\n\n        const startSendingOutgoingRoomKeyRequests = () => {\n            if (this.sendOutgoingRoomKeyRequestsRunning) {\n                throw new Error(\"RoomKeyRequestSend already in progress!\");\n            }\n            this.sendOutgoingRoomKeyRequestsRunning = true;\n\n            this.sendOutgoingRoomKeyRequests().finally(() => {\n                this.sendOutgoingRoomKeyRequestsRunning = false;\n            }).catch((e) => {\n                // this should only happen if there is an indexeddb error,\n                // in which case we're a bit stuffed anyway.\n                logger.warn(\n                    `error in OutgoingRoomKeyRequestManager: ${e}`,\n                );\n            });\n        };\n\n        this.sendOutgoingRoomKeyRequestsTimer = setTimeout(\n            startSendingOutgoingRoomKeyRequests,\n            SEND_KEY_REQUESTS_DELAY_MS,\n        );\n    }\n\n    // look for and send any queued requests. Runs itself recursively until\n    // there are no more requests, or there is an error (in which case, the\n    // timer will be restarted before the promise resolves).\n    private sendOutgoingRoomKeyRequests(): Promise<void> {\n        if (!this.clientRunning) {\n            this.sendOutgoingRoomKeyRequestsTimer = null;\n            return Promise.resolve();\n        }\n\n        return this.cryptoStore.getOutgoingRoomKeyRequestByState([\n            RoomKeyRequestState.CancellationPending,\n            RoomKeyRequestState.CancellationPendingAndWillResend,\n            RoomKeyRequestState.Unsent,\n        ]).then((req: OutgoingRoomKeyRequest) => {\n            if (!req) {\n                this.sendOutgoingRoomKeyRequestsTimer = null;\n                return;\n            }\n\n            let prom;\n            switch (req.state) {\n                case RoomKeyRequestState.Unsent:\n                    prom = this.sendOutgoingRoomKeyRequest(req);\n                    break;\n                case RoomKeyRequestState.CancellationPending:\n                    prom = this.sendOutgoingRoomKeyRequestCancellation(req);\n                    break;\n                case RoomKeyRequestState.CancellationPendingAndWillResend:\n                    prom = this.sendOutgoingRoomKeyRequestCancellation(req, true);\n                    break;\n            }\n\n            return prom.then(() => {\n                // go around the loop again\n                return this.sendOutgoingRoomKeyRequests();\n            }).catch((e) => {\n                logger.error(\"Error sending room key request; will retry later.\", e);\n                this.sendOutgoingRoomKeyRequestsTimer = null;\n            });\n        });\n    }\n\n    // given a RoomKeyRequest, send it and update the request record\n    private sendOutgoingRoomKeyRequest(req: OutgoingRoomKeyRequest): Promise<unknown> {\n        logger.log(\n            `Requesting keys for ${stringifyRequestBody(req.requestBody)}` +\n            ` from ${stringifyRecipientList(req.recipients)}` +\n            `(id ${req.requestId})`,\n        );\n\n        const requestMessage = {\n            action: \"request\",\n            requesting_device_id: this.deviceId,\n            request_id: req.requestId,\n            body: req.requestBody,\n        };\n\n        return this.sendMessageToDevices(\n            requestMessage, req.recipients, req.requestTxnId || req.requestId,\n        ).then(() => {\n            return this.cryptoStore.updateOutgoingRoomKeyRequest(\n                req.requestId, RoomKeyRequestState.Unsent,\n                { state: RoomKeyRequestState.Sent },\n            );\n        });\n    }\n\n    // Given a RoomKeyRequest, cancel it and delete the request record unless\n    // andResend is set, in which case transition to UNSENT.\n    private sendOutgoingRoomKeyRequestCancellation(req: OutgoingRoomKeyRequest, andResend = false): Promise<unknown> {\n        logger.log(\n            `Sending cancellation for key request for ` +\n            `${stringifyRequestBody(req.requestBody)} to ` +\n            `${stringifyRecipientList(req.recipients)} ` +\n            `(cancellation id ${req.cancellationTxnId})`,\n        );\n\n        const requestMessage = {\n            action: \"request_cancellation\",\n            requesting_device_id: this.deviceId,\n            request_id: req.requestId,\n        };\n\n        return this.sendMessageToDevices(\n            requestMessage, req.recipients, req.cancellationTxnId,\n        ).then(() => {\n            if (andResend) {\n                // We want to resend, so transition to UNSENT\n                return this.cryptoStore.updateOutgoingRoomKeyRequest(\n                    req.requestId,\n                    RoomKeyRequestState.CancellationPendingAndWillResend,\n                    { state: RoomKeyRequestState.Unsent },\n                );\n            }\n            return this.cryptoStore.deleteOutgoingRoomKeyRequest(\n                req.requestId, RoomKeyRequestState.CancellationPending,\n            );\n        });\n    }\n\n    // send a RoomKeyRequest to a list of recipients\n    private sendMessageToDevices(message, recipients, txnId: string): Promise<{}> {\n        const contentMap: Record<string, Record<string, Record<string, any>>> = {};\n        for (const recip of recipients) {\n            if (!contentMap[recip.userId]) {\n                contentMap[recip.userId] = {};\n            }\n            contentMap[recip.userId][recip.deviceId] = message;\n        }\n\n        return this.baseApis.sendToDevice(EventType.RoomKeyRequest, contentMap, txnId);\n    }\n}\n\nfunction stringifyRequestBody(requestBody) {\n    // we assume that the request is for megolm keys, which are identified by\n    // room id and session id\n    return requestBody.room_id + \" / \" + requestBody.session_id;\n}\n\nfunction stringifyRecipientList(recipients) {\n    return '['\n        + recipients.map((r) => `${r.userId}:${r.deviceId}`).join(\",\")\n        + ']';\n}\n\n",
    "/*\nCopyright 2018 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * @module crypto/RoomList\n *\n * Manages the list of encrypted rooms\n */\n\nimport { CryptoStore } from './store/base';\nimport { IndexedDBCryptoStore } from './store/indexeddb-crypto-store';\n\n/* eslint-disable camelcase */\nexport interface IRoomEncryption {\n    algorithm: string;\n    rotation_period_ms?: number;\n    rotation_period_msgs?: number;\n}\n/* eslint-enable camelcase */\n\n/**\n * @alias module:crypto/RoomList\n */\nexport class RoomList {\n    // Object of roomId -> room e2e info object (body of the m.room.encryption event)\n    private roomEncryption: Record<string, IRoomEncryption> = {};\n\n    constructor(private readonly cryptoStore: CryptoStore) {}\n\n    public async init(): Promise<void> {\n        await this.cryptoStore.doTxn(\n            'readwrite', [IndexedDBCryptoStore.STORE_ROOMS], (txn) => {\n                this.cryptoStore.getEndToEndRooms(txn, (result) => {\n                    this.roomEncryption = result;\n                });\n            },\n        );\n    }\n\n    public getRoomEncryption(roomId: string): IRoomEncryption {\n        return this.roomEncryption[roomId] || null;\n    }\n\n    public isRoomEncrypted(roomId: string): boolean {\n        return Boolean(this.getRoomEncryption(roomId));\n    }\n\n    public async setRoomEncryption(roomId: string, roomInfo: IRoomEncryption): Promise<void> {\n        // important that this happens before calling into the store\n        // as it prevents the Crypto::setRoomEncryption from calling\n        // this twice for consecutive m.room.encryption events\n        this.roomEncryption[roomId] = roomInfo;\n        await this.cryptoStore.doTxn(\n            'readwrite', [IndexedDBCryptoStore.STORE_ROOMS], (txn) => {\n                this.cryptoStore.storeEndToEndRoom(roomId, roomInfo, txn);\n            },\n        );\n    }\n}\n",
    "/*\nCopyright 2019 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { logger } from '../logger';\nimport * as olmlib from './olmlib';\nimport { encodeBase64 } from './olmlib';\nimport { randomString } from '../randomstring';\nimport { calculateKeyCheck, decryptAES, encryptAES, IEncryptedPayload } from './aes';\nimport { ClientEvent, ICryptoCallbacks, MatrixEvent } from '../matrix';\nimport { ClientEventHandlerMap, MatrixClient } from \"../client\";\nimport { IAddSecretStorageKeyOpts, ISecretStorageKeyInfo } from './api';\nimport { TypedEventEmitter } from '../models/typed-event-emitter';\n\nexport const SECRET_STORAGE_ALGORITHM_V1_AES = \"m.secret_storage.v1.aes-hmac-sha2\";\n\n// Some of the key functions use a tuple and some use an object...\nexport type SecretStorageKeyTuple = [keyId: string, keyInfo: ISecretStorageKeyInfo];\nexport type SecretStorageKeyObject = {keyId: string, keyInfo: ISecretStorageKeyInfo};\n\nexport interface ISecretRequest {\n    requestId: string;\n    promise: Promise<string>;\n    cancel: (reason: string) => void;\n}\n\nexport interface IAccountDataClient extends TypedEventEmitter<ClientEvent.AccountData, ClientEventHandlerMap> {\n    // Subset of MatrixClient (which also uses any for the event content)\n    getAccountDataFromServer: <T extends {[k: string]: any}>(eventType: string) => Promise<T>;\n    getAccountData: (eventType: string) => MatrixEvent;\n    setAccountData: (eventType: string, content: any) => Promise<{}>;\n}\n\ninterface ISecretRequestInternal {\n    name: string;\n    devices: string[];\n    resolve: (reason: string) => void;\n    reject: (error: Error) => void;\n}\n\ninterface IDecryptors {\n    encrypt: (plaintext: string) => Promise<IEncryptedPayload>;\n    decrypt: (ciphertext: IEncryptedPayload) => Promise<string>;\n}\n\ninterface ISecretInfo {\n    encrypted: {\n        // eslint-disable-next-line camelcase\n        key_id: IEncryptedPayload;\n    };\n}\n\n/**\n * Implements Secure Secret Storage and Sharing (MSC1946)\n * @module crypto/SecretStorage\n */\nexport class SecretStorage {\n    private requests = new Map<string, ISecretRequestInternal>();\n\n    // In it's pure javascript days, this was relying on some proper Javascript-style\n    // type-abuse where sometimes we'd pass in a fake client object with just the account\n    // data methods implemented, which is all this class needs unless you use the secret\n    // sharing code, so it was fine. As a low-touch TypeScript migration, this now has\n    // an extra, optional param for a real matrix client, so you can not pass it as long\n    // as you don't request any secrets.\n    // A better solution would probably be to split this class up into secret storage and\n    // secret sharing which are really two separate things, even though they share an MSC.\n    constructor(\n        private readonly accountDataAdapter: IAccountDataClient,\n        private readonly cryptoCallbacks: ICryptoCallbacks,\n        private readonly baseApis?: MatrixClient,\n    ) {}\n\n    public async getDefaultKeyId(): Promise<string | null> {\n        const defaultKey = await this.accountDataAdapter.getAccountDataFromServer<{ key: string }>(\n            'm.secret_storage.default_key',\n        );\n        if (!defaultKey) return null;\n        return defaultKey.key;\n    }\n\n    public setDefaultKeyId(keyId: string): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            const listener = (ev: MatrixEvent): void => {\n                if (\n                    ev.getType() === 'm.secret_storage.default_key' &&\n                    ev.getContent().key === keyId\n                ) {\n                    this.accountDataAdapter.removeListener(ClientEvent.AccountData, listener);\n                    resolve();\n                }\n            };\n            this.accountDataAdapter.on(ClientEvent.AccountData, listener);\n\n            this.accountDataAdapter.setAccountData(\n                'm.secret_storage.default_key',\n                { key: keyId },\n            ).catch(e => {\n                this.accountDataAdapter.removeListener(ClientEvent.AccountData, listener);\n                reject(e);\n            });\n        });\n    }\n\n    /**\n     * Add a key for encrypting secrets.\n     *\n     * @param {string} algorithm the algorithm used by the key.\n     * @param {object} opts the options for the algorithm.  The properties used\n     *     depend on the algorithm given.\n     * @param {string} [keyId] the ID of the key.  If not given, a random\n     *     ID will be generated.\n     *\n     * @return {object} An object with:\n     *     keyId: {string} the ID of the key\n     *     keyInfo: {object} details about the key (iv, mac, passphrase)\n     */\n    public async addKey(\n        algorithm: string,\n        opts: IAddSecretStorageKeyOpts,\n        keyId?: string,\n    ): Promise<SecretStorageKeyObject> {\n        const keyInfo = { algorithm } as ISecretStorageKeyInfo;\n\n        if (!opts) opts = {} as IAddSecretStorageKeyOpts;\n\n        if (opts.name) {\n            keyInfo.name = opts.name;\n        }\n\n        if (algorithm === SECRET_STORAGE_ALGORITHM_V1_AES) {\n            if (opts.passphrase) {\n                keyInfo.passphrase = opts.passphrase;\n            }\n            if (opts.key) {\n                const { iv, mac } = await calculateKeyCheck(opts.key);\n                keyInfo.iv = iv;\n                keyInfo.mac = mac;\n            }\n        } else {\n            throw new Error(`Unknown key algorithm ${algorithm}`);\n        }\n\n        if (!keyId) {\n            do {\n                keyId = randomString(32);\n            } while (\n                await this.accountDataAdapter.getAccountDataFromServer<ISecretStorageKeyInfo>(\n                    `m.secret_storage.key.${keyId}`,\n                )\n            );\n        }\n\n        await this.accountDataAdapter.setAccountData(\n            `m.secret_storage.key.${keyId}`, keyInfo,\n        );\n\n        return {\n            keyId,\n            keyInfo,\n        };\n    }\n\n    /**\n     * Get the key information for a given ID.\n     *\n     * @param {string} [keyId = default key's ID] The ID of the key to check\n     *     for. Defaults to the default key ID if not provided.\n     * @returns {Array?} If the key was found, the return value is an array of\n     *     the form [keyId, keyInfo].  Otherwise, null is returned.\n     *     XXX: why is this an array when addKey returns an object?\n     */\n    public async getKey(keyId: string): Promise<SecretStorageKeyTuple | null> {\n        if (!keyId) {\n            keyId = await this.getDefaultKeyId();\n        }\n        if (!keyId) {\n            return null;\n        }\n\n        const keyInfo = await this.accountDataAdapter.getAccountDataFromServer<ISecretStorageKeyInfo>(\n            \"m.secret_storage.key.\" + keyId,\n        );\n        return keyInfo ? [keyId, keyInfo] : null;\n    }\n\n    /**\n     * Check whether we have a key with a given ID.\n     *\n     * @param {string} [keyId = default key's ID] The ID of the key to check\n     *     for. Defaults to the default key ID if not provided.\n     * @return {boolean} Whether we have the key.\n     */\n    public async hasKey(keyId?: string): Promise<boolean> {\n        return Boolean(await this.getKey(keyId));\n    }\n\n    /**\n     * Check whether a key matches what we expect based on the key info\n     *\n     * @param {Uint8Array} key the key to check\n     * @param {object} info the key info\n     *\n     * @return {boolean} whether or not the key matches\n     */\n    public async checkKey(key: Uint8Array, info: ISecretStorageKeyInfo): Promise<boolean> {\n        if (info.algorithm === SECRET_STORAGE_ALGORITHM_V1_AES) {\n            if (info.mac) {\n                const { mac } = await calculateKeyCheck(key, info.iv);\n                return info.mac.replace(/=+$/g, '') === mac.replace(/=+$/g, '');\n            } else {\n                // if we have no information, we have to assume the key is right\n                return true;\n            }\n        } else {\n            throw new Error(\"Unknown algorithm\");\n        }\n    }\n\n    /**\n     * Store an encrypted secret on the server\n     *\n     * @param {string} name The name of the secret\n     * @param {string} secret The secret contents.\n     * @param {Array} keys The IDs of the keys to use to encrypt the secret\n     *     or null/undefined to use the default key.\n     */\n    public async store(name: string, secret: string, keys?: string[]): Promise<void> {\n        const encrypted: Record<string, IEncryptedPayload> = {};\n\n        if (!keys) {\n            const defaultKeyId = await this.getDefaultKeyId();\n            if (!defaultKeyId) {\n                throw new Error(\"No keys specified and no default key present\");\n            }\n            keys = [defaultKeyId];\n        }\n\n        if (keys.length === 0) {\n            throw new Error(\"Zero keys given to encrypt with!\");\n        }\n\n        for (const keyId of keys) {\n            // get key information from key storage\n            const keyInfo = await this.accountDataAdapter.getAccountDataFromServer<ISecretStorageKeyInfo>(\n                \"m.secret_storage.key.\" + keyId,\n            );\n            if (!keyInfo) {\n                throw new Error(\"Unknown key: \" + keyId);\n            }\n\n            // encrypt secret, based on the algorithm\n            if (keyInfo.algorithm === SECRET_STORAGE_ALGORITHM_V1_AES) {\n                const keys = { [keyId]: keyInfo };\n                const [, encryption] = await this.getSecretStorageKey(keys, name);\n                encrypted[keyId] = await encryption.encrypt(secret);\n            } else {\n                logger.warn(\"unknown algorithm for secret storage key \" + keyId\n                            + \": \" + keyInfo.algorithm);\n                // do nothing if we don't understand the encryption algorithm\n            }\n        }\n\n        // save encrypted secret\n        await this.accountDataAdapter.setAccountData(name, { encrypted });\n    }\n\n    /**\n     * Get a secret from storage.\n     *\n     * @param {string} name the name of the secret\n     *\n     * @return {string} the contents of the secret\n     */\n    public async get(name: string): Promise<string> {\n        const secretInfo = await this.accountDataAdapter.getAccountDataFromServer<ISecretInfo>(name);\n        if (!secretInfo) {\n            return;\n        }\n        if (!secretInfo.encrypted) {\n            throw new Error(\"Content is not encrypted!\");\n        }\n\n        // get possible keys to decrypt\n        const keys: Record<string, ISecretStorageKeyInfo> = {};\n        for (const keyId of Object.keys(secretInfo.encrypted)) {\n            // get key information from key storage\n            const keyInfo = (\n                await this.accountDataAdapter.getAccountDataFromServer<ISecretStorageKeyInfo>(\n                    \"m.secret_storage.key.\" + keyId,\n                )\n            );\n            const encInfo = secretInfo.encrypted[keyId];\n            // only use keys we understand the encryption algorithm of\n            if (keyInfo.algorithm === SECRET_STORAGE_ALGORITHM_V1_AES) {\n                if (encInfo.iv && encInfo.ciphertext && encInfo.mac) {\n                    keys[keyId] = keyInfo;\n                }\n            }\n        }\n\n        if (Object.keys(keys).length === 0) {\n            throw new Error(`Could not decrypt ${name} because none of ` +\n                `the keys it is encrypted with are for a supported algorithm`);\n        }\n\n        let keyId: string;\n        let decryption;\n        try {\n            // fetch private key from app\n            [keyId, decryption] = await this.getSecretStorageKey(keys, name);\n\n            const encInfo = secretInfo.encrypted[keyId];\n\n            // We don't actually need the decryption object if it's a passthrough\n            // since we just want to return the key itself. It must be base64\n            // encoded, since this is how a key would normally be stored.\n            if (encInfo.passthrough) return encodeBase64(decryption.get_private_key());\n\n            return await decryption.decrypt(encInfo);\n        } finally {\n            if (decryption && decryption.free) decryption.free();\n        }\n    }\n\n    /**\n     * Check if a secret is stored on the server.\n     *\n     * @param {string} name the name of the secret\n     * @param {boolean} checkKey check if the secret is encrypted by a trusted key\n     *\n     * @return {object?} map of key name to key info the secret is encrypted\n     *     with, or null if it is not present or not encrypted with a trusted\n     *     key\n     */\n    public async isStored(name: string, checkKey: boolean): Promise<Record<string, ISecretStorageKeyInfo> | null> {\n        // check if secret exists\n        const secretInfo = await this.accountDataAdapter.getAccountDataFromServer<ISecretInfo>(name);\n        if (!secretInfo) return null;\n        if (!secretInfo.encrypted) {\n            return null;\n        }\n\n        if (checkKey === undefined) checkKey = true;\n\n        const ret = {};\n\n        // filter secret encryption keys with supported algorithm\n        for (const keyId of Object.keys(secretInfo.encrypted)) {\n            // get key information from key storage\n            const keyInfo = await this.accountDataAdapter.getAccountDataFromServer<ISecretStorageKeyInfo>(\n                \"m.secret_storage.key.\" + keyId,\n            );\n            if (!keyInfo) continue;\n            const encInfo = secretInfo.encrypted[keyId];\n\n            // only use keys we understand the encryption algorithm of\n            if (keyInfo.algorithm === SECRET_STORAGE_ALGORITHM_V1_AES) {\n                if (encInfo.iv && encInfo.ciphertext && encInfo.mac) {\n                    ret[keyId] = keyInfo;\n                }\n            }\n        }\n        return Object.keys(ret).length ? ret : null;\n    }\n\n    /**\n     * Request a secret from another device\n     *\n     * @param {string} name the name of the secret to request\n     * @param {string[]} devices the devices to request the secret from\n     */\n    public request(name: string, devices: string[]): ISecretRequest {\n        const requestId = this.baseApis.makeTxnId();\n\n        let resolve: (s: string) => void;\n        let reject: (e: Error) => void;\n        const promise = new Promise<string>((res, rej) => {\n            resolve = res;\n            reject = rej;\n        });\n        this.requests.set(requestId, {\n            name,\n            devices,\n            resolve,\n            reject,\n        });\n\n        const cancel = (reason: string) => {\n            // send cancellation event\n            const cancelData = {\n                action: \"request_cancellation\",\n                requesting_device_id: this.baseApis.deviceId,\n                request_id: requestId,\n            };\n            const toDevice = {};\n            for (const device of devices) {\n                toDevice[device] = cancelData;\n            }\n            this.baseApis.sendToDevice(\"m.secret.request\", {\n                [this.baseApis.getUserId()]: toDevice,\n            });\n\n            // and reject the promise so that anyone waiting on it will be\n            // notified\n            reject(new Error(reason || \"Cancelled\"));\n        };\n\n        // send request to devices\n        const requestData = {\n            name,\n            action: \"request\",\n            requesting_device_id: this.baseApis.deviceId,\n            request_id: requestId,\n        };\n        const toDevice = {};\n        for (const device of devices) {\n            toDevice[device] = requestData;\n        }\n        logger.info(`Request secret ${name} from ${devices}, id ${requestId}`);\n        this.baseApis.sendToDevice(\"m.secret.request\", {\n            [this.baseApis.getUserId()]: toDevice,\n        });\n\n        return {\n            requestId,\n            promise,\n            cancel,\n        };\n    }\n\n    public async onRequestReceived(event: MatrixEvent): Promise<void> {\n        const sender = event.getSender();\n        const content = event.getContent();\n        if (sender !== this.baseApis.getUserId()\n            || !(content.name && content.action\n                 && content.requesting_device_id && content.request_id)) {\n            // ignore requests from anyone else, for now\n            return;\n        }\n        const deviceId = content.requesting_device_id;\n        // check if it's a cancel\n        if (content.action === \"request_cancellation\") {\n            /*\n            Looks like we intended to emit events when we got cancelations, but\n            we never put anything in the _incomingRequests object, and the request\n            itself doesn't use events anyway so if we were to wire up cancellations,\n            they probably ought to use the same callback interface. I'm leaving them\n            disabled for now while converting this file to typescript.\n            if (this._incomingRequests[deviceId]\n                && this._incomingRequests[deviceId][content.request_id]) {\n                logger.info(\n                    \"received request cancellation for secret (\" + sender +\n                    \", \" + deviceId + \", \" + content.request_id + \")\",\n                );\n                this.baseApis.emit(\"crypto.secrets.requestCancelled\", {\n                    user_id: sender,\n                    device_id: deviceId,\n                    request_id: content.request_id,\n                });\n            }\n            */\n        } else if (content.action === \"request\") {\n            if (deviceId === this.baseApis.deviceId) {\n                // no point in trying to send ourself the secret\n                return;\n            }\n\n            // check if we have the secret\n            logger.info(\n                \"received request for secret (\" + sender +\n                \", \" + deviceId + \", \" + content.request_id + \")\",\n            );\n            if (!this.cryptoCallbacks.onSecretRequested) {\n                return;\n            }\n            const secret = await this.cryptoCallbacks.onSecretRequested(\n                sender,\n                deviceId,\n                content.request_id,\n                content.name,\n                this.baseApis.checkDeviceTrust(sender, deviceId),\n            );\n            if (secret) {\n                logger.info(`Preparing ${content.name} secret for ${deviceId}`);\n                const payload = {\n                    type: \"m.secret.send\",\n                    content: {\n                        request_id: content.request_id,\n                        secret: secret,\n                    },\n                };\n                const encryptedContent = {\n                    algorithm: olmlib.OLM_ALGORITHM,\n                    sender_key: this.baseApis.crypto.olmDevice.deviceCurve25519Key,\n                    ciphertext: {},\n                };\n                await olmlib.ensureOlmSessionsForDevices(\n                    this.baseApis.crypto.olmDevice,\n                    this.baseApis,\n                    {\n                        [sender]: [\n                            this.baseApis.getStoredDevice(sender, deviceId),\n                        ],\n                    },\n                );\n                await olmlib.encryptMessageForDevice(\n                    encryptedContent.ciphertext,\n                    this.baseApis.getUserId(),\n                    this.baseApis.deviceId,\n                    this.baseApis.crypto.olmDevice,\n                    sender,\n                    this.baseApis.getStoredDevice(sender, deviceId),\n                    payload,\n                );\n                const contentMap = {\n                    [sender]: {\n                        [deviceId]: encryptedContent,\n                    },\n                };\n\n                logger.info(`Sending ${content.name} secret for ${deviceId}`);\n                this.baseApis.sendToDevice(\"m.room.encrypted\", contentMap);\n            } else {\n                logger.info(`Request denied for ${content.name} secret for ${deviceId}`);\n            }\n        }\n    }\n\n    public onSecretReceived(event: MatrixEvent): void {\n        if (event.getSender() !== this.baseApis.getUserId()) {\n            // we shouldn't be receiving secrets from anyone else, so ignore\n            // because someone could be trying to send us bogus data\n            return;\n        }\n        const content = event.getContent();\n        logger.log(\"got secret share for request\", content.request_id);\n        const requestControl = this.requests.get(content.request_id);\n        if (requestControl) {\n            // make sure that the device that sent it is one of the devices that\n            // we requested from\n            const deviceInfo = this.baseApis.crypto.deviceList.getDeviceByIdentityKey(\n                olmlib.OLM_ALGORITHM,\n                event.getSenderKey(),\n            );\n            if (!deviceInfo) {\n                logger.log(\n                    \"secret share from unknown device with key\", event.getSenderKey(),\n                );\n                return;\n            }\n            if (!requestControl.devices.includes(deviceInfo.deviceId)) {\n                logger.log(\"unsolicited secret share from device\", deviceInfo.deviceId);\n                return;\n            }\n\n            logger.log(\n                `Successfully received secret ${requestControl.name} ` +\n                `from ${deviceInfo.deviceId}`,\n            );\n            requestControl.resolve(content.secret);\n        }\n    }\n\n    private async getSecretStorageKey(\n        keys: Record<string, ISecretStorageKeyInfo>,\n        name: string,\n    ): Promise<[string, IDecryptors]> {\n        if (!this.cryptoCallbacks.getSecretStorageKey) {\n            throw new Error(\"No getSecretStorageKey callback supplied\");\n        }\n\n        const returned = await this.cryptoCallbacks.getSecretStorageKey({ keys }, name);\n\n        if (!returned) {\n            throw new Error(\"getSecretStorageKey callback returned falsey\");\n        }\n        if (returned.length < 2) {\n            throw new Error(\"getSecretStorageKey callback returned invalid data\");\n        }\n\n        const [keyId, privateKey] = returned;\n        if (!keys[keyId]) {\n            throw new Error(\"App returned unknown key from getSecretStorageKey!\");\n        }\n\n        if (keys[keyId].algorithm === SECRET_STORAGE_ALGORITHM_V1_AES) {\n            const decryption = {\n                encrypt: async function(secret: string): Promise<IEncryptedPayload> {\n                    return await encryptAES(secret, privateKey, name);\n                },\n                decrypt: async function(encInfo: IEncryptedPayload): Promise<string> {\n                    return await decryptAES(encInfo, privateKey, name);\n                },\n            };\n            return [keyId, decryption];\n        } else {\n            throw new Error(\"Unknown key type: \" + keys[keyId].algorithm);\n        }\n    }\n}\n",
    "/*\nCopyright 2020 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport type { BinaryLike } from \"crypto\";\nimport { getCrypto } from '../utils';\nimport { decodeBase64, encodeBase64 } from './olmlib';\n\nconst subtleCrypto = (typeof window !== \"undefined\" && window.crypto) ?\n    (window.crypto.subtle || window.crypto.webkitSubtle) : null;\n\n// salt for HKDF, with 8 bytes of zeros\nconst zeroSalt = new Uint8Array(8);\n\nexport interface IEncryptedPayload {\n    [key: string]: any; // extensible\n    iv?: string;\n    ciphertext?: string;\n    mac?: string;\n}\n\n/**\n * encrypt a string in Node.js\n *\n * @param {string} data the plaintext to encrypt\n * @param {Uint8Array} key the encryption key to use\n * @param {string} name the name of the secret\n * @param {string} ivStr the initialization vector to use\n */\nasync function encryptNode(data: string, key: Uint8Array, name: string, ivStr?: string): Promise<IEncryptedPayload> {\n    const crypto = getCrypto();\n    if (!crypto) {\n        throw new Error(\"No usable crypto implementation\");\n    }\n\n    let iv;\n    if (ivStr) {\n        iv = decodeBase64(ivStr);\n    } else {\n        iv = crypto.randomBytes(16);\n\n        // clear bit 63 of the IV to stop us hitting the 64-bit counter boundary\n        // (which would mean we wouldn't be able to decrypt on Android). The loss\n        // of a single bit of iv is a price we have to pay.\n        iv[8] &= 0x7f;\n    }\n\n    const [aesKey, hmacKey] = deriveKeysNode(key, name);\n\n    const cipher = crypto.createCipheriv(\"aes-256-ctr\", aesKey, iv);\n    const ciphertext = Buffer.concat([\n        cipher.update(data, \"utf8\"),\n        cipher.final(),\n    ]);\n\n    const hmac = crypto.createHmac(\"sha256\", hmacKey)\n        .update(ciphertext).digest(\"base64\");\n\n    return {\n        iv: encodeBase64(iv),\n        ciphertext: ciphertext.toString(\"base64\"),\n        mac: hmac,\n    };\n}\n\n/**\n * decrypt a string in Node.js\n *\n * @param {object} data the encrypted data\n * @param {string} data.ciphertext the ciphertext in base64\n * @param {string} data.iv the initialization vector in base64\n * @param {string} data.mac the HMAC in base64\n * @param {Uint8Array} key the encryption key to use\n * @param {string} name the name of the secret\n */\nasync function decryptNode(data: IEncryptedPayload, key: Uint8Array, name: string): Promise<string> {\n    const crypto = getCrypto();\n    if (!crypto) {\n        throw new Error(\"No usable crypto implementation\");\n    }\n\n    const [aesKey, hmacKey] = deriveKeysNode(key, name);\n\n    const hmac = crypto.createHmac(\"sha256\", hmacKey)\n        .update(Buffer.from(data.ciphertext, \"base64\"))\n        .digest(\"base64\").replace(/=+$/g, '');\n\n    if (hmac !== data.mac.replace(/=+$/g, '')) {\n        throw new Error(`Error decrypting secret ${name}: bad MAC`);\n    }\n\n    const decipher = crypto.createDecipheriv(\n        \"aes-256-ctr\", aesKey, decodeBase64(data.iv),\n    );\n    return decipher.update(data.ciphertext, \"base64\", \"utf8\")\n          + decipher.final(\"utf8\");\n}\n\nfunction deriveKeysNode(key: BinaryLike, name: string): [Buffer, Buffer] {\n    const crypto = getCrypto();\n    const prk = crypto.createHmac(\"sha256\", zeroSalt).update(key).digest();\n\n    const b = Buffer.alloc(1, 1);\n    const aesKey = crypto.createHmac(\"sha256\", prk)\n        .update(name, \"utf8\").update(b).digest();\n    b[0] = 2;\n    const hmacKey = crypto.createHmac(\"sha256\", prk)\n        .update(aesKey).update(name, \"utf8\").update(b).digest();\n\n    return [aesKey, hmacKey];\n}\n\n/**\n * encrypt a string in Node.js\n *\n * @param {string} data the plaintext to encrypt\n * @param {Uint8Array} key the encryption key to use\n * @param {string} name the name of the secret\n * @param {string} ivStr the initialization vector to use\n */\nasync function encryptBrowser(data: string, key: Uint8Array, name: string, ivStr?: string): Promise<IEncryptedPayload> {\n    let iv;\n    if (ivStr) {\n        iv = decodeBase64(ivStr);\n    } else {\n        iv = new Uint8Array(16);\n        window.crypto.getRandomValues(iv);\n\n        // clear bit 63 of the IV to stop us hitting the 64-bit counter boundary\n        // (which would mean we wouldn't be able to decrypt on Android). The loss\n        // of a single bit of iv is a price we have to pay.\n        iv[8] &= 0x7f;\n    }\n\n    const [aesKey, hmacKey] = await deriveKeysBrowser(key, name);\n    const encodedData = new TextEncoder().encode(data);\n\n    const ciphertext = await subtleCrypto.encrypt(\n        {\n            name: \"AES-CTR\",\n            counter: iv,\n            length: 64,\n        },\n        aesKey,\n        encodedData,\n    );\n\n    const hmac = await subtleCrypto.sign(\n        { name: 'HMAC' },\n        hmacKey,\n        ciphertext,\n    );\n\n    return {\n        iv: encodeBase64(iv),\n        ciphertext: encodeBase64(ciphertext),\n        mac: encodeBase64(hmac),\n    };\n}\n\n/**\n * decrypt a string in the browser\n *\n * @param {object} data the encrypted data\n * @param {string} data.ciphertext the ciphertext in base64\n * @param {string} data.iv the initialization vector in base64\n * @param {string} data.mac the HMAC in base64\n * @param {Uint8Array} key the encryption key to use\n * @param {string} name the name of the secret\n */\nasync function decryptBrowser(data: IEncryptedPayload, key: Uint8Array, name: string): Promise<string> {\n    const [aesKey, hmacKey] = await deriveKeysBrowser(key, name);\n\n    const ciphertext = decodeBase64(data.ciphertext);\n\n    if (!await subtleCrypto.verify(\n        { name: \"HMAC\" },\n        hmacKey,\n        decodeBase64(data.mac),\n        ciphertext,\n    )) {\n        throw new Error(`Error decrypting secret ${name}: bad MAC`);\n    }\n\n    const plaintext = await subtleCrypto.decrypt(\n        {\n            name: \"AES-CTR\",\n            counter: decodeBase64(data.iv),\n            length: 64,\n        },\n        aesKey,\n        ciphertext,\n    );\n\n    return new TextDecoder().decode(new Uint8Array(plaintext));\n}\n\nasync function deriveKeysBrowser(key: Uint8Array, name: string): Promise<[CryptoKey, CryptoKey]> {\n    const hkdfkey = await subtleCrypto.importKey(\n        'raw',\n        key,\n        { name: \"HKDF\" },\n        false,\n        [\"deriveBits\"],\n    );\n    const keybits = await subtleCrypto.deriveBits(\n        {\n            name: \"HKDF\",\n            salt: zeroSalt,\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore: https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/879\n            info: (new TextEncoder().encode(name)),\n            hash: \"SHA-256\",\n        },\n        hkdfkey,\n        512,\n    );\n\n    const aesKey = keybits.slice(0, 32);\n    const hmacKey = keybits.slice(32);\n\n    const aesProm = subtleCrypto.importKey(\n        'raw',\n        aesKey,\n        { name: 'AES-CTR' },\n        false,\n        ['encrypt', 'decrypt'],\n    );\n\n    const hmacProm = subtleCrypto.importKey(\n        'raw',\n        hmacKey,\n        {\n            name: 'HMAC',\n            hash: { name: 'SHA-256' },\n        },\n        false,\n        ['sign', 'verify'],\n    );\n\n    return await Promise.all([aesProm, hmacProm]);\n}\n\nexport function encryptAES(data: string, key: Uint8Array, name: string, ivStr?: string): Promise<IEncryptedPayload> {\n    return subtleCrypto ? encryptBrowser(data, key, name, ivStr) : encryptNode(data, key, name, ivStr);\n}\n\nexport function decryptAES(data: IEncryptedPayload, key: Uint8Array, name: string): Promise<string> {\n    return subtleCrypto ? decryptBrowser(data, key, name) : decryptNode(data, key, name);\n}\n\n// string of zeroes, for calculating the key check\nconst ZERO_STR = \"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/** Calculate the MAC for checking the key.\n *\n * @param {Uint8Array} key the key to use\n * @param {string} [iv] The initialization vector as a base64-encoded string.\n *     If omitted, a random initialization vector will be created.\n * @return {Promise<object>} An object that contains, `mac` and `iv` properties.\n */\nexport function calculateKeyCheck(key: Uint8Array, iv?: string): Promise<IEncryptedPayload> {\n    return encryptAES(ZERO_STR, key, \"\", iv);\n}\n",
    "/*\nCopyright 2016 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * Internal module. Defines the base classes of the encryption implementations\n *\n * @module\n */\n\nimport { MatrixClient } from \"../../client\";\nimport { Room } from \"../../models/room\";\nimport { OlmDevice } from \"../OlmDevice\";\nimport { MatrixEvent, RoomMember } from \"../..\";\nimport { Crypto, IEventDecryptionResult, IMegolmSessionData, IncomingRoomKeyRequest } from \"..\";\nimport { DeviceInfo } from \"../deviceinfo\";\nimport { IRoomEncryption } from \"../RoomList\";\n\n/**\n * map of registered encryption algorithm classes. A map from string to {@link\n * module:crypto/algorithms/base.EncryptionAlgorithm|EncryptionAlgorithm} class\n *\n * @type {Object.<string, function(new: module:crypto/algorithms/base.EncryptionAlgorithm)>}\n */\nexport const ENCRYPTION_CLASSES: Record<string, new (params: IParams) => EncryptionAlgorithm> = {};\n\ntype DecryptionClassParams = Omit<IParams, \"deviceId\" | \"config\">;\n\n/**\n * map of registered encryption algorithm classes. Map from string to {@link\n * module:crypto/algorithms/base.DecryptionAlgorithm|DecryptionAlgorithm} class\n *\n * @type {Object.<string, function(new: module:crypto/algorithms/base.DecryptionAlgorithm)>}\n */\nexport const DECRYPTION_CLASSES: Record<string, new (params: DecryptionClassParams) => DecryptionAlgorithm> = {};\n\nexport interface IParams {\n    userId: string;\n    deviceId: string;\n    crypto: Crypto;\n    olmDevice: OlmDevice;\n    baseApis: MatrixClient;\n    roomId: string;\n    config: IRoomEncryption & object;\n}\n\n/**\n * base type for encryption implementations\n *\n * @alias module:crypto/algorithms/base.EncryptionAlgorithm\n *\n * @param {object} params parameters\n * @param {string} params.userId  The UserID for the local user\n * @param {string} params.deviceId The identifier for this device.\n * @param {module:crypto} params.crypto crypto core\n * @param {module:crypto/OlmDevice} params.olmDevice olm.js wrapper\n * @param {MatrixClient} baseApis base matrix api interface\n * @param {string} params.roomId  The ID of the room we will be sending to\n * @param {object} params.config  The body of the m.room.encryption event\n */\nexport abstract class EncryptionAlgorithm {\n    protected readonly userId: string;\n    protected readonly deviceId: string;\n    protected readonly crypto: Crypto;\n    protected readonly olmDevice: OlmDevice;\n    protected readonly baseApis: MatrixClient;\n    protected readonly roomId: string;\n\n    constructor(params: IParams) {\n        this.userId = params.userId;\n        this.deviceId = params.deviceId;\n        this.crypto = params.crypto;\n        this.olmDevice = params.olmDevice;\n        this.baseApis = params.baseApis;\n        this.roomId = params.roomId;\n    }\n\n    /**\n     * Perform any background tasks that can be done before a message is ready to\n     * send, in order to speed up sending of the message.\n     *\n     * @param {module:models/room} room the room the event is in\n     */\n    public prepareToEncrypt(room: Room): void {}\n\n    /**\n     * Encrypt a message event\n     *\n     * @method module:crypto/algorithms/base.EncryptionAlgorithm.encryptMessage\n     * @public\n     * @abstract\n     *\n     * @param {module:models/room} room\n     * @param {string} eventType\n     * @param {object} content event content\n     *\n     * @return {Promise} Promise which resolves to the new event body\n     */\n    public abstract encryptMessage(room: Room, eventType: string, content: object): Promise<object>;\n\n    /**\n     * Called when the membership of a member of the room changes.\n     *\n     * @param {module:models/event.MatrixEvent} event  event causing the change\n     * @param {module:models/room-member} member  user whose membership changed\n     * @param {string=} oldMembership  previous membership\n     * @public\n     * @abstract\n     */\n    public onRoomMembership(event: MatrixEvent, member: RoomMember, oldMembership?: string): void {}\n\n    public reshareKeyWithDevice?(\n        senderKey: string,\n        sessionId: string,\n        userId: string,\n        device: DeviceInfo,\n    ): Promise<void>;\n\n    public forceDiscardSession?(): void;\n}\n\n/**\n * base type for decryption implementations\n *\n * @alias module:crypto/algorithms/base.DecryptionAlgorithm\n * @param {object} params parameters\n * @param {string} params.userId  The UserID for the local user\n * @param {module:crypto} params.crypto crypto core\n * @param {module:crypto/OlmDevice} params.olmDevice olm.js wrapper\n * @param {MatrixClient} baseApis base matrix api interface\n * @param {string=} params.roomId The ID of the room we will be receiving\n *     from. Null for to-device events.\n */\nexport abstract class DecryptionAlgorithm {\n    protected readonly userId: string;\n    protected readonly crypto: Crypto;\n    protected readonly olmDevice: OlmDevice;\n    protected readonly baseApis: MatrixClient;\n    protected readonly roomId: string;\n\n    constructor(params: DecryptionClassParams) {\n        this.userId = params.userId;\n        this.crypto = params.crypto;\n        this.olmDevice = params.olmDevice;\n        this.baseApis = params.baseApis;\n        this.roomId = params.roomId;\n    }\n\n    /**\n     * Decrypt an event\n     *\n     * @method module:crypto/algorithms/base.DecryptionAlgorithm#decryptEvent\n     * @abstract\n     *\n     * @param {MatrixEvent} event undecrypted event\n     *\n     * @return {Promise<module:crypto~EventDecryptionResult>} promise which\n     * resolves once we have finished decrypting. Rejects with an\n     * `algorithms.DecryptionError` if there is a problem decrypting the event.\n     */\n    public abstract decryptEvent(event: MatrixEvent): Promise<IEventDecryptionResult>;\n\n    /**\n     * Handle a key event\n     *\n     * @method module:crypto/algorithms/base.DecryptionAlgorithm#onRoomKeyEvent\n     *\n     * @param {module:models/event.MatrixEvent} params event key event\n     */\n    public onRoomKeyEvent(params: MatrixEvent): void {\n        // ignore by default\n    }\n\n    /**\n     * Import a room key\n     *\n     * @param {module:crypto/OlmDevice.MegolmSessionData} session\n     * @param {object} opts object\n     */\n    public async importRoomKey(session: IMegolmSessionData, opts: object): Promise<void> {\n        // ignore by default\n    }\n\n    /**\n     * Determine if we have the keys necessary to respond to a room key request\n     *\n     * @param {module:crypto~IncomingRoomKeyRequest} keyRequest\n     * @return {Promise<boolean>} true if we have the keys and could (theoretically) share\n     *  them; else false.\n     */\n    public hasKeysForKeyRequest(keyRequest: IncomingRoomKeyRequest): Promise<boolean> {\n        return Promise.resolve(false);\n    }\n\n    /**\n     * Send the response to a room key request\n     *\n     * @param {module:crypto~IncomingRoomKeyRequest} keyRequest\n     */\n    public shareKeysWithDevice(keyRequest: IncomingRoomKeyRequest): void {\n        throw new Error(\"shareKeysWithDevice not supported for this DecryptionAlgorithm\");\n    }\n\n    /**\n     * Retry decrypting all the events from a sender that haven't been\n     * decrypted yet.\n     *\n     * @param {string} senderKey the sender's key\n     */\n    public async retryDecryptionFromSender(senderKey: string): Promise<boolean> {\n        // ignore by default\n        return false;\n    }\n\n    public onRoomKeyWithheldEvent?(event: MatrixEvent): Promise<void>;\n    public sendSharedHistoryInboundSessions?(devicesByUser: Record<string, DeviceInfo[]>): Promise<void>;\n}\n\n/**\n * Exception thrown when decryption fails\n *\n * @alias module:crypto/algorithms/base.DecryptionError\n * @param {string} msg user-visible message describing the problem\n *\n * @param {Object=} details key/value pairs reported in the logs but not shown\n *   to the user.\n *\n * @extends Error\n */\nexport class DecryptionError extends Error {\n    public readonly detailedString: string;\n\n    constructor(public readonly code: string, msg: string, details?: Record<string, string>) {\n        super(msg);\n        this.code = code;\n        this.name = 'DecryptionError';\n        this.detailedString = detailedStringForDecryptionError(this, details);\n    }\n}\n\nfunction detailedStringForDecryptionError(err: DecryptionError, details?: Record<string, string>): string {\n    let result = err.name + '[msg: ' + err.message;\n\n    if (details) {\n        result += ', ' + Object.keys(details).map((k) => k + ': ' + details[k]).join(', ');\n    }\n\n    result += ']';\n\n    return result;\n}\n\n/**\n * Exception thrown specifically when we want to warn the user to consider\n * the security of their conversation before continuing\n *\n * @param {string} msg message describing the problem\n * @param {Object} devices userId -> {deviceId -> object}\n *      set of unknown devices per user we're warning about\n * @extends Error\n */\nexport class UnknownDeviceError extends Error {\n    constructor(msg: string, public readonly devices: Record<string, Record<string, object>>) {\n        super(msg);\n        this.name = \"UnknownDeviceError\";\n        this.devices = devices;\n    }\n}\n\n/**\n * Registers an encryption/decryption class for a particular algorithm\n *\n * @param {string} algorithm algorithm tag to register for\n *\n * @param {class} encryptor {@link\n *     module:crypto/algorithms/base.EncryptionAlgorithm|EncryptionAlgorithm}\n *     implementation\n *\n * @param {class} decryptor {@link\n *     module:crypto/algorithms/base.DecryptionAlgorithm|DecryptionAlgorithm}\n *     implementation\n */\nexport function registerAlgorithm(\n    algorithm: string,\n    encryptor: new (params: IParams) => EncryptionAlgorithm,\n    decryptor: new (params: Omit<IParams, \"deviceId\">) => DecryptionAlgorithm,\n): void {\n    ENCRYPTION_CLASSES[algorithm] = encryptor;\n    DECRYPTION_CLASSES[algorithm] = decryptor;\n}\n",
    "/*\nCopyright 2016 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * @module crypto/algorithms\n */\n\nimport \"./olm\";\nimport \"./megolm\";\n\nexport * from \"./base\";\n",
    "/*\nCopyright 2015 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * Defines m.olm encryption/decryption\n *\n * @module crypto/algorithms/megolm\n */\n\nimport { logger } from '../../logger';\nimport * as olmlib from \"../olmlib\";\nimport {\n    DecryptionAlgorithm,\n    DecryptionError,\n    EncryptionAlgorithm,\n    IParams,\n    registerAlgorithm,\n    UnknownDeviceError,\n} from \"./base\";\nimport { WITHHELD_MESSAGES } from '../OlmDevice';\nimport { Room } from '../../models/room';\nimport { DeviceInfo } from \"../deviceinfo\";\nimport { IOlmSessionResult } from \"../olmlib\";\nimport { DeviceInfoMap } from \"../DeviceList\";\nimport { MatrixEvent } from \"../..\";\nimport { IEventDecryptionResult, IMegolmSessionData, IncomingRoomKeyRequest } from \"../index\";\n\n// determine whether the key can be shared with invitees\nexport function isRoomSharedHistory(room: Room): boolean {\n    const visibilityEvent = room?.currentState?.getStateEvents(\"m.room.history_visibility\", \"\");\n    // NOTE: if the room visibility is unset, it would normally default to\n    // \"world_readable\".\n    // (https://spec.matrix.org/unstable/client-server-api/#server-behaviour-5)\n    // But we will be paranoid here, and treat it as a situation where the room\n    // is not shared-history\n    const visibility = visibilityEvent?.getContent()?.history_visibility;\n    return [\"world_readable\", \"shared\"].includes(visibility);\n}\n\ninterface IBlockedDevice {\n    code: string;\n    reason: string;\n    deviceInfo: DeviceInfo;\n}\n\ninterface IBlockedMap {\n    [userId: string]: {\n        [deviceId: string]: IBlockedDevice;\n    };\n}\n\nexport interface IOlmDevice<T = DeviceInfo> {\n    userId: string;\n    deviceInfo: T;\n}\n\n/* eslint-disable camelcase */\nexport interface IOutboundGroupSessionKey {\n    chain_index: number;\n    key: string;\n}\n\ninterface IMessage {\n    type: string;\n    content: {\n        algorithm: string;\n        room_id: string;\n        sender_key?: string;\n        sender_claimed_ed25519_key?: string;\n        session_id: string;\n        session_key: string;\n        chain_index: number;\n        forwarding_curve25519_key_chain?: string[];\n        \"org.matrix.msc3061.shared_history\": boolean;\n    };\n}\n\ninterface IKeyForwardingMessage extends IMessage {\n    type: \"m.forwarded_room_key\";\n}\n\ninterface IPayload extends Partial<IMessage> {\n    code?: string;\n    reason?: string;\n    room_id?: string;\n    session_id?: string;\n    algorithm?: string;\n    sender_key?: string;\n}\n\ninterface IEncryptedContent {\n    algorithm: string;\n    sender_key: string;\n    ciphertext: Record<string, string>;\n}\n/* eslint-enable camelcase */\n\ninterface SharedWithData {\n    // The identity key of the device we shared with\n    deviceKey: string;\n    // The message index of the ratchet we shared with that device\n    messageIndex: number;\n}\n\n/**\n * @private\n * @constructor\n *\n * @param {string} sessionId\n * @param {boolean} sharedHistory whether the session can be freely shared with\n *    other group members, according to the room history visibility settings\n *\n * @property {string} sessionId\n * @property {Number} useCount     number of times this session has been used\n * @property {Number} creationTime when the session was created (ms since the epoch)\n *\n * @property {object} sharedWithDevices\n *    devices with which we have shared the session key\n *        userId -> {deviceId -> SharedWithData}\n */\nclass OutboundSessionInfo {\n    public useCount = 0;\n    public creationTime: number;\n    public sharedWithDevices: Record<string, Record<string, SharedWithData>> = {};\n    public blockedDevicesNotified: Record<string, Record<string, boolean>> = {};\n\n    constructor(public readonly sessionId: string, public readonly sharedHistory = false) {\n        this.creationTime = new Date().getTime();\n    }\n\n    /**\n     * Check if it's time to rotate the session\n     *\n     * @param {Number} rotationPeriodMsgs\n     * @param {Number} rotationPeriodMs\n     * @return {Boolean}\n     */\n    public needsRotation(rotationPeriodMsgs: number, rotationPeriodMs: number): boolean {\n        const sessionLifetime = new Date().getTime() - this.creationTime;\n\n        if (this.useCount >= rotationPeriodMsgs ||\n            sessionLifetime >= rotationPeriodMs\n        ) {\n            logger.log(\n                \"Rotating megolm session after \" + this.useCount +\n                \" messages, \" + sessionLifetime + \"ms\",\n            );\n            return true;\n        }\n\n        return false;\n    }\n\n    public markSharedWithDevice(userId: string, deviceId: string, deviceKey: string, chainIndex: number): void {\n        if (!this.sharedWithDevices[userId]) {\n            this.sharedWithDevices[userId] = {};\n        }\n        this.sharedWithDevices[userId][deviceId] = { deviceKey, messageIndex: chainIndex };\n    }\n\n    public markNotifiedBlockedDevice(userId: string, deviceId: string): void {\n        if (!this.blockedDevicesNotified[userId]) {\n            this.blockedDevicesNotified[userId] = {};\n        }\n        this.blockedDevicesNotified[userId][deviceId] = true;\n    }\n\n    /**\n     * Determine if this session has been shared with devices which it shouldn't\n     * have been.\n     *\n     * @param {Object} devicesInRoom userId -> {deviceId -> object}\n     *   devices we should shared the session with.\n     *\n     * @return {Boolean} true if we have shared the session with devices which aren't\n     * in devicesInRoom.\n     */\n    public sharedWithTooManyDevices(devicesInRoom: Record<string, Record<string, object>>): boolean {\n        for (const userId in this.sharedWithDevices) {\n            if (!this.sharedWithDevices.hasOwnProperty(userId)) {\n                continue;\n            }\n\n            if (!devicesInRoom.hasOwnProperty(userId)) {\n                logger.log(\"Starting new megolm session because we shared with \" + userId);\n                return true;\n            }\n\n            for (const deviceId in this.sharedWithDevices[userId]) {\n                if (!this.sharedWithDevices[userId].hasOwnProperty(deviceId)) {\n                    continue;\n                }\n\n                if (!devicesInRoom[userId].hasOwnProperty(deviceId)) {\n                    logger.log(\n                        \"Starting new megolm session because we shared with \" +\n                        userId + \":\" + deviceId,\n                    );\n                    return true;\n                }\n            }\n        }\n    }\n}\n\n/**\n * Megolm encryption implementation\n *\n * @constructor\n * @extends {module:crypto/algorithms/EncryptionAlgorithm}\n *\n * @param {object} params parameters, as per\n *     {@link module:crypto/algorithms/EncryptionAlgorithm}\n */\nclass MegolmEncryption extends EncryptionAlgorithm {\n    // the most recent attempt to set up a session. This is used to serialise\n    // the session setups, so that we have a race-free view of which session we\n    // are using, and which devices we have shared the keys with. It resolves\n    // with an OutboundSessionInfo (or undefined, for the first message in the\n    // room).\n    private setupPromise = Promise.resolve<OutboundSessionInfo>(undefined);\n\n    // Map of outbound sessions by sessions ID. Used if we need a particular\n    // session (the session we're currently using to send is always obtained\n    // using setupPromise).\n    private outboundSessions: Record<string, OutboundSessionInfo> = {};\n\n    private readonly sessionRotationPeriodMsgs: number;\n    private readonly sessionRotationPeriodMs: number;\n    private encryptionPreparation: Promise<void>;\n    private encryptionPreparationMetadata: {\n        startTime: number;\n    };\n\n    constructor(params: IParams) {\n        super(params);\n\n        this.sessionRotationPeriodMsgs = params.config?.rotation_period_msgs ?? 100;\n        this.sessionRotationPeriodMs = params.config?.rotation_period_ms ?? 7 * 24 * 3600 * 1000;\n    }\n\n    /**\n     * @private\n     *\n     * @param {module:models/room} room\n     * @param {Object} devicesInRoom The devices in this room, indexed by user ID\n     * @param {Object} blocked The devices that are blocked, indexed by user ID\n     * @param {boolean} [singleOlmCreationPhase] Only perform one round of olm\n     *     session creation\n     *\n     * @return {Promise} Promise which resolves to the\n     *    OutboundSessionInfo when setup is complete.\n     */\n    private async ensureOutboundSession(\n        room: Room,\n        devicesInRoom: DeviceInfoMap,\n        blocked: IBlockedMap,\n        singleOlmCreationPhase = false,\n    ): Promise<OutboundSessionInfo> {\n        let session: OutboundSessionInfo;\n\n        // takes the previous OutboundSessionInfo, and considers whether to create\n        // a new one. Also shares the key with any (new) devices in the room.\n        // Updates `session` to hold the final OutboundSessionInfo.\n        //\n        // returns a promise which resolves once the keyshare is successful.\n        const prepareSession = async (oldSession: OutboundSessionInfo) => {\n            session = oldSession;\n\n            const sharedHistory = isRoomSharedHistory(room);\n\n            // history visibility changed\n            if (session && sharedHistory !== session.sharedHistory) {\n                session = null;\n            }\n\n            // need to make a brand new session?\n            if (session && session.needsRotation(this.sessionRotationPeriodMsgs,\n                this.sessionRotationPeriodMs)\n            ) {\n                logger.log(\"Starting new megolm session because we need to rotate.\");\n                session = null;\n            }\n\n            // determine if we have shared with anyone we shouldn't have\n            if (session && session.sharedWithTooManyDevices(devicesInRoom)) {\n                session = null;\n            }\n\n            if (!session) {\n                logger.log(`Starting new megolm session for room ${this.roomId}`);\n                session = await this.prepareNewSession(sharedHistory);\n                logger.log(`Started new megolm session ${session.sessionId} ` +\n                    `for room ${this.roomId}`);\n                this.outboundSessions[session.sessionId] = session;\n            }\n\n            // now check if we need to share with any devices\n            const shareMap: Record<string, DeviceInfo[]> = {};\n\n            for (const [userId, userDevices] of Object.entries(devicesInRoom)) {\n                for (const [deviceId, deviceInfo] of Object.entries(userDevices)) {\n                    const key = deviceInfo.getIdentityKey();\n                    if (key == this.olmDevice.deviceCurve25519Key) {\n                        // don't bother sending to ourself\n                        continue;\n                    }\n\n                    if (\n                        !session.sharedWithDevices[userId] ||\n                        session.sharedWithDevices[userId][deviceId] === undefined\n                    ) {\n                        shareMap[userId] = shareMap[userId] || [];\n                        shareMap[userId].push(deviceInfo);\n                    }\n                }\n            }\n\n            const key = this.olmDevice.getOutboundGroupSessionKey(session.sessionId);\n            const payload: IPayload = {\n                type: \"m.room_key\",\n                content: {\n                    \"algorithm\": olmlib.MEGOLM_ALGORITHM,\n                    \"room_id\": this.roomId,\n                    \"session_id\": session.sessionId,\n                    \"session_key\": key.key,\n                    \"chain_index\": key.chain_index,\n                    \"org.matrix.msc3061.shared_history\": sharedHistory,\n                },\n            };\n            const [devicesWithoutSession, olmSessions] = await olmlib.getExistingOlmSessions(\n                this.olmDevice, this.baseApis, shareMap,\n            );\n\n            await Promise.all([\n                (async () => {\n                    // share keys with devices that we already have a session for\n                    logger.debug(`Sharing keys with existing Olm sessions in ${this.roomId}`, olmSessions);\n                    await this.shareKeyWithOlmSessions(session, key, payload, olmSessions);\n                    logger.debug(`Shared keys with existing Olm sessions in ${this.roomId}`);\n                })(),\n                (async () => {\n                    logger.debug(\n                        `Sharing keys (start phase 1) with new Olm sessions in ${this.roomId}`,\n                        devicesWithoutSession,\n                    );\n                    const errorDevices: IOlmDevice[] = [];\n\n                    // meanwhile, establish olm sessions for devices that we don't\n                    // already have a session for, and share keys with them.  If\n                    // we're doing two phases of olm session creation, use a\n                    // shorter timeout when fetching one-time keys for the first\n                    // phase.\n                    const start = Date.now();\n                    const failedServers: string[] = [];\n                    await this.shareKeyWithDevices(\n                        session, key, payload, devicesWithoutSession, errorDevices,\n                        singleOlmCreationPhase ? 10000 : 2000, failedServers,\n                    );\n                    logger.debug(`Shared keys (end phase 1) with new Olm sessions in ${this.roomId}`);\n\n                    if (!singleOlmCreationPhase && (Date.now() - start < 10000)) {\n                        // perform the second phase of olm session creation if requested,\n                        // and if the first phase didn't take too long\n                        (async () => {\n                            // Retry sending keys to devices that we were unable to establish\n                            // an olm session for.  This time, we use a longer timeout, but we\n                            // do this in the background and don't block anything else while we\n                            // do this.  We only need to retry users from servers that didn't\n                            // respond the first time.\n                            const retryDevices: Record<string, DeviceInfo[]> = {};\n                            const failedServerMap = new Set;\n                            for (const server of failedServers) {\n                                failedServerMap.add(server);\n                            }\n                            const failedDevices = [];\n                            for (const { userId, deviceInfo } of errorDevices) {\n                                const userHS = userId.slice(userId.indexOf(\":\") + 1);\n                                if (failedServerMap.has(userHS)) {\n                                    retryDevices[userId] = retryDevices[userId] || [];\n                                    retryDevices[userId].push(deviceInfo);\n                                } else {\n                                    // if we aren't going to retry, then handle it\n                                    // as a failed device\n                                    failedDevices.push({ userId, deviceInfo });\n                                }\n                            }\n\n                            logger.debug(`Sharing keys (start phase 2) with new Olm sessions in ${this.roomId}`);\n                            await this.shareKeyWithDevices(\n                                session, key, payload, retryDevices, failedDevices, 30000,\n                            );\n                            logger.debug(`Shared keys (end phase 2) with new Olm sessions in ${this.roomId}`);\n\n                            await this.notifyFailedOlmDevices(session, key, failedDevices);\n                        })();\n                    } else {\n                        await this.notifyFailedOlmDevices(session, key, errorDevices);\n                    }\n                    logger.debug(`Shared keys (all phases done) with new Olm sessions in ${this.roomId}`);\n                })(),\n                (async () => {\n                    logger.debug(`There are ${Object.entries(blocked).length} blocked devices in ${this.roomId}`,\n                        Object.entries(blocked));\n\n                    // also, notify newly blocked devices that they're blocked\n                    logger.debug(`Notifying newly blocked devices in ${this.roomId}`);\n                    const blockedMap: Record<string, Record<string, { device: IBlockedDevice }>> = {};\n                    let blockedCount = 0;\n                    for (const [userId, userBlockedDevices] of Object.entries(blocked)) {\n                        for (const [deviceId, device] of Object.entries(userBlockedDevices)) {\n                            if (\n                                !session.blockedDevicesNotified[userId] ||\n                                session.blockedDevicesNotified[userId][deviceId] === undefined\n                            ) {\n                                blockedMap[userId] = blockedMap[userId] || {};\n                                blockedMap[userId][deviceId] = { device };\n                                blockedCount++;\n                            }\n                        }\n                    }\n\n                    await this.notifyBlockedDevices(session, blockedMap);\n                    logger.debug(`Notified ${blockedCount} newly blocked devices in ${this.roomId}`, blockedMap);\n                })(),\n            ]);\n        };\n\n        // helper which returns the session prepared by prepareSession\n        function returnSession() {\n            return session;\n        }\n\n        // first wait for the previous share to complete\n        const prom = this.setupPromise.then(prepareSession);\n\n        // Ensure any failures are logged for debugging\n        prom.catch(e => {\n            logger.error(`Failed to ensure outbound session in ${this.roomId}`, e);\n        });\n\n        // setupPromise resolves to `session` whether or not the share succeeds\n        this.setupPromise = prom.then(returnSession, returnSession);\n\n        // but we return a promise which only resolves if the share was successful.\n        return prom.then(returnSession);\n    }\n\n    /**\n     * @private\n     *\n     * @param {boolean} sharedHistory\n     *\n     * @return {module:crypto/algorithms/megolm.OutboundSessionInfo} session\n     */\n    private async prepareNewSession(sharedHistory: boolean): Promise<OutboundSessionInfo> {\n        const sessionId = this.olmDevice.createOutboundGroupSession();\n        const key = this.olmDevice.getOutboundGroupSessionKey(sessionId);\n\n        await this.olmDevice.addInboundGroupSession(\n            this.roomId, this.olmDevice.deviceCurve25519Key, [], sessionId,\n            key.key, { ed25519: this.olmDevice.deviceEd25519Key }, false,\n            { sharedHistory },\n        );\n\n        // don't wait for it to complete\n        this.crypto.backupManager.backupGroupSession(this.olmDevice.deviceCurve25519Key, sessionId);\n\n        return new OutboundSessionInfo(sessionId, sharedHistory);\n    }\n\n    /**\n     * Determines what devices in devicesByUser don't have an olm session as given\n     * in devicemap.\n     *\n     * @private\n     *\n     * @param {object} devicemap the devices that have olm sessions, as returned by\n     *     olmlib.ensureOlmSessionsForDevices.\n     * @param {object} devicesByUser a map of user IDs to array of deviceInfo\n     * @param {array} [noOlmDevices] an array to fill with devices that don't have\n     *     olm sessions\n     *\n     * @return {array} an array of devices that don't have olm sessions.  If\n     *     noOlmDevices is specified, then noOlmDevices will be returned.\n     */\n    private getDevicesWithoutSessions(\n        devicemap: Record<string, Record<string, IOlmSessionResult>>,\n        devicesByUser: Record<string, DeviceInfo[]>,\n        noOlmDevices: IOlmDevice[] = [],\n    ): IOlmDevice[] {\n        for (const [userId, devicesToShareWith] of Object.entries(devicesByUser)) {\n            const sessionResults = devicemap[userId];\n\n            for (const deviceInfo of devicesToShareWith) {\n                const deviceId = deviceInfo.deviceId;\n\n                const sessionResult = sessionResults[deviceId];\n                if (!sessionResult.sessionId) {\n                    // no session with this device, probably because there\n                    // were no one-time keys.\n\n                    noOlmDevices.push({ userId, deviceInfo });\n                    delete sessionResults[deviceId];\n\n                    // ensureOlmSessionsForUsers has already done the logging,\n                    // so just skip it.\n                    continue;\n                }\n            }\n        }\n\n        return noOlmDevices;\n    }\n\n    /**\n     * Splits the user device map into multiple chunks to reduce the number of\n     * devices we encrypt to per API call.\n     *\n     * @private\n     *\n     * @param {object} devicesByUser map from userid to list of devices\n     *\n     * @return {array<array<object>>} the blocked devices, split into chunks\n     */\n    private splitDevices<T extends DeviceInfo | IBlockedDevice>(\n        devicesByUser: Record<string, Record<string, { device: T }>>,\n    ): IOlmDevice<T>[][] {\n        const maxDevicesPerRequest = 20;\n\n        // use an array where the slices of a content map gets stored\n        let currentSlice: IOlmDevice<T>[] = [];\n        const mapSlices = [currentSlice];\n\n        for (const [userId, userDevices] of Object.entries(devicesByUser)) {\n            for (const deviceInfo of Object.values(userDevices)) {\n                currentSlice.push({\n                    userId: userId,\n                    deviceInfo: deviceInfo.device,\n                });\n            }\n\n            // We do this in the per-user loop as we prefer that all messages to the\n            // same user end up in the same API call to make it easier for the\n            // server (e.g. only have to send one EDU if a remote user, etc). This\n            // does mean that if a user has many devices we may go over the desired\n            // limit, but its not a hard limit so that is fine.\n            if (currentSlice.length > maxDevicesPerRequest) {\n                // the current slice is filled up. Start inserting into the next slice\n                currentSlice = [];\n                mapSlices.push(currentSlice);\n            }\n        }\n        if (currentSlice.length === 0) {\n            mapSlices.pop();\n        }\n        return mapSlices;\n    }\n\n    /**\n     * @private\n     *\n     * @param {module:crypto/algorithms/megolm.OutboundSessionInfo} session\n     *\n     * @param {number} chainIndex current chain index\n     *\n     * @param {object<userId, deviceInfo>} userDeviceMap\n     *   mapping from userId to deviceInfo\n     *\n     * @param {object} payload fields to include in the encrypted payload\n     *\n     * @return {Promise} Promise which resolves once the key sharing\n     *     for the given userDeviceMap is generated and has been sent.\n     */\n    private encryptAndSendKeysToDevices(\n        session: OutboundSessionInfo,\n        chainIndex: number,\n        userDeviceMap: IOlmDevice[],\n        payload: IPayload,\n    ): Promise<void> {\n        const contentMap: Record<string, Record<string, IEncryptedContent>> = {};\n        const deviceInfoByDeviceId = new Map<string, DeviceInfo>();\n\n        const promises: Promise<unknown>[] = [];\n        for (let i = 0; i < userDeviceMap.length; i++) {\n            const encryptedContent: IEncryptedContent = {\n                algorithm: olmlib.OLM_ALGORITHM,\n                sender_key: this.olmDevice.deviceCurve25519Key,\n                ciphertext: {},\n            };\n            const val = userDeviceMap[i];\n            const userId = val.userId;\n            const deviceInfo = val.deviceInfo;\n            const deviceId = deviceInfo.deviceId;\n            deviceInfoByDeviceId.set(deviceId, deviceInfo);\n\n            if (!contentMap[userId]) {\n                contentMap[userId] = {};\n            }\n            contentMap[userId][deviceId] = encryptedContent;\n\n            promises.push(\n                olmlib.encryptMessageForDevice(\n                    encryptedContent.ciphertext,\n                    this.userId,\n                    this.deviceId,\n                    this.olmDevice,\n                    userId,\n                    deviceInfo,\n                    payload,\n                ),\n            );\n        }\n\n        return Promise.all(promises).then(() => {\n            // prune out any devices that encryptMessageForDevice could not encrypt for,\n            // in which case it will have just not added anything to the ciphertext object.\n            // There's no point sending messages to devices if we couldn't encrypt to them,\n            // since that's effectively a blank message.\n            for (const userId of Object.keys(contentMap)) {\n                for (const deviceId of Object.keys(contentMap[userId])) {\n                    if (Object.keys(contentMap[userId][deviceId].ciphertext).length === 0) {\n                        logger.log(\n                            \"No ciphertext for device \" +\n                            userId + \":\" + deviceId + \": pruning\",\n                        );\n                        delete contentMap[userId][deviceId];\n                    }\n                }\n                // No devices left for that user? Strip that too.\n                if (Object.keys(contentMap[userId]).length === 0) {\n                    logger.log(\"Pruned all devices for user \" + userId);\n                    delete contentMap[userId];\n                }\n            }\n\n            // Is there anything left?\n            if (Object.keys(contentMap).length === 0) {\n                logger.log(\"No users left to send to: aborting\");\n                return;\n            }\n\n            return this.baseApis.sendToDevice(\"m.room.encrypted\", contentMap).then(() => {\n                // store that we successfully uploaded the keys of the current slice\n                for (const userId of Object.keys(contentMap)) {\n                    for (const deviceId of Object.keys(contentMap[userId])) {\n                        session.markSharedWithDevice(\n                            userId,\n                            deviceId,\n                            deviceInfoByDeviceId.get(deviceId).getIdentityKey(),\n                            chainIndex,\n                        );\n                    }\n                }\n            });\n        });\n    }\n\n    /**\n     * @private\n     *\n     * @param {module:crypto/algorithms/megolm.OutboundSessionInfo} session\n     *\n     * @param {array<object>} userDeviceMap list of blocked devices to notify\n     *\n     * @param {object} payload fields to include in the notification payload\n     *\n     * @return {Promise} Promise which resolves once the notifications\n     *     for the given userDeviceMap is generated and has been sent.\n     */\n    private async sendBlockedNotificationsToDevices(\n        session: OutboundSessionInfo,\n        userDeviceMap: IOlmDevice<IBlockedDevice>[],\n        payload: IPayload,\n    ): Promise<void> {\n        const contentMap: Record<string, Record<string, IPayload>> = {};\n\n        for (const val of userDeviceMap) {\n            const userId = val.userId;\n            const blockedInfo = val.deviceInfo;\n            const deviceInfo = blockedInfo.deviceInfo;\n            const deviceId = deviceInfo.deviceId;\n\n            const message = Object.assign({}, payload);\n            message.code = blockedInfo.code;\n            message.reason = blockedInfo.reason;\n            if (message.code === \"m.no_olm\") {\n                delete message.room_id;\n                delete message.session_id;\n            }\n\n            if (!contentMap[userId]) {\n                contentMap[userId] = {};\n            }\n            contentMap[userId][deviceId] = message;\n        }\n\n        await this.baseApis.sendToDevice(\"org.matrix.room_key.withheld\", contentMap);\n        await this.baseApis.sendToDevice(\"m.room_key.withheld\", contentMap);\n\n        // record the fact that we notified these blocked devices\n        for (const userId of Object.keys(contentMap)) {\n            for (const deviceId of Object.keys(contentMap[userId])) {\n                session.markNotifiedBlockedDevice(userId, deviceId);\n            }\n        }\n    }\n\n    /**\n     * Re-shares a megolm session key with devices if the key has already been\n     * sent to them.\n     *\n     * @param {string} senderKey The key of the originating device for the session\n     * @param {string} sessionId ID of the outbound session to share\n     * @param {string} userId ID of the user who owns the target device\n     * @param {module:crypto/deviceinfo} device The target device\n     */\n    public async reshareKeyWithDevice(\n        senderKey: string,\n        sessionId: string,\n        userId: string,\n        device: DeviceInfo,\n    ): Promise<void> {\n        const obSessionInfo = this.outboundSessions[sessionId];\n        if (!obSessionInfo) {\n            logger.debug(`megolm session ${sessionId} not found: not re-sharing keys`);\n            return;\n        }\n\n        // The chain index of the key we previously sent this device\n        if (obSessionInfo.sharedWithDevices[userId] === undefined) {\n            logger.debug(`megolm session ${sessionId} never shared with user ${userId}`);\n            return;\n        }\n        const sessionSharedData = obSessionInfo.sharedWithDevices[userId][device.deviceId];\n        if (sessionSharedData === undefined) {\n            logger.debug(\n                \"megolm session ID \" + sessionId + \" never shared with device \" +\n                userId + \":\" + device.deviceId,\n            );\n            return;\n        }\n\n        if (sessionSharedData.deviceKey !== device.getIdentityKey()) {\n            logger.warn(\n                `Session has been shared with device ${device.deviceId} but with identity ` +\n                `key ${sessionSharedData.deviceKey}. Key is now ${device.getIdentityKey()}!`,\n            );\n            return;\n        }\n\n        // get the key from the inbound session: the outbound one will already\n        // have been ratcheted to the next chain index.\n        const key = await this.olmDevice.getInboundGroupSessionKey(\n            this.roomId, senderKey, sessionId, sessionSharedData.messageIndex,\n        );\n\n        if (!key) {\n            logger.warn(\n                `No inbound session key found for megolm ${sessionId}: not re-sharing keys`,\n            );\n            return;\n        }\n\n        await olmlib.ensureOlmSessionsForDevices(\n            this.olmDevice, this.baseApis, {\n                [userId]: [device],\n            },\n        );\n\n        const payload = {\n            type: \"m.forwarded_room_key\",\n            content: {\n                \"algorithm\": olmlib.MEGOLM_ALGORITHM,\n                \"room_id\": this.roomId,\n                \"session_id\": sessionId,\n                \"session_key\": key.key,\n                \"chain_index\": key.chain_index,\n                \"sender_key\": senderKey,\n                \"sender_claimed_ed25519_key\": key.sender_claimed_ed25519_key,\n                \"forwarding_curve25519_key_chain\": key.forwarding_curve25519_key_chain,\n                \"org.matrix.msc3061.shared_history\": key.shared_history || false,\n            },\n        };\n\n        const encryptedContent = {\n            algorithm: olmlib.OLM_ALGORITHM,\n            sender_key: this.olmDevice.deviceCurve25519Key,\n            ciphertext: {},\n        };\n        await olmlib.encryptMessageForDevice(\n            encryptedContent.ciphertext,\n            this.userId,\n            this.deviceId,\n            this.olmDevice,\n            userId,\n            device,\n            payload,\n        );\n\n        await this.baseApis.sendToDevice(\"m.room.encrypted\", {\n            [userId]: {\n                [device.deviceId]: encryptedContent,\n            },\n        });\n        logger.debug(`Re-shared key for megolm session ${sessionId} with ${userId}:${device.deviceId}`);\n    }\n\n    /**\n     * @private\n     *\n     * @param {module:crypto/algorithms/megolm.OutboundSessionInfo} session\n     *\n     * @param {object} key the session key as returned by\n     *    OlmDevice.getOutboundGroupSessionKey\n     *\n     * @param {object} payload the base to-device message payload for sharing keys\n     *\n     * @param {object<string, module:crypto/deviceinfo[]>} devicesByUser\n     *    map from userid to list of devices\n     *\n     * @param {array<object>} errorDevices\n     *    array that will be populated with the devices that we can't get an\n     *    olm session for\n     *\n     * @param {Number} [otkTimeout] The timeout in milliseconds when requesting\n     *     one-time keys for establishing new olm sessions.\n     *\n     * @param {Array} [failedServers] An array to fill with remote servers that\n     *     failed to respond to one-time-key requests.\n     */\n    private async shareKeyWithDevices(\n        session: OutboundSessionInfo,\n        key: IOutboundGroupSessionKey,\n        payload: IPayload,\n        devicesByUser: Record<string, DeviceInfo[]>,\n        errorDevices: IOlmDevice[],\n        otkTimeout: number,\n        failedServers?: string[],\n    ) {\n        logger.debug(`Ensuring Olm sessions for devices in ${this.roomId}`);\n        const devicemap = await olmlib.ensureOlmSessionsForDevices(\n            this.olmDevice, this.baseApis, devicesByUser, false, otkTimeout, failedServers,\n            logger.withPrefix(`[${this.roomId}]`),\n        );\n        logger.debug(`Ensured Olm sessions for devices in ${this.roomId}`);\n\n        this.getDevicesWithoutSessions(devicemap, devicesByUser, errorDevices);\n\n        logger.debug(`Sharing keys with newly created Olm sessions in ${this.roomId}`);\n        await this.shareKeyWithOlmSessions(session, key, payload, devicemap);\n        logger.debug(`Shared keys with newly created Olm sessions in ${this.roomId}`);\n    }\n\n    private async shareKeyWithOlmSessions(\n        session: OutboundSessionInfo,\n        key: IOutboundGroupSessionKey,\n        payload: IPayload,\n        devicemap: Record<string, Record<string, IOlmSessionResult>>,\n    ): Promise<void> {\n        const userDeviceMaps = this.splitDevices(devicemap);\n\n        for (let i = 0; i < userDeviceMaps.length; i++) {\n            const taskDetail =\n                `megolm keys for ${session.sessionId} ` +\n                `in ${this.roomId} (slice ${i + 1}/${userDeviceMaps.length})`;\n            try {\n                logger.debug(`Sharing ${taskDetail}`,\n                    userDeviceMaps[i].map((d) => `${d.userId}/${d.deviceInfo.deviceId}`));\n                await this.encryptAndSendKeysToDevices(\n                    session, key.chain_index, userDeviceMaps[i], payload,\n                );\n                logger.debug(`Shared ${taskDetail}`);\n            } catch (e) {\n                logger.error(`Failed to share ${taskDetail}`);\n                throw e;\n            }\n        }\n    }\n\n    /**\n     * Notify devices that we weren't able to create olm sessions.\n     *\n     * @param {module:crypto/algorithms/megolm.OutboundSessionInfo} session\n     *\n     * @param {object} key\n     *\n     * @param {Array<object>} failedDevices the devices that we were unable to\n     *     create olm sessions for, as returned by shareKeyWithDevices\n     */\n    private async notifyFailedOlmDevices(\n        session: OutboundSessionInfo,\n        key: IOutboundGroupSessionKey,\n        failedDevices: IOlmDevice[],\n    ): Promise<void> {\n        logger.debug(\n            `Notifying ${failedDevices.length} devices we failed to ` +\n            `create Olm sessions in ${this.roomId}`,\n        );\n\n        // mark the devices that failed as \"handled\" because we don't want to try\n        // to claim a one-time-key for dead devices on every message.\n        for (const { userId, deviceInfo } of failedDevices) {\n            const deviceId = deviceInfo.deviceId;\n\n            session.markSharedWithDevice(\n                userId, deviceId, deviceInfo.getIdentityKey(), key.chain_index,\n            );\n        }\n\n        const unnotifiedFailedDevices =\n            await this.olmDevice.filterOutNotifiedErrorDevices(\n                failedDevices,\n            );\n        logger.debug(\n            `Need to notify ${unnotifiedFailedDevices.length} failed devices ` +\n            `which haven't been notified before in ${this.roomId}`,\n        );\n        const blockedMap: Record<string, Record<string, { device: IBlockedDevice }>> = {};\n        for (const { userId, deviceInfo } of unnotifiedFailedDevices) {\n            blockedMap[userId] = blockedMap[userId] || {};\n            // we use a similar format to what\n            // olmlib.ensureOlmSessionsForDevices returns, so that\n            // we can use the same function to split\n            blockedMap[userId][deviceInfo.deviceId] = {\n                device: {\n                    code: \"m.no_olm\",\n                    reason: WITHHELD_MESSAGES[\"m.no_olm\"],\n                    deviceInfo,\n                },\n            };\n        }\n\n        // send the notifications\n        await this.notifyBlockedDevices(session, blockedMap);\n        logger.debug(\n            `Notified ${unnotifiedFailedDevices.length} devices we failed to ` +\n            `create Olm sessions in ${this.roomId}`,\n        );\n    }\n\n    /**\n     * Notify blocked devices that they have been blocked.\n     *\n     * @param {module:crypto/algorithms/megolm.OutboundSessionInfo} session\n     *\n     * @param {object<string, object>} devicesByUser\n     *    map from userid to device ID to blocked data\n     */\n    private async notifyBlockedDevices(\n        session: OutboundSessionInfo,\n        devicesByUser: Record<string, Record<string, { device: IBlockedDevice }>>,\n    ): Promise<void> {\n        const payload: IPayload = {\n            room_id: this.roomId,\n            session_id: session.sessionId,\n            algorithm: olmlib.MEGOLM_ALGORITHM,\n            sender_key: this.olmDevice.deviceCurve25519Key,\n        };\n\n        const userDeviceMaps = this.splitDevices(devicesByUser);\n\n        for (let i = 0; i < userDeviceMaps.length; i++) {\n            try {\n                await this.sendBlockedNotificationsToDevices(session, userDeviceMaps[i], payload);\n                logger.log(`Completed blacklist notification for ${session.sessionId} `\n                    + `in ${this.roomId} (slice ${i + 1}/${userDeviceMaps.length})`);\n            } catch (e) {\n                logger.log(`blacklist notification for ${session.sessionId} in `\n                    + `${this.roomId} (slice ${i + 1}/${userDeviceMaps.length}) failed`);\n\n                throw e;\n            }\n        }\n    }\n\n    /**\n     * Perform any background tasks that can be done before a message is ready to\n     * send, in order to speed up sending of the message.\n     *\n     * @param {module:models/room} room the room the event is in\n     */\n    public prepareToEncrypt(room: Room): void {\n        if (this.encryptionPreparation) {\n            // We're already preparing something, so don't do anything else.\n            // FIXME: check if we need to restart\n            // (https://github.com/matrix-org/matrix-js-sdk/issues/1255)\n            const elapsedTime = Date.now() - this.encryptionPreparationMetadata.startTime;\n            logger.debug(\n                `Already started preparing to encrypt for ${this.roomId} ` +\n                `${elapsedTime} ms ago, skipping`,\n            );\n            return;\n        }\n\n        logger.debug(`Preparing to encrypt events for ${this.roomId}`);\n\n        this.encryptionPreparationMetadata = {\n            startTime: Date.now(),\n        };\n        this.encryptionPreparation = (async () => {\n            try {\n                logger.debug(`Getting devices in ${this.roomId}`);\n                const [devicesInRoom, blocked] = await this.getDevicesInRoom(room);\n\n                if (this.crypto.getGlobalErrorOnUnknownDevices()) {\n                    // Drop unknown devices for now.  When the message gets sent, we'll\n                    // throw an error, but we'll still be prepared to send to the known\n                    // devices.\n                    this.removeUnknownDevices(devicesInRoom);\n                }\n\n                logger.debug(`Ensuring outbound session in ${this.roomId}`);\n                await this.ensureOutboundSession(room, devicesInRoom, blocked, true);\n\n                logger.debug(`Ready to encrypt events for ${this.roomId}`);\n            } catch (e) {\n                logger.error(`Failed to prepare to encrypt events for ${this.roomId}`, e);\n            } finally {\n                delete this.encryptionPreparationMetadata;\n                delete this.encryptionPreparation;\n            }\n        })();\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * @param {module:models/room} room\n     * @param {string} eventType\n     * @param {object} content plaintext event content\n     *\n     * @return {Promise} Promise which resolves to the new event body\n     */\n    public async encryptMessage(room: Room, eventType: string, content: object): Promise<object> {\n        logger.log(`Starting to encrypt event for ${this.roomId}`);\n\n        if (this.encryptionPreparation) {\n            // If we started sending keys, wait for it to be done.\n            // FIXME: check if we need to cancel\n            // (https://github.com/matrix-org/matrix-js-sdk/issues/1255)\n            try {\n                await this.encryptionPreparation;\n            } catch (e) {\n                // ignore any errors -- if the preparation failed, we'll just\n                // restart everything here\n            }\n        }\n\n        const [devicesInRoom, blocked] = await this.getDevicesInRoom(room);\n\n        // check if any of these devices are not yet known to the user.\n        // if so, warn the user so they can verify or ignore.\n        if (this.crypto.getGlobalErrorOnUnknownDevices()) {\n            this.checkForUnknownDevices(devicesInRoom);\n        }\n\n        const session = await this.ensureOutboundSession(room, devicesInRoom, blocked);\n        const payloadJson = {\n            room_id: this.roomId,\n            type: eventType,\n            content: content,\n        };\n\n        const ciphertext = this.olmDevice.encryptGroupMessage(\n            session.sessionId, JSON.stringify(payloadJson),\n        );\n        const encryptedContent = {\n            algorithm: olmlib.MEGOLM_ALGORITHM,\n            sender_key: this.olmDevice.deviceCurve25519Key,\n            ciphertext: ciphertext,\n            session_id: session.sessionId,\n            // Include our device ID so that recipients can send us a\n            // m.new_device message if they don't have our session key.\n            // XXX: Do we still need this now that m.new_device messages\n            // no longer exist since #483?\n            device_id: this.deviceId,\n        };\n\n        session.useCount++;\n        return encryptedContent;\n    }\n\n    /**\n     * Forces the current outbound group session to be discarded such\n     * that another one will be created next time an event is sent.\n     *\n     * This should not normally be necessary.\n     */\n    public forceDiscardSession(): void {\n        this.setupPromise = this.setupPromise.then(() => null);\n    }\n\n    /**\n     * Checks the devices we're about to send to and see if any are entirely\n     * unknown to the user.  If so, warn the user, and mark them as known to\n     * give the user a chance to go verify them before re-sending this message.\n     *\n     * @param {Object} devicesInRoom userId -> {deviceId -> object}\n     *   devices we should shared the session with.\n     */\n    private checkForUnknownDevices(devicesInRoom: DeviceInfoMap): void {\n        const unknownDevices: Record<string, Record<string, DeviceInfo>> = {};\n\n        Object.keys(devicesInRoom).forEach((userId) => {\n            Object.keys(devicesInRoom[userId]).forEach((deviceId) => {\n                const device = devicesInRoom[userId][deviceId];\n                if (device.isUnverified() && !device.isKnown()) {\n                    if (!unknownDevices[userId]) {\n                        unknownDevices[userId] = {};\n                    }\n                    unknownDevices[userId][deviceId] = device;\n                }\n            });\n        });\n\n        if (Object.keys(unknownDevices).length) {\n            // it'd be kind to pass unknownDevices up to the user in this error\n            throw new UnknownDeviceError(\n                \"This room contains unknown devices which have not been verified. \" +\n                \"We strongly recommend you verify them before continuing.\", unknownDevices);\n        }\n    }\n\n    /**\n     * Remove unknown devices from a set of devices.  The devicesInRoom parameter\n     * will be modified.\n     *\n     * @param {Object} devicesInRoom userId -> {deviceId -> object}\n     *   devices we should shared the session with.\n     */\n    private removeUnknownDevices(devicesInRoom: DeviceInfoMap): void {\n        for (const [userId, userDevices] of Object.entries(devicesInRoom)) {\n            for (const [deviceId, device] of Object.entries(userDevices)) {\n                if (device.isUnverified() && !device.isKnown()) {\n                    delete userDevices[deviceId];\n                }\n            }\n\n            if (Object.keys(userDevices).length === 0) {\n                delete devicesInRoom[userId];\n            }\n        }\n    }\n\n    /**\n     * Get the list of unblocked devices for all users in the room\n     *\n     * @param {module:models/room} room\n     *\n     * @return {Promise} Promise which resolves to an array whose\n     *     first element is a map from userId to deviceId to deviceInfo indicating\n     *     the devices that messages should be encrypted to, and whose second\n     *     element is a map from userId to deviceId to data indicating the devices\n     *     that are in the room but that have been blocked\n     */\n    private async getDevicesInRoom(room: Room): Promise<[DeviceInfoMap, IBlockedMap]> {\n        const members = await room.getEncryptionTargetMembers();\n        const roomMembers = members.map(function(u) {\n            return u.userId;\n        });\n\n        // The global value is treated as a default for when rooms don't specify a value.\n        let isBlacklisting = this.crypto.getGlobalBlacklistUnverifiedDevices();\n        if (typeof room.getBlacklistUnverifiedDevices() === 'boolean') {\n            isBlacklisting = room.getBlacklistUnverifiedDevices();\n        }\n\n        // We are happy to use a cached version here: we assume that if we already\n        // have a list of the user's devices, then we already share an e2e room\n        // with them, which means that they will have announced any new devices via\n        // device_lists in their /sync response.  This cache should then be maintained\n        // using all the device_lists changes and left fields.\n        // See https://github.com/vector-im/element-web/issues/2305 for details.\n        const devices = await this.crypto.downloadKeys(roomMembers, false);\n        const blocked: IBlockedMap = {};\n        // remove any blocked devices\n        for (const userId in devices) {\n            if (!devices.hasOwnProperty(userId)) {\n                continue;\n            }\n\n            const userDevices = devices[userId];\n            for (const deviceId in userDevices) {\n                if (!userDevices.hasOwnProperty(deviceId)) {\n                    continue;\n                }\n\n                const deviceTrust = this.crypto.checkDeviceTrust(userId, deviceId);\n\n                if (userDevices[deviceId].isBlocked() ||\n                    (!deviceTrust.isVerified() && isBlacklisting)\n                ) {\n                    if (!blocked[userId]) {\n                        blocked[userId] = {};\n                    }\n                    const isBlocked = userDevices[deviceId].isBlocked();\n                    blocked[userId][deviceId] = {\n                        code: isBlocked ? \"m.blacklisted\" : \"m.unverified\",\n                        reason: WITHHELD_MESSAGES[isBlocked ? \"m.blacklisted\" : \"m.unverified\"],\n                        deviceInfo: userDevices[deviceId],\n                    };\n                    delete userDevices[deviceId];\n                }\n            }\n        }\n\n        return [devices, blocked];\n    }\n}\n\n/**\n * Megolm decryption implementation\n *\n * @constructor\n * @extends {module:crypto/algorithms/DecryptionAlgorithm}\n *\n * @param {object} params parameters, as per\n *     {@link module:crypto/algorithms/DecryptionAlgorithm}\n */\nclass MegolmDecryption extends DecryptionAlgorithm {\n    // events which we couldn't decrypt due to unknown sessions / indexes: map from\n    // senderKey|sessionId to Set of MatrixEvents\n    private pendingEvents: Record<string, Map<string, Set<MatrixEvent>>> = {};\n\n    // this gets stubbed out by the unit tests.\n    private olmlib = olmlib;\n\n    /**\n     * @inheritdoc\n     *\n     * @param {MatrixEvent} event\n     *\n     * returns a promise which resolves to a\n     * {@link module:crypto~EventDecryptionResult} once we have finished\n     * decrypting, or rejects with an `algorithms.DecryptionError` if there is a\n     * problem decrypting the event.\n     */\n    public async decryptEvent(event: MatrixEvent): Promise<IEventDecryptionResult> {\n        const content = event.getWireContent();\n\n        if (!content.sender_key || !content.session_id ||\n            !content.ciphertext\n        ) {\n            throw new DecryptionError(\n                \"MEGOLM_MISSING_FIELDS\",\n                \"Missing fields in input\",\n            );\n        }\n\n        // we add the event to the pending list *before* we start decryption.\n        //\n        // then, if the key turns up while decryption is in progress (and\n        // decryption fails), we will schedule a retry.\n        // (fixes https://github.com/vector-im/element-web/issues/5001)\n        this.addEventToPendingList(event);\n\n        let res;\n        try {\n            res = await this.olmDevice.decryptGroupMessage(\n                event.getRoomId(), content.sender_key, content.session_id, content.ciphertext,\n                event.getId(), event.getTs(),\n            );\n        } catch (e) {\n            if (e.name === \"DecryptionError\") {\n                // re-throw decryption errors as-is\n                throw e;\n            }\n\n            let errorCode = \"OLM_DECRYPT_GROUP_MESSAGE_ERROR\";\n\n            if (e && e.message === 'OLM.UNKNOWN_MESSAGE_INDEX') {\n                this.requestKeysForEvent(event);\n\n                errorCode = 'OLM_UNKNOWN_MESSAGE_INDEX';\n            }\n\n            throw new DecryptionError(\n                errorCode,\n                e ? e.toString() : \"Unknown Error: Error is undefined\", {\n                    session: content.sender_key + '|' + content.session_id,\n                },\n            );\n        }\n\n        if (res === null) {\n            // We've got a message for a session we don't have.\n            //\n            // (XXX: We might actually have received this key since we started\n            // decrypting, in which case we'll have scheduled a retry, and this\n            // request will be redundant. We could probably check to see if the\n            // event is still in the pending list; if not, a retry will have been\n            // scheduled, so we needn't send out the request here.)\n            this.requestKeysForEvent(event);\n\n            // See if there was a problem with the olm session at the time the\n            // event was sent.  Use a fuzz factor of 2 minutes.\n            const problem = await this.olmDevice.sessionMayHaveProblems(\n                content.sender_key, event.getTs() - 120000,\n            );\n            if (problem) {\n                let problemDescription = PROBLEM_DESCRIPTIONS[problem.type as \"no_olm\"] || PROBLEM_DESCRIPTIONS.unknown;\n                if (problem.fixed) {\n                    problemDescription +=\n                        \" Trying to create a new secure channel and re-requesting the keys.\";\n                }\n                throw new DecryptionError(\n                    \"MEGOLM_UNKNOWN_INBOUND_SESSION_ID\",\n                    problemDescription,\n                    {\n                        session: content.sender_key + '|' + content.session_id,\n                    },\n                );\n            }\n\n            throw new DecryptionError(\n                \"MEGOLM_UNKNOWN_INBOUND_SESSION_ID\",\n                \"The sender's device has not sent us the keys for this message.\",\n                {\n                    session: content.sender_key + '|' + content.session_id,\n                },\n            );\n        }\n\n        // success. We can remove the event from the pending list, if that hasn't\n        // already happened.\n        this.removeEventFromPendingList(event);\n\n        const payload = JSON.parse(res.result);\n\n        // belt-and-braces check that the room id matches that indicated by the HS\n        // (this is somewhat redundant, since the megolm session is scoped to the\n        // room, so neither the sender nor a MITM can lie about the room_id).\n        if (payload.room_id !== event.getRoomId()) {\n            throw new DecryptionError(\n                \"MEGOLM_BAD_ROOM\",\n                \"Message intended for room \" + payload.room_id,\n            );\n        }\n\n        return {\n            clearEvent: payload,\n            senderCurve25519Key: res.senderKey,\n            claimedEd25519Key: res.keysClaimed.ed25519,\n            forwardingCurve25519KeyChain: res.forwardingCurve25519KeyChain,\n            untrusted: res.untrusted,\n        };\n    }\n\n    private requestKeysForEvent(event: MatrixEvent): void {\n        const wireContent = event.getWireContent();\n\n        const recipients = event.getKeyRequestRecipients(this.userId);\n\n        this.crypto.requestRoomKey({\n            room_id: event.getRoomId(),\n            algorithm: wireContent.algorithm,\n            sender_key: wireContent.sender_key,\n            session_id: wireContent.session_id,\n        }, recipients);\n    }\n\n    /**\n     * Add an event to the list of those awaiting their session keys.\n     *\n     * @private\n     *\n     * @param {module:models/event.MatrixEvent} event\n     */\n    private addEventToPendingList(event: MatrixEvent): void {\n        const content = event.getWireContent();\n        const senderKey = content.sender_key;\n        const sessionId = content.session_id;\n        if (!this.pendingEvents[senderKey]) {\n            this.pendingEvents[senderKey] = new Map();\n        }\n        const senderPendingEvents = this.pendingEvents[senderKey];\n        if (!senderPendingEvents.has(sessionId)) {\n            senderPendingEvents.set(sessionId, new Set());\n        }\n        senderPendingEvents.get(sessionId).add(event);\n    }\n\n    /**\n     * Remove an event from the list of those awaiting their session keys.\n     *\n     * @private\n     *\n     * @param {module:models/event.MatrixEvent} event\n     */\n    private removeEventFromPendingList(event: MatrixEvent): void {\n        const content = event.getWireContent();\n        const senderKey = content.sender_key;\n        const sessionId = content.session_id;\n        const senderPendingEvents = this.pendingEvents[senderKey];\n        const pendingEvents = senderPendingEvents?.get(sessionId);\n        if (!pendingEvents) {\n            return;\n        }\n\n        pendingEvents.delete(event);\n        if (pendingEvents.size === 0) {\n            senderPendingEvents.delete(sessionId);\n        }\n        if (senderPendingEvents.size === 0) {\n            delete this.pendingEvents[senderKey];\n        }\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * @param {module:models/event.MatrixEvent} event key event\n     */\n    public onRoomKeyEvent(event: MatrixEvent): Promise<void> {\n        const content = event.getContent();\n        const sessionId = content.session_id;\n        let senderKey = event.getSenderKey();\n        let forwardingKeyChain = [];\n        let exportFormat = false;\n        let keysClaimed;\n\n        if (!content.room_id ||\n            !sessionId ||\n            !content.session_key\n        ) {\n            logger.error(\"key event is missing fields\");\n            return;\n        }\n\n        if (!senderKey) {\n            logger.error(\"key event has no sender key (not encrypted?)\");\n            return;\n        }\n\n        if (event.getType() == \"m.forwarded_room_key\") {\n            exportFormat = true;\n            forwardingKeyChain = content.forwarding_curve25519_key_chain;\n            if (!Array.isArray(forwardingKeyChain)) {\n                forwardingKeyChain = [];\n            }\n\n            // copy content before we modify it\n            forwardingKeyChain = forwardingKeyChain.slice();\n            forwardingKeyChain.push(senderKey);\n\n            senderKey = content.sender_key;\n            if (!senderKey) {\n                logger.error(\"forwarded_room_key event is missing sender_key field\");\n                return;\n            }\n\n            const ed25519Key = content.sender_claimed_ed25519_key;\n            if (!ed25519Key) {\n                logger.error(\n                    `forwarded_room_key_event is missing sender_claimed_ed25519_key field`,\n                );\n                return;\n            }\n\n            keysClaimed = {\n                ed25519: ed25519Key,\n            };\n        } else {\n            keysClaimed = event.getKeysClaimed();\n        }\n\n        const extraSessionData: any = {};\n        if (content[\"org.matrix.msc3061.shared_history\"]) {\n            extraSessionData.sharedHistory = true;\n        }\n        return this.olmDevice.addInboundGroupSession(\n            content.room_id, senderKey, forwardingKeyChain, sessionId,\n            content.session_key, keysClaimed,\n            exportFormat, extraSessionData,\n        ).then(() => {\n            // have another go at decrypting events sent with this session.\n            this.retryDecryption(senderKey, sessionId)\n                .then((success) => {\n                    // cancel any outstanding room key requests for this session.\n                    // Only do this if we managed to decrypt every message in the\n                    // session, because if we didn't, we leave the other key\n                    // requests in the hopes that someone sends us a key that\n                    // includes an earlier index.\n                    if (success) {\n                        this.crypto.cancelRoomKeyRequest({\n                            algorithm: content.algorithm,\n                            room_id: content.room_id,\n                            session_id: content.session_id,\n                            sender_key: senderKey,\n                        });\n                    }\n                });\n        }).then(() => {\n            // don't wait for the keys to be backed up for the server\n            this.crypto.backupManager.backupGroupSession(senderKey, content.session_id);\n        }).catch((e) => {\n            logger.error(`Error handling m.room_key_event: ${e}`);\n        });\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * @param {module:models/event.MatrixEvent} event key event\n     */\n    public async onRoomKeyWithheldEvent(event: MatrixEvent): Promise<void> {\n        const content = event.getContent();\n        const senderKey = content.sender_key;\n\n        if (content.code === \"m.no_olm\") {\n            const sender = event.getSender();\n            logger.warn(\n                `${sender}:${senderKey} was unable to establish an olm session with us`,\n            );\n            // if the sender says that they haven't been able to establish an olm\n            // session, let's proactively establish one\n\n            // Note: after we record that the olm session has had a problem, we\n            // trigger retrying decryption for all the messages from the sender's\n            // key, so that we can update the error message to indicate the olm\n            // session problem.\n\n            if (await this.olmDevice.getSessionIdForDevice(senderKey)) {\n                // a session has already been established, so we don't need to\n                // create a new one.\n                logger.debug(\"New session already created.  Not creating a new one.\");\n                await this.olmDevice.recordSessionProblem(senderKey, \"no_olm\", true);\n                this.retryDecryptionFromSender(senderKey);\n                return;\n            }\n            let device = this.crypto.deviceList.getDeviceByIdentityKey(\n                content.algorithm, senderKey,\n            );\n            if (!device) {\n                // if we don't know about the device, fetch the user's devices again\n                // and retry before giving up\n                await this.crypto.downloadKeys([sender], false);\n                device = this.crypto.deviceList.getDeviceByIdentityKey(\n                    content.algorithm, senderKey,\n                );\n                if (!device) {\n                    logger.info(\n                        \"Couldn't find device for identity key \" + senderKey +\n                        \": not establishing session\",\n                    );\n                    await this.olmDevice.recordSessionProblem(senderKey, \"no_olm\", false);\n                    this.retryDecryptionFromSender(senderKey);\n                    return;\n                }\n            }\n            await olmlib.ensureOlmSessionsForDevices(\n                this.olmDevice, this.baseApis, { [sender]: [device] }, false,\n            );\n            const encryptedContent = {\n                algorithm: olmlib.OLM_ALGORITHM,\n                sender_key: this.olmDevice.deviceCurve25519Key,\n                ciphertext: {},\n            };\n            await olmlib.encryptMessageForDevice(\n                encryptedContent.ciphertext,\n                this.userId,\n                undefined,\n                this.olmDevice,\n                sender,\n                device,\n                { type: \"m.dummy\" },\n            );\n\n            await this.olmDevice.recordSessionProblem(senderKey, \"no_olm\", true);\n            this.retryDecryptionFromSender(senderKey);\n\n            await this.baseApis.sendToDevice(\"m.room.encrypted\", {\n                [sender]: {\n                    [device.deviceId]: encryptedContent,\n                },\n            });\n        } else {\n            await this.olmDevice.addInboundGroupSessionWithheld(\n                content.room_id, senderKey, content.session_id, content.code,\n                content.reason,\n            );\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public hasKeysForKeyRequest(keyRequest: IncomingRoomKeyRequest): Promise<boolean> {\n        const body = keyRequest.requestBody;\n\n        return this.olmDevice.hasInboundSessionKeys(\n            body.room_id,\n            body.sender_key,\n            body.session_id,\n            // TODO: ratchet index\n        );\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public shareKeysWithDevice(keyRequest: IncomingRoomKeyRequest): void {\n        const userId = keyRequest.userId;\n        const deviceId = keyRequest.deviceId;\n        const deviceInfo = this.crypto.getStoredDevice(userId, deviceId);\n        const body = keyRequest.requestBody;\n\n        this.olmlib.ensureOlmSessionsForDevices(\n            this.olmDevice, this.baseApis, {\n                [userId]: [deviceInfo],\n            },\n        ).then((devicemap) => {\n            const olmSessionResult = devicemap[userId][deviceId];\n            if (!olmSessionResult.sessionId) {\n                // no session with this device, probably because there\n                // were no one-time keys.\n                //\n                // ensureOlmSessionsForUsers has already done the logging,\n                // so just skip it.\n                return null;\n            }\n\n            logger.log(\n                \"sharing keys for session \" + body.sender_key + \"|\"\n                + body.session_id + \" with device \"\n                + userId + \":\" + deviceId,\n            );\n\n            return this.buildKeyForwardingMessage(\n                body.room_id, body.sender_key, body.session_id,\n            );\n        }).then((payload) => {\n            const encryptedContent = {\n                algorithm: olmlib.OLM_ALGORITHM,\n                sender_key: this.olmDevice.deviceCurve25519Key,\n                ciphertext: {},\n            };\n\n            return this.olmlib.encryptMessageForDevice(\n                encryptedContent.ciphertext,\n                this.userId,\n                undefined,\n                this.olmDevice,\n                userId,\n                deviceInfo,\n                payload,\n            ).then(() => {\n                const contentMap = {\n                    [userId]: {\n                        [deviceId]: encryptedContent,\n                    },\n                };\n\n                // TODO: retries\n                return this.baseApis.sendToDevice(\"m.room.encrypted\", contentMap);\n            });\n        });\n    }\n\n    private async buildKeyForwardingMessage(\n        roomId: string,\n        senderKey: string,\n        sessionId: string,\n    ): Promise<IKeyForwardingMessage> {\n        const key = await this.olmDevice.getInboundGroupSessionKey(roomId, senderKey, sessionId);\n\n        return {\n            type: \"m.forwarded_room_key\",\n            content: {\n                \"algorithm\": olmlib.MEGOLM_ALGORITHM,\n                \"room_id\": roomId,\n                \"sender_key\": senderKey,\n                \"sender_claimed_ed25519_key\": key.sender_claimed_ed25519_key,\n                \"session_id\": sessionId,\n                \"session_key\": key.key,\n                \"chain_index\": key.chain_index,\n                \"forwarding_curve25519_key_chain\": key.forwarding_curve25519_key_chain,\n                \"org.matrix.msc3061.shared_history\": key.shared_history || false,\n            },\n        };\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * @param {module:crypto/OlmDevice.MegolmSessionData} session\n     * @param {object} [opts={}] options for the import\n     * @param {boolean} [opts.untrusted] whether the key should be considered as untrusted\n     * @param {string} [opts.source] where the key came from\n     */\n    public importRoomKey(session: IMegolmSessionData, opts: any = {}): Promise<void> {\n        const extraSessionData: any = {};\n        if (opts.untrusted || session.untrusted) {\n            extraSessionData.untrusted = true;\n        }\n        if (session[\"org.matrix.msc3061.shared_history\"]) {\n            extraSessionData.sharedHistory = true;\n        }\n        return this.olmDevice.addInboundGroupSession(\n            session.room_id,\n            session.sender_key,\n            session.forwarding_curve25519_key_chain,\n            session.session_id,\n            session.session_key,\n            session.sender_claimed_keys,\n            true,\n            extraSessionData,\n        ).then(() => {\n            if (opts.source !== \"backup\") {\n                // don't wait for it to complete\n                this.crypto.backupManager.backupGroupSession(\n                    session.sender_key, session.session_id,\n                ).catch((e) => {\n                    // This throws if the upload failed, but this is fine\n                    // since it will have written it to the db and will retry.\n                    logger.log(\"Failed to back up megolm session\", e);\n                });\n            }\n            // have another go at decrypting events sent with this session.\n            this.retryDecryption(session.sender_key, session.session_id);\n        });\n    }\n\n    /**\n     * Have another go at decrypting events after we receive a key. Resolves once\n     * decryption has been re-attempted on all events.\n     *\n     * @private\n     * @param {String} senderKey\n     * @param {String} sessionId\n     *\n     * @return {Boolean} whether all messages were successfully decrypted\n     */\n    private async retryDecryption(senderKey: string, sessionId: string): Promise<boolean> {\n        const senderPendingEvents = this.pendingEvents[senderKey];\n        if (!senderPendingEvents) {\n            return true;\n        }\n\n        const pending = senderPendingEvents.get(sessionId);\n        if (!pending) {\n            return true;\n        }\n\n        logger.debug(\"Retrying decryption on events\", [...pending]);\n\n        await Promise.all([...pending].map(async (ev) => {\n            try {\n                await ev.attemptDecryption(this.crypto, { isRetry: true });\n            } catch (e) {\n                // don't die if something goes wrong\n            }\n        }));\n\n        // If decrypted successfully, they'll have been removed from pendingEvents\n        return !this.pendingEvents[senderKey]?.has(sessionId);\n    }\n\n    public async retryDecryptionFromSender(senderKey: string): Promise<boolean> {\n        const senderPendingEvents = this.pendingEvents[senderKey];\n        if (!senderPendingEvents) {\n            return true;\n        }\n\n        delete this.pendingEvents[senderKey];\n\n        await Promise.all([...senderPendingEvents].map(async ([_sessionId, pending]) => {\n            await Promise.all([...pending].map(async (ev) => {\n                try {\n                    await ev.attemptDecryption(this.crypto);\n                } catch (e) {\n                    // don't die if something goes wrong\n                }\n            }));\n        }));\n\n        return !this.pendingEvents[senderKey];\n    }\n\n    public async sendSharedHistoryInboundSessions(devicesByUser: Record<string, DeviceInfo[]>): Promise<void> {\n        await olmlib.ensureOlmSessionsForDevices(this.olmDevice, this.baseApis, devicesByUser);\n\n        logger.log(\"sendSharedHistoryInboundSessions to users\", Object.keys(devicesByUser));\n\n        const sharedHistorySessions = await this.olmDevice.getSharedHistoryInboundGroupSessions(this.roomId);\n        logger.log(\"shared-history sessions\", sharedHistorySessions);\n        for (const [senderKey, sessionId] of sharedHistorySessions) {\n            const payload = await this.buildKeyForwardingMessage(this.roomId, senderKey, sessionId);\n\n            const promises: Promise<unknown>[] = [];\n            const contentMap: Record<string, Record<string, IEncryptedContent>> = {};\n            for (const [userId, devices] of Object.entries(devicesByUser)) {\n                contentMap[userId] = {};\n                for (const deviceInfo of devices) {\n                    const encryptedContent: IEncryptedContent = {\n                        algorithm: olmlib.OLM_ALGORITHM,\n                        sender_key: this.olmDevice.deviceCurve25519Key,\n                        ciphertext: {},\n                    };\n                    contentMap[userId][deviceInfo.deviceId] = encryptedContent;\n                    promises.push(\n                        olmlib.encryptMessageForDevice(\n                            encryptedContent.ciphertext,\n                            this.userId,\n                            undefined,\n                            this.olmDevice,\n                            userId,\n                            deviceInfo,\n                            payload,\n                        ),\n                    );\n                }\n            }\n            await Promise.all(promises);\n\n            // prune out any devices that encryptMessageForDevice could not encrypt for,\n            // in which case it will have just not added anything to the ciphertext object.\n            // There's no point sending messages to devices if we couldn't encrypt to them,\n            // since that's effectively a blank message.\n            for (const userId of Object.keys(contentMap)) {\n                for (const deviceId of Object.keys(contentMap[userId])) {\n                    if (Object.keys(contentMap[userId][deviceId].ciphertext).length === 0) {\n                        logger.log(\n                            \"No ciphertext for device \" +\n                            userId + \":\" + deviceId + \": pruning\",\n                        );\n                        delete contentMap[userId][deviceId];\n                    }\n                }\n                // No devices left for that user? Strip that too.\n                if (Object.keys(contentMap[userId]).length === 0) {\n                    logger.log(\"Pruned all devices for user \" + userId);\n                    delete contentMap[userId];\n                }\n            }\n\n            // Is there anything left?\n            if (Object.keys(contentMap).length === 0) {\n                logger.log(\"No users left to send to: aborting\");\n                return;\n            }\n\n            await this.baseApis.sendToDevice(\"m.room.encrypted\", contentMap);\n        }\n    }\n}\n\nconst PROBLEM_DESCRIPTIONS = {\n    no_olm: \"The sender was unable to establish a secure channel.\",\n    unknown: \"The secure channel with the sender was corrupted.\",\n};\n\nregisterAlgorithm(olmlib.MEGOLM_ALGORITHM, MegolmEncryption, MegolmDecryption);\n",
    "/*\nCopyright 2016 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * Defines m.olm encryption/decryption\n *\n * @module crypto/algorithms/olm\n */\n\nimport { logger } from '../../logger';\nimport * as olmlib from \"../olmlib\";\nimport { DeviceInfo } from \"../deviceinfo\";\nimport {\n    DecryptionAlgorithm,\n    DecryptionError,\n    EncryptionAlgorithm,\n    registerAlgorithm,\n} from \"./base\";\nimport { Room } from '../../models/room';\nimport { MatrixEvent } from \"../..\";\nimport { IEventDecryptionResult } from \"../index\";\n\nconst DeviceVerification = DeviceInfo.DeviceVerification;\n\ninterface IMessage {\n    type: number;\n    body: string;\n}\n\n/**\n * Olm encryption implementation\n *\n * @constructor\n * @extends {module:crypto/algorithms/EncryptionAlgorithm}\n *\n * @param {object} params parameters, as per\n *     {@link module:crypto/algorithms/EncryptionAlgorithm}\n */\nclass OlmEncryption extends EncryptionAlgorithm {\n    private sessionPrepared = false;\n    private prepPromise: Promise<void> = null;\n\n    /**\n     * @private\n\n     * @param {string[]} roomMembers list of currently-joined users in the room\n     * @return {Promise} Promise which resolves when setup is complete\n     */\n    private ensureSession(roomMembers: string[]): Promise<void> {\n        if (this.prepPromise) {\n            // prep already in progress\n            return this.prepPromise;\n        }\n\n        if (this.sessionPrepared) {\n            // prep already done\n            return Promise.resolve();\n        }\n\n        this.prepPromise = this.crypto.downloadKeys(roomMembers).then((res) => {\n            return this.crypto.ensureOlmSessionsForUsers(roomMembers);\n        }).then(() => {\n            this.sessionPrepared = true;\n        }).finally(() => {\n            this.prepPromise = null;\n        });\n\n        return this.prepPromise;\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * @param {module:models/room} room\n     * @param {string} eventType\n     * @param {object} content plaintext event content\n     *\n     * @return {Promise} Promise which resolves to the new event body\n     */\n    public async encryptMessage(room: Room, eventType: string, content: object): Promise<object> {\n        // pick the list of recipients based on the membership list.\n        //\n        // TODO: there is a race condition here! What if a new user turns up\n        // just as you are sending a secret message?\n\n        const members = await room.getEncryptionTargetMembers();\n\n        const users = members.map(function(u) {\n            return u.userId;\n        });\n\n        await this.ensureSession(users);\n\n        const payloadFields = {\n            room_id: room.roomId,\n            type: eventType,\n            content: content,\n        };\n\n        const encryptedContent = {\n            algorithm: olmlib.OLM_ALGORITHM,\n            sender_key: this.olmDevice.deviceCurve25519Key,\n            ciphertext: {},\n        };\n\n        const promises = [];\n\n        for (let i = 0; i < users.length; ++i) {\n            const userId = users[i];\n            const devices = this.crypto.getStoredDevicesForUser(userId);\n\n            for (let j = 0; j < devices.length; ++j) {\n                const deviceInfo = devices[j];\n                const key = deviceInfo.getIdentityKey();\n                if (key == this.olmDevice.deviceCurve25519Key) {\n                    // don't bother sending to ourself\n                    continue;\n                }\n                if (deviceInfo.verified == DeviceVerification.BLOCKED) {\n                    // don't bother setting up sessions with blocked users\n                    continue;\n                }\n\n                promises.push(\n                    olmlib.encryptMessageForDevice(\n                        encryptedContent.ciphertext,\n                        this.userId, this.deviceId, this.olmDevice,\n                        userId, deviceInfo, payloadFields,\n                    ),\n                );\n            }\n        }\n\n        return await Promise.all(promises).then(() => encryptedContent);\n    }\n}\n\n/**\n * Olm decryption implementation\n *\n * @constructor\n * @extends {module:crypto/algorithms/DecryptionAlgorithm}\n * @param {object} params parameters, as per\n *     {@link module:crypto/algorithms/DecryptionAlgorithm}\n */\nclass OlmDecryption extends DecryptionAlgorithm {\n    /**\n     * @inheritdoc\n     *\n     * @param {MatrixEvent} event\n     *\n     * returns a promise which resolves to a\n     * {@link module:crypto~EventDecryptionResult} once we have finished\n     * decrypting. Rejects with an `algorithms.DecryptionError` if there is a\n     * problem decrypting the event.\n     */\n    public async decryptEvent(event: MatrixEvent): Promise<IEventDecryptionResult> {\n        const content = event.getWireContent();\n        const deviceKey = content.sender_key;\n        const ciphertext = content.ciphertext;\n\n        if (!ciphertext) {\n            throw new DecryptionError(\n                \"OLM_MISSING_CIPHERTEXT\",\n                \"Missing ciphertext\",\n            );\n        }\n\n        if (!(this.olmDevice.deviceCurve25519Key in ciphertext)) {\n            throw new DecryptionError(\n                \"OLM_NOT_INCLUDED_IN_RECIPIENTS\",\n                \"Not included in recipients\",\n            );\n        }\n        const message = ciphertext[this.olmDevice.deviceCurve25519Key];\n        let payloadString;\n\n        try {\n            payloadString = await this.decryptMessage(deviceKey, message);\n        } catch (e) {\n            throw new DecryptionError(\n                \"OLM_BAD_ENCRYPTED_MESSAGE\",\n                \"Bad Encrypted Message\", {\n                    sender: deviceKey,\n                    err: e,\n                },\n            );\n        }\n\n        const payload = JSON.parse(payloadString);\n\n        // check that we were the intended recipient, to avoid unknown-key attack\n        // https://github.com/vector-im/vector-web/issues/2483\n        if (payload.recipient != this.userId) {\n            throw new DecryptionError(\n                \"OLM_BAD_RECIPIENT\",\n                \"Message was intented for \" + payload.recipient,\n            );\n        }\n\n        if (payload.recipient_keys.ed25519 != this.olmDevice.deviceEd25519Key) {\n            throw new DecryptionError(\n                \"OLM_BAD_RECIPIENT_KEY\",\n                \"Message not intended for this device\", {\n                    intended: payload.recipient_keys.ed25519,\n                    our_key: this.olmDevice.deviceEd25519Key,\n                },\n            );\n        }\n\n        // check that the original sender matches what the homeserver told us, to\n        // avoid people masquerading as others.\n        // (this check is also provided via the sender's embedded ed25519 key,\n        // which is checked elsewhere).\n        if (payload.sender != event.getSender()) {\n            throw new DecryptionError(\n                \"OLM_FORWARDED_MESSAGE\",\n                \"Message forwarded from \" + payload.sender, {\n                    reported_sender: event.getSender(),\n                },\n            );\n        }\n\n        // Olm events intended for a room have a room_id.\n        if (payload.room_id !== event.getRoomId()) {\n            throw new DecryptionError(\n                \"OLM_BAD_ROOM\",\n                \"Message intended for room \" + payload.room_id, {\n                    reported_room: event.getRoomId(),\n                },\n            );\n        }\n\n        const claimedKeys = payload.keys || {};\n\n        return {\n            clearEvent: payload,\n            senderCurve25519Key: deviceKey,\n            claimedEd25519Key: claimedKeys.ed25519 || null,\n        };\n    }\n\n    /**\n     * Attempt to decrypt an Olm message\n     *\n     * @param {string} theirDeviceIdentityKey  Curve25519 identity key of the sender\n     * @param {object} message  message object, with 'type' and 'body' fields\n     *\n     * @return {string} payload, if decrypted successfully.\n     */\n    private async decryptMessage(theirDeviceIdentityKey: string, message: IMessage): Promise<string> {\n        // This is a wrapper that serialises decryptions of prekey messages, because\n        // otherwise we race between deciding we have no active sessions for the message\n        // and creating a new one, which we can only do once because it removes the OTK.\n        if (message.type !== 0) {\n            // not a prekey message: we can safely just try & decrypt it\n            return this.reallyDecryptMessage(theirDeviceIdentityKey, message);\n        } else {\n            const myPromise = this.olmDevice.olmPrekeyPromise.then(() => {\n                return this.reallyDecryptMessage(theirDeviceIdentityKey, message);\n            });\n            // we want the error, but don't propagate it to the next decryption\n            this.olmDevice.olmPrekeyPromise = myPromise.catch(() => {});\n            return await myPromise;\n        }\n    }\n\n    private async reallyDecryptMessage(theirDeviceIdentityKey: string, message: IMessage): Promise<string> {\n        const sessionIds = await this.olmDevice.getSessionIdsForDevice(theirDeviceIdentityKey);\n\n        // try each session in turn.\n        const decryptionErrors: Record<string, string> = {};\n        for (let i = 0; i < sessionIds.length; i++) {\n            const sessionId = sessionIds[i];\n            try {\n                const payload = await this.olmDevice.decryptMessage(\n                    theirDeviceIdentityKey, sessionId, message.type, message.body,\n                );\n                logger.log(\n                    \"Decrypted Olm message from \" + theirDeviceIdentityKey +\n                    \" with session \" + sessionId,\n                );\n                return payload;\n            } catch (e) {\n                const foundSession = await this.olmDevice.matchesSession(\n                    theirDeviceIdentityKey, sessionId, message.type, message.body,\n                );\n\n                if (foundSession) {\n                    // decryption failed, but it was a prekey message matching this\n                    // session, so it should have worked.\n                    throw new Error(\n                        \"Error decrypting prekey message with existing session id \" +\n                        sessionId + \": \" + e.message,\n                    );\n                }\n\n                // otherwise it's probably a message for another session; carry on, but\n                // keep a record of the error\n                decryptionErrors[sessionId] = e.message;\n            }\n        }\n\n        if (message.type !== 0) {\n            // not a prekey message, so it should have matched an existing session, but it\n            // didn't work.\n\n            if (sessionIds.length === 0) {\n                throw new Error(\"No existing sessions\");\n            }\n\n            throw new Error(\n                \"Error decrypting non-prekey message with existing sessions: \" +\n                JSON.stringify(decryptionErrors),\n            );\n        }\n\n        // prekey message which doesn't match any existing sessions: make a new\n        // session.\n\n        let res;\n        try {\n            res = await this.olmDevice.createInboundSession(\n                theirDeviceIdentityKey, message.type, message.body,\n            );\n        } catch (e) {\n            decryptionErrors[\"(new)\"] = e.message;\n            throw new Error(\n                \"Error decrypting prekey message: \" +\n                JSON.stringify(decryptionErrors),\n            );\n        }\n\n        logger.log(\n            \"created new inbound Olm session ID \" +\n            res.session_id + \" with \" + theirDeviceIdentityKey,\n        );\n        return res.payload;\n    }\n}\n\nregisterAlgorithm(olmlib.OLM_ALGORITHM, OlmEncryption, OlmDecryption);\n",
    "/*\nCopyright 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { DeviceInfo } from \"./deviceinfo\";\nimport { IKeyBackupInfo } from \"./keybackup\";\n\n// TODO: Merge this with crypto.js once converted\n\nexport enum CrossSigningKey {\n    Master = \"master\",\n    SelfSigning = \"self_signing\",\n    UserSigning = \"user_signing\",\n}\n\nexport interface IEncryptedEventInfo {\n    /**\n     * whether the event is encrypted (if not encrypted, some of the other properties may not be set)\n     */\n    encrypted: boolean;\n\n    /**\n     * the sender's key\n     */\n    senderKey: string;\n\n    /**\n     * the algorithm used to encrypt the event\n     */\n    algorithm: string;\n\n    /**\n     * whether we can be sure that the owner of the senderKey sent the event\n     */\n    authenticated: boolean;\n\n    /**\n     * the sender's device information, if available\n     */\n    sender?: DeviceInfo;\n\n    /**\n     * if the event's ed25519 and curve25519 keys don't match (only meaningful if `sender` is set)\n     */\n    mismatchedSender: boolean;\n}\n\nexport interface IRecoveryKey {\n    keyInfo?: IAddSecretStorageKeyOpts;\n    privateKey: Uint8Array;\n    encodedPrivateKey?: string;\n}\n\nexport interface ICreateSecretStorageOpts {\n    /**\n     * Function called to await a secret storage key creation flow.\n     * Returns:\n     *     {Promise<Object>} Object with public key metadata, encoded private\n     *     recovery key which should be disposed of after displaying to the user,\n     *     and raw private key to avoid round tripping if needed.\n     */\n    createSecretStorageKey?: () => Promise<IRecoveryKey>;\n\n    /**\n     * The current key backup object. If passed,\n     * the passphrase and recovery key from this backup will be used.\n     */\n    keyBackupInfo?: IKeyBackupInfo;\n\n    /**\n     * If true, a new key backup version will be\n     * created and the private key stored in the new SSSS store. Ignored if keyBackupInfo\n     * is supplied.\n     */\n    setupNewKeyBackup?: boolean;\n\n    /**\n     * Reset even if keys already exist.\n     */\n    setupNewSecretStorage?: boolean;\n\n    /**\n     * Function called to get the user's\n     * current key backup passphrase. Should return a promise that resolves with a Uint8Array\n     * containing the key, or rejects if the key cannot be obtained.\n     */\n    getKeyBackupPassphrase?: () => Promise<Uint8Array>;\n}\n\nexport interface ISecretStorageKeyInfo {\n    name: string;\n    algorithm: string;\n    // technically the below are specific to AES keys. If we ever introduce another type,\n    // we can split into separate interfaces.\n    iv: string;\n    mac: string;\n    passphrase: IPassphraseInfo;\n}\n\nexport interface ISecretStorageKey {\n    keyId: string;\n    keyInfo: ISecretStorageKeyInfo;\n}\n\nexport interface IPassphraseInfo {\n    algorithm: \"m.pbkdf2\";\n    iterations: number;\n    salt: string;\n    bits?: number;\n}\n\nexport interface IAddSecretStorageKeyOpts {\n    pubkey: string;\n    passphrase?: IPassphraseInfo;\n    name?: string;\n    key: Uint8Array;\n}\n\nexport interface IImportOpts {\n    stage: string; // TODO: Enum\n    successes: number;\n    failures: number;\n    total: number;\n}\n\nexport interface IImportRoomKeysOpts {\n    progressCallback?: (stage: IImportOpts) => void;\n    untrusted?: boolean;\n    source?: string; // TODO: Enum\n}\n",
    "/*\nCopyright 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * @module crypto/backup\n *\n * Classes for dealing with key backup.\n */\n\nimport { MatrixClient } from \"../client\";\nimport { logger } from \"../logger\";\nimport { MEGOLM_ALGORITHM, verifySignature } from \"./olmlib\";\nimport { DeviceInfo } from \"./deviceinfo\";\nimport { DeviceTrustLevel } from './CrossSigning';\nimport { keyFromPassphrase } from './key_passphrase';\nimport { getCrypto, sleep } from \"../utils\";\nimport { IndexedDBCryptoStore } from './store/indexeddb-crypto-store';\nimport { encodeRecoveryKey } from './recoverykey';\nimport { calculateKeyCheck, decryptAES, encryptAES } from './aes';\nimport { IAes256AuthData, ICurve25519AuthData, IKeyBackupInfo, IKeyBackupSession } from \"./keybackup\";\nimport { UnstableValue } from \"../NamespacedValue\";\nimport { CryptoEvent, IMegolmSessionData } from \"./index\";\n\nconst KEY_BACKUP_KEYS_PER_REQUEST = 200;\n\ntype AuthData = IKeyBackupInfo[\"auth_data\"];\n\ntype SigInfo = {\n    deviceId: string;\n    valid?: boolean | null; // true: valid, false: invalid, null: cannot attempt validation\n    device?: DeviceInfo | null;\n    crossSigningId?: boolean;\n    deviceTrust?: DeviceTrustLevel;\n};\n\nexport type TrustInfo = {\n    usable: boolean; // is the backup trusted, true iff there is a sig that is valid & from a trusted device\n    sigs: SigInfo[];\n    // eslint-disable-next-line camelcase\n    trusted_locally?: boolean;\n};\n\nexport interface IKeyBackupCheck {\n    backupInfo: IKeyBackupInfo;\n    trustInfo: TrustInfo;\n}\n\n/* eslint-disable camelcase */\nexport interface IPreparedKeyBackupVersion {\n    algorithm: string;\n    auth_data: AuthData;\n    recovery_key: string;\n    privateKey: Uint8Array;\n}\n/* eslint-enable camelcase */\n\n/** A function used to get the secret key for a backup.\n */\ntype GetKey = () => Promise<ArrayLike<number>>;\n\ninterface BackupAlgorithmClass {\n    algorithmName: string;\n    // initialize from an existing backup\n    init(authData: AuthData, getKey: GetKey): Promise<BackupAlgorithm>;\n\n    // prepare a brand new backup\n    prepare(\n        key: string | Uint8Array | null,\n    ): Promise<[Uint8Array, AuthData]>;\n\n    checkBackupVersion(info: IKeyBackupInfo): void;\n}\n\ninterface BackupAlgorithm {\n    untrusted: boolean;\n    encryptSession(data: Record<string, any>): Promise<any>;\n    decryptSessions(ciphertexts: Record<string, IKeyBackupSession>): Promise<IMegolmSessionData[]>;\n    authData: AuthData;\n    keyMatches(key: ArrayLike<number>): Promise<boolean>;\n    free(): void;\n}\n\nexport interface IKeyBackup {\n    rooms: {\n        [roomId: string]: {\n            sessions: {\n                [sessionId: string]: IKeyBackupSession;\n            };\n        };\n    };\n}\n\n/**\n * Manages the key backup.\n */\nexport class BackupManager {\n    private algorithm: BackupAlgorithm | undefined;\n    public backupInfo: IKeyBackupInfo | undefined; // The info dict from /room_keys/version\n    public checkedForBackup: boolean; // Have we checked the server for a backup we can use?\n    private sendingBackups: boolean; // Are we currently sending backups?\n    constructor(private readonly baseApis: MatrixClient, public readonly getKey: GetKey) {\n        this.checkedForBackup = false;\n        this.sendingBackups = false;\n    }\n\n    public get version(): string | undefined {\n        return this.backupInfo && this.backupInfo.version;\n    }\n\n    /**\n     * Performs a quick check to ensure that the backup info looks sane.\n     *\n     * Throws an error if a problem is detected.\n     *\n     * @param {IKeyBackupInfo} info the key backup info\n     */\n    public static checkBackupVersion(info: IKeyBackupInfo): void {\n        const Algorithm = algorithmsByName[info.algorithm];\n        if (!Algorithm) {\n            throw new Error(\"Unknown backup algorithm: \" + info.algorithm);\n        }\n        if (!(typeof info.auth_data === \"object\")) {\n            throw new Error(\"Invalid backup data returned\");\n        }\n        return Algorithm.checkBackupVersion(info);\n    }\n\n    public static async makeAlgorithm(info: IKeyBackupInfo, getKey: GetKey): Promise<BackupAlgorithm> {\n        const Algorithm = algorithmsByName[info.algorithm];\n        if (!Algorithm) {\n            throw new Error(\"Unknown backup algorithm\");\n        }\n        return await Algorithm.init(info.auth_data, getKey);\n    }\n\n    public async enableKeyBackup(info: IKeyBackupInfo): Promise<void> {\n        this.backupInfo = info;\n        if (this.algorithm) {\n            this.algorithm.free();\n        }\n\n        this.algorithm = await BackupManager.makeAlgorithm(info, this.getKey);\n\n        this.baseApis.emit(CryptoEvent.KeyBackupStatus, true);\n\n        // There may be keys left over from a partially completed backup, so\n        // schedule a send to check.\n        this.scheduleKeyBackupSend();\n    }\n\n    /**\n     * Disable backing up of keys.\n     */\n    public disableKeyBackup(): void {\n        if (this.algorithm) {\n            this.algorithm.free();\n        }\n        this.algorithm = undefined;\n\n        this.backupInfo = undefined;\n\n        this.baseApis.emit(CryptoEvent.KeyBackupStatus, false);\n    }\n\n    public getKeyBackupEnabled(): boolean | null {\n        if (!this.checkedForBackup) {\n            return null;\n        }\n        return Boolean(this.algorithm);\n    }\n\n    public async prepareKeyBackupVersion(\n        key?: string | Uint8Array | null,\n        algorithm?: string | undefined,\n    ): Promise<IPreparedKeyBackupVersion> {\n        const Algorithm = algorithm ? algorithmsByName[algorithm] : DefaultAlgorithm;\n        if (!Algorithm) {\n            throw new Error(\"Unknown backup algorithm\");\n        }\n\n        const [privateKey, authData] = await Algorithm.prepare(key);\n        const recoveryKey = encodeRecoveryKey(privateKey);\n        return {\n            algorithm: Algorithm.algorithmName,\n            auth_data: authData,\n            recovery_key: recoveryKey,\n            privateKey,\n        };\n    }\n\n    public async createKeyBackupVersion(info: IKeyBackupInfo): Promise<void> {\n        this.algorithm = await BackupManager.makeAlgorithm(info, this.getKey);\n    }\n\n    /**\n     * Check the server for an active key backup and\n     * if one is present and has a valid signature from\n     * one of the user's verified devices, start backing up\n     * to it.\n     */\n    public async checkAndStart(): Promise<IKeyBackupCheck> {\n        logger.log(\"Checking key backup status...\");\n        if (this.baseApis.isGuest()) {\n            logger.log(\"Skipping key backup check since user is guest\");\n            this.checkedForBackup = true;\n            return null;\n        }\n        let backupInfo: IKeyBackupInfo;\n        try {\n            backupInfo = await this.baseApis.getKeyBackupVersion();\n        } catch (e) {\n            logger.log(\"Error checking for active key backup\", e);\n            if (e.httpStatus === 404) {\n                // 404 is returned when the key backup does not exist, so that\n                // counts as successfully checking.\n                this.checkedForBackup = true;\n            }\n            return null;\n        }\n        this.checkedForBackup = true;\n\n        const trustInfo = await this.isKeyBackupTrusted(backupInfo);\n\n        if (trustInfo.usable && !this.backupInfo) {\n            logger.log(\n                \"Found usable key backup v\" + backupInfo.version +\n                    \": enabling key backups\",\n            );\n            await this.enableKeyBackup(backupInfo);\n        } else if (!trustInfo.usable && this.backupInfo) {\n            logger.log(\"No usable key backup: disabling key backup\");\n            this.disableKeyBackup();\n        } else if (!trustInfo.usable && !this.backupInfo) {\n            logger.log(\"No usable key backup: not enabling key backup\");\n        } else if (trustInfo.usable && this.backupInfo) {\n            // may not be the same version: if not, we should switch\n            if (backupInfo.version !== this.backupInfo.version) {\n                logger.log(\n                    \"On backup version \" + this.backupInfo.version + \" but found \" +\n                        \"version \" + backupInfo.version + \": switching.\",\n                );\n                this.disableKeyBackup();\n                await this.enableKeyBackup(backupInfo);\n                // We're now using a new backup, so schedule all the keys we have to be\n                // uploaded to the new backup. This is a bit of a workaround to upload\n                // keys to a new backup in *most* cases, but it won't cover all cases\n                // because we don't remember what backup version we uploaded keys to:\n                // see https://github.com/vector-im/element-web/issues/14833\n                await this.scheduleAllGroupSessionsForBackup();\n            } else {\n                logger.log(\"Backup version \" + backupInfo.version + \" still current\");\n            }\n        }\n\n        return { backupInfo, trustInfo };\n    }\n\n    /**\n     * Forces a re-check of the key backup and enables/disables it\n     * as appropriate.\n     *\n     * @return {Object} Object with backup info (as returned by\n     *     getKeyBackupVersion) in backupInfo and\n     *     trust information (as returned by isKeyBackupTrusted)\n     *     in trustInfo.\n     */\n    public async checkKeyBackup(): Promise<IKeyBackupCheck> {\n        this.checkedForBackup = false;\n        return this.checkAndStart();\n    }\n\n    /**\n     * Check if the given backup info is trusted.\n     *\n     * @param {IKeyBackupInfo} backupInfo key backup info dict from /room_keys/version\n     * @return {object} {\n     *     usable: [bool], // is the backup trusted, true iff there is a sig that is valid & from a trusted device\n     *     sigs: [\n     *         valid: [bool || null], // true: valid, false: invalid, null: cannot attempt validation\n     *         deviceId: [string],\n     *         device: [DeviceInfo || null],\n     *     ]\n     * }\n     */\n    public async isKeyBackupTrusted(backupInfo: IKeyBackupInfo): Promise<TrustInfo> {\n        const ret = {\n            usable: false,\n            trusted_locally: false,\n            sigs: [] as SigInfo[],\n        };\n\n        if (\n            !backupInfo ||\n                !backupInfo.algorithm ||\n                !backupInfo.auth_data ||\n                !backupInfo.auth_data.signatures\n        ) {\n            logger.info(\"Key backup is absent or missing required data\");\n            return ret;\n        }\n\n        const privKey = await this.baseApis.crypto.getSessionBackupPrivateKey();\n        if (privKey) {\n            let algorithm;\n            try {\n                algorithm = await BackupManager.makeAlgorithm(backupInfo, async () => privKey);\n\n                if (await algorithm.keyMatches(privKey)) {\n                    logger.info(\"Backup is trusted locally\");\n                    ret.trusted_locally = true;\n                }\n            } catch {\n                // do nothing -- if we have an error, then we don't mark it as\n                // locally trusted\n            } finally {\n                if (algorithm) {\n                    algorithm.free();\n                }\n            }\n        }\n\n        const mySigs = backupInfo.auth_data.signatures[this.baseApis.getUserId()] || {};\n\n        for (const keyId of Object.keys(mySigs)) {\n            const keyIdParts = keyId.split(':');\n            if (keyIdParts[0] !== 'ed25519') {\n                logger.log(\"Ignoring unknown signature type: \" + keyIdParts[0]);\n                continue;\n            }\n            // Could be a cross-signing master key, but just say this is the device\n            // ID for backwards compat\n            const sigInfo: SigInfo = { deviceId: keyIdParts[1] };\n\n            // first check to see if it's from our cross-signing key\n            const crossSigningId = this.baseApis.crypto.crossSigningInfo.getId();\n            if (crossSigningId === sigInfo.deviceId) {\n                sigInfo.crossSigningId = true;\n                try {\n                    await verifySignature(\n                        this.baseApis.crypto.olmDevice,\n                        backupInfo.auth_data,\n                        this.baseApis.getUserId(),\n                        sigInfo.deviceId,\n                        crossSigningId,\n                    );\n                    sigInfo.valid = true;\n                } catch (e) {\n                    logger.warn(\n                        \"Bad signature from cross signing key \" + crossSigningId, e,\n                    );\n                    sigInfo.valid = false;\n                }\n                ret.sigs.push(sigInfo);\n                continue;\n            }\n\n            // Now look for a sig from a device\n            // At some point this can probably go away and we'll just support\n            // it being signed by the cross-signing master key\n            const device = this.baseApis.crypto.deviceList.getStoredDevice(\n                this.baseApis.getUserId(), sigInfo.deviceId,\n            );\n            if (device) {\n                sigInfo.device = device;\n                sigInfo.deviceTrust = await this.baseApis.checkDeviceTrust(\n                    this.baseApis.getUserId(), sigInfo.deviceId,\n                );\n                try {\n                    await verifySignature(\n                        this.baseApis.crypto.olmDevice,\n                        backupInfo.auth_data,\n                        this.baseApis.getUserId(),\n                        device.deviceId,\n                        device.getFingerprint(),\n                    );\n                    sigInfo.valid = true;\n                } catch (e) {\n                    logger.info(\n                        \"Bad signature from key ID \" + keyId + \" userID \" + this.baseApis.getUserId() +\n                            \" device ID \" + device.deviceId + \" fingerprint: \" +\n                            device.getFingerprint(), backupInfo.auth_data, e,\n                    );\n                    sigInfo.valid = false;\n                }\n            } else {\n                sigInfo.valid = null; // Can't determine validity because we don't have the signing device\n                logger.info(\"Ignoring signature from unknown key \" + keyId);\n            }\n            ret.sigs.push(sigInfo);\n        }\n\n        ret.usable = ret.sigs.some((s) => {\n            return (\n                s.valid && (\n                    (s.device && s.deviceTrust.isVerified()) ||\n                        (s.crossSigningId)\n                )\n            );\n        });\n        ret.usable = ret.usable || ret.trusted_locally;\n        return ret;\n    }\n\n    /**\n     * Schedules sending all keys waiting to be sent to the backup, if not already\n     * scheduled. Retries if necessary.\n     *\n     * @param maxDelay Maximum delay to wait in ms. 0 means no delay.\n     */\n    public async scheduleKeyBackupSend(maxDelay = 10000): Promise<void> {\n        if (this.sendingBackups) return;\n\n        this.sendingBackups = true;\n\n        try {\n            // wait between 0 and `maxDelay` seconds, to avoid backup\n            // requests from different clients hitting the server all at\n            // the same time when a new key is sent\n            const delay = Math.random() * maxDelay;\n            await sleep(delay, undefined);\n            let numFailures = 0; // number of consecutive failures\n            for (;;) {\n                if (!this.algorithm) {\n                    return;\n                }\n                try {\n                    const numBackedUp =\n                        await this.backupPendingKeys(KEY_BACKUP_KEYS_PER_REQUEST);\n                    if (numBackedUp === 0) {\n                        // no sessions left needing backup: we're done\n                        return;\n                    }\n                    numFailures = 0;\n                } catch (err) {\n                    numFailures++;\n                    logger.log(\"Key backup request failed\", err);\n                    if (err.data) {\n                        if (\n                            err.data.errcode == 'M_NOT_FOUND' ||\n                                err.data.errcode == 'M_WRONG_ROOM_KEYS_VERSION'\n                        ) {\n                            // Re-check key backup status on error, so we can be\n                            // sure to present the current situation when asked.\n                            await this.checkKeyBackup();\n                            // Backup version has changed or this backup version\n                            // has been deleted\n                            this.baseApis.crypto.emit(CryptoEvent.KeyBackupFailed, err.data.errcode);\n                            throw err;\n                        }\n                    }\n                }\n                if (numFailures) {\n                    // exponential backoff if we have failures\n                    await sleep(1000 * Math.pow(2, Math.min(numFailures - 1, 4)), undefined);\n                }\n            }\n        } finally {\n            this.sendingBackups = false;\n        }\n    }\n\n    /**\n     * Take some e2e keys waiting to be backed up and send them\n     * to the backup.\n     *\n     * @param {integer} limit Maximum number of keys to back up\n     * @returns {integer} Number of sessions backed up\n     */\n    public async backupPendingKeys(limit: number): Promise<number> {\n        const sessions = await this.baseApis.crypto.cryptoStore.getSessionsNeedingBackup(limit);\n        if (!sessions.length) {\n            return 0;\n        }\n\n        let remaining = await this.baseApis.crypto.cryptoStore.countSessionsNeedingBackup();\n        this.baseApis.crypto.emit(CryptoEvent.KeyBackupSessionsRemaining, remaining);\n\n        const rooms: IKeyBackup[\"rooms\"] = {};\n        for (const session of sessions) {\n            const roomId = session.sessionData.room_id;\n            if (rooms[roomId] === undefined) {\n                rooms[roomId] = { sessions: {} };\n            }\n\n            const sessionData = await this.baseApis.crypto.olmDevice.exportInboundGroupSession(\n                session.senderKey, session.sessionId, session.sessionData,\n            );\n            sessionData.algorithm = MEGOLM_ALGORITHM;\n\n            const forwardedCount =\n                (sessionData.forwarding_curve25519_key_chain || []).length;\n\n            const userId = this.baseApis.crypto.deviceList.getUserByIdentityKey(\n                MEGOLM_ALGORITHM, session.senderKey,\n            );\n            const device = this.baseApis.crypto.deviceList.getDeviceByIdentityKey(\n                MEGOLM_ALGORITHM, session.senderKey,\n            );\n            const verified = this.baseApis.crypto.checkDeviceInfoTrust(userId, device).isVerified();\n\n            rooms[roomId]['sessions'][session.sessionId] = {\n                first_message_index: sessionData.first_known_index,\n                forwarded_count: forwardedCount,\n                is_verified: verified,\n                session_data: await this.algorithm.encryptSession(sessionData),\n            };\n        }\n\n        await this.baseApis.sendKeyBackup(undefined, undefined, this.backupInfo.version, { rooms });\n\n        await this.baseApis.crypto.cryptoStore.unmarkSessionsNeedingBackup(sessions);\n        remaining = await this.baseApis.crypto.cryptoStore.countSessionsNeedingBackup();\n        this.baseApis.crypto.emit(CryptoEvent.KeyBackupSessionsRemaining, remaining);\n\n        return sessions.length;\n    }\n\n    public async backupGroupSession(\n        senderKey: string, sessionId: string,\n    ): Promise<void> {\n        await this.baseApis.crypto.cryptoStore.markSessionsNeedingBackup([{\n            senderKey: senderKey,\n            sessionId: sessionId,\n        }]);\n\n        if (this.backupInfo) {\n            // don't wait for this to complete: it will delay so\n            // happens in the background\n            this.scheduleKeyBackupSend();\n        }\n        // if this.backupInfo is not set, then the keys will be backed up when\n        // this.enableKeyBackup is called\n    }\n\n    /**\n     * Marks all group sessions as needing to be backed up and schedules them to\n     * upload in the background as soon as possible.\n     */\n    public async scheduleAllGroupSessionsForBackup(): Promise<void> {\n        await this.flagAllGroupSessionsForBackup();\n\n        // Schedule keys to upload in the background as soon as possible.\n        this.scheduleKeyBackupSend(0 /* maxDelay */);\n    }\n\n    /**\n     * Marks all group sessions as needing to be backed up without scheduling\n     * them to upload in the background.\n     * @returns {Promise<int>} Resolves to the number of sessions now requiring a backup\n     *     (which will be equal to the number of sessions in the store).\n     */\n    public async flagAllGroupSessionsForBackup(): Promise<number> {\n        await this.baseApis.crypto.cryptoStore.doTxn(\n            'readwrite',\n            [\n                IndexedDBCryptoStore.STORE_INBOUND_GROUP_SESSIONS,\n                IndexedDBCryptoStore.STORE_BACKUP,\n            ],\n            (txn) => {\n                this.baseApis.crypto.cryptoStore.getAllEndToEndInboundGroupSessions(txn, (session) => {\n                    if (session !== null) {\n                        this.baseApis.crypto.cryptoStore.markSessionsNeedingBackup([session], txn);\n                    }\n                });\n            },\n        );\n\n        const remaining = await this.baseApis.crypto.cryptoStore.countSessionsNeedingBackup();\n        this.baseApis.emit(CryptoEvent.KeyBackupSessionsRemaining, remaining);\n        return remaining;\n    }\n\n    /**\n     * Counts the number of end to end session keys that are waiting to be backed up\n     * @returns {Promise<int>} Resolves to the number of sessions requiring backup\n     */\n    public countSessionsNeedingBackup(): Promise<number> {\n        return this.baseApis.crypto.cryptoStore.countSessionsNeedingBackup();\n    }\n}\n\nexport class Curve25519 implements BackupAlgorithm {\n    public static algorithmName = \"m.megolm_backup.v1.curve25519-aes-sha2\";\n\n    constructor(\n        public authData: ICurve25519AuthData,\n        private publicKey: any, // FIXME: PkEncryption\n        private getKey: () => Promise<Uint8Array>,\n    ) {}\n\n    public static async init(\n        authData: AuthData,\n        getKey: () => Promise<Uint8Array>,\n    ): Promise<Curve25519> {\n        if (!authData || !(\"public_key\" in authData)) {\n            throw new Error(\"auth_data missing required information\");\n        }\n        const publicKey = new global.Olm.PkEncryption();\n        publicKey.set_recipient_key(authData.public_key);\n        return new Curve25519(authData as ICurve25519AuthData, publicKey, getKey);\n    }\n\n    public static async prepare(\n        key: string | Uint8Array | null,\n    ): Promise<[Uint8Array, AuthData]> {\n        const decryption = new global.Olm.PkDecryption();\n        try {\n            const authData: Partial<ICurve25519AuthData> = {};\n            if (!key) {\n                authData.public_key = decryption.generate_key();\n            } else if (key instanceof Uint8Array) {\n                authData.public_key = decryption.init_with_private_key(key);\n            } else {\n                const derivation = await keyFromPassphrase(key);\n                authData.private_key_salt = derivation.salt;\n                authData.private_key_iterations = derivation.iterations;\n                authData.public_key = decryption.init_with_private_key(derivation.key);\n            }\n            const publicKey = new global.Olm.PkEncryption();\n            publicKey.set_recipient_key(authData.public_key);\n\n            return [\n                decryption.get_private_key(),\n                authData as AuthData,\n            ];\n        } finally {\n            decryption.free();\n        }\n    }\n\n    public static checkBackupVersion(info: IKeyBackupInfo): void {\n        if (!(\"public_key\" in info.auth_data)) {\n            throw new Error(\"Invalid backup data returned\");\n        }\n    }\n\n    public get untrusted() { return true; }\n\n    public async encryptSession(data: Record<string, any>): Promise<any> {\n        const plainText: Record<string, any> = Object.assign({}, data);\n        delete plainText.session_id;\n        delete plainText.room_id;\n        delete plainText.first_known_index;\n        return this.publicKey.encrypt(JSON.stringify(plainText));\n    }\n\n    public async decryptSessions(sessions: Record<string, IKeyBackupSession>): Promise<IMegolmSessionData[]> {\n        const privKey = await this.getKey();\n        const decryption = new global.Olm.PkDecryption();\n        try {\n            const backupPubKey = decryption.init_with_private_key(privKey);\n\n            if (backupPubKey !== this.authData.public_key) {\n                // eslint-disable-next-line no-throw-literal\n                throw { errcode: MatrixClient.RESTORE_BACKUP_ERROR_BAD_KEY };\n            }\n\n            const keys: IMegolmSessionData[] = [];\n\n            for (const [sessionId, sessionData] of Object.entries(sessions)) {\n                try {\n                    const decrypted = JSON.parse(decryption.decrypt(\n                        sessionData.session_data.ephemeral,\n                        sessionData.session_data.mac,\n                        sessionData.session_data.ciphertext,\n                    ));\n                    decrypted.session_id = sessionId;\n                    keys.push(decrypted);\n                } catch (e) {\n                    logger.log(\"Failed to decrypt megolm session from backup\", e, sessionData);\n                }\n            }\n            return keys;\n        } finally {\n            decryption.free();\n        }\n    }\n\n    public async keyMatches(key: Uint8Array): Promise<boolean> {\n        const decryption = new global.Olm.PkDecryption();\n        let pubKey;\n        try {\n            pubKey = decryption.init_with_private_key(key);\n        } finally {\n            decryption.free();\n        }\n\n        return pubKey === this.authData.public_key;\n    }\n\n    public free(): void {\n        this.publicKey.free();\n    }\n}\n\nfunction randomBytes(size: number): Uint8Array {\n    const crypto: {randomBytes: (n: number) => Uint8Array} | undefined = getCrypto() as any;\n    if (crypto) {\n        // nodejs version\n        return crypto.randomBytes(size);\n    }\n    if (window?.crypto) {\n        // browser version\n        const buf = new Uint8Array(size);\n        window.crypto.getRandomValues(buf);\n        return buf;\n    }\n    throw new Error(\"No usable crypto implementation\");\n}\n\nconst UNSTABLE_MSC3270_NAME = new UnstableValue(null, \"org.matrix.msc3270.v1.aes-hmac-sha2\");\n\nexport class Aes256 implements BackupAlgorithm {\n    public static algorithmName = UNSTABLE_MSC3270_NAME.name;\n\n    constructor(\n        public readonly authData: IAes256AuthData,\n        private readonly key: Uint8Array,\n    ) {}\n\n    public static async init(\n        authData: IAes256AuthData,\n        getKey: () => Promise<Uint8Array>,\n    ): Promise<Aes256> {\n        if (!authData) {\n            throw new Error(\"auth_data missing\");\n        }\n        const key = await getKey();\n        if (authData.mac) {\n            const { mac } = await calculateKeyCheck(key, authData.iv);\n            if (authData.mac.replace(/=+$/g, '') !== mac.replace(/=+/g, '')) {\n                throw new Error(\"Key does not match\");\n            }\n        }\n        return new Aes256(authData, key);\n    }\n\n    public static async prepare(\n        key: string | Uint8Array | null,\n    ): Promise<[Uint8Array, AuthData]> {\n        let outKey: Uint8Array;\n        const authData: Partial<IAes256AuthData> = {};\n        if (!key) {\n            outKey = randomBytes(32);\n        } else if (key instanceof Uint8Array) {\n            outKey = new Uint8Array(key);\n        } else {\n            const derivation = await keyFromPassphrase(key);\n            authData.private_key_salt = derivation.salt;\n            authData.private_key_iterations = derivation.iterations;\n            outKey = derivation.key;\n        }\n\n        const { iv, mac } = await calculateKeyCheck(outKey);\n        authData.iv = iv;\n        authData.mac = mac;\n\n        return [outKey, authData as AuthData];\n    }\n\n    public static checkBackupVersion(info: IKeyBackupInfo): void {\n        if (!(\"iv\" in info.auth_data && \"mac\" in info.auth_data)) {\n            throw new Error(\"Invalid backup data returned\");\n        }\n    }\n\n    public get untrusted() { return false; }\n\n    async encryptSession(data: Record<string, any>): Promise<any> {\n        const plainText: Record<string, any> = Object.assign({}, data);\n        delete plainText.session_id;\n        delete plainText.room_id;\n        delete plainText.first_known_index;\n        return await encryptAES(JSON.stringify(plainText), this.key, data.session_id);\n    }\n\n    async decryptSessions(sessions: Record<string, IKeyBackupSession>): Promise<IMegolmSessionData[]> {\n        const keys: IMegolmSessionData[] = [];\n\n        for (const [sessionId, sessionData] of Object.entries(sessions)) {\n            try {\n                const decrypted = JSON.parse(await decryptAES(sessionData.session_data, this.key, sessionId));\n                decrypted.session_id = sessionId;\n                keys.push(decrypted);\n            } catch (e) {\n                logger.log(\"Failed to decrypt megolm session from backup\", e, sessionData);\n            }\n        }\n        return keys;\n    }\n\n    async keyMatches(key: Uint8Array): Promise<boolean> {\n        if (this.authData.mac) {\n            const { mac } = await calculateKeyCheck(key, this.authData.iv);\n            return this.authData.mac.replace(/=+$/g, '') === mac.replace(/=+/g, '');\n        } else {\n            // if we have no information, we have to assume the key is right\n            return true;\n        }\n    }\n\n    public free(): void {\n        this.key.fill(0);\n    }\n}\n\nexport const algorithmsByName: Record<string, BackupAlgorithmClass> = {\n    [Curve25519.algorithmName]: Curve25519,\n    [Aes256.algorithmName]: Aes256,\n};\n\nexport const DefaultAlgorithm: BackupAlgorithmClass = Curve25519;\n",
    "/*\nCopyright 2020-2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport anotherjson from \"another-json\";\n\nimport { decodeBase64, encodeBase64 } from './olmlib';\nimport { IndexedDBCryptoStore } from '../crypto/store/indexeddb-crypto-store';\nimport { decryptAES, encryptAES } from './aes';\nimport { logger } from '../logger';\nimport { ISecretStorageKeyInfo } from \"./api\";\nimport { Crypto } from \"./index\";\nimport { Method } from \"../http-api\";\nimport { ISignatures } from \"../@types/signed\";\n\nexport interface IDehydratedDevice {\n    device_id: string; // eslint-disable-line camelcase\n    device_data: ISecretStorageKeyInfo & { // eslint-disable-line camelcase\n        algorithm: string;\n        account: string; // pickle\n    };\n}\n\nexport interface IDehydratedDeviceKeyInfo {\n    passphrase?: string;\n}\n\nexport interface IDeviceKeys {\n    algorithms: Array<string>;\n    device_id: string; // eslint-disable-line camelcase\n    user_id: string; // eslint-disable-line camelcase\n    keys: Record<string, string>;\n    signatures?: ISignatures;\n}\n\nexport interface IOneTimeKey {\n    key: string;\n    fallback?: boolean;\n    signatures?: ISignatures;\n}\n\nexport const DEHYDRATION_ALGORITHM = \"org.matrix.msc2697.v1.olm.libolm_pickle\";\n\nconst oneweek = 7 * 24 * 60 * 60 * 1000;\n\nexport class DehydrationManager {\n    private inProgress = false;\n    private timeoutId: any;\n    private key: Uint8Array;\n    private keyInfo: {[props: string]: any};\n    private deviceDisplayName: string;\n    constructor(private readonly crypto: Crypto) {\n        this.getDehydrationKeyFromCache();\n    }\n    async getDehydrationKeyFromCache(): Promise<void> {\n        return await this.crypto.cryptoStore.doTxn(\n            'readonly',\n            [IndexedDBCryptoStore.STORE_ACCOUNT],\n            (txn) => {\n                this.crypto.cryptoStore.getSecretStorePrivateKey(\n                    txn,\n                    async (result) => {\n                        if (result) {\n                            const { key, keyInfo, deviceDisplayName, time } = result;\n                            const pickleKey = Buffer.from(this.crypto.olmDevice.pickleKey);\n                            const decrypted = await decryptAES(key, pickleKey, DEHYDRATION_ALGORITHM);\n                            this.key = decodeBase64(decrypted);\n                            this.keyInfo = keyInfo;\n                            this.deviceDisplayName = deviceDisplayName;\n                            const now = Date.now();\n                            const delay = Math.max(1, time + oneweek - now);\n                            this.timeoutId = global.setTimeout(\n                                this.dehydrateDevice.bind(this), delay,\n                            );\n                        }\n                    },\n                    \"dehydration\",\n                );\n            },\n        );\n    }\n\n    /** set the key, and queue periodic dehydration to the server in the background */\n    async setKeyAndQueueDehydration(\n        key: Uint8Array, keyInfo: {[props: string]: any} = {},\n        deviceDisplayName: string = undefined,\n    ): Promise<void> {\n        const matches = await this.setKey(key, keyInfo, deviceDisplayName);\n        if (!matches) {\n            // start dehydration in the background\n            this.dehydrateDevice();\n        }\n    }\n\n    async setKey(\n        key: Uint8Array, keyInfo: {[props: string]: any} = {},\n        deviceDisplayName: string = undefined,\n    ): Promise<boolean> {\n        if (!key) {\n            // unsetting the key -- cancel any pending dehydration task\n            if (this.timeoutId) {\n                global.clearTimeout(this.timeoutId);\n                this.timeoutId = undefined;\n            }\n            // clear storage\n            await this.crypto.cryptoStore.doTxn(\n                'readwrite',\n                [IndexedDBCryptoStore.STORE_ACCOUNT],\n                (txn) => {\n                    this.crypto.cryptoStore.storeSecretStorePrivateKey(\n                        txn, \"dehydration\", null,\n                    );\n                },\n            );\n            this.key = undefined;\n            this.keyInfo = undefined;\n            return;\n        }\n\n        // Check to see if it's the same key as before.  If it's different,\n        // dehydrate a new device.  If it's the same, we can keep the same\n        // device.  (Assume that keyInfo and deviceDisplayName will be the\n        // same if the key is the same.)\n        let matches: boolean = this.key && key.length == this.key.length;\n        for (let i = 0; matches && i < key.length; i++) {\n            if (key[i] != this.key[i]) {\n                matches = false;\n            }\n        }\n        if (!matches) {\n            this.key = key;\n            this.keyInfo = keyInfo;\n            this.deviceDisplayName = deviceDisplayName;\n        }\n        return matches;\n    }\n\n    /** returns the device id of the newly created dehydrated device */\n    async dehydrateDevice(): Promise<string> {\n        if (this.inProgress) {\n            logger.log(\"Dehydration already in progress -- not starting new dehydration\");\n            return;\n        }\n        this.inProgress = true;\n        if (this.timeoutId) {\n            global.clearTimeout(this.timeoutId);\n            this.timeoutId = undefined;\n        }\n        try {\n            const pickleKey = Buffer.from(this.crypto.olmDevice.pickleKey);\n\n            // update the crypto store with the timestamp\n            const key = await encryptAES(encodeBase64(this.key), pickleKey, DEHYDRATION_ALGORITHM);\n            await this.crypto.cryptoStore.doTxn(\n                'readwrite',\n                [IndexedDBCryptoStore.STORE_ACCOUNT],\n                (txn) => {\n                    this.crypto.cryptoStore.storeSecretStorePrivateKey(\n                        txn, \"dehydration\",\n                        {\n                            keyInfo: this.keyInfo,\n                            key,\n                            deviceDisplayName: this.deviceDisplayName,\n                            time: Date.now(),\n                        },\n                    );\n                },\n            );\n            logger.log(\"Attempting to dehydrate device\");\n\n            logger.log(\"Creating account\");\n            // create the account and all the necessary keys\n            const account = new global.Olm.Account();\n            account.create();\n            const e2eKeys = JSON.parse(account.identity_keys());\n\n            const maxKeys = account.max_number_of_one_time_keys();\n            // FIXME: generate in small batches?\n            account.generate_one_time_keys(maxKeys / 2);\n            account.generate_fallback_key();\n            const otks: Record<string, string> = JSON.parse(account.one_time_keys());\n            const fallbacks: Record<string, string> = JSON.parse(account.fallback_key());\n            account.mark_keys_as_published();\n\n            // dehydrate the account and store it on the server\n            const pickledAccount = account.pickle(new Uint8Array(this.key));\n\n            const deviceData: {[props: string]: any} = {\n                algorithm: DEHYDRATION_ALGORITHM,\n                account: pickledAccount,\n            };\n            if (this.keyInfo.passphrase) {\n                deviceData.passphrase = this.keyInfo.passphrase;\n            }\n\n            logger.log(\"Uploading account to server\");\n            // eslint-disable-next-line camelcase\n            const dehydrateResult = await this.crypto.baseApis.http.authedRequest<{ device_id: string }>(\n                undefined,\n                Method.Put,\n                \"/dehydrated_device\",\n                undefined,\n                {\n                    device_data: deviceData,\n                    initial_device_display_name: this.deviceDisplayName,\n                },\n                {\n                    prefix: \"/_matrix/client/unstable/org.matrix.msc2697.v2\",\n                },\n            );\n\n            // send the keys to the server\n            const deviceId = dehydrateResult.device_id;\n            logger.log(\"Preparing device keys\", deviceId);\n            const deviceKeys: IDeviceKeys = {\n                algorithms: this.crypto.supportedAlgorithms,\n                device_id: deviceId,\n                user_id: this.crypto.userId,\n                keys: {\n                    [`ed25519:${deviceId}`]: e2eKeys.ed25519,\n                    [`curve25519:${deviceId}`]: e2eKeys.curve25519,\n                },\n            };\n            const deviceSignature = account.sign(anotherjson.stringify(deviceKeys));\n            deviceKeys.signatures = {\n                [this.crypto.userId]: {\n                    [`ed25519:${deviceId}`]: deviceSignature,\n                },\n            };\n            if (this.crypto.crossSigningInfo.getId(\"self_signing\")) {\n                await this.crypto.crossSigningInfo.signObject(deviceKeys, \"self_signing\");\n            }\n\n            logger.log(\"Preparing one-time keys\");\n            const oneTimeKeys: Record<string, IOneTimeKey> = {};\n            for (const [keyId, key] of Object.entries(otks.curve25519)) {\n                const k: IOneTimeKey = { key };\n                const signature = account.sign(anotherjson.stringify(k));\n                k.signatures = {\n                    [this.crypto.userId]: {\n                        [`ed25519:${deviceId}`]: signature,\n                    },\n                };\n                oneTimeKeys[`signed_curve25519:${keyId}`] = k;\n            }\n\n            logger.log(\"Preparing fallback keys\");\n            const fallbackKeys = {};\n            for (const [keyId, key] of Object.entries(fallbacks.curve25519)) {\n                const k: IOneTimeKey = { key, fallback: true };\n                const signature = account.sign(anotherjson.stringify(k));\n                k.signatures = {\n                    [this.crypto.userId]: {\n                        [`ed25519:${deviceId}`]: signature,\n                    },\n                };\n                fallbackKeys[`signed_curve25519:${keyId}`] = k;\n            }\n\n            logger.log(\"Uploading keys to server\");\n            await this.crypto.baseApis.http.authedRequest(\n                undefined,\n                Method.Post,\n                \"/keys/upload/\" + encodeURI(deviceId),\n                undefined,\n                {\n                    \"device_keys\": deviceKeys,\n                    \"one_time_keys\": oneTimeKeys,\n                    \"org.matrix.msc2732.fallback_keys\": fallbackKeys,\n                },\n            );\n            logger.log(\"Done dehydrating\");\n\n            // dehydrate again in a week\n            this.timeoutId = global.setTimeout(\n                this.dehydrateDevice.bind(this), oneweek,\n            );\n\n            return deviceId;\n        } finally {\n            this.inProgress = false;\n        }\n    }\n\n    public stop() {\n        if (this.timeoutId) {\n            global.clearTimeout(this.timeoutId);\n            this.timeoutId = undefined;\n        }\n    }\n}\n",
    "/*\nCopyright 2016 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { ISignatures } from \"../@types/signed\";\n\n/**\n * @module crypto/deviceinfo\n */\n\nexport interface IDevice {\n    keys: Record<string, string>;\n    algorithms: string[];\n    verified: DeviceVerification;\n    known: boolean;\n    unsigned?: Record<string, any>;\n    signatures?: ISignatures;\n}\n\nenum DeviceVerification {\n    Blocked = -1,\n    Unverified = 0,\n    Verified = 1,\n}\n\n/**\n  * Information about a user's device\n  *\n  * @constructor\n  * @alias module:crypto/deviceinfo\n  *\n  * @property {string} deviceId the ID of this device\n  *\n  * @property {string[]} algorithms list of algorithms supported by this device\n  *\n  * @property {Object.<string,string>} keys a map from\n  *      &lt;key type&gt;:&lt;id&gt; -> &lt;base64-encoded key&gt;>\n  *\n  * @property {module:crypto/deviceinfo.DeviceVerification} verified\n  *     whether the device has been verified/blocked by the user\n  *\n  * @property {boolean} known\n  *     whether the user knows of this device's existence (useful when warning\n  *     the user that a user has added new devices)\n  *\n  * @property {Object} unsigned  additional data from the homeserver\n  *\n  * @param {string} deviceId id of the device\n  */\nexport class DeviceInfo {\n    /**\n     * rehydrate a DeviceInfo from the session store\n     *\n     * @param {object} obj  raw object from session store\n     * @param {string} deviceId id of the device\n     *\n     * @return {module:crypto~DeviceInfo} new DeviceInfo\n     */\n    public static fromStorage(obj: Partial<IDevice>, deviceId: string): DeviceInfo {\n        const res = new DeviceInfo(deviceId);\n        for (const prop in obj) {\n            if (obj.hasOwnProperty(prop)) {\n                res[prop] = obj[prop];\n            }\n        }\n        return res;\n    }\n\n    /**\n     * @enum\n     */\n    public static DeviceVerification = {\n        VERIFIED: DeviceVerification.Verified,\n        UNVERIFIED: DeviceVerification.Unverified,\n        BLOCKED: DeviceVerification.Blocked,\n    };\n\n    public algorithms: string[];\n    public keys: Record<string, string> = {};\n    public verified = DeviceVerification.Unverified;\n    public known = false;\n    public unsigned: Record<string, any> = {};\n    public signatures: ISignatures = {};\n\n    constructor(public readonly deviceId: string) {}\n\n    /**\n     * Prepare a DeviceInfo for JSON serialisation in the session store\n     *\n     * @return {object} deviceinfo with non-serialised members removed\n     */\n    public toStorage(): IDevice {\n        return {\n            algorithms: this.algorithms,\n            keys: this.keys,\n            verified: this.verified,\n            known: this.known,\n            unsigned: this.unsigned,\n            signatures: this.signatures,\n        };\n    }\n\n    /**\n     * Get the fingerprint for this device (ie, the Ed25519 key)\n     *\n     * @return {string} base64-encoded fingerprint of this device\n     */\n    public getFingerprint(): string {\n        return this.keys[\"ed25519:\" + this.deviceId];\n    }\n\n    /**\n     * Get the identity key for this device (ie, the Curve25519 key)\n     *\n     * @return {string} base64-encoded identity key of this device\n     */\n    public getIdentityKey(): string {\n        return this.keys[\"curve25519:\" + this.deviceId];\n    }\n\n    /**\n     * Get the configured display name for this device, if any\n     *\n     * @return {string?} displayname\n     */\n    public getDisplayName(): string | null {\n        return this.unsigned.device_display_name || null;\n    }\n\n    /**\n     * Returns true if this device is blocked\n     *\n     * @return {Boolean} true if blocked\n     */\n    public isBlocked(): boolean {\n        return this.verified == DeviceVerification.Blocked;\n    }\n\n    /**\n     * Returns true if this device is verified\n     *\n     * @return {Boolean} true if verified\n     */\n    public isVerified(): boolean {\n        return this.verified == DeviceVerification.Verified;\n    }\n\n    /**\n     * Returns true if this device is unverified\n     *\n     * @return {Boolean} true if unverified\n     */\n    public isUnverified(): boolean {\n        return this.verified == DeviceVerification.Unverified;\n    }\n\n    /**\n     * Returns true if the user knows about this device's existence\n     *\n     * @return {Boolean} true if known\n     */\n    public isKnown(): boolean {\n        return this.known === true;\n    }\n}\n",
    "/*\nCopyright 2016 OpenMarket Ltd\nCopyright 2017 Vector Creations Ltd\nCopyright 2018-2019 New Vector Ltd\nCopyright 2019-2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * @module crypto\n */\n\nimport anotherjson from \"another-json\";\n\nimport { TypedReEmitter } from '../ReEmitter';\nimport { logger } from '../logger';\nimport { IExportedDevice, OlmDevice } from \"./OlmDevice\";\nimport * as olmlib from \"./olmlib\";\nimport { DeviceInfoMap, DeviceList } from \"./DeviceList\";\nimport { DeviceInfo, IDevice } from \"./deviceinfo\";\nimport type { DecryptionAlgorithm, EncryptionAlgorithm } from \"./algorithms\";\nimport * as algorithms from \"./algorithms\";\nimport { createCryptoStoreCacheCallbacks, CrossSigningInfo, DeviceTrustLevel, UserTrustLevel } from './CrossSigning';\nimport { EncryptionSetupBuilder } from \"./EncryptionSetup\";\nimport {\n    IAccountDataClient,\n    ISecretRequest,\n    SECRET_STORAGE_ALGORITHM_V1_AES,\n    SecretStorage,\n    SecretStorageKeyObject,\n    SecretStorageKeyTuple,\n} from './SecretStorage';\nimport {\n    IAddSecretStorageKeyOpts,\n    ICreateSecretStorageOpts,\n    IEncryptedEventInfo,\n    IImportRoomKeysOpts,\n    IRecoveryKey,\n    ISecretStorageKeyInfo,\n} from \"./api\";\nimport { OutgoingRoomKeyRequestManager } from './OutgoingRoomKeyRequestManager';\nimport { IndexedDBCryptoStore } from './store/indexeddb-crypto-store';\nimport { VerificationBase } from \"./verification/Base\";\nimport { ReciprocateQRCode, SCAN_QR_CODE_METHOD, SHOW_QR_CODE_METHOD } from './verification/QRCode';\nimport { SAS as SASVerification } from './verification/SAS';\nimport { keyFromPassphrase } from './key_passphrase';\nimport { decodeRecoveryKey, encodeRecoveryKey } from './recoverykey';\nimport { VerificationRequest } from \"./verification/request/VerificationRequest\";\nimport { InRoomChannel, InRoomRequests } from \"./verification/request/InRoomChannel\";\nimport { ToDeviceChannel, ToDeviceRequests } from \"./verification/request/ToDeviceChannel\";\nimport { IllegalMethod } from \"./verification/IllegalMethod\";\nimport { KeySignatureUploadError } from \"../errors\";\nimport { calculateKeyCheck, decryptAES, encryptAES } from './aes';\nimport { DehydrationManager, IDeviceKeys, IOneTimeKey } from './dehydration';\nimport { BackupManager } from \"./backup\";\nimport { IStore } from \"../store\";\nimport { Room, RoomEvent } from \"../models/room\";\nimport { RoomMember, RoomMemberEvent } from \"../models/room-member\";\nimport { EventStatus, IClearEvent, IEvent, MatrixEvent, MatrixEventEvent } from \"../models/event\";\nimport {\n    ClientEvent,\n    ICrossSigningKey,\n    IKeysUploadResponse,\n    ISignedKey,\n    IUploadKeySignaturesResponse,\n    MatrixClient,\n    SessionStore,\n} from \"../client\";\nimport type { IRoomEncryption, RoomList } from \"./RoomList\";\nimport { IKeyBackupInfo } from \"./keybackup\";\nimport { ISyncStateData } from \"../sync\";\nimport { CryptoStore } from \"./store/base\";\nimport { IVerificationChannel } from \"./verification/request/Channel\";\nimport { TypedEventEmitter } from \"../models/typed-event-emitter\";\n\nconst DeviceVerification = DeviceInfo.DeviceVerification;\n\nconst defaultVerificationMethods = {\n    [ReciprocateQRCode.NAME]: ReciprocateQRCode,\n    [SASVerification.NAME]: SASVerification,\n\n    // These two can't be used for actual verification, but we do\n    // need to be able to define them here for the verification flows\n    // to start.\n    [SHOW_QR_CODE_METHOD]: IllegalMethod,\n    [SCAN_QR_CODE_METHOD]: IllegalMethod,\n};\n\n/**\n * verification method names\n */\n// legacy export identifier\nexport const verificationMethods = {\n    RECIPROCATE_QR_CODE: ReciprocateQRCode.NAME,\n    SAS: SASVerification.NAME,\n};\n\nexport type VerificationMethod = keyof typeof verificationMethods | string;\n\nexport function isCryptoAvailable(): boolean {\n    return Boolean(global.Olm);\n}\n\nconst MIN_FORCE_SESSION_INTERVAL_MS = 60 * 60 * 1000;\n\ninterface IInitOpts {\n    exportedOlmDevice?: IExportedDevice;\n    pickleKey?: string;\n}\n\nexport interface IBootstrapCrossSigningOpts {\n    setupNewCrossSigning?: boolean;\n    authUploadDeviceSigningKeys?(makeRequest: (authData: any) => {}): Promise<void>;\n}\n\n/* eslint-disable camelcase */\ninterface IRoomKey {\n    room_id: string;\n    algorithm: string;\n}\n\nexport interface IRoomKeyRequestBody extends IRoomKey {\n    session_id: string;\n    sender_key: string;\n}\n\nexport interface IMegolmSessionData {\n    [key: string]: any; // extensible\n    sender_key: string;\n    forwarding_curve25519_key_chain: string[];\n    sender_claimed_keys: Record<string, string>;\n    room_id: string;\n    session_id: string;\n    session_key: string;\n    algorithm?: string;\n    untrusted?: boolean;\n}\n/* eslint-enable camelcase */\n\ninterface IDeviceVerificationUpgrade {\n    devices: DeviceInfo[];\n    crossSigningInfo: CrossSigningInfo;\n}\n\nexport interface ICheckOwnCrossSigningTrustOpts {\n    allowPrivateKeyRequests?: boolean;\n}\n\n/**\n * @typedef {Object} module:crypto~OlmSessionResult\n * @property {module:crypto/deviceinfo} device  device info\n * @property {string?} sessionId base64 olm session id; null if no session\n *    could be established\n */\n\ninterface IUserOlmSession {\n    deviceIdKey: string;\n    sessions: {\n        sessionId: string;\n        hasReceivedMessage: boolean;\n    }[];\n}\n\ninterface ISyncDeviceLists {\n    changed: string[];\n    left: string[];\n}\n\nexport interface IRoomKeyRequestRecipient {\n    userId: string;\n    deviceId: string;\n}\n\ninterface ISignableObject {\n    signatures?: object;\n    unsigned?: object;\n}\n\nexport interface IEventDecryptionResult {\n    clearEvent: IClearEvent;\n    forwardingCurve25519KeyChain?: string[];\n    senderCurve25519Key?: string;\n    claimedEd25519Key?: string;\n    untrusted?: boolean;\n}\n\nexport interface IRequestsMap {\n    getRequest(event: MatrixEvent): VerificationRequest;\n    getRequestByChannel(channel: IVerificationChannel): VerificationRequest;\n    setRequest(event: MatrixEvent, request: VerificationRequest): void;\n    setRequestByChannel(channel: IVerificationChannel, request: VerificationRequest): void;\n}\n\nexport enum CryptoEvent {\n    DeviceVerificationChanged = \"deviceVerificationChanged\",\n    UserTrustStatusChanged = \"userTrustStatusChanged\",\n    UserCrossSigningUpdated = \"userCrossSigningUpdated\",\n    RoomKeyRequest = \"crypto.roomKeyRequest\",\n    RoomKeyRequestCancellation = \"crypto.roomKeyRequestCancellation\",\n    KeyBackupStatus = \"crypto.keyBackupStatus\",\n    KeyBackupFailed = \"crypto.keyBackupFailed\",\n    KeyBackupSessionsRemaining = \"crypto.keyBackupSessionsRemaining\",\n    KeySignatureUploadFailure = \"crypto.keySignatureUploadFailure\",\n    VerificationRequest = \"crypto.verification.request\",\n    Warning = \"crypto.warning\",\n    WillUpdateDevices = \"crypto.willUpdateDevices\",\n    DevicesUpdated = \"crypto.devicesUpdated\",\n    KeysChanged = \"crossSigning.keysChanged\",\n}\n\nexport type CryptoEventHandlerMap = {\n    [CryptoEvent.DeviceVerificationChanged]: (userId: string, deviceId: string, device: DeviceInfo) => void;\n    [CryptoEvent.UserTrustStatusChanged]: (userId: string, trustLevel: UserTrustLevel) => void;\n    [CryptoEvent.RoomKeyRequest]: (request: IncomingRoomKeyRequest) => void;\n    [CryptoEvent.RoomKeyRequestCancellation]: (request: IncomingRoomKeyRequestCancellation) => void;\n    [CryptoEvent.KeyBackupStatus]: (enabled: boolean) => void;\n    [CryptoEvent.KeyBackupFailed]: (errcode: string) => void;\n    [CryptoEvent.KeyBackupSessionsRemaining]: (remaining: number) => void;\n    [CryptoEvent.KeySignatureUploadFailure]: (\n        failures: IUploadKeySignaturesResponse[\"failures\"],\n        source: \"checkOwnCrossSigningTrust\" | \"afterCrossSigningLocalKeyChange\" | \"setDeviceVerification\",\n        upload: (opts: { shouldEmit: boolean }) => Promise<void>\n    ) => void;\n    [CryptoEvent.VerificationRequest]: (request: VerificationRequest<any>) => void;\n    [CryptoEvent.Warning]: (type: string) => void;\n    [CryptoEvent.KeysChanged]: (data: {}) => void;\n    [CryptoEvent.WillUpdateDevices]: (users: string[], initialFetch: boolean) => void;\n    [CryptoEvent.DevicesUpdated]: (users: string[], initialFetch: boolean) => void;\n    [CryptoEvent.UserCrossSigningUpdated]: (userId: string) => void;\n};\n\nexport class Crypto extends TypedEventEmitter<CryptoEvent, CryptoEventHandlerMap> {\n    /**\n     * @return {string} The version of Olm.\n     */\n    static getOlmVersion(): [number, number, number] {\n        return OlmDevice.getOlmVersion();\n    }\n\n    public readonly backupManager: BackupManager;\n    public readonly crossSigningInfo: CrossSigningInfo;\n    public readonly olmDevice: OlmDevice;\n    public readonly deviceList: DeviceList;\n    public readonly dehydrationManager: DehydrationManager;\n    public readonly secretStorage: SecretStorage;\n\n    private readonly reEmitter: TypedReEmitter<CryptoEvent, CryptoEventHandlerMap>;\n    private readonly verificationMethods: Map<VerificationMethod, typeof VerificationBase>;\n    public readonly supportedAlgorithms: string[];\n    private readonly outgoingRoomKeyRequestManager: OutgoingRoomKeyRequestManager;\n    private readonly toDeviceVerificationRequests: ToDeviceRequests;\n    public readonly inRoomVerificationRequests: InRoomRequests;\n\n    private trustCrossSignedDevices = true;\n    // the last time we did a check for the number of one-time-keys on the server.\n    private lastOneTimeKeyCheck: number = null;\n    private oneTimeKeyCheckInProgress = false;\n\n    // EncryptionAlgorithm instance for each room\n    private roomEncryptors: Record<string, EncryptionAlgorithm> = {};\n    // map from algorithm to DecryptionAlgorithm instance, for each room\n    private roomDecryptors: Record<string, Record<string, DecryptionAlgorithm>> = {};\n\n    private deviceKeys: Record<string, string> = {}; // type: key\n\n    private globalBlacklistUnverifiedDevices = false;\n    private globalErrorOnUnknownDevices = true;\n\n    // list of IncomingRoomKeyRequests/IncomingRoomKeyRequestCancellations\n    // we received in the current sync.\n    private receivedRoomKeyRequests: IncomingRoomKeyRequest[] = [];\n    private receivedRoomKeyRequestCancellations: IncomingRoomKeyRequestCancellation[] = [];\n    // true if we are currently processing received room key requests\n    private processingRoomKeyRequests = false;\n    // controls whether device tracking is delayed\n    // until calling encryptEvent or trackRoomDevices,\n    // or done immediately upon enabling room encryption.\n    private lazyLoadMembers = false;\n    // in case lazyLoadMembers is true,\n    // track if an initial tracking of all the room members\n    // has happened for a given room. This is delayed\n    // to avoid loading room members as long as possible.\n    private roomDeviceTrackingState: Record<string, Promise<void>> = {}; // roomId: Promise<void\n\n    // The timestamp of the last time we forced establishment\n    // of a new session for each device, in milliseconds.\n    // {\n    //     userId: {\n    //         deviceId: 1234567890000,\n    //     },\n    // }\n    private lastNewSessionForced: Record<string, Record<string, number>> = {};\n\n    // This flag will be unset whilst the client processes a sync response\n    // so that we don't start requesting keys until we've actually finished\n    // processing the response.\n    private sendKeyRequestsImmediately = false;\n\n    private oneTimeKeyCount: number;\n    private needsNewFallback: boolean;\n    private fallbackCleanup?: number; // setTimeout ID\n\n    /**\n     * Cryptography bits\n     *\n     * This module is internal to the js-sdk; the public API is via MatrixClient.\n     *\n     * @constructor\n     * @alias module:crypto\n     *\n     * @internal\n     *\n     * @param {MatrixClient} baseApis base matrix api interface\n     *\n     * @param {module:store/session/webstorage~WebStorageSessionStore} sessionStore\n     *    Store to be used for end-to-end crypto session data\n     *\n     * @param {string} userId The user ID for the local user\n     *\n     * @param {string} deviceId The identifier for this device.\n     *\n     * @param {Object} clientStore the MatrixClient data store.\n     *\n     * @param {module:crypto/store/base~CryptoStore} cryptoStore\n     *    storage for the crypto layer.\n     *\n     * @param {RoomList} roomList An initialised RoomList object\n     *\n     * @param {Array} verificationMethods Array of verification methods to use.\n     *    Each element can either be a string from MatrixClient.verificationMethods\n     *    or a class that implements a verification method.\n     */\n    constructor(\n        public readonly baseApis: MatrixClient,\n        public readonly sessionStore: SessionStore,\n        public readonly userId: string,\n        private readonly deviceId: string,\n        private readonly clientStore: IStore,\n        public readonly cryptoStore: CryptoStore,\n        private readonly roomList: RoomList,\n        verificationMethods: Array<keyof typeof defaultVerificationMethods | typeof VerificationBase>,\n    ) {\n        super();\n        this.reEmitter = new TypedReEmitter(this);\n\n        if (verificationMethods) {\n            this.verificationMethods = new Map();\n            for (const method of verificationMethods) {\n                if (typeof method === \"string\") {\n                    if (defaultVerificationMethods[method]) {\n                        this.verificationMethods.set(\n                            method,\n                            <typeof VerificationBase>defaultVerificationMethods[method],\n                        );\n                    }\n                } else if (method[\"NAME\"]) {\n                    this.verificationMethods.set(\n                        method[\"NAME\"],\n                        method as typeof VerificationBase,\n                    );\n                } else {\n                    logger.warn(`Excluding unknown verification method ${method}`);\n                }\n            }\n        } else {\n            this.verificationMethods =\n                new Map(Object.entries(defaultVerificationMethods)) as Map<VerificationMethod, typeof VerificationBase>;\n        }\n\n        this.backupManager = new BackupManager(baseApis, async () => {\n            // try to get key from cache\n            const cachedKey = await this.getSessionBackupPrivateKey();\n            if (cachedKey) {\n                return cachedKey;\n            }\n\n            // try to get key from secret storage\n            const storedKey = await this.getSecret(\"m.megolm_backup.v1\");\n\n            if (storedKey) {\n                // ensure that the key is in the right format.  If not, fix the key and\n                // store the fixed version\n                const fixedKey = fixBackupKey(storedKey);\n                if (fixedKey) {\n                    const [keyId] = await this.getSecretStorageKey();\n                    await this.storeSecret(\"m.megolm_backup.v1\", fixedKey, [keyId]);\n                }\n\n                return olmlib.decodeBase64(fixedKey || storedKey);\n            }\n\n            // try to get key from app\n            if (this.baseApis.cryptoCallbacks && this.baseApis.cryptoCallbacks.getBackupKey) {\n                return await this.baseApis.cryptoCallbacks.getBackupKey();\n            }\n\n            throw new Error(\"Unable to get private key\");\n        });\n\n        this.olmDevice = new OlmDevice(cryptoStore);\n        this.deviceList = new DeviceList(baseApis, cryptoStore, this.olmDevice);\n\n        // XXX: This isn't removed at any point, but then none of the event listeners\n        // this class sets seem to be removed at any point... :/\n        this.deviceList.on(CryptoEvent.UserCrossSigningUpdated, this.onDeviceListUserCrossSigningUpdated);\n        this.reEmitter.reEmit(this.deviceList, [CryptoEvent.DevicesUpdated, CryptoEvent.WillUpdateDevices]);\n\n        this.supportedAlgorithms = Object.keys(algorithms.DECRYPTION_CLASSES);\n\n        this.outgoingRoomKeyRequestManager = new OutgoingRoomKeyRequestManager(\n            baseApis, this.deviceId, this.cryptoStore,\n        );\n\n        this.toDeviceVerificationRequests = new ToDeviceRequests();\n        this.inRoomVerificationRequests = new InRoomRequests();\n\n        const cryptoCallbacks = this.baseApis.cryptoCallbacks || {};\n        const cacheCallbacks = createCryptoStoreCacheCallbacks(cryptoStore, this.olmDevice);\n\n        this.crossSigningInfo = new CrossSigningInfo(userId, cryptoCallbacks, cacheCallbacks);\n        // Yes, we pass the client twice here: see SecretStorage\n        this.secretStorage = new SecretStorage(baseApis as IAccountDataClient, cryptoCallbacks, baseApis);\n        this.dehydrationManager = new DehydrationManager(this);\n\n        // Assuming no app-supplied callback, default to getting from SSSS.\n        if (!cryptoCallbacks.getCrossSigningKey && cryptoCallbacks.getSecretStorageKey) {\n            cryptoCallbacks.getCrossSigningKey = async (type) => {\n                return CrossSigningInfo.getFromSecretStorage(type, this.secretStorage);\n            };\n        }\n    }\n\n    /**\n     * Initialise the crypto module so that it is ready for use\n     *\n     * Returns a promise which resolves once the crypto module is ready for use.\n     *\n     * @param {Object} opts keyword arguments.\n     * @param {string} opts.exportedOlmDevice (Optional) data from exported device\n     *     that must be re-created.\n     */\n    public async init({ exportedOlmDevice, pickleKey }: IInitOpts = {}): Promise<void> {\n        logger.log(\"Crypto: initialising Olm...\");\n        await global.Olm.init();\n        logger.log(exportedOlmDevice\n            ? \"Crypto: initialising Olm device from exported device...\"\n            : \"Crypto: initialising Olm device...\",\n        );\n        await this.olmDevice.init({ fromExportedDevice: exportedOlmDevice, pickleKey });\n        logger.log(\"Crypto: loading device list...\");\n        await this.deviceList.load();\n\n        // build our device keys: these will later be uploaded\n        this.deviceKeys[\"ed25519:\" + this.deviceId] = this.olmDevice.deviceEd25519Key;\n        this.deviceKeys[\"curve25519:\" + this.deviceId] = this.olmDevice.deviceCurve25519Key;\n\n        logger.log(\"Crypto: fetching own devices...\");\n        let myDevices = this.deviceList.getRawStoredDevicesForUser(this.userId);\n\n        if (!myDevices) {\n            myDevices = {};\n        }\n\n        if (!myDevices[this.deviceId]) {\n            // add our own deviceinfo to the cryptoStore\n            logger.log(\"Crypto: adding this device to the store...\");\n            const deviceInfo = {\n                keys: this.deviceKeys,\n                algorithms: this.supportedAlgorithms,\n                verified: DeviceVerification.VERIFIED,\n                known: true,\n            };\n\n            myDevices[this.deviceId] = deviceInfo;\n            this.deviceList.storeDevicesForUser(this.userId, myDevices);\n            this.deviceList.saveIfDirty();\n        }\n\n        await this.cryptoStore.doTxn(\n            'readonly', [IndexedDBCryptoStore.STORE_ACCOUNT],\n            (txn) => {\n                this.cryptoStore.getCrossSigningKeys(txn, (keys) => {\n                    // can be an empty object after resetting cross-signing keys, see storeTrustedSelfKeys\n                    if (keys && Object.keys(keys).length !== 0) {\n                        logger.log(\"Loaded cross-signing public keys from crypto store\");\n                        this.crossSigningInfo.setKeys(keys);\n                    }\n                });\n            },\n        );\n        // make sure we are keeping track of our own devices\n        // (this is important for key backups & things)\n        this.deviceList.startTrackingDeviceList(this.userId);\n\n        logger.log(\"Crypto: checking for key backup...\");\n        this.backupManager.checkAndStart();\n    }\n\n    /**\n     * Whether to trust a others users signatures of their devices.\n     * If false, devices will only be considered 'verified' if we have\n     * verified that device individually (effectively disabling cross-signing).\n     *\n     * Default: true\n     *\n     * @return {boolean} True if trusting cross-signed devices\n     */\n    public getCryptoTrustCrossSignedDevices(): boolean {\n        return this.trustCrossSignedDevices;\n    }\n\n    /**\n     * See getCryptoTrustCrossSignedDevices\n\n     * This may be set before initCrypto() is called to ensure no races occur.\n     *\n     * @param {boolean} val True to trust cross-signed devices\n     */\n    public setCryptoTrustCrossSignedDevices(val: boolean): void {\n        this.trustCrossSignedDevices = val;\n\n        for (const userId of this.deviceList.getKnownUserIds()) {\n            const devices = this.deviceList.getRawStoredDevicesForUser(userId);\n            for (const deviceId of Object.keys(devices)) {\n                const deviceTrust = this.checkDeviceTrust(userId, deviceId);\n                // If the device is locally verified then isVerified() is always true,\n                // so this will only have caused the value to change if the device is\n                // cross-signing verified but not locally verified\n                if (\n                    !deviceTrust.isLocallyVerified() &&\n                    deviceTrust.isCrossSigningVerified()\n                ) {\n                    const deviceObj = this.deviceList.getStoredDevice(userId, deviceId);\n                    this.emit(CryptoEvent.DeviceVerificationChanged, userId, deviceId, deviceObj);\n                }\n            }\n        }\n    }\n\n    /**\n     * Create a recovery key from a user-supplied passphrase.\n     *\n     * @param {string} password Passphrase string that can be entered by the user\n     *     when restoring the backup as an alternative to entering the recovery key.\n     *     Optional.\n     * @returns {Promise<Object>} Object with public key metadata, encoded private\n     *     recovery key which should be disposed of after displaying to the user,\n     *     and raw private key to avoid round tripping if needed.\n     */\n    public async createRecoveryKeyFromPassphrase(password?: string): Promise<IRecoveryKey> {\n        const decryption = new global.Olm.PkDecryption();\n        try {\n            const keyInfo: Partial<IRecoveryKey[\"keyInfo\"]> = {};\n            if (password) {\n                const derivation = await keyFromPassphrase(password);\n                keyInfo.passphrase = {\n                    algorithm: \"m.pbkdf2\",\n                    iterations: derivation.iterations,\n                    salt: derivation.salt,\n                };\n                keyInfo.pubkey = decryption.init_with_private_key(derivation.key);\n            } else {\n                keyInfo.pubkey = decryption.generate_key();\n            }\n            const privateKey = decryption.get_private_key();\n            const encodedPrivateKey = encodeRecoveryKey(privateKey);\n            return {\n                keyInfo: keyInfo as IRecoveryKey[\"keyInfo\"],\n                encodedPrivateKey,\n                privateKey,\n            };\n        } finally {\n            if (decryption) decryption.free();\n        }\n    }\n\n    /**\n     * Checks whether cross signing:\n     * - is enabled on this account and trusted by this device\n     * - has private keys either cached locally or stored in secret storage\n     *\n     * If this function returns false, bootstrapCrossSigning() can be used\n     * to fix things such that it returns true. That is to say, after\n     * bootstrapCrossSigning() completes successfully, this function should\n     * return true.\n     *\n     * The cross-signing API is currently UNSTABLE and may change without notice.\n     *\n     * @return {boolean} True if cross-signing is ready to be used on this device\n     */\n    public async isCrossSigningReady(): Promise<boolean> {\n        const publicKeysOnDevice = this.crossSigningInfo.getId();\n        const privateKeysExistSomewhere = (\n            await this.crossSigningInfo.isStoredInKeyCache() ||\n            await this.crossSigningInfo.isStoredInSecretStorage(this.secretStorage)\n        );\n\n        return !!(publicKeysOnDevice && privateKeysExistSomewhere);\n    }\n\n    /**\n     * Checks whether secret storage:\n     * - is enabled on this account\n     * - is storing cross-signing private keys\n     * - is storing session backup key (if enabled)\n     *\n     * If this function returns false, bootstrapSecretStorage() can be used\n     * to fix things such that it returns true. That is to say, after\n     * bootstrapSecretStorage() completes successfully, this function should\n     * return true.\n     *\n     * The Secure Secret Storage API is currently UNSTABLE and may change without notice.\n     *\n     * @return {boolean} True if secret storage is ready to be used on this device\n     */\n    public async isSecretStorageReady(): Promise<boolean> {\n        const secretStorageKeyInAccount = await this.secretStorage.hasKey();\n        const privateKeysInStorage = await this.crossSigningInfo.isStoredInSecretStorage(\n            this.secretStorage,\n        );\n        const sessionBackupInStorage = (\n            !this.backupManager.getKeyBackupEnabled() ||\n            await this.baseApis.isKeyBackupKeyStored()\n        );\n\n        return !!(\n            secretStorageKeyInAccount &&\n            privateKeysInStorage &&\n            sessionBackupInStorage\n        );\n    }\n\n    /**\n     * Bootstrap cross-signing by creating keys if needed. If everything is already\n     * set up, then no changes are made, so this is safe to run to ensure\n     * cross-signing is ready for use.\n     *\n     * This function:\n     * - creates new cross-signing keys if they are not found locally cached nor in\n     *   secret storage (if it has been setup)\n     *\n     * The cross-signing API is currently UNSTABLE and may change without notice.\n     *\n     * @param {function} opts.authUploadDeviceSigningKeys Function\n     * called to await an interactive auth flow when uploading device signing keys.\n     * @param {boolean} [opts.setupNewCrossSigning] Optional. Reset even if keys\n     * already exist.\n     * Args:\n     *     {function} A function that makes the request requiring auth. Receives the\n     *     auth data as an object. Can be called multiple times, first with an empty\n     *     authDict, to obtain the flows.\n     */\n    public async bootstrapCrossSigning({\n        authUploadDeviceSigningKeys,\n        setupNewCrossSigning,\n    }: IBootstrapCrossSigningOpts = {}): Promise<void> {\n        logger.log(\"Bootstrapping cross-signing\");\n\n        const delegateCryptoCallbacks = this.baseApis.cryptoCallbacks;\n        const builder = new EncryptionSetupBuilder(\n            this.baseApis.store.accountData,\n            delegateCryptoCallbacks,\n        );\n        const crossSigningInfo = new CrossSigningInfo(\n            this.userId,\n            builder.crossSigningCallbacks,\n            builder.crossSigningCallbacks,\n        );\n\n        // Reset the cross-signing keys\n        const resetCrossSigning = async () => {\n            crossSigningInfo.resetKeys();\n            // Sign master key with device key\n            await this.signObject(crossSigningInfo.keys.master);\n\n            // Store auth flow helper function, as we need to call it when uploading\n            // to ensure we handle auth errors properly.\n            builder.addCrossSigningKeys(authUploadDeviceSigningKeys, crossSigningInfo.keys);\n\n            // Cross-sign own device\n            const device = this.deviceList.getStoredDevice(this.userId, this.deviceId);\n            const deviceSignature = await crossSigningInfo.signDevice(this.userId, device) as ISignedKey;\n            builder.addKeySignature(this.userId, this.deviceId, deviceSignature);\n\n            // Sign message key backup with cross-signing master key\n            if (this.backupManager.backupInfo) {\n                await crossSigningInfo.signObject(\n                    this.backupManager.backupInfo.auth_data, \"master\",\n                );\n                builder.addSessionBackup(this.backupManager.backupInfo);\n            }\n        };\n\n        const publicKeysOnDevice = this.crossSigningInfo.getId();\n        const privateKeysInCache = await this.crossSigningInfo.isStoredInKeyCache();\n        const privateKeysInStorage = await this.crossSigningInfo.isStoredInSecretStorage(\n            this.secretStorage,\n        );\n        const privateKeysExistSomewhere = (\n            privateKeysInCache ||\n            privateKeysInStorage\n        );\n\n        // Log all relevant state for easier parsing of debug logs.\n        logger.log({\n            setupNewCrossSigning,\n            publicKeysOnDevice,\n            privateKeysInCache,\n            privateKeysInStorage,\n            privateKeysExistSomewhere,\n        });\n\n        if (!privateKeysExistSomewhere || setupNewCrossSigning) {\n            logger.log(\n                \"Cross-signing private keys not found locally or in secret storage, \" +\n                \"creating new keys\",\n            );\n            // If a user has multiple devices, it important to only call bootstrap\n            // as part of some UI flow (and not silently during startup), as they\n            // may have setup cross-signing on a platform which has not saved keys\n            // to secret storage, and this would reset them. In such a case, you\n            // should prompt the user to verify any existing devices first (and\n            // request private keys from those devices) before calling bootstrap.\n            await resetCrossSigning();\n        } else if (publicKeysOnDevice && privateKeysInCache) {\n            logger.log(\n                \"Cross-signing public keys trusted and private keys found locally\",\n            );\n        } else if (privateKeysInStorage) {\n            logger.log(\n                \"Cross-signing private keys not found locally, but they are available \" +\n                \"in secret storage, reading storage and caching locally\",\n            );\n            await this.checkOwnCrossSigningTrust({\n                allowPrivateKeyRequests: true,\n            });\n        }\n\n        // Assuming no app-supplied callback, default to storing new private keys in\n        // secret storage if it exists. If it does not, it is assumed this will be\n        // done as part of setting up secret storage later.\n        const crossSigningPrivateKeys = builder.crossSigningCallbacks.privateKeys;\n        if (\n            crossSigningPrivateKeys.size &&\n            !this.baseApis.cryptoCallbacks.saveCrossSigningKeys\n        ) {\n            const secretStorage = new SecretStorage(\n                builder.accountDataClientAdapter,\n                builder.ssssCryptoCallbacks);\n            if (await secretStorage.hasKey()) {\n                logger.log(\"Storing new cross-signing private keys in secret storage\");\n                // This is writing to in-memory account data in\n                // builder.accountDataClientAdapter so won't fail\n                await CrossSigningInfo.storeInSecretStorage(\n                    crossSigningPrivateKeys,\n                    secretStorage,\n                );\n            }\n        }\n\n        const operation = builder.buildOperation();\n        await operation.apply(this);\n        // This persists private keys and public keys as trusted,\n        // only do this if apply succeeded for now as retry isn't in place yet\n        await builder.persist(this);\n\n        logger.log(\"Cross-signing ready\");\n    }\n\n    /**\n     * Bootstrap Secure Secret Storage if needed by creating a default key. If everything is\n     * already set up, then no changes are made, so this is safe to run to ensure secret\n     * storage is ready for use.\n     *\n     * This function\n     * - creates a new Secure Secret Storage key if no default key exists\n     *   - if a key backup exists, it is migrated to store the key in the Secret\n     *     Storage\n     * - creates a backup if none exists, and one is requested\n     * - migrates Secure Secret Storage to use the latest algorithm, if an outdated\n     *   algorithm is found\n     *\n     * The Secure Secret Storage API is currently UNSTABLE and may change without notice.\n     *\n     * @param {function} [opts.createSecretStorageKey] Optional. Function\n     * called to await a secret storage key creation flow.\n     * Returns:\n     *     {Promise<Object>} Object with public key metadata, encoded private\n     *     recovery key which should be disposed of after displaying to the user,\n     *     and raw private key to avoid round tripping if needed.\n     * @param {object} [opts.keyBackupInfo] The current key backup object. If passed,\n     * the passphrase and recovery key from this backup will be used.\n     * @param {boolean} [opts.setupNewKeyBackup] If true, a new key backup version will be\n     * created and the private key stored in the new SSSS store. Ignored if keyBackupInfo\n     * is supplied.\n     * @param {boolean} [opts.setupNewSecretStorage] Optional. Reset even if keys already exist.\n     * @param {func} [opts.getKeyBackupPassphrase] Optional. Function called to get the user's\n     *     current key backup passphrase. Should return a promise that resolves with a Buffer\n     *     containing the key, or rejects if the key cannot be obtained.\n     * Returns:\n     *     {Promise} A promise which resolves to key creation data for\n     *     SecretStorage#addKey: an object with `passphrase` etc fields.\n     */\n    // TODO this does not resolve with what it says it does\n    public async bootstrapSecretStorage({\n        createSecretStorageKey = async () => ({} as IRecoveryKey),\n        keyBackupInfo,\n        setupNewKeyBackup,\n        setupNewSecretStorage,\n        getKeyBackupPassphrase,\n    }: ICreateSecretStorageOpts = {}) {\n        logger.log(\"Bootstrapping Secure Secret Storage\");\n        const delegateCryptoCallbacks = this.baseApis.cryptoCallbacks;\n        const builder = new EncryptionSetupBuilder(\n            this.baseApis.store.accountData,\n            delegateCryptoCallbacks,\n        );\n        const secretStorage = new SecretStorage(\n            builder.accountDataClientAdapter,\n            builder.ssssCryptoCallbacks,\n        );\n\n        // the ID of the new SSSS key, if we create one\n        let newKeyId = null;\n\n        // create a new SSSS key and set it as default\n        const createSSSS = async (opts: IAddSecretStorageKeyOpts, privateKey: Uint8Array) => {\n            if (privateKey) {\n                opts.key = privateKey;\n            }\n\n            const { keyId, keyInfo } = await secretStorage.addKey(SECRET_STORAGE_ALGORITHM_V1_AES, opts);\n\n            if (privateKey) {\n                // make the private key available to encrypt 4S secrets\n                builder.ssssCryptoCallbacks.addPrivateKey(keyId, keyInfo, privateKey);\n            }\n\n            await secretStorage.setDefaultKeyId(keyId);\n            return keyId;\n        };\n\n        const ensureCanCheckPassphrase = async (keyId: string, keyInfo: ISecretStorageKeyInfo) => {\n            if (!keyInfo.mac) {\n                const key = await this.baseApis.cryptoCallbacks.getSecretStorageKey(\n                    { keys: { [keyId]: keyInfo } }, \"\",\n                );\n                if (key) {\n                    const privateKey = key[1];\n                    builder.ssssCryptoCallbacks.addPrivateKey(keyId, keyInfo, privateKey);\n                    const { iv, mac } = await calculateKeyCheck(privateKey);\n                    keyInfo.iv = iv;\n                    keyInfo.mac = mac;\n\n                    await builder.setAccountData(\n                        `m.secret_storage.key.${keyId}`, keyInfo,\n                    );\n                }\n            }\n        };\n\n        const signKeyBackupWithCrossSigning = async (keyBackupAuthData: IKeyBackupInfo[\"auth_data\"]) => {\n            if (\n                this.crossSigningInfo.getId() &&\n                await this.crossSigningInfo.isStoredInKeyCache(\"master\")\n            ) {\n                try {\n                    logger.log(\"Adding cross-signing signature to key backup\");\n                    await this.crossSigningInfo.signObject(keyBackupAuthData, \"master\");\n                } catch (e) {\n                    // This step is not critical (just helpful), so we catch here\n                    // and continue if it fails.\n                    logger.error(\"Signing key backup with cross-signing keys failed\", e);\n                }\n            } else {\n                logger.warn(\n                    \"Cross-signing keys not available, skipping signature on key backup\",\n                );\n            }\n        };\n\n        const oldSSSSKey = await this.getSecretStorageKey();\n        const [oldKeyId, oldKeyInfo] = oldSSSSKey || [null, null];\n        const storageExists = (\n            !setupNewSecretStorage &&\n            oldKeyInfo &&\n            oldKeyInfo.algorithm === SECRET_STORAGE_ALGORITHM_V1_AES\n        );\n\n        // Log all relevant state for easier parsing of debug logs.\n        logger.log({\n            keyBackupInfo,\n            setupNewKeyBackup,\n            setupNewSecretStorage,\n            storageExists,\n            oldKeyInfo,\n        });\n\n        if (!storageExists && !keyBackupInfo) {\n            // either we don't have anything, or we've been asked to restart\n            // from scratch\n            logger.log(\n                \"Secret storage does not exist, creating new storage key\",\n            );\n\n            // if we already have a usable default SSSS key and aren't resetting\n            // SSSS just use it. otherwise, create a new one\n            // Note: we leave the old SSSS key in place: there could be other\n            // secrets using it, in theory. We could move them to the new key but a)\n            // that would mean we'd need to prompt for the old passphrase, and b)\n            // it's not clear that would be the right thing to do anyway.\n            const { keyInfo = {} as IAddSecretStorageKeyOpts, privateKey } = await createSecretStorageKey();\n            newKeyId = await createSSSS(keyInfo, privateKey);\n        } else if (!storageExists && keyBackupInfo) {\n            // we have an existing backup, but no SSSS\n            logger.log(\"Secret storage does not exist, using key backup key\");\n\n            // if we have the backup key already cached, use it; otherwise use the\n            // callback to prompt for the key\n            const backupKey = await this.getSessionBackupPrivateKey() || await getKeyBackupPassphrase();\n\n            // create a new SSSS key and use the backup key as the new SSSS key\n            const opts = {} as IAddSecretStorageKeyOpts;\n\n            if (\n                keyBackupInfo.auth_data.private_key_salt &&\n                keyBackupInfo.auth_data.private_key_iterations\n            ) {\n                // FIXME: ???\n                opts.passphrase = {\n                    algorithm: \"m.pbkdf2\",\n                    iterations: keyBackupInfo.auth_data.private_key_iterations,\n                    salt: keyBackupInfo.auth_data.private_key_salt,\n                    bits: 256,\n                };\n            }\n\n            newKeyId = await createSSSS(opts, backupKey);\n\n            // store the backup key in secret storage\n            await secretStorage.store(\"m.megolm_backup.v1\", olmlib.encodeBase64(backupKey), [newKeyId]);\n\n            // The backup is trusted because the user provided the private key.\n            // Sign the backup with the cross-signing key so the key backup can\n            // be trusted via cross-signing.\n            await signKeyBackupWithCrossSigning(keyBackupInfo.auth_data);\n\n            builder.addSessionBackup(keyBackupInfo);\n        } else {\n            // 4S is already set up\n            logger.log(\"Secret storage exists\");\n\n            if (oldKeyInfo && oldKeyInfo.algorithm === SECRET_STORAGE_ALGORITHM_V1_AES) {\n                // make sure that the default key has the information needed to\n                // check the passphrase\n                await ensureCanCheckPassphrase(oldKeyId, oldKeyInfo);\n            }\n        }\n\n        // If we have cross-signing private keys cached, store them in secret\n        // storage if they are not there already.\n        if (\n            !this.baseApis.cryptoCallbacks.saveCrossSigningKeys &&\n            await this.isCrossSigningReady() &&\n            (newKeyId || !await this.crossSigningInfo.isStoredInSecretStorage(secretStorage))\n        ) {\n            logger.log(\"Copying cross-signing private keys from cache to secret storage\");\n            const crossSigningPrivateKeys =\n                await this.crossSigningInfo.getCrossSigningKeysFromCache();\n            // This is writing to in-memory account data in\n            // builder.accountDataClientAdapter so won't fail\n            await CrossSigningInfo.storeInSecretStorage(crossSigningPrivateKeys, secretStorage);\n        }\n\n        if (setupNewKeyBackup && !keyBackupInfo) {\n            logger.log(\"Creating new message key backup version\");\n            const info = await this.baseApis.prepareKeyBackupVersion(\n                null /* random key */,\n                // don't write to secret storage, as it will write to this.secretStorage.\n                // Here, we want to capture all the side-effects of bootstrapping,\n                // and want to write to the local secretStorage object\n                { secureSecretStorage: false },\n            );\n            // write the key ourselves to 4S\n            const privateKey = decodeRecoveryKey(info.recovery_key);\n            await secretStorage.store(\"m.megolm_backup.v1\", olmlib.encodeBase64(privateKey));\n\n            // create keyBackupInfo object to add to builder\n            const data: IKeyBackupInfo = {\n                algorithm: info.algorithm,\n                auth_data: info.auth_data,\n            };\n\n            // Sign with cross-signing master key\n            await signKeyBackupWithCrossSigning(data.auth_data);\n\n            // sign with the device fingerprint\n            await this.signObject(data.auth_data);\n\n            builder.addSessionBackup(data);\n        }\n\n        // Cache the session backup key\n        const sessionBackupKey = await secretStorage.get('m.megolm_backup.v1');\n        if (sessionBackupKey) {\n            logger.info(\"Got session backup key from secret storage: caching\");\n            // fix up the backup key if it's in the wrong format, and replace\n            // in secret storage\n            const fixedBackupKey = fixBackupKey(sessionBackupKey);\n            if (fixedBackupKey) {\n                await secretStorage.store(\"m.megolm_backup.v1\",\n                    fixedBackupKey, [newKeyId || oldKeyId],\n                );\n            }\n            const decodedBackupKey = new Uint8Array(olmlib.decodeBase64(\n                fixedBackupKey || sessionBackupKey,\n            ));\n            await builder.addSessionBackupPrivateKeyToCache(decodedBackupKey);\n        } else if (this.backupManager.getKeyBackupEnabled()) {\n            // key backup is enabled but we don't have a session backup key in SSSS: see if we have one in\n            // the cache or the user can provide one, and if so, write it to SSSS\n            const backupKey = await this.getSessionBackupPrivateKey() || await getKeyBackupPassphrase();\n            if (!backupKey) {\n                // This will require user intervention to recover from since we don't have the key\n                // backup key anywhere. The user should probably just set up a new key backup and\n                // the key for the new backup will be stored. If we hit this scenario in the wild\n                // with any frequency, we should do more than just log an error.\n                logger.error(\"Key backup is enabled but couldn't get key backup key!\");\n                return;\n            }\n            logger.info(\"Got session backup key from cache/user that wasn't in SSSS: saving to SSSS\");\n            await secretStorage.store(\"m.megolm_backup.v1\", olmlib.encodeBase64(backupKey));\n        }\n\n        const operation = builder.buildOperation();\n        await operation.apply(this);\n        // this persists private keys and public keys as trusted,\n        // only do this if apply succeeded for now as retry isn't in place yet\n        await builder.persist(this);\n\n        logger.log(\"Secure Secret Storage ready\");\n    }\n\n    public addSecretStorageKey(\n        algorithm: string,\n        opts: IAddSecretStorageKeyOpts,\n        keyID: string,\n    ): Promise<SecretStorageKeyObject> {\n        return this.secretStorage.addKey(algorithm, opts, keyID);\n    }\n\n    public hasSecretStorageKey(keyID: string): Promise<boolean> {\n        return this.secretStorage.hasKey(keyID);\n    }\n\n    public getSecretStorageKey(keyID?: string): Promise<SecretStorageKeyTuple> {\n        return this.secretStorage.getKey(keyID);\n    }\n\n    public storeSecret(name: string, secret: string, keys?: string[]): Promise<void> {\n        return this.secretStorage.store(name, secret, keys);\n    }\n\n    public getSecret(name: string): Promise<string> {\n        return this.secretStorage.get(name);\n    }\n\n    public isSecretStored(\n        name: string,\n        checkKey?: boolean,\n    ): Promise<Record<string, ISecretStorageKeyInfo> | null> {\n        return this.secretStorage.isStored(name, checkKey);\n    }\n\n    public requestSecret(name: string, devices: string[]): ISecretRequest {\n        if (!devices) {\n            devices = Object.keys(this.deviceList.getRawStoredDevicesForUser(this.userId));\n        }\n        return this.secretStorage.request(name, devices);\n    }\n\n    public getDefaultSecretStorageKeyId(): Promise<string | null> {\n        return this.secretStorage.getDefaultKeyId();\n    }\n\n    public setDefaultSecretStorageKeyId(k: string): Promise<void> {\n        return this.secretStorage.setDefaultKeyId(k);\n    }\n\n    public checkSecretStorageKey(key: Uint8Array, info: ISecretStorageKeyInfo): Promise<boolean> {\n        return this.secretStorage.checkKey(key, info);\n    }\n\n    /**\n     * Checks that a given secret storage private key matches a given public key.\n     * This can be used by the getSecretStorageKey callback to verify that the\n     * private key it is about to supply is the one that was requested.\n     *\n     * @param {Uint8Array} privateKey The private key\n     * @param {string} expectedPublicKey The public key\n     * @returns {boolean} true if the key matches, otherwise false\n     */\n    public checkSecretStoragePrivateKey(privateKey: Uint8Array, expectedPublicKey: string): boolean {\n        let decryption = null;\n        try {\n            decryption = new global.Olm.PkDecryption();\n            const gotPubkey = decryption.init_with_private_key(privateKey);\n            // make sure it agrees with the given pubkey\n            return gotPubkey === expectedPublicKey;\n        } finally {\n            if (decryption) decryption.free();\n        }\n    }\n\n    /**\n     * Fetches the backup private key, if cached\n     * @returns {Promise} the key, if any, or null\n     */\n    public async getSessionBackupPrivateKey(): Promise<Uint8Array | null> {\n        let key = await new Promise<any>((resolve) => { // TODO types\n            this.cryptoStore.doTxn(\n                'readonly',\n                [IndexedDBCryptoStore.STORE_ACCOUNT],\n                (txn) => {\n                    this.cryptoStore.getSecretStorePrivateKey(\n                        txn,\n                        resolve,\n                        \"m.megolm_backup.v1\",\n                    );\n                },\n            );\n        });\n\n        // make sure we have a Uint8Array, rather than a string\n        if (key && typeof key === \"string\") {\n            key = new Uint8Array(olmlib.decodeBase64(fixBackupKey(key) || key));\n            await this.storeSessionBackupPrivateKey(key);\n        }\n        if (key && key.ciphertext) {\n            const pickleKey = Buffer.from(this.olmDevice.pickleKey);\n            const decrypted = await decryptAES(key, pickleKey, \"m.megolm_backup.v1\");\n            key = olmlib.decodeBase64(decrypted);\n        }\n        return key;\n    }\n\n    /**\n     * Stores the session backup key to the cache\n     * @param {Uint8Array} key the private key\n     * @returns {Promise} so you can catch failures\n     */\n    public async storeSessionBackupPrivateKey(key: ArrayLike<number>): Promise<void> {\n        if (!(key instanceof Uint8Array)) {\n            throw new Error(`storeSessionBackupPrivateKey expects Uint8Array, got ${key}`);\n        }\n        const pickleKey = Buffer.from(this.olmDevice.pickleKey);\n        const encryptedKey = await encryptAES(olmlib.encodeBase64(key), pickleKey, \"m.megolm_backup.v1\");\n        return this.cryptoStore.doTxn(\n            'readwrite',\n            [IndexedDBCryptoStore.STORE_ACCOUNT],\n            (txn) => {\n                this.cryptoStore.storeSecretStorePrivateKey(txn, \"m.megolm_backup.v1\", encryptedKey);\n            },\n        );\n    }\n\n    /**\n     * Checks that a given cross-signing private key matches a given public key.\n     * This can be used by the getCrossSigningKey callback to verify that the\n     * private key it is about to supply is the one that was requested.\n     *\n     * @param {Uint8Array} privateKey The private key\n     * @param {string} expectedPublicKey The public key\n     * @returns {boolean} true if the key matches, otherwise false\n     */\n    public checkCrossSigningPrivateKey(privateKey: Uint8Array, expectedPublicKey: string): boolean {\n        let signing = null;\n        try {\n            signing = new global.Olm.PkSigning();\n            const gotPubkey = signing.init_with_seed(privateKey);\n            // make sure it agrees with the given pubkey\n            return gotPubkey === expectedPublicKey;\n        } finally {\n            if (signing) signing.free();\n        }\n    }\n\n    /**\n     * Run various follow-up actions after cross-signing keys have changed locally\n     * (either by resetting the keys for the account or by getting them from secret\n     * storage), such as signing the current device, upgrading device\n     * verifications, etc.\n     */\n    private async afterCrossSigningLocalKeyChange(): Promise<void> {\n        logger.info(\"Starting cross-signing key change post-processing\");\n\n        // sign the current device with the new key, and upload to the server\n        const device = this.deviceList.getStoredDevice(this.userId, this.deviceId);\n        const signedDevice = await this.crossSigningInfo.signDevice(this.userId, device);\n        logger.info(`Starting background key sig upload for ${this.deviceId}`);\n\n        const upload = ({ shouldEmit = false }) => {\n            return this.baseApis.uploadKeySignatures({\n                [this.userId]: {\n                    [this.deviceId]: signedDevice,\n                },\n            }).then((response) => {\n                const { failures } = response || {};\n                if (Object.keys(failures || []).length > 0) {\n                    if (shouldEmit) {\n                        this.baseApis.emit(\n                            CryptoEvent.KeySignatureUploadFailure,\n                            failures,\n                            \"afterCrossSigningLocalKeyChange\",\n                            upload, // continuation\n                        );\n                    }\n                    throw new KeySignatureUploadError(\"Key upload failed\", { failures });\n                }\n                logger.info(`Finished background key sig upload for ${this.deviceId}`);\n            }).catch(e => {\n                logger.error(\n                    `Error during background key sig upload for ${this.deviceId}`,\n                    e,\n                );\n            });\n        };\n        upload({ shouldEmit: true });\n\n        const shouldUpgradeCb = (\n            this.baseApis.cryptoCallbacks.shouldUpgradeDeviceVerifications\n        );\n        if (shouldUpgradeCb) {\n            logger.info(\"Starting device verification upgrade\");\n\n            // Check all users for signatures if upgrade callback present\n            // FIXME: do this in batches\n            const users: Record<string, IDeviceVerificationUpgrade> = {};\n            for (const [userId, crossSigningInfo]\n                of Object.entries(this.deviceList.crossSigningInfo)) {\n                const upgradeInfo = await this.checkForDeviceVerificationUpgrade(\n                    userId, CrossSigningInfo.fromStorage(crossSigningInfo, userId),\n                );\n                if (upgradeInfo) {\n                    users[userId] = upgradeInfo;\n                }\n            }\n\n            if (Object.keys(users).length > 0) {\n                logger.info(`Found ${Object.keys(users).length} verif users to upgrade`);\n                try {\n                    const usersToUpgrade = await shouldUpgradeCb({ users: users });\n                    if (usersToUpgrade) {\n                        for (const userId of usersToUpgrade) {\n                            if (userId in users) {\n                                await this.baseApis.setDeviceVerified(\n                                    userId, users[userId].crossSigningInfo.getId(),\n                                );\n                            }\n                        }\n                    }\n                } catch (e) {\n                    logger.log(\n                        \"shouldUpgradeDeviceVerifications threw an error: not upgrading\", e,\n                    );\n                }\n            }\n\n            logger.info(\"Finished device verification upgrade\");\n        }\n\n        logger.info(\"Finished cross-signing key change post-processing\");\n    }\n\n    /**\n     * Check if a user's cross-signing key is a candidate for upgrading from device\n     * verification.\n     *\n     * @param {string} userId the user whose cross-signing information is to be checked\n     * @param {object} crossSigningInfo the cross-signing information to check\n     */\n    private async checkForDeviceVerificationUpgrade(\n        userId: string,\n        crossSigningInfo: CrossSigningInfo,\n    ): Promise<IDeviceVerificationUpgrade> {\n        // only upgrade if this is the first cross-signing key that we've seen for\n        // them, and if their cross-signing key isn't already verified\n        const trustLevel = this.crossSigningInfo.checkUserTrust(crossSigningInfo);\n        if (crossSigningInfo.firstUse && !trustLevel.isVerified()) {\n            const devices = this.deviceList.getRawStoredDevicesForUser(userId);\n            const deviceIds = await this.checkForValidDeviceSignature(\n                userId, crossSigningInfo.keys.master, devices,\n            );\n            if (deviceIds.length) {\n                return {\n                    devices: deviceIds.map(\n                        deviceId => DeviceInfo.fromStorage(devices[deviceId], deviceId),\n                    ),\n                    crossSigningInfo,\n                };\n            }\n        }\n    }\n\n    /**\n     * Check if the cross-signing key is signed by a verified device.\n     *\n     * @param {string} userId the user ID whose key is being checked\n     * @param {object} key the key that is being checked\n     * @param {object} devices the user's devices.  Should be a map from device ID\n     *     to device info\n     */\n    private async checkForValidDeviceSignature(\n        userId: string,\n        key: ICrossSigningKey,\n        devices: Record<string, IDevice>,\n    ): Promise<string[]> {\n        const deviceIds: string[] = [];\n        if (devices && key.signatures && key.signatures[userId]) {\n            for (const signame of Object.keys(key.signatures[userId])) {\n                const [, deviceId] = signame.split(':', 2);\n                if (deviceId in devices\n                    && devices[deviceId].verified === DeviceVerification.VERIFIED) {\n                    try {\n                        await olmlib.verifySignature(\n                            this.olmDevice,\n                            key,\n                            userId,\n                            deviceId,\n                            devices[deviceId].keys[signame],\n                        );\n                        deviceIds.push(deviceId);\n                    } catch (e) {}\n                }\n            }\n        }\n        return deviceIds;\n    }\n\n    /**\n     * Get the user's cross-signing key ID.\n     *\n     * @param {string} [type=master] The type of key to get the ID of.  One of\n     *     \"master\", \"self_signing\", or \"user_signing\".  Defaults to \"master\".\n     *\n     * @returns {string} the key ID\n     */\n    public getCrossSigningId(type: string): string {\n        return this.crossSigningInfo.getId(type);\n    }\n\n    /**\n     * Get the cross signing information for a given user.\n     *\n     * @param {string} userId the user ID to get the cross-signing info for.\n     *\n     * @returns {CrossSigningInfo} the cross signing information for the user.\n     */\n    public getStoredCrossSigningForUser(userId: string): CrossSigningInfo {\n        return this.deviceList.getStoredCrossSigningForUser(userId);\n    }\n\n    /**\n     * Check whether a given user is trusted.\n     *\n     * @param {string} userId The ID of the user to check.\n     *\n     * @returns {UserTrustLevel}\n     */\n    public checkUserTrust(userId: string): UserTrustLevel {\n        const userCrossSigning = this.deviceList.getStoredCrossSigningForUser(userId);\n        if (!userCrossSigning) {\n            return new UserTrustLevel(false, false, false);\n        }\n        return this.crossSigningInfo.checkUserTrust(userCrossSigning);\n    }\n\n    /**\n     * Check whether a given device is trusted.\n     *\n     * @param {string} userId The ID of the user whose devices is to be checked.\n     * @param {string} deviceId The ID of the device to check\n     *\n     * @returns {DeviceTrustLevel}\n     */\n    public checkDeviceTrust(userId: string, deviceId: string): DeviceTrustLevel {\n        const device = this.deviceList.getStoredDevice(userId, deviceId);\n        return this.checkDeviceInfoTrust(userId, device);\n    }\n\n    /**\n     * Check whether a given deviceinfo is trusted.\n     *\n     * @param {string} userId The ID of the user whose devices is to be checked.\n     * @param {module:crypto/deviceinfo?} device The device info object to check\n     *\n     * @returns {DeviceTrustLevel}\n     */\n    public checkDeviceInfoTrust(userId: string, device: DeviceInfo): DeviceTrustLevel {\n        const trustedLocally = !!(device && device.isVerified());\n\n        const userCrossSigning = this.deviceList.getStoredCrossSigningForUser(userId);\n        if (device && userCrossSigning) {\n            // The trustCrossSignedDevices only affects trust of other people's cross-signing\n            // signatures\n            const trustCrossSig = this.trustCrossSignedDevices || userId === this.userId;\n            return this.crossSigningInfo.checkDeviceTrust(\n                userCrossSigning, device, trustedLocally, trustCrossSig,\n            );\n        } else {\n            return new DeviceTrustLevel(false, false, trustedLocally, false);\n        }\n    }\n\n    /*\n     * Event handler for DeviceList's userNewDevices event\n     */\n    private onDeviceListUserCrossSigningUpdated = async (userId: string) => {\n        if (userId === this.userId) {\n            // An update to our own cross-signing key.\n            // Get the new key first:\n            const newCrossSigning = this.deviceList.getStoredCrossSigningForUser(userId);\n            const seenPubkey = newCrossSigning ? newCrossSigning.getId() : null;\n            const currentPubkey = this.crossSigningInfo.getId();\n            const changed = currentPubkey !== seenPubkey;\n\n            if (currentPubkey && seenPubkey && !changed) {\n                // If it's not changed, just make sure everything is up to date\n                await this.checkOwnCrossSigningTrust();\n            } else {\n                // We'll now be in a state where cross-signing on the account is not trusted\n                // because our locally stored cross-signing keys will not match the ones\n                // on the server for our account. So we clear our own stored cross-signing keys,\n                // effectively disabling cross-signing until the user gets verified by the device\n                // that reset the keys\n                this.storeTrustedSelfKeys(null);\n                // emit cross-signing has been disabled\n                this.emit(CryptoEvent.KeysChanged, {});\n                // as the trust for our own user has changed,\n                // also emit an event for this\n                this.emit(CryptoEvent.UserTrustStatusChanged, this.userId, this.checkUserTrust(userId));\n            }\n        } else {\n            await this.checkDeviceVerifications(userId);\n\n            // Update verified before latch using the current state and save the new\n            // latch value in the device list store.\n            const crossSigning = this.deviceList.getStoredCrossSigningForUser(userId);\n            if (crossSigning) {\n                crossSigning.updateCrossSigningVerifiedBefore(\n                    this.checkUserTrust(userId).isCrossSigningVerified(),\n                );\n                this.deviceList.setRawStoredCrossSigningForUser(userId, crossSigning.toStorage());\n            }\n\n            this.emit(CryptoEvent.UserTrustStatusChanged, userId, this.checkUserTrust(userId));\n        }\n    };\n\n    /**\n     * Check the copy of our cross-signing key that we have in the device list and\n     * see if we can get the private key. If so, mark it as trusted.\n     */\n    async checkOwnCrossSigningTrust({\n        allowPrivateKeyRequests = false,\n    }: ICheckOwnCrossSigningTrustOpts = {}): Promise<void> {\n        const userId = this.userId;\n\n        // Before proceeding, ensure our cross-signing public keys have been\n        // downloaded via the device list.\n        await this.downloadKeys([this.userId]);\n\n        // Also check which private keys are locally cached.\n        const crossSigningPrivateKeys =\n            await this.crossSigningInfo.getCrossSigningKeysFromCache();\n\n        // If we see an update to our own master key, check it against the master\n        // key we have and, if it matches, mark it as verified\n\n        // First, get the new cross-signing info\n        const newCrossSigning = this.deviceList.getStoredCrossSigningForUser(userId);\n        if (!newCrossSigning) {\n            logger.error(\n                \"Got cross-signing update event for user \" + userId +\n                \" but no new cross-signing information found!\",\n            );\n            return;\n        }\n\n        const seenPubkey = newCrossSigning.getId();\n        const masterChanged = this.crossSigningInfo.getId() !== seenPubkey;\n        const masterExistsNotLocallyCached =\n            newCrossSigning.getId() && !crossSigningPrivateKeys.has(\"master\");\n        if (masterChanged) {\n            logger.info(\"Got new master public key\", seenPubkey);\n        }\n        if (\n            allowPrivateKeyRequests &&\n            (masterChanged || masterExistsNotLocallyCached)\n        ) {\n            logger.info(\"Attempting to retrieve cross-signing master private key\");\n            let signing = null;\n            // It's important for control flow that we leave any errors alone for\n            // higher levels to handle so that e.g. cancelling access properly\n            // aborts any larger operation as well.\n            try {\n                const ret = await this.crossSigningInfo.getCrossSigningKey(\n                    'master', seenPubkey,\n                );\n                signing = ret[1];\n                logger.info(\"Got cross-signing master private key\");\n            } finally {\n                if (signing) signing.free();\n            }\n        }\n\n        const oldSelfSigningId = this.crossSigningInfo.getId(\"self_signing\");\n        const oldUserSigningId = this.crossSigningInfo.getId(\"user_signing\");\n\n        // Update the version of our keys in our cross-signing object and the local store\n        this.storeTrustedSelfKeys(newCrossSigning.keys);\n\n        const selfSigningChanged = oldSelfSigningId !== newCrossSigning.getId(\"self_signing\");\n        const userSigningChanged = oldUserSigningId !== newCrossSigning.getId(\"user_signing\");\n\n        const selfSigningExistsNotLocallyCached = (\n            newCrossSigning.getId(\"self_signing\") &&\n            !crossSigningPrivateKeys.has(\"self_signing\")\n        );\n        const userSigningExistsNotLocallyCached = (\n            newCrossSigning.getId(\"user_signing\") &&\n            !crossSigningPrivateKeys.has(\"user_signing\")\n        );\n\n        const keySignatures: Record<string, ISignedKey> = {};\n\n        if (selfSigningChanged) {\n            logger.info(\"Got new self-signing key\", newCrossSigning.getId(\"self_signing\"));\n        }\n        if (\n            allowPrivateKeyRequests &&\n            (selfSigningChanged || selfSigningExistsNotLocallyCached)\n        ) {\n            logger.info(\"Attempting to retrieve cross-signing self-signing private key\");\n            let signing = null;\n            try {\n                const ret = await this.crossSigningInfo.getCrossSigningKey(\n                    \"self_signing\", newCrossSigning.getId(\"self_signing\"),\n                );\n                signing = ret[1];\n                logger.info(\"Got cross-signing self-signing private key\");\n            } finally {\n                if (signing) signing.free();\n            }\n\n            const device = this.deviceList.getStoredDevice(this.userId, this.deviceId);\n            const signedDevice = await this.crossSigningInfo.signDevice(\n                this.userId, device,\n            );\n            keySignatures[this.deviceId] = signedDevice;\n        }\n        if (userSigningChanged) {\n            logger.info(\"Got new user-signing key\", newCrossSigning.getId(\"user_signing\"));\n        }\n        if (\n            allowPrivateKeyRequests &&\n            (userSigningChanged || userSigningExistsNotLocallyCached)\n        ) {\n            logger.info(\"Attempting to retrieve cross-signing user-signing private key\");\n            let signing = null;\n            try {\n                const ret = await this.crossSigningInfo.getCrossSigningKey(\n                    \"user_signing\", newCrossSigning.getId(\"user_signing\"),\n                );\n                signing = ret[1];\n                logger.info(\"Got cross-signing user-signing private key\");\n            } finally {\n                if (signing) signing.free();\n            }\n        }\n\n        if (masterChanged) {\n            const masterKey = this.crossSigningInfo.keys.master;\n            await this.signObject(masterKey);\n            const deviceSig = masterKey.signatures[this.userId][\"ed25519:\" + this.deviceId];\n            // Include only the _new_ device signature in the upload.\n            // We may have existing signatures from deleted devices, which will cause\n            // the entire upload to fail.\n            keySignatures[this.crossSigningInfo.getId()] = Object.assign(\n                {} as ISignedKey,\n                masterKey,\n                {\n                    signatures: {\n                        [this.userId]: {\n                            [\"ed25519:\" + this.deviceId]: deviceSig,\n                        },\n                    },\n                },\n            );\n        }\n\n        const keysToUpload = Object.keys(keySignatures);\n        if (keysToUpload.length) {\n            const upload = ({ shouldEmit = false }) => {\n                logger.info(`Starting background key sig upload for ${keysToUpload}`);\n                return this.baseApis.uploadKeySignatures({ [this.userId]: keySignatures })\n                    .then((response) => {\n                        const { failures } = response || {};\n                        logger.info(`Finished background key sig upload for ${keysToUpload}`);\n                        if (Object.keys(failures || []).length > 0) {\n                            if (shouldEmit) {\n                                this.baseApis.emit(\n                                    CryptoEvent.KeySignatureUploadFailure,\n                                    failures,\n                                    \"checkOwnCrossSigningTrust\",\n                                    upload,\n                                );\n                            }\n                            throw new KeySignatureUploadError(\"Key upload failed\", { failures });\n                        }\n                    }).catch(e => {\n                        logger.error(\n                            `Error during background key sig upload for ${keysToUpload}`,\n                            e,\n                        );\n                    });\n            };\n            upload({ shouldEmit: true });\n        }\n\n        this.emit(CryptoEvent.UserTrustStatusChanged, userId, this.checkUserTrust(userId));\n\n        if (masterChanged) {\n            this.emit(CryptoEvent.KeysChanged, {});\n            await this.afterCrossSigningLocalKeyChange();\n        }\n\n        // Now we may be able to trust our key backup\n        await this.backupManager.checkKeyBackup();\n        // FIXME: if we previously trusted the backup, should we automatically sign\n        // the backup with the new key (if not already signed)?\n    }\n\n    /**\n     * Store a set of keys as our own, trusted, cross-signing keys.\n     *\n     * @param {object} keys The new trusted set of keys\n     */\n    private async storeTrustedSelfKeys(keys: Record<string, ICrossSigningKey>): Promise<void> {\n        if (keys) {\n            this.crossSigningInfo.setKeys(keys);\n        } else {\n            this.crossSigningInfo.clearKeys();\n        }\n        await this.cryptoStore.doTxn(\n            'readwrite', [IndexedDBCryptoStore.STORE_ACCOUNT],\n            (txn) => {\n                this.cryptoStore.storeCrossSigningKeys(txn, this.crossSigningInfo.keys);\n            },\n        );\n    }\n\n    /**\n     * Check if the master key is signed by a verified device, and if so, prompt\n     * the application to mark it as verified.\n     *\n     * @param {string} userId the user ID whose key should be checked\n     */\n    private async checkDeviceVerifications(userId: string): Promise<void> {\n        const shouldUpgradeCb = (\n            this.baseApis.cryptoCallbacks.shouldUpgradeDeviceVerifications\n        );\n        if (!shouldUpgradeCb) {\n            // Upgrading skipped when callback is not present.\n            return;\n        }\n        logger.info(`Starting device verification upgrade for ${userId}`);\n        if (this.crossSigningInfo.keys.user_signing) {\n            const crossSigningInfo = this.deviceList.getStoredCrossSigningForUser(userId);\n            if (crossSigningInfo) {\n                const upgradeInfo = await this.checkForDeviceVerificationUpgrade(\n                    userId, crossSigningInfo,\n                );\n                if (upgradeInfo) {\n                    const usersToUpgrade = await shouldUpgradeCb({\n                        users: {\n                            [userId]: upgradeInfo,\n                        },\n                    });\n                    if (usersToUpgrade.includes(userId)) {\n                        await this.baseApis.setDeviceVerified(\n                            userId, crossSigningInfo.getId(),\n                        );\n                    }\n                }\n            }\n        }\n        logger.info(`Finished device verification upgrade for ${userId}`);\n    }\n\n    public async setTrustedBackupPubKey(trustedPubKey: string): Promise<void> {\n        // This should be redundant post cross-signing is a thing, so just\n        // plonk it in localStorage for now.\n        this.sessionStore.setLocalTrustedBackupPubKey(trustedPubKey);\n        await this.backupManager.checkKeyBackup();\n    }\n\n    /**\n     */\n    public enableLazyLoading(): void {\n        this.lazyLoadMembers = true;\n    }\n\n    /**\n     * Tell the crypto module to register for MatrixClient events which it needs to\n     * listen for\n     *\n     * @param {external:EventEmitter} eventEmitter event source where we can register\n     *    for event notifications\n     */\n    public registerEventHandlers(eventEmitter: TypedEventEmitter<\n        RoomMemberEvent.Membership | ClientEvent.ToDeviceEvent | RoomEvent.Timeline | MatrixEventEvent.Decrypted,\n        any\n    >): void {\n        eventEmitter.on(RoomMemberEvent.Membership, this.onMembership);\n        eventEmitter.on(ClientEvent.ToDeviceEvent, this.onToDeviceEvent);\n        eventEmitter.on(RoomEvent.Timeline, this.onTimelineEvent);\n        eventEmitter.on(MatrixEventEvent.Decrypted, this.onTimelineEvent);\n    }\n\n    /** Start background processes related to crypto */\n    public start(): void {\n        this.outgoingRoomKeyRequestManager.start();\n    }\n\n    /** Stop background processes related to crypto */\n    public stop(): void {\n        this.outgoingRoomKeyRequestManager.stop();\n        this.deviceList.stop();\n        this.dehydrationManager.stop();\n    }\n\n    /**\n     * Get the Ed25519 key for this device\n     *\n     * @return {string} base64-encoded ed25519 key.\n     */\n    public getDeviceEd25519Key(): string {\n        return this.olmDevice.deviceEd25519Key;\n    }\n\n    /**\n     * Get the Curve25519 key for this device\n     *\n     * @return {string} base64-encoded curve25519 key.\n     */\n    public getDeviceCurve25519Key(): string {\n        return this.olmDevice.deviceCurve25519Key;\n    }\n\n    /**\n     * Set the global override for whether the client should ever send encrypted\n     * messages to unverified devices.  This provides the default for rooms which\n     * do not specify a value.\n     *\n     * @param {boolean} value whether to blacklist all unverified devices by default\n     */\n    public setGlobalBlacklistUnverifiedDevices(value: boolean): void {\n        this.globalBlacklistUnverifiedDevices = value;\n    }\n\n    /**\n     * @return {boolean} whether to blacklist all unverified devices by default\n     */\n    public getGlobalBlacklistUnverifiedDevices(): boolean {\n        return this.globalBlacklistUnverifiedDevices;\n    }\n\n    /**\n     * Set whether sendMessage in a room with unknown and unverified devices\n     * should throw an error and not send them message. This has 'Global' for\n     * symmetry with setGlobalBlacklistUnverifiedDevices but there is currently\n     * no room-level equivalent for this setting.\n     *\n     * This API is currently UNSTABLE and may change or be removed without notice.\n     *\n     * @param {boolean} value whether error on unknown devices\n     */\n    public setGlobalErrorOnUnknownDevices(value: boolean): void {\n        this.globalErrorOnUnknownDevices = value;\n    }\n\n    /**\n     * @return {boolean} whether to error on unknown devices\n     *\n     * This API is currently UNSTABLE and may change or be removed without notice.\n     */\n    public getGlobalErrorOnUnknownDevices(): boolean {\n        return this.globalErrorOnUnknownDevices;\n    }\n\n    /**\n     * Upload the device keys to the homeserver.\n     * @return {object} A promise that will resolve when the keys are uploaded.\n     */\n    public uploadDeviceKeys(): Promise<IKeysUploadResponse> {\n        const deviceKeys = {\n            algorithms: this.supportedAlgorithms,\n            device_id: this.deviceId,\n            keys: this.deviceKeys,\n            user_id: this.userId,\n        };\n\n        return this.signObject(deviceKeys).then(() => {\n            return this.baseApis.uploadKeysRequest({\n                device_keys: deviceKeys as Required<IDeviceKeys>,\n            });\n        });\n    }\n\n    /**\n     * Stores the current one_time_key count which will be handled later (in a call of\n     * onSyncCompleted). The count is e.g. coming from a /sync response.\n     *\n     * @param {Number} currentCount The current count of one_time_keys to be stored\n     */\n    public updateOneTimeKeyCount(currentCount: number): void {\n        if (isFinite(currentCount)) {\n            this.oneTimeKeyCount = currentCount;\n        } else {\n            throw new TypeError(\"Parameter for updateOneTimeKeyCount has to be a number\");\n        }\n    }\n\n    public setNeedsNewFallback(needsNewFallback: boolean) {\n        this.needsNewFallback = !!needsNewFallback;\n    }\n\n    public getNeedsNewFallback(): boolean {\n        return this.needsNewFallback;\n    }\n\n    // check if it's time to upload one-time keys, and do so if so.\n    private maybeUploadOneTimeKeys() {\n        // frequency with which to check & upload one-time keys\n        const uploadPeriod = 1000 * 60; // one minute\n\n        // max number of keys to upload at once\n        // Creating keys can be an expensive operation so we limit the\n        // number we generate in one go to avoid blocking the application\n        // for too long.\n        const maxKeysPerCycle = 5;\n\n        if (this.oneTimeKeyCheckInProgress) {\n            return;\n        }\n\n        const now = Date.now();\n        if (this.lastOneTimeKeyCheck !== null &&\n            now - this.lastOneTimeKeyCheck < uploadPeriod\n        ) {\n            // we've done a key upload recently.\n            return;\n        }\n\n        this.lastOneTimeKeyCheck = now;\n\n        // We need to keep a pool of one time public keys on the server so that\n        // other devices can start conversations with us. But we can only store\n        // a finite number of private keys in the olm Account object.\n        // To complicate things further then can be a delay between a device\n        // claiming a public one time key from the server and it sending us a\n        // message. We need to keep the corresponding private key locally until\n        // we receive the message.\n        // But that message might never arrive leaving us stuck with duff\n        // private keys clogging up our local storage.\n        // So we need some kind of engineering compromise to balance all of\n        // these factors.\n\n        // Check how many keys we can store in the Account object.\n        const maxOneTimeKeys = this.olmDevice.maxNumberOfOneTimeKeys();\n        // Try to keep at most half that number on the server. This leaves the\n        // rest of the slots free to hold keys that have been claimed from the\n        // server but we haven't received a message for.\n        // If we run out of slots when generating new keys then olm will\n        // discard the oldest private keys first. This will eventually clean\n        // out stale private keys that won't receive a message.\n        const keyLimit = Math.floor(maxOneTimeKeys / 2);\n\n        const uploadLoop = async (keyCount: number) => {\n            while (keyLimit > keyCount || this.getNeedsNewFallback()) {\n                // Ask olm to generate new one time keys, then upload them to synapse.\n                if (keyLimit > keyCount) {\n                    logger.info(\"generating oneTimeKeys\");\n                    const keysThisLoop = Math.min(keyLimit - keyCount, maxKeysPerCycle);\n                    await this.olmDevice.generateOneTimeKeys(keysThisLoop);\n                }\n\n                if (this.getNeedsNewFallback()) {\n                    const fallbackKeys = await this.olmDevice.getFallbackKey();\n                    // if fallbackKeys is non-empty, we've already generated a\n                    // fallback key, but it hasn't been published yet, so we\n                    // can use that instead of generating a new one\n                    if (!fallbackKeys.curve25519 ||\n                        Object.keys(fallbackKeys.curve25519).length == 0) {\n                        logger.info(\"generating fallback key\");\n                        if (this.fallbackCleanup) {\n                            // cancel any pending fallback cleanup because generating\n                            // a new fallback key will already drop the old fallback\n                            // that would have been dropped, and we don't want to kill\n                            // the current key\n                            clearTimeout(this.fallbackCleanup);\n                            delete this.fallbackCleanup;\n                        }\n                        await this.olmDevice.generateFallbackKey();\n                    }\n                }\n\n                logger.info(\"calling uploadOneTimeKeys\");\n                const res = await this.uploadOneTimeKeys();\n                if (res.one_time_key_counts && res.one_time_key_counts.signed_curve25519) {\n                    // if the response contains a more up to date value use this\n                    // for the next loop\n                    keyCount = res.one_time_key_counts.signed_curve25519;\n                } else {\n                    throw new Error(\"response for uploading keys does not contain \" +\n                        \"one_time_key_counts.signed_curve25519\");\n                }\n            }\n        };\n\n        this.oneTimeKeyCheckInProgress = true;\n        Promise.resolve().then(() => {\n            if (this.oneTimeKeyCount !== undefined) {\n                // We already have the current one_time_key count from a /sync response.\n                // Use this value instead of asking the server for the current key count.\n                return Promise.resolve(this.oneTimeKeyCount);\n            }\n            // ask the server how many keys we have\n            return this.baseApis.uploadKeysRequest({}).then((res) => {\n                return res.one_time_key_counts.signed_curve25519 || 0;\n            });\n        }).then((keyCount) => {\n            // Start the uploadLoop with the current keyCount. The function checks if\n            // we need to upload new keys or not.\n            // If there are too many keys on the server then we don't need to\n            // create any more keys.\n            return uploadLoop(keyCount);\n        }).catch((e) => {\n            logger.error(\"Error uploading one-time keys\", e.stack || e);\n        }).finally(() => {\n            // reset oneTimeKeyCount to prevent start uploading based on old data.\n            // it will be set again on the next /sync-response\n            this.oneTimeKeyCount = undefined;\n            this.oneTimeKeyCheckInProgress = false;\n        });\n    }\n\n    // returns a promise which resolves to the response\n    private async uploadOneTimeKeys() {\n        const promises = [];\n\n        let fallbackJson: Record<string, IOneTimeKey>;\n        if (this.getNeedsNewFallback()) {\n            fallbackJson = {};\n            const fallbackKeys = await this.olmDevice.getFallbackKey();\n            for (const [keyId, key] of Object.entries(fallbackKeys.curve25519)) {\n                const k = { key, fallback: true };\n                fallbackJson[\"signed_curve25519:\" + keyId] = k;\n                promises.push(this.signObject(k));\n            }\n            this.setNeedsNewFallback(false);\n        }\n\n        const oneTimeKeys = await this.olmDevice.getOneTimeKeys();\n        const oneTimeJson: Record<string, { key: string }> = {};\n\n        for (const keyId in oneTimeKeys.curve25519) {\n            if (oneTimeKeys.curve25519.hasOwnProperty(keyId)) {\n                const k = {\n                    key: oneTimeKeys.curve25519[keyId],\n                };\n                oneTimeJson[\"signed_curve25519:\" + keyId] = k;\n                promises.push(this.signObject(k));\n            }\n        }\n\n        await Promise.all(promises);\n\n        const requestBody: Record<string, any> = {\n            \"one_time_keys\": oneTimeJson,\n        };\n\n        if (fallbackJson) {\n            requestBody[\"org.matrix.msc2732.fallback_keys\"] = fallbackJson;\n            requestBody[\"fallback_keys\"] = fallbackJson;\n        }\n\n        const res = await this.baseApis.uploadKeysRequest(requestBody);\n\n        if (fallbackJson) {\n            this.fallbackCleanup = setTimeout(() => {\n                delete this.fallbackCleanup;\n                this.olmDevice.forgetOldFallbackKey();\n            }, 60*60*1000);\n        }\n\n        await this.olmDevice.markKeysAsPublished();\n        return res;\n    }\n\n    /**\n     * Download the keys for a list of users and stores the keys in the session\n     * store.\n     * @param {Array} userIds The users to fetch.\n     * @param {boolean} forceDownload Always download the keys even if cached.\n     *\n     * @return {Promise} A promise which resolves to a map userId->deviceId->{@link\n        * module:crypto/deviceinfo|DeviceInfo}.\n     */\n    public downloadKeys(userIds: string[], forceDownload?: boolean): Promise<DeviceInfoMap> {\n        return this.deviceList.downloadKeys(userIds, forceDownload);\n    }\n\n    /**\n     * Get the stored device keys for a user id\n     *\n     * @param {string} userId the user to list keys for.\n     *\n     * @return {module:crypto/deviceinfo[]|null} list of devices, or null if we haven't\n     * managed to get a list of devices for this user yet.\n     */\n    public getStoredDevicesForUser(userId: string): Array<DeviceInfo> | null {\n        return this.deviceList.getStoredDevicesForUser(userId);\n    }\n\n    /**\n     * Get the stored keys for a single device\n     *\n     * @param {string} userId\n     * @param {string} deviceId\n     *\n     * @return {module:crypto/deviceinfo?} device, or undefined\n     * if we don't know about this device\n     */\n    public getStoredDevice(userId: string, deviceId: string): DeviceInfo | undefined {\n        return this.deviceList.getStoredDevice(userId, deviceId);\n    }\n\n    /**\n     * Save the device list, if necessary\n     *\n     * @param {number} delay Time in ms before which the save actually happens.\n     *     By default, the save is delayed for a short period in order to batch\n     *     multiple writes, but this behaviour can be disabled by passing 0.\n     *\n     * @return {Promise<boolean>} true if the data was saved, false if\n     *     it was not (eg. because no changes were pending). The promise\n     *     will only resolve once the data is saved, so may take some time\n     *     to resolve.\n     */\n    public saveDeviceList(delay: number): Promise<boolean> {\n        return this.deviceList.saveIfDirty(delay);\n    }\n\n    /**\n     * Update the blocked/verified state of the given device\n     *\n     * @param {string} userId owner of the device\n     * @param {string} deviceId unique identifier for the device or user's\n     * cross-signing public key ID.\n     *\n     * @param {?boolean} verified whether to mark the device as verified. Null to\n     *     leave unchanged.\n     *\n     * @param {?boolean} blocked whether to mark the device as blocked. Null to\n     *      leave unchanged.\n     *\n     * @param {?boolean} known whether to mark that the user has been made aware of\n     *      the existence of this device. Null to leave unchanged\n     *\n     * @return {Promise<module:crypto/deviceinfo>} updated DeviceInfo\n     */\n    public async setDeviceVerification(\n        userId: string,\n        deviceId: string,\n        verified?: boolean,\n        blocked?: boolean,\n        known?: boolean,\n    ): Promise<DeviceInfo | CrossSigningInfo> {\n        // get rid of any `undefined`s here so we can just check\n        // for null rather than null or undefined\n        if (verified === undefined) verified = null;\n        if (blocked === undefined) blocked = null;\n        if (known === undefined) known = null;\n\n        // Check if the 'device' is actually a cross signing key\n        // The js-sdk's verification treats cross-signing keys as devices\n        // and so uses this method to mark them verified.\n        const xsk = this.deviceList.getStoredCrossSigningForUser(userId);\n        if (xsk && xsk.getId() === deviceId) {\n            if (blocked !== null || known !== null) {\n                throw new Error(\"Cannot set blocked or known for a cross-signing key\");\n            }\n            if (!verified) {\n                throw new Error(\"Cannot set a cross-signing key as unverified\");\n            }\n\n            if (!this.crossSigningInfo.getId() && userId === this.crossSigningInfo.userId) {\n                this.storeTrustedSelfKeys(xsk.keys);\n                // This will cause our own user trust to change, so emit the event\n                this.emit(CryptoEvent.UserTrustStatusChanged, this.userId, this.checkUserTrust(userId));\n            }\n\n            // Now sign the master key with our user signing key (unless it's ourself)\n            if (userId !== this.userId) {\n                logger.info(\n                    \"Master key \" + xsk.getId() + \" for \" + userId +\n                    \" marked verified. Signing...\",\n                );\n                const device = await this.crossSigningInfo.signUser(xsk);\n                if (device) {\n                    const upload = async ({ shouldEmit = false }) => {\n                        logger.info(\"Uploading signature for \" + userId + \"...\");\n                        const response = await this.baseApis.uploadKeySignatures({\n                            [userId]: {\n                                [deviceId]: device,\n                            },\n                        });\n                        const { failures } = response || {};\n                        if (Object.keys(failures || []).length > 0) {\n                            if (shouldEmit) {\n                                this.baseApis.emit(\n                                    CryptoEvent.KeySignatureUploadFailure,\n                                    failures,\n                                    \"setDeviceVerification\",\n                                    upload,\n                                );\n                            }\n                            /* Throwing here causes the process to be cancelled and the other\n                            * user to be notified */\n                            throw new KeySignatureUploadError(\n                                \"Key upload failed\",\n                                { failures },\n                            );\n                        }\n                    };\n                    await upload({ shouldEmit: true });\n\n                    // This will emit events when it comes back down the sync\n                    // (we could do local echo to speed things up)\n                }\n                return device as any; // TODO types\n            } else {\n                return xsk;\n            }\n        }\n\n        const devices = this.deviceList.getRawStoredDevicesForUser(userId);\n        if (!devices || !devices[deviceId]) {\n            throw new Error(\"Unknown device \" + userId + \":\" + deviceId);\n        }\n\n        const dev = devices[deviceId];\n        let verificationStatus = dev.verified;\n\n        if (verified) {\n            verificationStatus = DeviceVerification.VERIFIED;\n        } else if (verified !== null && verificationStatus == DeviceVerification.VERIFIED) {\n            verificationStatus = DeviceVerification.UNVERIFIED;\n        }\n\n        if (blocked) {\n            verificationStatus = DeviceVerification.BLOCKED;\n        } else if (blocked !== null && verificationStatus == DeviceVerification.BLOCKED) {\n            verificationStatus = DeviceVerification.UNVERIFIED;\n        }\n\n        let knownStatus = dev.known;\n        if (known !== null) {\n            knownStatus = known;\n        }\n\n        if (dev.verified !== verificationStatus || dev.known !== knownStatus) {\n            dev.verified = verificationStatus;\n            dev.known = knownStatus;\n            this.deviceList.storeDevicesForUser(userId, devices);\n            this.deviceList.saveIfDirty();\n        }\n\n        // do cross-signing\n        if (verified && userId === this.userId) {\n            logger.info(\"Own device \" + deviceId + \" marked verified: signing\");\n\n            // Signing only needed if other device not already signed\n            let device: ISignedKey;\n            const deviceTrust = this.checkDeviceTrust(userId, deviceId);\n            if (deviceTrust.isCrossSigningVerified()) {\n                logger.log(`Own device ${deviceId} already cross-signing verified`);\n            } else {\n                device = await this.crossSigningInfo.signDevice(\n                    userId, DeviceInfo.fromStorage(dev, deviceId),\n                );\n            }\n\n            if (device) {\n                const upload = async ({ shouldEmit = false }) => {\n                    logger.info(\"Uploading signature for \" + deviceId);\n                    const response = await this.baseApis.uploadKeySignatures({\n                        [userId]: {\n                            [deviceId]: device,\n                        },\n                    });\n                    const { failures } = response || {};\n                    if (Object.keys(failures || []).length > 0) {\n                        if (shouldEmit) {\n                            this.baseApis.emit(\n                                CryptoEvent.KeySignatureUploadFailure,\n                                failures,\n                                \"setDeviceVerification\",\n                                upload, // continuation\n                            );\n                        }\n                        throw new KeySignatureUploadError(\"Key upload failed\", { failures });\n                    }\n                };\n                await upload({ shouldEmit: true });\n                // XXX: we'll need to wait for the device list to be updated\n            }\n        }\n\n        const deviceObj = DeviceInfo.fromStorage(dev, deviceId);\n        this.emit(CryptoEvent.DeviceVerificationChanged, userId, deviceId, deviceObj);\n        return deviceObj;\n    }\n\n    public findVerificationRequestDMInProgress(roomId: string): VerificationRequest {\n        return this.inRoomVerificationRequests.findRequestInProgress(roomId);\n    }\n\n    public getVerificationRequestsToDeviceInProgress(userId: string): VerificationRequest[] {\n        return this.toDeviceVerificationRequests.getRequestsInProgress(userId);\n    }\n\n    public requestVerificationDM(userId: string, roomId: string): Promise<VerificationRequest> {\n        const existingRequest = this.inRoomVerificationRequests.findRequestInProgress(roomId);\n        if (existingRequest) {\n            return Promise.resolve(existingRequest);\n        }\n        const channel = new InRoomChannel(this.baseApis, roomId, userId);\n        return this.requestVerificationWithChannel(userId, channel, this.inRoomVerificationRequests);\n    }\n\n    public requestVerification(userId: string, devices: string[]): Promise<VerificationRequest> {\n        if (!devices) {\n            devices = Object.keys(this.deviceList.getRawStoredDevicesForUser(userId));\n        }\n        const existingRequest = this.toDeviceVerificationRequests.findRequestInProgress(userId, devices);\n        if (existingRequest) {\n            return Promise.resolve(existingRequest);\n        }\n        const channel = new ToDeviceChannel(this.baseApis, userId, devices, ToDeviceChannel.makeTransactionId());\n        return this.requestVerificationWithChannel(userId, channel, this.toDeviceVerificationRequests);\n    }\n\n    private async requestVerificationWithChannel(\n        userId: string,\n        channel: IVerificationChannel,\n        requestsMap: IRequestsMap,\n    ): Promise<VerificationRequest> {\n        let request = new VerificationRequest(channel, this.verificationMethods, this.baseApis);\n        // if transaction id is already known, add request\n        if (channel.transactionId) {\n            requestsMap.setRequestByChannel(channel, request);\n        }\n        await request.sendRequest();\n        // don't replace the request created by a racing remote echo\n        const racingRequest = requestsMap.getRequestByChannel(channel);\n        if (racingRequest) {\n            request = racingRequest;\n        } else {\n            logger.log(`Crypto: adding new request to ` +\n                `requestsByTxnId with id ${channel.transactionId} ${channel.roomId}`);\n            requestsMap.setRequestByChannel(channel, request);\n        }\n        return request;\n    }\n\n    public beginKeyVerification(\n        method: string,\n        userId: string,\n        deviceId: string,\n        transactionId: string = null,\n    ): any { // TODO types\n        let request;\n        if (transactionId) {\n            request = this.toDeviceVerificationRequests.getRequestBySenderAndTxnId(userId, transactionId);\n            if (!request) {\n                throw new Error(\n                    `No request found for user ${userId} with ` +\n                    `transactionId ${transactionId}`);\n            }\n        } else {\n            transactionId = ToDeviceChannel.makeTransactionId();\n            const channel = new ToDeviceChannel(this.baseApis, userId, [deviceId], transactionId, deviceId);\n            request = new VerificationRequest(channel, this.verificationMethods, this.baseApis);\n            this.toDeviceVerificationRequests.setRequestBySenderAndTxnId(userId, transactionId, request);\n        }\n        return request.beginKeyVerification(method, { userId, deviceId });\n    }\n\n    public async legacyDeviceVerification(\n        userId: string,\n        deviceId: string,\n        method: VerificationMethod,\n    ): Promise<VerificationRequest> {\n        const transactionId = ToDeviceChannel.makeTransactionId();\n        const channel = new ToDeviceChannel(this.baseApis, userId, [deviceId], transactionId, deviceId);\n        const request = new VerificationRequest(channel, this.verificationMethods, this.baseApis);\n        this.toDeviceVerificationRequests.setRequestBySenderAndTxnId(userId, transactionId, request);\n        const verifier = request.beginKeyVerification(method, { userId, deviceId });\n        // either reject by an error from verify() while sending .start\n        // or resolve when the request receives the\n        // local (fake remote) echo for sending the .start event\n        await Promise.race([\n            verifier.verify(),\n            request.waitFor(r => r.started),\n        ]);\n        return request;\n    }\n\n    /**\n     * Get information on the active olm sessions with a user\n     * <p>\n     * Returns a map from device id to an object with keys 'deviceIdKey' (the\n     * device's curve25519 identity key) and 'sessions' (an array of objects in the\n     * same format as that returned by\n     * {@link module:crypto/OlmDevice#getSessionInfoForDevice}).\n     * <p>\n     * This method is provided for debugging purposes.\n     *\n     * @param {string} userId id of user to inspect\n     *\n     * @return {Promise<Object.<string, {deviceIdKey: string, sessions: object[]}>>}\n     */\n    public async getOlmSessionsForUser(userId: string): Promise<Record<string, IUserOlmSession>> {\n        const devices = this.getStoredDevicesForUser(userId) || [];\n        const result = {};\n        for (let j = 0; j < devices.length; ++j) {\n            const device = devices[j];\n            const deviceKey = device.getIdentityKey();\n            const sessions = await this.olmDevice.getSessionInfoForDevice(deviceKey);\n\n            result[device.deviceId] = {\n                deviceIdKey: deviceKey,\n                sessions: sessions,\n            };\n        }\n        return result;\n    }\n\n    /**\n     * Get the device which sent an event\n     *\n     * @param {module:models/event.MatrixEvent} event event to be checked\n     *\n     * @return {module:crypto/deviceinfo?}\n     */\n    public getEventSenderDeviceInfo(event: MatrixEvent): DeviceInfo | null {\n        const senderKey = event.getSenderKey();\n        const algorithm = event.getWireContent().algorithm;\n\n        if (!senderKey || !algorithm) {\n            return null;\n        }\n\n        const forwardingChain = event.getForwardingCurve25519KeyChain();\n        if (forwardingChain.length > 0) {\n            // we got the key this event from somewhere else\n            // TODO: check if we can trust the forwarders.\n            return null;\n        }\n\n        if (event.isKeySourceUntrusted()) {\n            // we got the key for this event from a source that we consider untrusted\n            return null;\n        }\n\n        // senderKey is the Curve25519 identity key of the device which the event\n        // was sent from. In the case of Megolm, it's actually the Curve25519\n        // identity key of the device which set up the Megolm session.\n\n        const device = this.deviceList.getDeviceByIdentityKey(\n            algorithm, senderKey,\n        );\n\n        if (device === null) {\n            // we haven't downloaded the details of this device yet.\n            return null;\n        }\n\n        // so far so good, but now we need to check that the sender of this event\n        // hadn't advertised someone else's Curve25519 key as their own. We do that\n        // by checking the Ed25519 claimed by the event (or, in the case of megolm,\n        // the event which set up the megolm session), to check that it matches the\n        // fingerprint of the purported sending device.\n        //\n        // (see https://github.com/vector-im/vector-web/issues/2215)\n\n        const claimedKey = event.getClaimedEd25519Key();\n        if (!claimedKey) {\n            logger.warn(\"Event \" + event.getId() + \" claims no ed25519 key: \" +\n                \"cannot verify sending device\");\n            return null;\n        }\n\n        if (claimedKey !== device.getFingerprint()) {\n            logger.warn(\n                \"Event \" + event.getId() + \" claims ed25519 key \" + claimedKey +\n                \" but sender device has key \" + device.getFingerprint());\n            return null;\n        }\n\n        return device;\n    }\n\n    /**\n     * Get information about the encryption of an event\n     *\n     * @param {module:models/event.MatrixEvent} event event to be checked\n     *\n     * @return {object} An object with the fields:\n     *    - encrypted: whether the event is encrypted (if not encrypted, some of the\n     *      other properties may not be set)\n     *    - senderKey: the sender's key\n     *    - algorithm: the algorithm used to encrypt the event\n     *    - authenticated: whether we can be sure that the owner of the senderKey\n     *      sent the event\n     *    - sender: the sender's device information, if available\n     *    - mismatchedSender: if the event's ed25519 and curve25519 keys don't match\n     *      (only meaningful if `sender` is set)\n     */\n    public getEventEncryptionInfo(event: MatrixEvent): IEncryptedEventInfo {\n        const ret: Partial<IEncryptedEventInfo> = {};\n\n        ret.senderKey = event.getSenderKey();\n        ret.algorithm = event.getWireContent().algorithm;\n\n        if (!ret.senderKey || !ret.algorithm) {\n            ret.encrypted = false;\n            return ret as IEncryptedEventInfo;\n        }\n        ret.encrypted = true;\n\n        const forwardingChain = event.getForwardingCurve25519KeyChain();\n        if (forwardingChain.length > 0 || event.isKeySourceUntrusted()) {\n            // we got the key this event from somewhere else\n            // TODO: check if we can trust the forwarders.\n            ret.authenticated = false;\n        } else {\n            ret.authenticated = true;\n        }\n\n        // senderKey is the Curve25519 identity key of the device which the event\n        // was sent from. In the case of Megolm, it's actually the Curve25519\n        // identity key of the device which set up the Megolm session.\n\n        ret.sender = this.deviceList.getDeviceByIdentityKey(ret.algorithm, ret.senderKey);\n\n        // so far so good, but now we need to check that the sender of this event\n        // hadn't advertised someone else's Curve25519 key as their own. We do that\n        // by checking the Ed25519 claimed by the event (or, in the case of megolm,\n        // the event which set up the megolm session), to check that it matches the\n        // fingerprint of the purported sending device.\n        //\n        // (see https://github.com/vector-im/vector-web/issues/2215)\n\n        const claimedKey = event.getClaimedEd25519Key();\n        if (!claimedKey) {\n            logger.warn(\"Event \" + event.getId() + \" claims no ed25519 key: \" +\n                \"cannot verify sending device\");\n            ret.mismatchedSender = true;\n        }\n\n        if (ret.sender && claimedKey !== ret.sender.getFingerprint()) {\n            logger.warn(\n                \"Event \" + event.getId() + \" claims ed25519 key \" + claimedKey +\n                \"but sender device has key \" + ret.sender.getFingerprint());\n            ret.mismatchedSender = true;\n        }\n\n        return ret as IEncryptedEventInfo;\n    }\n\n    /**\n     * Forces the current outbound group session to be discarded such\n     * that another one will be created next time an event is sent.\n     *\n     * @param {string} roomId The ID of the room to discard the session for\n     *\n     * This should not normally be necessary.\n     */\n    public forceDiscardSession(roomId: string): void {\n        const alg = this.roomEncryptors[roomId];\n        if (alg === undefined) throw new Error(\"Room not encrypted\");\n        if (alg.forceDiscardSession === undefined) {\n            throw new Error(\"Room encryption algorithm doesn't support session discarding\");\n        }\n        alg.forceDiscardSession();\n    }\n\n    /**\n     * Configure a room to use encryption (ie, save a flag in the cryptoStore).\n     *\n     * @param {string} roomId The room ID to enable encryption in.\n     *\n     * @param {object} config The encryption config for the room.\n     *\n     * @param {boolean=} inhibitDeviceQuery true to suppress device list query for\n     *   users in the room (for now). In case lazy loading is enabled,\n     *   the device query is always inhibited as the members are not tracked.\n     */\n    public async setRoomEncryption(\n        roomId: string,\n        config: IRoomEncryption,\n        inhibitDeviceQuery?: boolean,\n    ): Promise<void> {\n        // ignore crypto events with no algorithm defined\n        // This will happen if a crypto event is redacted before we fetch the room state\n        // It would otherwise just throw later as an unknown algorithm would, but we may\n        // as well catch this here\n        if (!config.algorithm) {\n            logger.log(\"Ignoring setRoomEncryption with no algorithm\");\n            return;\n        }\n\n        // if state is being replayed from storage, we might already have a configuration\n        // for this room as they are persisted as well.\n        // We just need to make sure the algorithm is initialized in this case.\n        // However, if the new config is different,\n        // we should bail out as room encryption can't be changed once set.\n        const existingConfig = this.roomList.getRoomEncryption(roomId);\n        if (existingConfig) {\n            if (JSON.stringify(existingConfig) != JSON.stringify(config)) {\n                logger.error(\"Ignoring m.room.encryption event which requests \" +\n                    \"a change of config in \" + roomId);\n                return;\n            }\n        }\n        // if we already have encryption in this room, we should ignore this event,\n        // as it would reset the encryption algorithm.\n        // This is at least expected to be called twice, as sync calls onCryptoEvent\n        // for both the timeline and state sections in the /sync response,\n        // the encryption event would appear in both.\n        // If it's called more than twice though,\n        // it signals a bug on client or server.\n        const existingAlg = this.roomEncryptors[roomId];\n        if (existingAlg) {\n            return;\n        }\n\n        // _roomList.getRoomEncryption will not race with _roomList.setRoomEncryption\n        // because it first stores in memory. We should await the promise only\n        // after all the in-memory state (roomEncryptors and _roomList) has been updated\n        // to avoid races when calling this method multiple times. Hence keep a hold of the promise.\n        let storeConfigPromise = null;\n        if (!existingConfig) {\n            storeConfigPromise = this.roomList.setRoomEncryption(roomId, config);\n        }\n\n        const AlgClass = algorithms.ENCRYPTION_CLASSES[config.algorithm];\n        if (!AlgClass) {\n            throw new Error(\"Unable to encrypt with \" + config.algorithm);\n        }\n\n        const alg = new AlgClass({\n            userId: this.userId,\n            deviceId: this.deviceId,\n            crypto: this,\n            olmDevice: this.olmDevice,\n            baseApis: this.baseApis,\n            roomId,\n            config,\n        });\n        this.roomEncryptors[roomId] = alg;\n\n        if (storeConfigPromise) {\n            await storeConfigPromise;\n        }\n\n        if (!this.lazyLoadMembers) {\n            logger.log(\"Enabling encryption in \" + roomId + \"; \" +\n                \"starting to track device lists for all users therein\");\n\n            await this.trackRoomDevices(roomId);\n            // TODO: this flag is only not used from MatrixClient::setRoomEncryption\n            // which is never used (inside Element at least)\n            // but didn't want to remove it as it technically would\n            // be a breaking change.\n            if (!inhibitDeviceQuery) {\n                this.deviceList.refreshOutdatedDeviceLists();\n            }\n        } else {\n            logger.log(\"Enabling encryption in \" + roomId);\n        }\n    }\n\n    /**\n     * Make sure we are tracking the device lists for all users in this room.\n     *\n     * @param {string} roomId The room ID to start tracking devices in.\n     * @returns {Promise} when all devices for the room have been fetched and marked to track\n     */\n    public trackRoomDevices(roomId: string): Promise<void> {\n        const trackMembers = async () => {\n            // not an encrypted room\n            if (!this.roomEncryptors[roomId]) {\n                return;\n            }\n            const room = this.clientStore.getRoom(roomId);\n            if (!room) {\n                throw new Error(`Unable to start tracking devices in unknown room ${roomId}`);\n            }\n            logger.log(`Starting to track devices for room ${roomId} ...`);\n            const members = await room.getEncryptionTargetMembers();\n            members.forEach((m) => {\n                this.deviceList.startTrackingDeviceList(m.userId);\n            });\n        };\n\n        let promise = this.roomDeviceTrackingState[roomId];\n        if (!promise) {\n            promise = trackMembers();\n            this.roomDeviceTrackingState[roomId] = promise.catch(err => {\n                this.roomDeviceTrackingState[roomId] = null;\n                throw err;\n            });\n        }\n        return promise;\n    }\n\n    /**\n     * Try to make sure we have established olm sessions for all known devices for\n     * the given users.\n     *\n     * @param {string[]} users list of user ids\n     * @param {boolean} force If true, force a new Olm session to be created. Default false.\n     *\n     * @return {Promise} resolves once the sessions are complete, to\n     *    an Object mapping from userId to deviceId to\n     *    {@link module:crypto~OlmSessionResult}\n     */\n    public ensureOlmSessionsForUsers(\n        users: string[],\n        force?: boolean,\n    ): Promise<Record<string, Record<string, olmlib.IOlmSessionResult>>> {\n        const devicesByUser: Record<string, DeviceInfo[]> = {};\n\n        for (let i = 0; i < users.length; ++i) {\n            const userId = users[i];\n            devicesByUser[userId] = [];\n\n            const devices = this.getStoredDevicesForUser(userId) || [];\n            for (let j = 0; j < devices.length; ++j) {\n                const deviceInfo = devices[j];\n\n                const key = deviceInfo.getIdentityKey();\n                if (key == this.olmDevice.deviceCurve25519Key) {\n                    // don't bother setting up session to ourself\n                    continue;\n                }\n                if (deviceInfo.verified == DeviceVerification.BLOCKED) {\n                    // don't bother setting up sessions with blocked users\n                    continue;\n                }\n\n                devicesByUser[userId].push(deviceInfo);\n            }\n        }\n\n        return olmlib.ensureOlmSessionsForDevices(this.olmDevice, this.baseApis, devicesByUser, force);\n    }\n\n    /**\n     * Get a list containing all of the room keys\n     *\n     * @return {module:crypto/OlmDevice.MegolmSessionData[]} a list of session export objects\n     */\n    public async exportRoomKeys(): Promise<IMegolmSessionData[]> {\n        const exportedSessions: IMegolmSessionData[] = [];\n        await this.cryptoStore.doTxn(\n            'readonly', [IndexedDBCryptoStore.STORE_INBOUND_GROUP_SESSIONS], (txn) => {\n                this.cryptoStore.getAllEndToEndInboundGroupSessions(txn, (s) => {\n                    if (s === null) return;\n\n                    const sess = this.olmDevice.exportInboundGroupSession(\n                        s.senderKey, s.sessionId, s.sessionData,\n                    );\n                    delete sess.first_known_index;\n                    sess.algorithm = olmlib.MEGOLM_ALGORITHM;\n                    exportedSessions.push(sess);\n                });\n            },\n        );\n\n        return exportedSessions;\n    }\n\n    /**\n     * Import a list of room keys previously exported by exportRoomKeys\n     *\n     * @param {Object[]} keys a list of session export objects\n     * @param {Object} opts\n     * @param {Function} opts.progressCallback called with an object which has a stage param\n     * @return {Promise} a promise which resolves once the keys have been imported\n     */\n    public importRoomKeys(keys: IMegolmSessionData[], opts: IImportRoomKeysOpts = {}): Promise<void> {\n        let successes = 0;\n        let failures = 0;\n        const total = keys.length;\n\n        function updateProgress() {\n            opts.progressCallback({\n                stage: \"load_keys\",\n                successes,\n                failures,\n                total,\n            });\n        }\n\n        return Promise.all(keys.map((key) => {\n            if (!key.room_id || !key.algorithm) {\n                logger.warn(\"ignoring room key entry with missing fields\", key);\n                failures++;\n                if (opts.progressCallback) { updateProgress(); }\n                return null;\n            }\n\n            const alg = this.getRoomDecryptor(key.room_id, key.algorithm);\n            return alg.importRoomKey(key, opts).finally(() => {\n                successes++;\n                if (opts.progressCallback) { updateProgress(); }\n            });\n        })).then();\n    }\n\n    /**\n     * Counts the number of end to end session keys that are waiting to be backed up\n     * @returns {Promise<number>} Resolves to the number of sessions requiring backup\n     */\n    public countSessionsNeedingBackup(): Promise<number> {\n        return this.backupManager.countSessionsNeedingBackup();\n    }\n\n    /**\n     * Perform any background tasks that can be done before a message is ready to\n     * send, in order to speed up sending of the message.\n     *\n     * @param {module:models/room} room the room the event is in\n     */\n    public prepareToEncrypt(room: Room): void {\n        const alg = this.roomEncryptors[room.roomId];\n        if (alg) {\n            alg.prepareToEncrypt(room);\n        }\n    }\n\n    /**\n     * Encrypt an event according to the configuration of the room.\n     *\n     * @param {module:models/event.MatrixEvent} event  event to be sent\n     *\n     * @param {module:models/room} room destination room.\n     *\n     * @return {Promise?} Promise which resolves when the event has been\n     *     encrypted, or null if nothing was needed\n     */\n    public async encryptEvent(event: MatrixEvent, room: Room): Promise<void> {\n        if (!room) {\n            throw new Error(\"Cannot send encrypted messages in unknown rooms\");\n        }\n\n        const roomId = event.getRoomId();\n\n        const alg = this.roomEncryptors[roomId];\n        if (!alg) {\n            // MatrixClient has already checked that this room should be encrypted,\n            // so this is an unexpected situation.\n            throw new Error(\n                \"Room was previously configured to use encryption, but is \" +\n                \"no longer. Perhaps the homeserver is hiding the \" +\n                \"configuration event.\",\n            );\n        }\n\n        if (!this.roomDeviceTrackingState[roomId]) {\n            this.trackRoomDevices(roomId);\n        }\n        // wait for all the room devices to be loaded\n        await this.roomDeviceTrackingState[roomId];\n\n        let content = event.getContent();\n        // If event has an m.relates_to then we need\n        // to put this on the wrapping event instead\n        const mRelatesTo = content['m.relates_to'];\n        if (mRelatesTo) {\n            // Clone content here so we don't remove `m.relates_to` from the local-echo\n            content = Object.assign({}, content);\n            delete content['m.relates_to'];\n        }\n\n        // Treat element's performance metrics the same as `m.relates_to` (when present)\n        const elementPerfMetrics = content['io.element.performance_metrics'];\n        if (elementPerfMetrics) {\n            content = Object.assign({}, content);\n            delete content['io.element.performance_metrics'];\n        }\n\n        const encryptedContent = await alg.encryptMessage(room, event.getType(), content);\n\n        if (mRelatesTo) {\n            encryptedContent['m.relates_to'] = mRelatesTo;\n        }\n        if (elementPerfMetrics) {\n            encryptedContent['io.element.performance_metrics'] = elementPerfMetrics;\n        }\n\n        event.makeEncrypted(\n            \"m.room.encrypted\",\n            encryptedContent,\n            this.olmDevice.deviceCurve25519Key,\n            this.olmDevice.deviceEd25519Key,\n        );\n    }\n\n    /**\n     * Decrypt a received event\n     *\n     * @param {MatrixEvent} event\n     *\n     * @return {Promise<module:crypto~EventDecryptionResult>} resolves once we have\n     *  finished decrypting. Rejects with an `algorithms.DecryptionError` if there\n     *  is a problem decrypting the event.\n     */\n    public async decryptEvent(event: MatrixEvent): Promise<IEventDecryptionResult> {\n        if (event.isRedacted()) {\n            const redactionEvent = new MatrixEvent(event.getUnsigned().redacted_because);\n            const decryptedEvent = await this.decryptEvent(redactionEvent);\n\n            return {\n                clearEvent: {\n                    room_id: event.getRoomId(),\n                    type: \"m.room.message\",\n                    content: {},\n                    unsigned: {\n                        redacted_because: decryptedEvent.clearEvent as IEvent,\n                    },\n                },\n            };\n        } else {\n            const content = event.getWireContent();\n            const alg = this.getRoomDecryptor(event.getRoomId(), content.algorithm);\n            return await alg.decryptEvent(event);\n        }\n    }\n\n    /**\n     * Handle the notification from /sync or /keys/changes that device lists have\n     * been changed.\n     *\n     * @param {Object} syncData Object containing sync tokens associated with this sync\n     * @param {Object} syncDeviceLists device_lists field from /sync, or response from\n     * /keys/changes\n     */\n    public async handleDeviceListChanges(syncData: ISyncStateData, syncDeviceLists: ISyncDeviceLists): Promise<void> {\n        // Initial syncs don't have device change lists. We'll either get the complete list\n        // of changes for the interval or will have invalidated everything in willProcessSync\n        if (!syncData.oldSyncToken) return;\n\n        // Here, we're relying on the fact that we only ever save the sync data after\n        // sucessfully saving the device list data, so we're guaranteed that the device\n        // list store is at least as fresh as the sync token from the sync store, ie.\n        // any device changes received in sync tokens prior to the 'next' token here\n        // have been processed and are reflected in the current device list.\n        // If we didn't make this assumption, we'd have to use the /keys/changes API\n        // to get key changes between the sync token in the device list and the 'old'\n        // sync token used here to make sure we didn't miss any.\n        await this.evalDeviceListChanges(syncDeviceLists);\n    }\n\n    /**\n     * Send a request for some room keys, if we have not already done so\n     *\n     * @param {module:crypto~RoomKeyRequestBody} requestBody\n     * @param {Array<{userId: string, deviceId: string}>} recipients\n     * @param {boolean} resend whether to resend the key request if there is\n     *    already one\n     *\n     * @return {Promise} a promise that resolves when the key request is queued\n     */\n    public requestRoomKey(\n        requestBody: IRoomKeyRequestBody,\n        recipients: IRoomKeyRequestRecipient[],\n        resend = false,\n    ): Promise<void> {\n        return this.outgoingRoomKeyRequestManager.queueRoomKeyRequest(\n            requestBody, recipients, resend,\n        ).then(() => {\n            if (this.sendKeyRequestsImmediately) {\n                this.outgoingRoomKeyRequestManager.sendQueuedRequests();\n            }\n        }).catch((e) => {\n            // this normally means we couldn't talk to the store\n            logger.error(\n                'Error requesting key for event', e,\n            );\n        });\n    }\n\n    /**\n     * Cancel any earlier room key request\n     *\n     * @param {module:crypto~RoomKeyRequestBody} requestBody\n     *    parameters to match for cancellation\n     */\n    public cancelRoomKeyRequest(requestBody: IRoomKeyRequestBody): void {\n        this.outgoingRoomKeyRequestManager.cancelRoomKeyRequest(requestBody)\n            .catch((e) => {\n                logger.warn(\"Error clearing pending room key requests\", e);\n            });\n    }\n\n    /**\n     * Re-send any outgoing key requests, eg after verification\n     * @returns {Promise}\n     */\n    public async cancelAndResendAllOutgoingKeyRequests(): Promise<void> {\n        await this.outgoingRoomKeyRequestManager.cancelAndResendAllOutgoingRequests();\n    }\n\n    /**\n     * handle an m.room.encryption event\n     *\n     * @param {module:models/event.MatrixEvent} event encryption event\n     */\n    public async onCryptoEvent(event: MatrixEvent): Promise<void> {\n        const roomId = event.getRoomId();\n        const content = event.getContent<IRoomEncryption>();\n\n        try {\n            // inhibit the device list refresh for now - it will happen once we've\n            // finished processing the sync, in onSyncCompleted.\n            await this.setRoomEncryption(roomId, content, true);\n        } catch (e) {\n            logger.error(\"Error configuring encryption in room \" + roomId +\n                \":\", e);\n        }\n    }\n\n    /**\n     * Called before the result of a sync is processed\n     *\n     * @param {Object} syncData  the data from the 'MatrixClient.sync' event\n     */\n    public async onSyncWillProcess(syncData: ISyncStateData): Promise<void> {\n        if (!syncData.oldSyncToken) {\n            // If there is no old sync token, we start all our tracking from\n            // scratch, so mark everything as untracked. onCryptoEvent will\n            // be called for all e2e rooms during the processing of the sync,\n            // at which point we'll start tracking all the users of that room.\n            logger.log(\"Initial sync performed - resetting device tracking state\");\n            this.deviceList.stopTrackingAllDeviceLists();\n            // we always track our own device list (for key backups etc)\n            this.deviceList.startTrackingDeviceList(this.userId);\n            this.roomDeviceTrackingState = {};\n        }\n\n        this.sendKeyRequestsImmediately = false;\n    }\n\n    /**\n     * handle the completion of a /sync\n     *\n     * This is called after the processing of each successful /sync response.\n     * It is an opportunity to do a batch process on the information received.\n     *\n     * @param {Object} syncData  the data from the 'MatrixClient.sync' event\n     */\n    public async onSyncCompleted(syncData: ISyncStateData): Promise<void> {\n        this.deviceList.setSyncToken(syncData.nextSyncToken);\n        this.deviceList.saveIfDirty();\n\n        // we always track our own device list (for key backups etc)\n        this.deviceList.startTrackingDeviceList(this.userId);\n\n        this.deviceList.refreshOutdatedDeviceLists();\n\n        // we don't start uploading one-time keys until we've caught up with\n        // to-device messages, to help us avoid throwing away one-time-keys that we\n        // are about to receive messages for\n        // (https://github.com/vector-im/element-web/issues/2782).\n        if (!syncData.catchingUp) {\n            this.maybeUploadOneTimeKeys();\n            this.processReceivedRoomKeyRequests();\n\n            // likewise don't start requesting keys until we've caught up\n            // on to_device messages, otherwise we'll request keys that we're\n            // just about to get.\n            this.outgoingRoomKeyRequestManager.sendQueuedRequests();\n\n            // Sync has finished so send key requests straight away.\n            this.sendKeyRequestsImmediately = true;\n        }\n    }\n\n    /**\n     * Trigger the appropriate invalidations and removes for a given\n     * device list\n     *\n     * @param {Object} deviceLists device_lists field from /sync, or response from\n     * /keys/changes\n     */\n    private async evalDeviceListChanges(deviceLists: ISyncDeviceLists): Promise<void> {\n        if (deviceLists.changed && Array.isArray(deviceLists.changed)) {\n            deviceLists.changed.forEach((u) => {\n                this.deviceList.invalidateUserDeviceList(u);\n            });\n        }\n\n        if (deviceLists.left && Array.isArray(deviceLists.left) &&\n            deviceLists.left.length) {\n            // Check we really don't share any rooms with these users\n            // any more: the server isn't required to give us the\n            // exact correct set.\n            const e2eUserIds = new Set(await this.getTrackedE2eUsers());\n\n            deviceLists.left.forEach((u) => {\n                if (!e2eUserIds.has(u)) {\n                    this.deviceList.stopTrackingDeviceList(u);\n                }\n            });\n        }\n    }\n\n    /**\n     * Get a list of all the IDs of users we share an e2e room with\n     * for which we are tracking devices already\n     *\n     * @returns {string[]} List of user IDs\n     */\n    private async getTrackedE2eUsers(): Promise<string[]> {\n        const e2eUserIds = [];\n        for (const room of this.getTrackedE2eRooms()) {\n            const members = await room.getEncryptionTargetMembers();\n            for (const member of members) {\n                e2eUserIds.push(member.userId);\n            }\n        }\n        return e2eUserIds;\n    }\n\n    /**\n     * Get a list of the e2e-enabled rooms we are members of,\n     * and for which we are already tracking the devices\n     *\n     * @returns {module:models.Room[]}\n     */\n    private getTrackedE2eRooms(): Room[] {\n        return this.clientStore.getRooms().filter((room) => {\n            // check for rooms with encryption enabled\n            const alg = this.roomEncryptors[room.roomId];\n            if (!alg) {\n                return false;\n            }\n            if (!this.roomDeviceTrackingState[room.roomId]) {\n                return false;\n            }\n\n            // ignore any rooms which we have left\n            const myMembership = room.getMyMembership();\n            return myMembership === \"join\" || myMembership === \"invite\";\n        });\n    }\n\n    private onMembership = (event: MatrixEvent, member: RoomMember, oldMembership?: string) => {\n        try {\n            this.onRoomMembership(event, member, oldMembership);\n        } catch (e) {\n            logger.error(\"Error handling membership change:\", e);\n        }\n    };\n\n    private onToDeviceEvent = (event: MatrixEvent): void => {\n        try {\n            logger.log(`received to_device ${event.getType()} from: ` +\n                `${event.getSender()} id: ${event.getId()}`);\n\n            if (event.getType() == \"m.room_key\"\n                || event.getType() == \"m.forwarded_room_key\") {\n                this.onRoomKeyEvent(event);\n            } else if (event.getType() == \"m.room_key_request\") {\n                this.onRoomKeyRequestEvent(event);\n            } else if (event.getType() === \"m.secret.request\") {\n                this.secretStorage.onRequestReceived(event);\n            } else if (event.getType() === \"m.secret.send\") {\n                this.secretStorage.onSecretReceived(event);\n            } else if (event.getType() === \"m.room_key.withheld\"\n                || event.getType() === \"org.matrix.room_key.withheld\") {\n                this.onRoomKeyWithheldEvent(event);\n            } else if (event.getContent().transaction_id) {\n                this.onKeyVerificationMessage(event);\n            } else if (event.getContent().msgtype === \"m.bad.encrypted\") {\n                this.onToDeviceBadEncrypted(event);\n            } else if (event.isBeingDecrypted() || event.shouldAttemptDecryption()) {\n                if (!event.isBeingDecrypted()) {\n                    event.attemptDecryption(this);\n                }\n                // once the event has been decrypted, try again\n                event.once(MatrixEventEvent.Decrypted, (ev) => {\n                    this.onToDeviceEvent(ev);\n                });\n            }\n        } catch (e) {\n            logger.error(\"Error handling toDeviceEvent:\", e);\n        }\n    };\n\n    /**\n     * Handle a key event\n     *\n     * @private\n     * @param {module:models/event.MatrixEvent} event key event\n     */\n    private onRoomKeyEvent(event: MatrixEvent): void {\n        const content = event.getContent();\n\n        if (!content.room_id || !content.algorithm) {\n            logger.error(\"key event is missing fields\");\n            return;\n        }\n\n        if (!this.backupManager.checkedForBackup) {\n            // don't bother awaiting on this - the important thing is that we retry if we\n            // haven't managed to check before\n            this.backupManager.checkAndStart();\n        }\n\n        const alg = this.getRoomDecryptor(content.room_id, content.algorithm);\n        alg.onRoomKeyEvent(event);\n    }\n\n    /**\n     * Handle a key withheld event\n     *\n     * @private\n     * @param {module:models/event.MatrixEvent} event key withheld event\n     */\n    private onRoomKeyWithheldEvent(event: MatrixEvent): void {\n        const content = event.getContent();\n\n        if ((content.code !== \"m.no_olm\" && (!content.room_id || !content.session_id))\n            || !content.algorithm || !content.sender_key) {\n            logger.error(\"key withheld event is missing fields\");\n            return;\n        }\n\n        logger.info(\n            `Got room key withheld event from ${event.getSender()} (${content.sender_key}) `\n            + `for ${content.algorithm}/${content.room_id}/${content.session_id} `\n            + `with reason ${content.code} (${content.reason})`,\n        );\n\n        const alg = this.getRoomDecryptor(content.room_id, content.algorithm);\n        if (alg.onRoomKeyWithheldEvent) {\n            alg.onRoomKeyWithheldEvent(event);\n        }\n        if (!content.room_id) {\n            // retry decryption for all events sent by the sender_key.  This will\n            // update the events to show a message indicating that the olm session was\n            // wedged.\n            const roomDecryptors = this.getRoomDecryptors(content.algorithm);\n            for (const decryptor of roomDecryptors) {\n                decryptor.retryDecryptionFromSender(content.sender_key);\n            }\n        }\n    }\n\n    /**\n     * Handle a general key verification event.\n     *\n     * @private\n     * @param {module:models/event.MatrixEvent} event verification start event\n     */\n    private onKeyVerificationMessage(event: MatrixEvent): void {\n        if (!ToDeviceChannel.validateEvent(event, this.baseApis)) {\n            return;\n        }\n        const createRequest = (event: MatrixEvent) => {\n            if (!ToDeviceChannel.canCreateRequest(ToDeviceChannel.getEventType(event))) {\n                return;\n            }\n            const content = event.getContent();\n            const deviceId = content && content.from_device;\n            if (!deviceId) {\n                return;\n            }\n            const userId = event.getSender();\n            const channel = new ToDeviceChannel(\n                this.baseApis,\n                userId,\n                [deviceId],\n            );\n            return new VerificationRequest(\n                channel, this.verificationMethods, this.baseApis);\n        };\n        this.handleVerificationEvent(event, this.toDeviceVerificationRequests, createRequest);\n    }\n\n    /**\n     * Handle key verification requests sent as timeline events\n     *\n     * @private\n     * @param {module:models/event.MatrixEvent} event the timeline event\n     * @param {module:models/Room} room not used\n     * @param {boolean} atStart not used\n     * @param {boolean} removed not used\n     * @param {boolean} { liveEvent } whether this is a live event\n     */\n    private onTimelineEvent = (\n        event: MatrixEvent,\n        room: Room,\n        atStart: boolean,\n        removed: boolean,\n        { liveEvent = true } = {},\n    ): void => {\n        if (!InRoomChannel.validateEvent(event, this.baseApis)) {\n            return;\n        }\n        const createRequest = (event: MatrixEvent) => {\n            const channel = new InRoomChannel(\n                this.baseApis,\n                event.getRoomId(),\n            );\n            return new VerificationRequest(\n                channel, this.verificationMethods, this.baseApis);\n        };\n        this.handleVerificationEvent(event, this.inRoomVerificationRequests, createRequest, liveEvent);\n    };\n\n    private async handleVerificationEvent(\n        event: MatrixEvent,\n        requestsMap: IRequestsMap,\n        createRequest: (event: MatrixEvent) => VerificationRequest,\n        isLiveEvent = true,\n    ): Promise<void> {\n        // Wait for event to get its final ID with pendingEventOrdering: \"chronological\", since DM channels depend on it.\n        if (event.isSending() && event.status != EventStatus.SENT) {\n            let eventIdListener;\n            let statusListener;\n            try {\n                await new Promise((resolve, reject) => {\n                    eventIdListener = resolve;\n                    statusListener = () => {\n                        if (event.status == EventStatus.CANCELLED) {\n                            reject(new Error(\"Event status set to CANCELLED.\"));\n                        }\n                    };\n                    event.once(MatrixEventEvent.LocalEventIdReplaced, eventIdListener);\n                    event.on(MatrixEventEvent.Status, statusListener);\n                });\n            } catch (err) {\n                logger.error(\"error while waiting for the verification event to be sent: \" + err.message);\n                return;\n            } finally {\n                event.removeListener(MatrixEventEvent.LocalEventIdReplaced, eventIdListener);\n                event.removeListener(MatrixEventEvent.Status, statusListener);\n            }\n        }\n        let request = requestsMap.getRequest(event);\n        let isNewRequest = false;\n        if (!request) {\n            request = createRequest(event);\n            // a request could not be made from this event, so ignore event\n            if (!request) {\n                logger.log(`Crypto: could not find VerificationRequest for ` +\n                    `${event.getType()}, and could not create one, so ignoring.`);\n                return;\n            }\n            isNewRequest = true;\n            requestsMap.setRequest(event, request);\n        }\n        event.setVerificationRequest(request);\n        try {\n            await request.channel.handleEvent(event, request, isLiveEvent);\n        } catch (err) {\n            logger.error(\"error while handling verification event: \" + err.message);\n        }\n        const shouldEmit = isNewRequest &&\n            !request.initiatedByMe &&\n            !request.invalid && // check it has enough events to pass the UNSENT stage\n            !request.observeOnly;\n        if (shouldEmit) {\n            this.baseApis.emit(CryptoEvent.VerificationRequest, request);\n        }\n    }\n\n    /**\n     * Handle a toDevice event that couldn't be decrypted\n     *\n     * @private\n     * @param {module:models/event.MatrixEvent} event undecryptable event\n     */\n    private async onToDeviceBadEncrypted(event: MatrixEvent): Promise<void> {\n        const content = event.getWireContent();\n        const sender = event.getSender();\n        const algorithm = content.algorithm;\n        const deviceKey = content.sender_key;\n\n        // retry decryption for all events sent by the sender_key.  This will\n        // update the events to show a message indicating that the olm session was\n        // wedged.\n        const retryDecryption = () => {\n            const roomDecryptors = this.getRoomDecryptors(olmlib.MEGOLM_ALGORITHM);\n            for (const decryptor of roomDecryptors) {\n                decryptor.retryDecryptionFromSender(deviceKey);\n            }\n        };\n\n        if (sender === undefined || deviceKey === undefined || deviceKey === undefined) {\n            return;\n        }\n\n        // check when we last forced a new session with this device: if we've already done so\n        // recently, don't do it again.\n        this.lastNewSessionForced[sender] = this.lastNewSessionForced[sender] || {};\n        const lastNewSessionForced = this.lastNewSessionForced[sender][deviceKey] || 0;\n        if (lastNewSessionForced + MIN_FORCE_SESSION_INTERVAL_MS > Date.now()) {\n            logger.debug(\n                \"New session already forced with device \" + sender + \":\" + deviceKey +\n                \" at \" + lastNewSessionForced + \": not forcing another\",\n            );\n            await this.olmDevice.recordSessionProblem(deviceKey, \"wedged\", true);\n            retryDecryption();\n            return;\n        }\n\n        // establish a new olm session with this device since we're failing to decrypt messages\n        // on a current session.\n        // Note that an undecryptable message from another device could easily be spoofed -\n        // is there anything we can do to mitigate this?\n        let device = this.deviceList.getDeviceByIdentityKey(algorithm, deviceKey);\n        if (!device) {\n            // if we don't know about the device, fetch the user's devices again\n            // and retry before giving up\n            await this.downloadKeys([sender], false);\n            device = this.deviceList.getDeviceByIdentityKey(algorithm, deviceKey);\n            if (!device) {\n                logger.info(\n                    \"Couldn't find device for identity key \" + deviceKey +\n                    \": not re-establishing session\",\n                );\n                await this.olmDevice.recordSessionProblem(deviceKey, \"wedged\", false);\n                retryDecryption();\n                return;\n            }\n        }\n        const devicesByUser: Record<string, DeviceInfo[]> = {};\n        devicesByUser[sender] = [device];\n        await olmlib.ensureOlmSessionsForDevices(this.olmDevice, this.baseApis, devicesByUser, true);\n\n        this.lastNewSessionForced[sender][deviceKey] = Date.now();\n\n        // Now send a blank message on that session so the other side knows about it.\n        // (The keyshare request is sent in the clear so that won't do)\n        // We send this first such that, as long as the toDevice messages arrive in the\n        // same order we sent them, the other end will get this first, set up the new session,\n        // then get the keyshare request and send the key over this new session (because it\n        // is the session it has most recently received a message on).\n        const encryptedContent = {\n            algorithm: olmlib.OLM_ALGORITHM,\n            sender_key: this.olmDevice.deviceCurve25519Key,\n            ciphertext: {},\n        };\n        await olmlib.encryptMessageForDevice(\n            encryptedContent.ciphertext,\n            this.userId,\n            this.deviceId,\n            this.olmDevice,\n            sender,\n            device,\n            { type: \"m.dummy\" },\n        );\n\n        await this.olmDevice.recordSessionProblem(deviceKey, \"wedged\", true);\n        retryDecryption();\n\n        await this.baseApis.sendToDevice(\"m.room.encrypted\", {\n            [sender]: {\n                [device.deviceId]: encryptedContent,\n            },\n        });\n\n        // Most of the time this probably won't be necessary since we'll have queued up a key request when\n        // we failed to decrypt the message and will be waiting a bit for the key to arrive before sending\n        // it. This won't always be the case though so we need to re-send any that have already been sent\n        // to avoid races.\n        const requestsToResend =\n            await this.outgoingRoomKeyRequestManager.getOutgoingSentRoomKeyRequest(sender, device.deviceId);\n        for (const keyReq of requestsToResend) {\n            this.requestRoomKey(keyReq.requestBody, keyReq.recipients, true);\n        }\n    }\n\n    /**\n     * Handle a change in the membership state of a member of a room\n     *\n     * @private\n     * @param {module:models/event.MatrixEvent} event  event causing the change\n     * @param {module:models/room-member} member  user whose membership changed\n     * @param {string=} oldMembership  previous membership\n     */\n    private onRoomMembership(event: MatrixEvent, member: RoomMember, oldMembership?: string): void {\n        // this event handler is registered on the *client* (as opposed to the room\n        // member itself), which means it is only called on changes to the *live*\n        // membership state (ie, it is not called when we back-paginate, nor when\n        // we load the state in the initialsync).\n        //\n        // Further, it is automatically registered and called when new members\n        // arrive in the room.\n\n        const roomId = member.roomId;\n\n        const alg = this.roomEncryptors[roomId];\n        if (!alg) {\n            // not encrypting in this room\n            return;\n        }\n        // only mark users in this room as tracked if we already started tracking in this room\n        // this way we don't start device queries after sync on behalf of this room which we won't use\n        // the result of anyway, as we'll need to do a query again once all the members are fetched\n        // by calling _trackRoomDevices\n        if (this.roomDeviceTrackingState[roomId]) {\n            if (member.membership == 'join') {\n                logger.log('Join event for ' + member.userId + ' in ' + roomId);\n                // make sure we are tracking the deviceList for this user\n                this.deviceList.startTrackingDeviceList(member.userId);\n            } else if (member.membership == 'invite' &&\n                this.clientStore.getRoom(roomId).shouldEncryptForInvitedMembers()) {\n                logger.log('Invite event for ' + member.userId + ' in ' + roomId);\n                this.deviceList.startTrackingDeviceList(member.userId);\n            }\n        }\n\n        alg.onRoomMembership(event, member, oldMembership);\n    }\n\n    /**\n     * Called when we get an m.room_key_request event.\n     *\n     * @private\n     * @param {module:models/event.MatrixEvent} event key request event\n     */\n    private onRoomKeyRequestEvent(event: MatrixEvent): void {\n        const content = event.getContent();\n        if (content.action === \"request\") {\n            // Queue it up for now, because they tend to arrive before the room state\n            // events at initial sync, and we want to see if we know anything about the\n            // room before passing them on to the app.\n            const req = new IncomingRoomKeyRequest(event);\n            this.receivedRoomKeyRequests.push(req);\n        } else if (content.action === \"request_cancellation\") {\n            const req = new IncomingRoomKeyRequestCancellation(event);\n            this.receivedRoomKeyRequestCancellations.push(req);\n        }\n    }\n\n    /**\n     * Process any m.room_key_request events which were queued up during the\n     * current sync.\n     *\n     * @private\n     */\n    private async processReceivedRoomKeyRequests(): Promise<void> {\n        if (this.processingRoomKeyRequests) {\n            // we're still processing last time's requests; keep queuing new ones\n            // up for now.\n            return;\n        }\n        this.processingRoomKeyRequests = true;\n\n        try {\n            // we need to grab and clear the queues in the synchronous bit of this method,\n            // so that we don't end up racing with the next /sync.\n            const requests = this.receivedRoomKeyRequests;\n            this.receivedRoomKeyRequests = [];\n            const cancellations = this.receivedRoomKeyRequestCancellations;\n            this.receivedRoomKeyRequestCancellations = [];\n\n            // Process all of the requests, *then* all of the cancellations.\n            //\n            // This makes sure that if we get a request and its cancellation in the\n            // same /sync result, then we process the request before the\n            // cancellation (and end up with a cancelled request), rather than the\n            // cancellation before the request (and end up with an outstanding\n            // request which should have been cancelled.)\n            await Promise.all(requests.map((req) =>\n                this.processReceivedRoomKeyRequest(req)));\n            await Promise.all(cancellations.map((cancellation) =>\n                this.processReceivedRoomKeyRequestCancellation(cancellation)));\n        } catch (e) {\n            logger.error(`Error processing room key requsts: ${e}`);\n        } finally {\n            this.processingRoomKeyRequests = false;\n        }\n    }\n\n    /**\n     * Helper for processReceivedRoomKeyRequests\n     *\n     * @param {IncomingRoomKeyRequest} req\n     */\n    private async processReceivedRoomKeyRequest(req: IncomingRoomKeyRequest): Promise<void> {\n        const userId = req.userId;\n        const deviceId = req.deviceId;\n\n        const body = req.requestBody;\n        const roomId = body.room_id;\n        const alg = body.algorithm;\n\n        logger.log(`m.room_key_request from ${userId}:${deviceId}` +\n            ` for ${roomId} / ${body.session_id} (id ${req.requestId})`);\n\n        if (userId !== this.userId) {\n            if (!this.roomEncryptors[roomId]) {\n                logger.debug(`room key request for unencrypted room ${roomId}`);\n                return;\n            }\n            const encryptor = this.roomEncryptors[roomId];\n            const device = this.deviceList.getStoredDevice(userId, deviceId);\n            if (!device) {\n                logger.debug(`Ignoring keyshare for unknown device ${userId}:${deviceId}`);\n                return;\n            }\n\n            try {\n                await encryptor.reshareKeyWithDevice(body.sender_key, body.session_id, userId, device);\n            } catch (e) {\n                logger.warn(\n                    \"Failed to re-share keys for session \" + body.session_id +\n                    \" with device \" + userId + \":\" + device.deviceId, e,\n                );\n            }\n            return;\n        }\n\n        if (deviceId === this.deviceId) {\n            // We'll always get these because we send room key requests to\n            // '*' (ie. 'all devices') which includes the sending device,\n            // so ignore requests from ourself because apart from it being\n            // very silly, it won't work because an Olm session cannot send\n            // messages to itself.\n            // The log here is probably superfluous since we know this will\n            // always happen, but let's log anyway for now just in case it\n            // causes issues.\n            logger.log(\"Ignoring room key request from ourselves\");\n            return;\n        }\n\n        // todo: should we queue up requests we don't yet have keys for,\n        // in case they turn up later?\n\n        // if we don't have a decryptor for this room/alg, we don't have\n        // the keys for the requested events, and can drop the requests.\n        if (!this.roomDecryptors[roomId]) {\n            logger.log(`room key request for unencrypted room ${roomId}`);\n            return;\n        }\n\n        const decryptor = this.roomDecryptors[roomId][alg];\n        if (!decryptor) {\n            logger.log(`room key request for unknown alg ${alg} in room ${roomId}`);\n            return;\n        }\n\n        if (!await decryptor.hasKeysForKeyRequest(req)) {\n            logger.log(\n                `room key request for unknown session ${roomId} / ` +\n                body.session_id,\n            );\n            return;\n        }\n\n        req.share = () => {\n            decryptor.shareKeysWithDevice(req);\n        };\n\n        // if the device is verified already, share the keys\n        if (this.checkDeviceTrust(userId, deviceId).isVerified()) {\n            logger.log('device is already verified: sharing keys');\n            req.share();\n            return;\n        }\n\n        this.emit(CryptoEvent.RoomKeyRequest, req);\n    }\n\n    /**\n     * Helper for processReceivedRoomKeyRequests\n     *\n     * @param {IncomingRoomKeyRequestCancellation} cancellation\n     */\n    private async processReceivedRoomKeyRequestCancellation(\n        cancellation: IncomingRoomKeyRequestCancellation,\n    ): Promise<void> {\n        logger.log(\n            `m.room_key_request cancellation for ${cancellation.userId}:` +\n            `${cancellation.deviceId} (id ${cancellation.requestId})`,\n        );\n\n        // we should probably only notify the app of cancellations we told it\n        // about, but we don't currently have a record of that, so we just pass\n        // everything through.\n        this.emit(CryptoEvent.RoomKeyRequestCancellation, cancellation);\n    }\n\n    /**\n     * Get a decryptor for a given room and algorithm.\n     *\n     * If we already have a decryptor for the given room and algorithm, return\n     * it. Otherwise try to instantiate it.\n     *\n     * @private\n     *\n     * @param {string?} roomId   room id for decryptor. If undefined, a temporary\n     * decryptor is instantiated.\n     *\n     * @param {string} algorithm  crypto algorithm\n     *\n     * @return {module:crypto.algorithms.base.DecryptionAlgorithm}\n     *\n     * @raises {module:crypto.algorithms.DecryptionError} if the algorithm is\n     * unknown\n     */\n    public getRoomDecryptor(roomId: string, algorithm: string): DecryptionAlgorithm {\n        let decryptors: Record<string, DecryptionAlgorithm>;\n        let alg: DecryptionAlgorithm;\n\n        roomId = roomId || null;\n        if (roomId) {\n            decryptors = this.roomDecryptors[roomId];\n            if (!decryptors) {\n                this.roomDecryptors[roomId] = decryptors = {};\n            }\n\n            alg = decryptors[algorithm];\n            if (alg) {\n                return alg;\n            }\n        }\n\n        const AlgClass = algorithms.DECRYPTION_CLASSES[algorithm];\n        if (!AlgClass) {\n            throw new algorithms.DecryptionError(\n                'UNKNOWN_ENCRYPTION_ALGORITHM',\n                'Unknown encryption algorithm \"' + algorithm + '\".',\n            );\n        }\n        alg = new AlgClass({\n            userId: this.userId,\n            crypto: this,\n            olmDevice: this.olmDevice,\n            baseApis: this.baseApis,\n            roomId: roomId,\n        });\n\n        if (decryptors) {\n            decryptors[algorithm] = alg;\n        }\n        return alg;\n    }\n\n    /**\n     * Get all the room decryptors for a given encryption algorithm.\n     *\n     * @param {string} algorithm The encryption algorithm\n     *\n     * @return {array} An array of room decryptors\n     */\n    private getRoomDecryptors(algorithm: string): DecryptionAlgorithm[] {\n        const decryptors = [];\n        for (const d of Object.values(this.roomDecryptors)) {\n            if (algorithm in d) {\n                decryptors.push(d[algorithm]);\n            }\n        }\n        return decryptors;\n    }\n\n    /**\n     * sign the given object with our ed25519 key\n     *\n     * @param {Object} obj  Object to which we will add a 'signatures' property\n     */\n    public async signObject(obj: object & ISignableObject): Promise<void> {\n        const sigs = obj.signatures || {};\n        const unsigned = obj.unsigned;\n\n        delete obj.signatures;\n        delete obj.unsigned;\n\n        sigs[this.userId] = sigs[this.userId] || {};\n        sigs[this.userId][\"ed25519:\" + this.deviceId] = await this.olmDevice.sign(anotherjson.stringify(obj));\n        obj.signatures = sigs;\n        if (unsigned !== undefined) obj.unsigned = unsigned;\n    }\n}\n\n/**\n * Fix up the backup key, that may be in the wrong format due to a bug in a\n * migration step.  Some backup keys were stored as a comma-separated list of\n * integers, rather than a base64-encoded byte array.  If this function is\n * passed a string that looks like a list of integers rather than a base64\n * string, it will attempt to convert it to the right format.\n *\n * @param {string} key the key to check\n * @returns {null | string} If the key is in the wrong format, then the fixed\n * key will be returned. Otherwise null will be returned.\n *\n */\nexport function fixBackupKey(key: string): string | null {\n    if (typeof key !== \"string\" || key.indexOf(\",\") < 0) {\n        return null;\n    }\n    const fixedKey = Uint8Array.from(key.split(\",\"), x => parseInt(x));\n    return olmlib.encodeBase64(fixedKey);\n}\n\n/**\n * The parameters of a room key request. The details of the request may\n * vary with the crypto algorithm, but the management and storage layers for\n * outgoing requests expect it to have 'room_id' and 'session_id' properties.\n *\n * @typedef {Object} RoomKeyRequestBody\n */\n\n/**\n * Represents a received m.room_key_request event\n *\n * @property {string} userId    user requesting the key\n * @property {string} deviceId  device requesting the key\n * @property {string} requestId unique id for the request\n * @property {module:crypto~RoomKeyRequestBody} requestBody\n * @property {function()} share  callback which, when called, will ask\n *    the relevant crypto algorithm implementation to share the keys for\n *    this request.\n */\nexport class IncomingRoomKeyRequest {\n    public readonly userId: string;\n    public readonly deviceId: string;\n    public readonly requestId: string;\n    public readonly requestBody: IRoomKeyRequestBody;\n    public share: () => void;\n\n    constructor(event: MatrixEvent) {\n        const content = event.getContent();\n\n        this.userId = event.getSender();\n        this.deviceId = content.requesting_device_id;\n        this.requestId = content.request_id;\n        this.requestBody = content.body || {};\n        this.share = () => {\n            throw new Error(\"don't know how to share keys for this request yet\");\n        };\n    }\n}\n\n/**\n * Represents a received m.room_key_request cancellation\n *\n * @property {string} userId    user requesting the cancellation\n * @property {string} deviceId  device requesting the cancellation\n * @property {string} requestId unique id for the request to be cancelled\n */\nclass IncomingRoomKeyRequestCancellation {\n    public readonly userId: string;\n    public readonly deviceId: string;\n    public readonly requestId: string;\n\n    constructor(event: MatrixEvent) {\n        const content = event.getContent();\n\n        this.userId = event.getSender();\n        this.deviceId = content.requesting_device_id;\n        this.requestId = content.request_id;\n    }\n}\n\n/**\n * The result of a (successful) call to decryptEvent.\n *\n * @typedef {Object} EventDecryptionResult\n *\n * @property {Object} clearEvent The plaintext payload for the event\n *     (typically containing <tt>type</tt> and <tt>content</tt> fields).\n *\n * @property {?string} senderCurve25519Key Key owned by the sender of this\n *    event.  See {@link module:models/event.MatrixEvent#getSenderKey}.\n *\n * @property {?string} claimedEd25519Key ed25519 key claimed by the sender of\n *    this event. See\n *    {@link module:models/event.MatrixEvent#getClaimedEd25519Key}.\n *\n * @property {?Array<string>} forwardingCurve25519KeyChain list of curve25519\n *     keys involved in telling us about the senderCurve25519Key and\n *     claimedEd25519Key. See\n *     {@link module:models/event.MatrixEvent#getForwardingCurve25519KeyChain}.\n */\n\n/**\n * Fires when we receive a room key request\n *\n * @event module:client~MatrixClient#\"crypto.roomKeyRequest\"\n * @param {module:crypto~IncomingRoomKeyRequest} req  request details\n */\n\n/**\n * Fires when we receive a room key request cancellation\n *\n * @event module:client~MatrixClient#\"crypto.roomKeyRequestCancellation\"\n * @param {module:crypto~IncomingRoomKeyRequestCancellation} req\n */\n\n/**\n * Fires when the app may wish to warn the user about something related\n * the end-to-end crypto.\n *\n * @event module:client~MatrixClient#\"crypto.warning\"\n * @param {string} type One of the strings listed above\n */\n",
    "/*\nCopyright 2018 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { randomString } from '../randomstring';\nimport { getCrypto } from '../utils';\n\nconst subtleCrypto = (typeof window !== \"undefined\" && window.crypto) ?\n    (window.crypto.subtle || window.crypto.webkitSubtle) : null;\n\nconst DEFAULT_ITERATIONS = 500000;\n\nconst DEFAULT_BITSIZE = 256;\n\n/* eslint-disable camelcase */\ninterface IAuthData {\n    private_key_salt?: string;\n    private_key_iterations?: number;\n    private_key_bits?: number;\n}\n/* eslint-enable camelcase */\n\ninterface IKey {\n    key: Uint8Array;\n    salt: string;\n    iterations: number;\n}\n\nexport async function keyFromAuthData(authData: IAuthData, password: string): Promise<Uint8Array> {\n    if (!global.Olm) {\n        throw new Error(\"Olm is not available\");\n    }\n\n    if (!authData.private_key_salt || !authData.private_key_iterations) {\n        throw new Error(\n            \"Salt and/or iterations not found: \" +\n            \"this backup cannot be restored with a passphrase\",\n        );\n    }\n\n    return await deriveKey(\n        password, authData.private_key_salt,\n        authData.private_key_iterations,\n        authData.private_key_bits || DEFAULT_BITSIZE,\n    );\n}\n\nexport async function keyFromPassphrase(password: string): Promise<IKey> {\n    if (!global.Olm) {\n        throw new Error(\"Olm is not available\");\n    }\n\n    const salt = randomString(32);\n\n    const key = await deriveKey(password, salt, DEFAULT_ITERATIONS, DEFAULT_BITSIZE);\n\n    return { key, salt, iterations: DEFAULT_ITERATIONS };\n}\n\nexport async function deriveKey(\n    password: string,\n    salt: string,\n    iterations: number,\n    numBits = DEFAULT_BITSIZE,\n): Promise<Uint8Array> {\n    return subtleCrypto\n        ? deriveKeyBrowser(password, salt, iterations, numBits)\n        : deriveKeyNode(password, salt, iterations, numBits);\n}\n\nasync function deriveKeyBrowser(\n    password: string,\n    salt: string,\n    iterations: number,\n    numBits: number,\n): Promise<Uint8Array> {\n    const subtleCrypto = global.crypto.subtle;\n    const TextEncoder = global.TextEncoder;\n    if (!subtleCrypto || !TextEncoder) {\n        throw new Error(\"Password-based backup is not avaiable on this platform\");\n    }\n\n    const key = await subtleCrypto.importKey(\n        'raw',\n        new TextEncoder().encode(password),\n        { name: 'PBKDF2' },\n        false,\n        ['deriveBits'],\n    );\n\n    const keybits = await subtleCrypto.deriveBits(\n        {\n            name: 'PBKDF2',\n            salt: new TextEncoder().encode(salt),\n            iterations: iterations,\n            hash: 'SHA-512',\n        },\n        key,\n        numBits,\n    );\n\n    return new Uint8Array(keybits);\n}\n\nasync function deriveKeyNode(\n    password: string,\n    salt: string,\n    iterations: number,\n    numBits: number,\n): Promise<Uint8Array> {\n    const crypto = getCrypto();\n    if (!crypto) {\n        throw new Error(\"No usable crypto implementation\");\n    }\n\n    return crypto.pbkdf2Sync(password, Buffer.from(salt, 'binary'), iterations, numBits, 'sha512');\n}\n",
    "/*\nCopyright 2016 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * @module olmlib\n *\n * Utilities common to olm encryption algorithms\n */\n\nimport anotherjson from \"another-json\";\nimport { Logger } from \"loglevel\";\n\nimport type { PkSigning } from \"@matrix-org/olm\";\nimport { OlmDevice } from \"./OlmDevice\";\nimport { DeviceInfo } from \"./deviceinfo\";\nimport { logger } from '../logger';\nimport { IOneTimeKey } from \"./dehydration\";\nimport { IClaimOTKsResult, MatrixClient } from \"../client\";\nimport { ISignatures } from \"../@types/signed\";\n\nenum Algorithm {\n    Olm = \"m.olm.v1.curve25519-aes-sha2\",\n    Megolm = \"m.megolm.v1.aes-sha2\",\n    MegolmBackup = \"m.megolm_backup.v1.curve25519-aes-sha2\",\n}\n\n/**\n * matrix algorithm tag for olm\n */\nexport const OLM_ALGORITHM = Algorithm.Olm;\n\n/**\n * matrix algorithm tag for megolm\n */\nexport const MEGOLM_ALGORITHM = Algorithm.Megolm;\n\n/**\n * matrix algorithm tag for megolm backups\n */\nexport const MEGOLM_BACKUP_ALGORITHM = Algorithm.MegolmBackup;\n\nexport interface IOlmSessionResult {\n    device: DeviceInfo;\n    sessionId?: string;\n}\n\n/**\n * Encrypt an event payload for an Olm device\n *\n * @param {Object<string, string>} resultsObject  The `ciphertext` property\n *   of the m.room.encrypted event to which to add our result\n *\n * @param {string} ourUserId\n * @param {string} ourDeviceId\n * @param {module:crypto/OlmDevice} olmDevice olm.js wrapper\n * @param {string} recipientUserId\n * @param {module:crypto/deviceinfo} recipientDevice\n * @param {object} payloadFields fields to include in the encrypted payload\n *\n * Returns a promise which resolves (to undefined) when the payload\n *    has been encrypted into `resultsObject`\n */\nexport async function encryptMessageForDevice(\n    resultsObject: Record<string, string>,\n    ourUserId: string,\n    ourDeviceId: string,\n    olmDevice: OlmDevice,\n    recipientUserId: string,\n    recipientDevice: DeviceInfo,\n    payloadFields: Record<string, any>,\n) {\n    const deviceKey = recipientDevice.getIdentityKey();\n    const sessionId = await olmDevice.getSessionIdForDevice(deviceKey);\n    if (sessionId === null) {\n        // If we don't have a session for a device then\n        // we can't encrypt a message for it.\n        return;\n    }\n\n    logger.log(\n        \"Using sessionid \" + sessionId + \" for device \" +\n            recipientUserId + \":\" + recipientDevice.deviceId,\n    );\n\n    const payload = {\n        sender: ourUserId,\n        // TODO this appears to no longer be used whatsoever\n        sender_device: ourDeviceId,\n\n        // Include the Ed25519 key so that the recipient knows what\n        // device this message came from.\n        // We don't need to include the curve25519 key since the\n        // recipient will already know this from the olm headers.\n        // When combined with the device keys retrieved from the\n        // homeserver signed by the ed25519 key this proves that\n        // the curve25519 key and the ed25519 key are owned by\n        // the same device.\n        keys: {\n            \"ed25519\": olmDevice.deviceEd25519Key,\n        },\n\n        // include the recipient device details in the payload,\n        // to avoid unknown key attacks, per\n        // https://github.com/vector-im/vector-web/issues/2483\n        recipient: recipientUserId,\n        recipient_keys: {\n            \"ed25519\": recipientDevice.getFingerprint(),\n        },\n    };\n\n    // TODO: technically, a bunch of that stuff only needs to be included for\n    // pre-key messages: after that, both sides know exactly which devices are\n    // involved in the session. If we're looking to reduce data transfer in the\n    // future, we could elide them for subsequent messages.\n\n    Object.assign(payload, payloadFields);\n\n    resultsObject[deviceKey] = await olmDevice.encryptMessage(\n        deviceKey, sessionId, JSON.stringify(payload),\n    );\n}\n\ninterface IExistingOlmSession {\n    device: DeviceInfo;\n    sessionId?: string;\n}\n\n/**\n * Get the existing olm sessions for the given devices, and the devices that\n * don't have olm sessions.\n *\n * @param {module:crypto/OlmDevice} olmDevice\n *\n * @param {MatrixClient} baseApis\n *\n * @param {object<string, module:crypto/deviceinfo[]>} devicesByUser\n *    map from userid to list of devices to ensure sessions for\n *\n * @return {Promise} resolves to an array.  The first element of the array is a\n *    a map of user IDs to arrays of deviceInfo, representing the devices that\n *    don't have established olm sessions.  The second element of the array is\n *    a map from userId to deviceId to {@link module:crypto~OlmSessionResult}\n */\nexport async function getExistingOlmSessions(\n    olmDevice: OlmDevice,\n    baseApis: MatrixClient,\n    devicesByUser: Record<string, DeviceInfo[]>,\n): Promise<[Record<string, DeviceInfo[]>, Record<string, Record<string, IExistingOlmSession>>]> {\n    const devicesWithoutSession: {[userId: string]: DeviceInfo[]} = {};\n    const sessions: {[userId: string]: {[deviceId: string]: IExistingOlmSession}} = {};\n\n    const promises: Promise<void>[] = [];\n\n    for (const [userId, devices] of Object.entries(devicesByUser)) {\n        for (const deviceInfo of devices) {\n            const deviceId = deviceInfo.deviceId;\n            const key = deviceInfo.getIdentityKey();\n            promises.push((async () => {\n                const sessionId = await olmDevice.getSessionIdForDevice(\n                    key, true,\n                );\n                if (sessionId === null) {\n                    devicesWithoutSession[userId] = devicesWithoutSession[userId] || [];\n                    devicesWithoutSession[userId].push(deviceInfo);\n                } else {\n                    sessions[userId] = sessions[userId] || {};\n                    sessions[userId][deviceId] = {\n                        device: deviceInfo,\n                        sessionId: sessionId,\n                    };\n                }\n            })());\n        }\n    }\n\n    await Promise.all(promises);\n\n    return [devicesWithoutSession, sessions];\n}\n\n/**\n * Try to make sure we have established olm sessions for the given devices.\n *\n * @param {module:crypto/OlmDevice} olmDevice\n *\n * @param {MatrixClient} baseApis\n *\n * @param {object<string, module:crypto/deviceinfo[]>} devicesByUser\n *    map from userid to list of devices to ensure sessions for\n *\n * @param {boolean} [force=false] If true, establish a new session even if one\n *     already exists.\n *\n * @param {Number} [otkTimeout] The timeout in milliseconds when requesting\n *     one-time keys for establishing new olm sessions.\n *\n * @param {Array} [failedServers] An array to fill with remote servers that\n *     failed to respond to one-time-key requests.\n *\n * @param {Logger} [log] A possibly customised log\n *\n * @return {Promise} resolves once the sessions are complete, to\n *    an Object mapping from userId to deviceId to\n *    {@link module:crypto~OlmSessionResult}\n */\nexport async function ensureOlmSessionsForDevices(\n    olmDevice: OlmDevice,\n    baseApis: MatrixClient,\n    devicesByUser: Record<string, DeviceInfo[]>,\n    force = false,\n    otkTimeout?: number,\n    failedServers?: string[],\n    log: Logger = logger,\n): Promise<Record<string, Record<string, IOlmSessionResult>>> {\n    if (typeof force === \"number\") {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore - backwards compatibility\n        log = failedServers;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore - backwards compatibility\n        failedServers = otkTimeout;\n        otkTimeout = force;\n        force = false;\n    }\n\n    const devicesWithoutSession: [string, string][] = [\n        // [userId, deviceId], ...\n    ];\n    const result: {[userId: string]: {[deviceId: string]: IExistingOlmSession}} = {};\n    const resolveSession: Record<string, (sessionId?: string) => void> = {};\n\n    // Mark all sessions this task intends to update as in progress. It is\n    // important to do this for all devices this task cares about in a single\n    // synchronous operation, as otherwise it is possible to have deadlocks\n    // where multiple tasks wait indefinitely on another task to update some set\n    // of common devices.\n    for (const [, devices] of Object.entries(devicesByUser)) {\n        for (const deviceInfo of devices) {\n            const key = deviceInfo.getIdentityKey();\n\n            if (key === olmDevice.deviceCurve25519Key) {\n                // We don't start sessions with ourself, so there's no need to\n                // mark it in progress.\n                continue;\n            }\n\n            if (!olmDevice.sessionsInProgress[key]) {\n                // pre-emptively mark the session as in-progress to avoid race\n                // conditions.  If we find that we already have a session, then\n                // we'll resolve\n                olmDevice.sessionsInProgress[key] = new Promise(resolve => {\n                    resolveSession[key] = (v: any) => {\n                        delete olmDevice.sessionsInProgress[key];\n                        resolve(v);\n                    };\n                });\n            }\n        }\n    }\n\n    for (const [userId, devices] of Object.entries(devicesByUser)) {\n        result[userId] = {};\n        for (const deviceInfo of devices) {\n            const deviceId = deviceInfo.deviceId;\n            const key = deviceInfo.getIdentityKey();\n\n            if (key === olmDevice.deviceCurve25519Key) {\n                // We should never be trying to start a session with ourself.\n                // Apart from talking to yourself being the first sign of madness,\n                // olm sessions can't do this because they get confused when\n                // they get a message and see that the 'other side' has started a\n                // new chain when this side has an active sender chain.\n                // If you see this message being logged in the wild, we should find\n                // the thing that is trying to send Olm messages to itself and fix it.\n                log.info(\"Attempted to start session with ourself! Ignoring\");\n                // We must fill in the section in the return value though, as callers\n                // expect it to be there.\n                result[userId][deviceId] = {\n                    device: deviceInfo,\n                    sessionId: null,\n                };\n                continue;\n            }\n\n            const forWhom = `for ${key} (${userId}:${deviceId})`;\n            const sessionId = await olmDevice.getSessionIdForDevice(key, !!resolveSession[key], log);\n            if (sessionId !== null && resolveSession[key]) {\n                // we found a session, but we had marked the session as\n                // in-progress, so resolve it now, which will unmark it and\n                // unblock anything that was waiting\n                resolveSession[key]();\n            }\n            if (sessionId === null || force) {\n                if (force) {\n                    log.info(`Forcing new Olm session ${forWhom}`);\n                } else {\n                    log.info(`Making new Olm session ${forWhom}`);\n                }\n                devicesWithoutSession.push([userId, deviceId]);\n            }\n            result[userId][deviceId] = {\n                device: deviceInfo,\n                sessionId: sessionId,\n            };\n        }\n    }\n\n    if (devicesWithoutSession.length === 0) {\n        return result;\n    }\n\n    const oneTimeKeyAlgorithm = \"signed_curve25519\";\n    let res;\n    let taskDetail = `one-time keys for ${devicesWithoutSession.length} devices`;\n    try {\n        log.debug(`Claiming ${taskDetail}`);\n        res = await baseApis.claimOneTimeKeys(devicesWithoutSession, oneTimeKeyAlgorithm, otkTimeout);\n        log.debug(`Claimed ${taskDetail}`);\n    } catch (e) {\n        for (const resolver of Object.values(resolveSession)) {\n            resolver();\n        }\n        log.log(`Failed to claim ${taskDetail}`, e, devicesWithoutSession);\n        throw e;\n    }\n\n    if (failedServers && \"failures\" in res) {\n        failedServers.push(...Object.keys(res.failures));\n    }\n\n    const otkResult = res.one_time_keys || {} as IClaimOTKsResult[\"one_time_keys\"];\n    const promises: Promise<void>[] = [];\n    for (const [userId, devices] of Object.entries(devicesByUser)) {\n        const userRes = otkResult[userId] || {};\n        for (let j = 0; j < devices.length; j++) {\n            const deviceInfo = devices[j];\n            const deviceId = deviceInfo.deviceId;\n            const key = deviceInfo.getIdentityKey();\n\n            if (key === olmDevice.deviceCurve25519Key) {\n                // We've already logged about this above. Skip here too\n                // otherwise we'll log saying there are no one-time keys\n                // which will be confusing.\n                continue;\n            }\n\n            if (result[userId][deviceId].sessionId && !force) {\n                // we already have a result for this device\n                continue;\n            }\n\n            const deviceRes = userRes[deviceId] || {};\n            let oneTimeKey: IOneTimeKey = null;\n            for (const keyId in deviceRes) {\n                if (keyId.indexOf(oneTimeKeyAlgorithm + \":\") === 0) {\n                    oneTimeKey = deviceRes[keyId];\n                }\n            }\n\n            if (!oneTimeKey) {\n                log.warn(\n                    `No one-time keys (alg=${oneTimeKeyAlgorithm}) ` +\n                    `for device ${userId}:${deviceId}`,\n                );\n                if (resolveSession[key]) {\n                    resolveSession[key]();\n                }\n                continue;\n            }\n\n            promises.push(\n                _verifyKeyAndStartSession(\n                    olmDevice, oneTimeKey, userId, deviceInfo,\n                ).then((sid) => {\n                    if (resolveSession[key]) {\n                        resolveSession[key](sid);\n                    }\n                    result[userId][deviceId].sessionId = sid;\n                }, (e) => {\n                    if (resolveSession[key]) {\n                        resolveSession[key]();\n                    }\n                    throw e;\n                }),\n            );\n        }\n    }\n\n    taskDetail = `Olm sessions for ${promises.length} devices`;\n    log.debug(`Starting ${taskDetail}`);\n    await Promise.all(promises);\n    log.debug(`Started ${taskDetail}`);\n    return result;\n}\n\nasync function _verifyKeyAndStartSession(\n    olmDevice: OlmDevice,\n    oneTimeKey: IOneTimeKey,\n    userId: string,\n    deviceInfo: DeviceInfo,\n): Promise<string> {\n    const deviceId = deviceInfo.deviceId;\n    try {\n        await verifySignature(\n            olmDevice, oneTimeKey, userId, deviceId,\n            deviceInfo.getFingerprint(),\n        );\n    } catch (e) {\n        logger.error(\n            \"Unable to verify signature on one-time key for device \" +\n                userId + \":\" + deviceId + \":\", e,\n        );\n        return null;\n    }\n\n    let sid;\n    try {\n        sid = await olmDevice.createOutboundSession(\n            deviceInfo.getIdentityKey(), oneTimeKey.key,\n        );\n    } catch (e) {\n        // possibly a bad key\n        logger.error(\"Error starting olm session with device \" +\n                      userId + \":\" + deviceId + \": \" + e);\n        return null;\n    }\n\n    logger.log(\"Started new olm sessionid \" + sid +\n                \" for device \" + userId + \":\" + deviceId);\n    return sid;\n}\n\nexport interface IObject {\n    unsigned?: object;\n    signatures?: ISignatures;\n}\n\n/**\n * Verify the signature on an object\n *\n * @param {module:crypto/OlmDevice} olmDevice olm wrapper to use for verify op\n *\n * @param {Object} obj object to check signature on.\n *\n * @param {string} signingUserId  ID of the user whose signature should be checked\n *\n * @param {string} signingDeviceId  ID of the device whose signature should be checked\n *\n * @param {string} signingKey   base64-ed ed25519 public key\n *\n * Returns a promise which resolves (to undefined) if the the signature is good,\n * or rejects with an Error if it is bad.\n */\nexport async function verifySignature(\n    olmDevice: OlmDevice,\n    obj: IOneTimeKey | IObject,\n    signingUserId: string,\n    signingDeviceId: string,\n    signingKey: string,\n) {\n    const signKeyId = \"ed25519:\" + signingDeviceId;\n    const signatures = obj.signatures || {};\n    const userSigs = signatures[signingUserId] || {};\n    const signature = userSigs[signKeyId];\n    if (!signature) {\n        throw Error(\"No signature\");\n    }\n\n    // prepare the canonical json: remove unsigned and signatures, and stringify with anotherjson\n    const mangledObj = Object.assign({}, obj);\n    if (\"unsigned\" in mangledObj) {\n        delete mangledObj.unsigned;\n    }\n    delete mangledObj.signatures;\n    const json = anotherjson.stringify(mangledObj);\n\n    olmDevice.verifySignature(\n        signingKey, json, signature,\n    );\n}\n\n/**\n * Sign a JSON object using public key cryptography\n * @param {Object} obj Object to sign.  The object will be modified to include\n *     the new signature\n * @param {Olm.PkSigning|Uint8Array} key the signing object or the private key\n * seed\n * @param {string} userId The user ID who owns the signing key\n * @param {string} pubKey The public key (ignored if key is a seed)\n * @returns {string} the signature for the object\n */\nexport function pkSign(obj: IObject, key: PkSigning, userId: string, pubKey: string): string {\n    let createdKey = false;\n    if (key instanceof Uint8Array) {\n        const keyObj = new global.Olm.PkSigning();\n        pubKey = keyObj.init_with_seed(key);\n        key = keyObj;\n        createdKey = true;\n    }\n    const sigs = obj.signatures || {};\n    delete obj.signatures;\n    const unsigned = obj.unsigned;\n    if (obj.unsigned) delete obj.unsigned;\n    try {\n        const mysigs = sigs[userId] || {};\n        sigs[userId] = mysigs;\n\n        return mysigs['ed25519:' + pubKey] = key.sign(anotherjson.stringify(obj));\n    } finally {\n        obj.signatures = sigs;\n        if (unsigned) obj.unsigned = unsigned;\n        if (createdKey) {\n            key.free();\n        }\n    }\n}\n\n/**\n * Verify a signed JSON object\n * @param {Object} obj Object to verify\n * @param {string} pubKey The public key to use to verify\n * @param {string} userId The user ID who signed the object\n */\nexport function pkVerify(obj: IObject, pubKey: string, userId: string) {\n    const keyId = \"ed25519:\" + pubKey;\n    if (!(obj.signatures && obj.signatures[userId] && obj.signatures[userId][keyId])) {\n        throw new Error(\"No signature\");\n    }\n    const signature = obj.signatures[userId][keyId];\n    const util = new global.Olm.Utility();\n    const sigs = obj.signatures;\n    delete obj.signatures;\n    const unsigned = obj.unsigned;\n    if (obj.unsigned) delete obj.unsigned;\n    try {\n        util.ed25519_verify(pubKey, anotherjson.stringify(obj), signature);\n    } finally {\n        obj.signatures = sigs;\n        if (unsigned) obj.unsigned = unsigned;\n        util.free();\n    }\n}\n\n/**\n * Encode a typed array of uint8 as base64.\n * @param {Uint8Array} uint8Array The data to encode.\n * @return {string} The base64.\n */\nexport function encodeBase64(uint8Array: ArrayBuffer | Uint8Array): string {\n    return Buffer.from(uint8Array).toString(\"base64\");\n}\n\n/**\n * Encode a typed array of uint8 as unpadded base64.\n * @param {Uint8Array} uint8Array The data to encode.\n * @return {string} The unpadded base64.\n */\nexport function encodeUnpaddedBase64(uint8Array: ArrayBuffer | Uint8Array): string {\n    return encodeBase64(uint8Array).replace(/=+$/g, '');\n}\n\n/**\n * Decode a base64 string to a typed array of uint8.\n * @param {string} base64 The base64 to decode.\n * @return {Uint8Array} The decoded data.\n */\nexport function decodeBase64(base64: string): Uint8Array {\n    return Buffer.from(base64, \"base64\");\n}\n",
    "/*\nCopyright 2018 New Vector Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport bs58 from 'bs58';\n\n// picked arbitrarily but to try & avoid clashing with any bitcoin ones\n// (which are also base58 encoded, but bitcoin's involve a lot more hashing)\nconst OLM_RECOVERY_KEY_PREFIX = [0x8B, 0x01];\n\nexport function encodeRecoveryKey(key: ArrayLike<number>): string {\n    const buf = new Buffer(OLM_RECOVERY_KEY_PREFIX.length + key.length + 1);\n    buf.set(OLM_RECOVERY_KEY_PREFIX, 0);\n    buf.set(key, OLM_RECOVERY_KEY_PREFIX.length);\n\n    let parity = 0;\n    for (let i = 0; i < buf.length - 1; ++i) {\n        parity ^= buf[i];\n    }\n    buf[buf.length - 1] = parity;\n    const base58key = bs58.encode(buf);\n\n    return base58key.match(/.{1,4}/g).join(\" \");\n}\n\nexport function decodeRecoveryKey(recoveryKey: string): Uint8Array {\n    const result = bs58.decode(recoveryKey.replace(/ /g, ''));\n\n    let parity = 0;\n    for (const b of result) {\n        parity ^= b;\n    }\n    if (parity !== 0) {\n        throw new Error(\"Incorrect parity\");\n    }\n\n    for (let i = 0; i < OLM_RECOVERY_KEY_PREFIX.length; ++i) {\n        if (result[i] !== OLM_RECOVERY_KEY_PREFIX[i]) {\n            throw new Error(\"Incorrect prefix\");\n        }\n    }\n\n    if (\n        result.length !==\n        OLM_RECOVERY_KEY_PREFIX.length + global.Olm.PRIVATE_KEY_LENGTH + 1\n    ) {\n        throw new Error(\"Incorrect length\");\n    }\n\n    return Uint8Array.from(result.slice(\n        OLM_RECOVERY_KEY_PREFIX.length,\n        OLM_RECOVERY_KEY_PREFIX.length + global.Olm.PRIVATE_KEY_LENGTH,\n    ));\n}\n",
    "/*\nCopyright 2017 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { logger, PrefixedLogger } from '../../logger';\nimport * as utils from \"../../utils\";\nimport {\n    CryptoStore,\n    IDeviceData,\n    IProblem,\n    ISession,\n    ISessionInfo,\n    IWithheld,\n    Mode,\n    OutgoingRoomKeyRequest,\n} from \"./base\";\nimport { IRoomKeyRequestBody } from \"../index\";\nimport { ICrossSigningKey } from \"../../client\";\nimport { IOlmDevice } from \"../algorithms/megolm\";\nimport { IRoomEncryption } from \"../RoomList\";\nimport { InboundGroupSessionData } from \"../OlmDevice\";\nimport { IEncryptedPayload } from \"../aes\";\n\nexport const VERSION = 10;\nconst PROFILE_TRANSACTIONS = false;\n\n/**\n * Implementation of a CryptoStore which is backed by an existing\n * IndexedDB connection. Generally you want IndexedDBCryptoStore\n * which connects to the database and defers to one of these.\n *\n * @implements {module:crypto/store/base~CryptoStore}\n */\nexport class Backend implements CryptoStore {\n    private nextTxnId = 0;\n\n    /**\n     * @param {IDBDatabase} db\n     */\n    constructor(private db: IDBDatabase) {\n        // make sure we close the db on `onversionchange` - otherwise\n        // attempts to delete the database will block (and subsequent\n        // attempts to re-create it will also block).\n        db.onversionchange = () => {\n            logger.log(`versionchange for indexeddb ${this.db.name}: closing`);\n            db.close();\n        };\n    }\n\n    public async startup(): Promise<CryptoStore> {\n        // No work to do, as the startup is done by the caller (e.g IndexedDBCryptoStore)\n        // by passing us a ready IDBDatabase instance\n        return this;\n    }\n    public async deleteAllData(): Promise<void> {\n        throw Error(\"This is not implemented, call IDBFactory::deleteDatabase(dbName) instead.\");\n    }\n\n    /**\n     * Look for an existing outgoing room key request, and if none is found,\n     * add a new one\n     *\n     * @param {module:crypto/store/base~OutgoingRoomKeyRequest} request\n     *\n     * @returns {Promise} resolves to\n     *    {@link module:crypto/store/base~OutgoingRoomKeyRequest}: either the\n     *    same instance as passed in, or the existing one.\n     */\n    public getOrAddOutgoingRoomKeyRequest(request: OutgoingRoomKeyRequest): Promise<OutgoingRoomKeyRequest> {\n        const requestBody = request.requestBody;\n\n        return new Promise((resolve, reject) => {\n            const txn = this.db.transaction(\"outgoingRoomKeyRequests\", \"readwrite\");\n            txn.onerror = reject;\n\n            // first see if we already have an entry for this request.\n            this._getOutgoingRoomKeyRequest(txn, requestBody, (existing) => {\n                if (existing) {\n                    // this entry matches the request - return it.\n                    logger.log(\n                        `already have key request outstanding for ` +\n                            `${requestBody.room_id} / ${requestBody.session_id}: ` +\n                            `not sending another`,\n                    );\n                    resolve(existing);\n                    return;\n                }\n\n                // we got to the end of the list without finding a match\n                // - add the new request.\n                logger.log(\n                    `enqueueing key request for ${requestBody.room_id} / ` +\n                        requestBody.session_id,\n                );\n                txn.oncomplete = () => {resolve(request);};\n                const store = txn.objectStore(\"outgoingRoomKeyRequests\");\n                store.add(request);\n            });\n        });\n    }\n\n    /**\n     * Look for an existing room key request\n     *\n     * @param {module:crypto~RoomKeyRequestBody} requestBody\n     *    existing request to look for\n     *\n     * @return {Promise} resolves to the matching\n     *    {@link module:crypto/store/base~OutgoingRoomKeyRequest}, or null if\n     *    not found\n     */\n    public getOutgoingRoomKeyRequest(requestBody: IRoomKeyRequestBody): Promise<OutgoingRoomKeyRequest | null> {\n        return new Promise((resolve, reject) => {\n            const txn = this.db.transaction(\"outgoingRoomKeyRequests\", \"readonly\");\n            txn.onerror = reject;\n\n            this._getOutgoingRoomKeyRequest(txn, requestBody, (existing) => {\n                resolve(existing);\n            });\n        });\n    }\n\n    /**\n     * look for an existing room key request in the db\n     *\n     * @private\n     * @param {IDBTransaction} txn  database transaction\n     * @param {module:crypto~RoomKeyRequestBody} requestBody\n     *    existing request to look for\n     * @param {Function} callback  function to call with the results of the\n     *    search. Either passed a matching\n     *    {@link module:crypto/store/base~OutgoingRoomKeyRequest}, or null if\n     *    not found.\n     */\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    private _getOutgoingRoomKeyRequest(\n        txn: IDBTransaction,\n        requestBody: IRoomKeyRequestBody,\n        callback: (req: OutgoingRoomKeyRequest | null) => void,\n    ): void {\n        const store = txn.objectStore(\"outgoingRoomKeyRequests\");\n\n        const idx = store.index(\"session\");\n        const cursorReq = idx.openCursor([\n            requestBody.room_id,\n            requestBody.session_id,\n        ]);\n\n        cursorReq.onsuccess = () => {\n            const cursor = cursorReq.result;\n            if (!cursor) {\n                // no match found\n                callback(null);\n                return;\n            }\n\n            const existing = cursor.value;\n\n            if (utils.deepCompare(existing.requestBody, requestBody)) {\n                // got a match\n                callback(existing);\n                return;\n            }\n\n            // look at the next entry in the index\n            cursor.continue();\n        };\n    }\n\n    /**\n     * Look for room key requests by state\n     *\n     * @param {Array<Number>} wantedStates list of acceptable states\n     *\n     * @return {Promise} resolves to the a\n     *    {@link module:crypto/store/base~OutgoingRoomKeyRequest}, or null if\n     *    there are no pending requests in those states. If there are multiple\n     *    requests in those states, an arbitrary one is chosen.\n     */\n    public getOutgoingRoomKeyRequestByState(wantedStates: number[]): Promise<OutgoingRoomKeyRequest | null> {\n        if (wantedStates.length === 0) {\n            return Promise.resolve(null);\n        }\n\n        // this is a bit tortuous because we need to make sure we do the lookup\n        // in a single transaction, to avoid having a race with the insertion\n        // code.\n\n        // index into the wantedStates array\n        let stateIndex = 0;\n        let result: OutgoingRoomKeyRequest;\n\n        function onsuccess(this: IDBRequest<IDBCursorWithValue>) {\n            const cursor = this.result;\n            if (cursor) {\n                // got a match\n                result = cursor.value;\n                return;\n            }\n\n            // try the next state in the list\n            stateIndex++;\n            if (stateIndex >= wantedStates.length) {\n                // no matches\n                return;\n            }\n\n            const wantedState = wantedStates[stateIndex];\n            const cursorReq = (this.source as IDBIndex).openCursor(wantedState);\n            cursorReq.onsuccess = onsuccess;\n        }\n\n        const txn = this.db.transaction(\"outgoingRoomKeyRequests\", \"readonly\");\n        const store = txn.objectStore(\"outgoingRoomKeyRequests\");\n\n        const wantedState = wantedStates[stateIndex];\n        const cursorReq = store.index(\"state\").openCursor(wantedState);\n        cursorReq.onsuccess = onsuccess;\n\n        return promiseifyTxn(txn).then(() => result);\n    }\n\n    /**\n     *\n     * @param {Number} wantedState\n     * @return {Promise<Array<*>>} All elements in a given state\n     */\n    public getAllOutgoingRoomKeyRequestsByState(wantedState: number): Promise<OutgoingRoomKeyRequest[]> {\n        return new Promise((resolve, reject) => {\n            const txn = this.db.transaction(\"outgoingRoomKeyRequests\", \"readonly\");\n            const store = txn.objectStore(\"outgoingRoomKeyRequests\");\n            const index = store.index(\"state\");\n            const request = index.getAll(wantedState);\n\n            request.onsuccess = () => resolve(request.result);\n            request.onerror = () => reject(request.error);\n        });\n    }\n\n    public getOutgoingRoomKeyRequestsByTarget(\n        userId: string,\n        deviceId: string,\n        wantedStates: number[],\n    ): Promise<OutgoingRoomKeyRequest[]> {\n        let stateIndex = 0;\n        const results: OutgoingRoomKeyRequest[] = [];\n\n        function onsuccess(this: IDBRequest<IDBCursorWithValue>) {\n            const cursor = this.result;\n            if (cursor) {\n                const keyReq = cursor.value;\n                if (keyReq.recipients.includes({ userId, deviceId })) {\n                    results.push(keyReq);\n                }\n                cursor.continue();\n            } else {\n                // try the next state in the list\n                stateIndex++;\n                if (stateIndex >= wantedStates.length) {\n                    // no matches\n                    return;\n                }\n\n                const wantedState = wantedStates[stateIndex];\n                const cursorReq = (this.source as IDBIndex).openCursor(wantedState);\n                cursorReq.onsuccess = onsuccess;\n            }\n        }\n\n        const txn = this.db.transaction(\"outgoingRoomKeyRequests\", \"readonly\");\n        const store = txn.objectStore(\"outgoingRoomKeyRequests\");\n\n        const wantedState = wantedStates[stateIndex];\n        const cursorReq = store.index(\"state\").openCursor(wantedState);\n        cursorReq.onsuccess = onsuccess;\n\n        return promiseifyTxn(txn).then(() => results);\n    }\n\n    /**\n     * Look for an existing room key request by id and state, and update it if\n     * found\n     *\n     * @param {string} requestId      ID of request to update\n     * @param {number} expectedState  state we expect to find the request in\n     * @param {Object} updates        name/value map of updates to apply\n     *\n     * @returns {Promise} resolves to\n     *    {@link module:crypto/store/base~OutgoingRoomKeyRequest}\n     *    updated request, or null if no matching row was found\n     */\n    public updateOutgoingRoomKeyRequest(\n        requestId: string,\n        expectedState: number,\n        updates: Partial<OutgoingRoomKeyRequest>,\n    ): Promise<OutgoingRoomKeyRequest | null> {\n        let result: OutgoingRoomKeyRequest = null;\n\n        function onsuccess(this: IDBRequest<IDBCursorWithValue>) {\n            const cursor = this.result;\n            if (!cursor) {\n                return;\n            }\n            const data = cursor.value;\n            if (data.state != expectedState) {\n                logger.warn(\n                    `Cannot update room key request from ${expectedState} ` +\n                    `as it was already updated to ${data.state}`,\n                );\n                return;\n            }\n            Object.assign(data, updates);\n            cursor.update(data);\n            result = data;\n        }\n\n        const txn = this.db.transaction(\"outgoingRoomKeyRequests\", \"readwrite\");\n        const cursorReq = txn.objectStore(\"outgoingRoomKeyRequests\").openCursor(requestId);\n        cursorReq.onsuccess = onsuccess;\n        return promiseifyTxn(txn).then(() => result);\n    }\n\n    /**\n     * Look for an existing room key request by id and state, and delete it if\n     * found\n     *\n     * @param {string} requestId      ID of request to update\n     * @param {number} expectedState  state we expect to find the request in\n     *\n     * @returns {Promise} resolves once the operation is completed\n     */\n    public deleteOutgoingRoomKeyRequest(\n        requestId: string,\n        expectedState: number,\n    ): Promise<OutgoingRoomKeyRequest | null> {\n        const txn = this.db.transaction(\"outgoingRoomKeyRequests\", \"readwrite\");\n        const cursorReq = txn.objectStore(\"outgoingRoomKeyRequests\").openCursor(requestId);\n        cursorReq.onsuccess = () => {\n            const cursor = cursorReq.result;\n            if (!cursor) {\n                return;\n            }\n            const data = cursor.value;\n            if (data.state != expectedState) {\n                logger.warn(\n                    `Cannot delete room key request in state ${data.state} `\n                        + `(expected ${expectedState})`,\n                );\n                return;\n            }\n            cursor.delete();\n        };\n        return promiseifyTxn<OutgoingRoomKeyRequest | null>(txn);\n    }\n\n    // Olm Account\n\n    public getAccount(txn: IDBTransaction, func: (accountPickle: string) => void): void {\n        const objectStore = txn.objectStore(\"account\");\n        const getReq = objectStore.get(\"-\");\n        getReq.onsuccess = function() {\n            try {\n                func(getReq.result || null);\n            } catch (e) {\n                abortWithException(txn, e);\n            }\n        };\n    }\n\n    public storeAccount(txn: IDBTransaction, accountPickle: string): void {\n        const objectStore = txn.objectStore(\"account\");\n        objectStore.put(accountPickle, \"-\");\n    }\n\n    public getCrossSigningKeys(txn: IDBTransaction, func: (keys: Record<string, ICrossSigningKey>) => void): void {\n        const objectStore = txn.objectStore(\"account\");\n        const getReq = objectStore.get(\"crossSigningKeys\");\n        getReq.onsuccess = function() {\n            try {\n                func(getReq.result || null);\n            } catch (e) {\n                abortWithException(txn, e);\n            }\n        };\n    }\n\n    public getSecretStorePrivateKey(\n        txn: IDBTransaction,\n        func: (key: IEncryptedPayload | null) => void,\n        type: string,\n    ): void {\n        const objectStore = txn.objectStore(\"account\");\n        const getReq = objectStore.get(`ssss_cache:${type}`);\n        getReq.onsuccess = function() {\n            try {\n                func(getReq.result || null);\n            } catch (e) {\n                abortWithException(txn, e);\n            }\n        };\n    }\n\n    public storeCrossSigningKeys(txn: IDBTransaction, keys: Record<string, ICrossSigningKey>): void {\n        const objectStore = txn.objectStore(\"account\");\n        objectStore.put(keys, \"crossSigningKeys\");\n    }\n\n    public storeSecretStorePrivateKey(txn: IDBTransaction, type: string, key: IEncryptedPayload): void {\n        const objectStore = txn.objectStore(\"account\");\n        objectStore.put(key, `ssss_cache:${type}`);\n    }\n\n    // Olm Sessions\n\n    public countEndToEndSessions(txn: IDBTransaction, func: (count: number) => void): void {\n        const objectStore = txn.objectStore(\"sessions\");\n        const countReq = objectStore.count();\n        countReq.onsuccess = function() {\n            try {\n                func(countReq.result);\n            } catch (e) {\n                abortWithException(txn, e);\n            }\n        };\n    }\n\n    public getEndToEndSessions(\n        deviceKey: string,\n        txn: IDBTransaction,\n        func: (sessions: { [sessionId: string]: ISessionInfo }) => void,\n    ): void {\n        const objectStore = txn.objectStore(\"sessions\");\n        const idx = objectStore.index(\"deviceKey\");\n        const getReq = idx.openCursor(deviceKey);\n        const results: Parameters<Parameters<Backend[\"getEndToEndSessions\"]>[2]>[0] = {};\n        getReq.onsuccess = function() {\n            const cursor = getReq.result;\n            if (cursor) {\n                results[cursor.value.sessionId] = {\n                    session: cursor.value.session,\n                    lastReceivedMessageTs: cursor.value.lastReceivedMessageTs,\n                };\n                cursor.continue();\n            } else {\n                try {\n                    func(results);\n                } catch (e) {\n                    abortWithException(txn, e);\n                }\n            }\n        };\n    }\n\n    public getEndToEndSession(\n        deviceKey: string,\n        sessionId: string,\n        txn: IDBTransaction,\n        func: (sessions: { [ sessionId: string ]: ISessionInfo }) => void,\n    ): void {\n        const objectStore = txn.objectStore(\"sessions\");\n        const getReq = objectStore.get([deviceKey, sessionId]);\n        getReq.onsuccess = function() {\n            try {\n                if (getReq.result) {\n                    func({\n                        session: getReq.result.session,\n                        lastReceivedMessageTs: getReq.result.lastReceivedMessageTs,\n                    });\n                } else {\n                    func(null);\n                }\n            } catch (e) {\n                abortWithException(txn, e);\n            }\n        };\n    }\n\n    public getAllEndToEndSessions(txn: IDBTransaction, func: (session: ISessionInfo) => void): void {\n        const objectStore = txn.objectStore(\"sessions\");\n        const getReq = objectStore.openCursor();\n        getReq.onsuccess = function() {\n            try {\n                const cursor = getReq.result;\n                if (cursor) {\n                    func(cursor.value);\n                    cursor.continue();\n                } else {\n                    func(null);\n                }\n            } catch (e) {\n                abortWithException(txn, e);\n            }\n        };\n    }\n\n    public storeEndToEndSession(\n        deviceKey: string,\n        sessionId: string,\n        sessionInfo: ISessionInfo,\n        txn: IDBTransaction,\n    ): void {\n        const objectStore = txn.objectStore(\"sessions\");\n        objectStore.put({\n            deviceKey,\n            sessionId,\n            session: sessionInfo.session,\n            lastReceivedMessageTs: sessionInfo.lastReceivedMessageTs,\n        });\n    }\n\n    public async storeEndToEndSessionProblem(deviceKey: string, type: string, fixed: boolean): Promise<void> {\n        const txn = this.db.transaction(\"session_problems\", \"readwrite\");\n        const objectStore = txn.objectStore(\"session_problems\");\n        objectStore.put({\n            deviceKey,\n            type,\n            fixed,\n            time: Date.now(),\n        });\n        return promiseifyTxn(txn);\n    }\n\n    public async getEndToEndSessionProblem(deviceKey: string, timestamp: number): Promise<IProblem | null> {\n        let result;\n        const txn = this.db.transaction(\"session_problems\", \"readwrite\");\n        const objectStore = txn.objectStore(\"session_problems\");\n        const index = objectStore.index(\"deviceKey\");\n        const req = index.getAll(deviceKey);\n        req.onsuccess = () => {\n            const problems = req.result;\n            if (!problems.length) {\n                result = null;\n                return;\n            }\n            problems.sort((a, b) => {\n                return a.time - b.time;\n            });\n            const lastProblem = problems[problems.length - 1];\n            for (const problem of problems) {\n                if (problem.time > timestamp) {\n                    result = Object.assign({}, problem, { fixed: lastProblem.fixed });\n                    return;\n                }\n            }\n            if (lastProblem.fixed) {\n                result = null;\n            } else {\n                result = lastProblem;\n            }\n        };\n        await promiseifyTxn(txn);\n        return result;\n    }\n\n    // FIXME: we should probably prune this when devices get deleted\n    public async filterOutNotifiedErrorDevices(devices: IOlmDevice[]): Promise<IOlmDevice[]> {\n        const txn = this.db.transaction(\"notified_error_devices\", \"readwrite\");\n        const objectStore = txn.objectStore(\"notified_error_devices\");\n\n        const ret: IOlmDevice[] = [];\n\n        await Promise.all(devices.map((device) => {\n            return new Promise<void>((resolve) => {\n                const { userId, deviceInfo } = device;\n                const getReq = objectStore.get([userId, deviceInfo.deviceId]);\n                getReq.onsuccess = function() {\n                    if (!getReq.result) {\n                        objectStore.put({ userId, deviceId: deviceInfo.deviceId });\n                        ret.push(device);\n                    }\n                    resolve();\n                };\n            });\n        }));\n\n        return ret;\n    }\n\n    // Inbound group sessions\n\n    public getEndToEndInboundGroupSession(\n        senderCurve25519Key: string,\n        sessionId: string,\n        txn: IDBTransaction,\n        func: (groupSession: InboundGroupSessionData | null, groupSessionWithheld: IWithheld | null) => void,\n    ): void {\n        let session: InboundGroupSessionData | boolean = false;\n        let withheld: IWithheld | boolean = false;\n        const objectStore = txn.objectStore(\"inbound_group_sessions\");\n        const getReq = objectStore.get([senderCurve25519Key, sessionId]);\n        getReq.onsuccess = function() {\n            try {\n                if (getReq.result) {\n                    session = getReq.result.session;\n                } else {\n                    session = null;\n                }\n                if (withheld !== false) {\n                    func(session as InboundGroupSessionData, withheld as IWithheld);\n                }\n            } catch (e) {\n                abortWithException(txn, e);\n            }\n        };\n\n        const withheldObjectStore = txn.objectStore(\"inbound_group_sessions_withheld\");\n        const withheldGetReq = withheldObjectStore.get([senderCurve25519Key, sessionId]);\n        withheldGetReq.onsuccess = function() {\n            try {\n                if (withheldGetReq.result) {\n                    withheld = withheldGetReq.result.session;\n                } else {\n                    withheld = null;\n                }\n                if (session !== false) {\n                    func(session as InboundGroupSessionData, withheld as IWithheld);\n                }\n            } catch (e) {\n                abortWithException(txn, e);\n            }\n        };\n    }\n\n    public getAllEndToEndInboundGroupSessions(txn: IDBTransaction, func: (session: ISession | null) => void): void {\n        const objectStore = txn.objectStore(\"inbound_group_sessions\");\n        const getReq = objectStore.openCursor();\n        getReq.onsuccess = function() {\n            const cursor = getReq.result;\n            if (cursor) {\n                try {\n                    func({\n                        senderKey: cursor.value.senderCurve25519Key,\n                        sessionId: cursor.value.sessionId,\n                        sessionData: cursor.value.session,\n                    });\n                } catch (e) {\n                    abortWithException(txn, e);\n                }\n                cursor.continue();\n            } else {\n                try {\n                    func(null);\n                } catch (e) {\n                    abortWithException(txn, e);\n                }\n            }\n        };\n    }\n\n    public addEndToEndInboundGroupSession(\n        senderCurve25519Key: string,\n        sessionId: string,\n        sessionData: InboundGroupSessionData,\n        txn: IDBTransaction,\n    ): void {\n        const objectStore = txn.objectStore(\"inbound_group_sessions\");\n        const addReq = objectStore.add({\n            senderCurve25519Key, sessionId, session: sessionData,\n        });\n        addReq.onerror = (ev) => {\n            if (addReq.error.name === 'ConstraintError') {\n                // This stops the error from triggering the txn's onerror\n                ev.stopPropagation();\n                // ...and this stops it from aborting the transaction\n                ev.preventDefault();\n                logger.log(\n                    \"Ignoring duplicate inbound group session: \" +\n                    senderCurve25519Key + \" / \" + sessionId,\n                );\n            } else {\n                abortWithException(txn, new Error(\n                    \"Failed to add inbound group session: \" + addReq.error,\n                ));\n            }\n        };\n    }\n\n    public storeEndToEndInboundGroupSession(\n        senderCurve25519Key: string,\n        sessionId: string,\n        sessionData: InboundGroupSessionData,\n        txn: IDBTransaction,\n    ): void {\n        const objectStore = txn.objectStore(\"inbound_group_sessions\");\n        objectStore.put({\n            senderCurve25519Key, sessionId, session: sessionData,\n        });\n    }\n\n    public storeEndToEndInboundGroupSessionWithheld(\n        senderCurve25519Key: string,\n        sessionId: string,\n        sessionData: IWithheld,\n        txn: IDBTransaction,\n    ): void {\n        const objectStore = txn.objectStore(\"inbound_group_sessions_withheld\");\n        objectStore.put({\n            senderCurve25519Key, sessionId, session: sessionData,\n        });\n    }\n\n    public getEndToEndDeviceData(txn: IDBTransaction, func: (deviceData: IDeviceData | null) => void): void {\n        const objectStore = txn.objectStore(\"device_data\");\n        const getReq = objectStore.get(\"-\");\n        getReq.onsuccess = function() {\n            try {\n                func(getReq.result || null);\n            } catch (e) {\n                abortWithException(txn, e);\n            }\n        };\n    }\n\n    public storeEndToEndDeviceData(deviceData: IDeviceData, txn: IDBTransaction): void {\n        const objectStore = txn.objectStore(\"device_data\");\n        objectStore.put(deviceData, \"-\");\n    }\n\n    public storeEndToEndRoom(roomId: string, roomInfo: IRoomEncryption, txn: IDBTransaction): void {\n        const objectStore = txn.objectStore(\"rooms\");\n        objectStore.put(roomInfo, roomId);\n    }\n\n    public getEndToEndRooms(txn: IDBTransaction, func: (rooms: Record<string, IRoomEncryption>) => void): void {\n        const rooms: Parameters<Parameters<Backend[\"getEndToEndRooms\"]>[1]>[0] = {};\n        const objectStore = txn.objectStore(\"rooms\");\n        const getReq = objectStore.openCursor();\n        getReq.onsuccess = function() {\n            const cursor = getReq.result;\n            if (cursor) {\n                rooms[cursor.key as string] = cursor.value;\n                cursor.continue();\n            } else {\n                try {\n                    func(rooms);\n                } catch (e) {\n                    abortWithException(txn, e);\n                }\n            }\n        };\n    }\n\n    // session backups\n\n    public getSessionsNeedingBackup(limit: number): Promise<ISession[]> {\n        return new Promise((resolve, reject) => {\n            const sessions: ISession[] = [];\n\n            const txn = this.db.transaction(\n                [\"sessions_needing_backup\", \"inbound_group_sessions\"],\n                \"readonly\",\n            );\n            txn.onerror = reject;\n            txn.oncomplete = function() {\n                resolve(sessions);\n            };\n            const objectStore = txn.objectStore(\"sessions_needing_backup\");\n            const sessionStore = txn.objectStore(\"inbound_group_sessions\");\n            const getReq = objectStore.openCursor();\n            getReq.onsuccess = function() {\n                const cursor = getReq.result;\n                if (cursor) {\n                    const sessionGetReq = sessionStore.get(cursor.key);\n                    sessionGetReq.onsuccess = function() {\n                        sessions.push({\n                            senderKey: sessionGetReq.result.senderCurve25519Key,\n                            sessionId: sessionGetReq.result.sessionId,\n                            sessionData: sessionGetReq.result.session,\n                        });\n                    };\n                    if (!limit || sessions.length < limit) {\n                        cursor.continue();\n                    }\n                }\n            };\n        });\n    }\n\n    public countSessionsNeedingBackup(txn?: IDBTransaction): Promise<number> {\n        if (!txn) {\n            txn = this.db.transaction(\"sessions_needing_backup\", \"readonly\");\n        }\n        const objectStore = txn.objectStore(\"sessions_needing_backup\");\n        return new Promise((resolve, reject) => {\n            const req = objectStore.count();\n            req.onerror = reject;\n            req.onsuccess = () => resolve(req.result);\n        });\n    }\n\n    public async unmarkSessionsNeedingBackup(sessions: ISession[], txn?: IDBTransaction): Promise<void> {\n        if (!txn) {\n            txn = this.db.transaction(\"sessions_needing_backup\", \"readwrite\");\n        }\n        const objectStore = txn.objectStore(\"sessions_needing_backup\");\n        await Promise.all(sessions.map((session) => {\n            return new Promise((resolve, reject) => {\n                const req = objectStore.delete([session.senderKey, session.sessionId]);\n                req.onsuccess = resolve;\n                req.onerror = reject;\n            });\n        }));\n    }\n\n    public async markSessionsNeedingBackup(sessions: ISession[], txn?: IDBTransaction): Promise<void> {\n        if (!txn) {\n            txn = this.db.transaction(\"sessions_needing_backup\", \"readwrite\");\n        }\n        const objectStore = txn.objectStore(\"sessions_needing_backup\");\n        await Promise.all(sessions.map((session) => {\n            return new Promise((resolve, reject) => {\n                const req = objectStore.put({\n                    senderCurve25519Key: session.senderKey,\n                    sessionId: session.sessionId,\n                });\n                req.onsuccess = resolve;\n                req.onerror = reject;\n            });\n        }));\n    }\n\n    public addSharedHistoryInboundGroupSession(\n        roomId: string,\n        senderKey: string,\n        sessionId: string,\n        txn?: IDBTransaction,\n    ): void {\n        if (!txn) {\n            txn = this.db.transaction(\n                \"shared_history_inbound_group_sessions\", \"readwrite\",\n            );\n        }\n        const objectStore = txn.objectStore(\"shared_history_inbound_group_sessions\");\n        const req = objectStore.get([roomId]);\n        req.onsuccess = () => {\n            const { sessions } = req.result || { sessions: [] };\n            sessions.push([senderKey, sessionId]);\n            objectStore.put({ roomId, sessions });\n        };\n    }\n\n    public getSharedHistoryInboundGroupSessions(\n        roomId: string,\n        txn?: IDBTransaction,\n    ): Promise<[senderKey: string, sessionId: string][]> {\n        if (!txn) {\n            txn = this.db.transaction(\n                \"shared_history_inbound_group_sessions\", \"readonly\",\n            );\n        }\n        const objectStore = txn.objectStore(\"shared_history_inbound_group_sessions\");\n        const req = objectStore.get([roomId]);\n        return new Promise((resolve, reject) => {\n            req.onsuccess = () => {\n                const { sessions } = req.result || { sessions: [] };\n                resolve(sessions);\n            };\n            req.onerror = reject;\n        });\n    }\n\n    public doTxn<T>(\n        mode: Mode,\n        stores: Iterable<string>,\n        func: (txn: IDBTransaction) => T,\n        log: PrefixedLogger = logger,\n    ): Promise<T> {\n        let startTime: number;\n        let description: string;\n        if (PROFILE_TRANSACTIONS) {\n            const txnId = this.nextTxnId++;\n            startTime = Date.now();\n            description = `${mode} crypto store transaction ${txnId} in ${stores}`;\n            log.debug(`Starting ${description}`);\n        }\n        const txn = this.db.transaction(stores, mode);\n        const promise = promiseifyTxn(txn);\n        const result = func(txn);\n        if (PROFILE_TRANSACTIONS) {\n            promise.then(() => {\n                const elapsedTime = Date.now() - startTime;\n                log.debug(`Finished ${description}, took ${elapsedTime} ms`);\n            }, () => {\n                const elapsedTime = Date.now() - startTime;\n                log.error(`Failed ${description}, took ${elapsedTime} ms`);\n            });\n        }\n        return promise.then(() => {\n            return result;\n        });\n    }\n}\n\nexport function upgradeDatabase(db: IDBDatabase, oldVersion: number): void {\n    logger.log(\n        `Upgrading IndexedDBCryptoStore from version ${oldVersion}`\n            + ` to ${VERSION}`,\n    );\n    if (oldVersion < 1) { // The database did not previously exist.\n        createDatabase(db);\n    }\n    if (oldVersion < 2) {\n        db.createObjectStore(\"account\");\n    }\n    if (oldVersion < 3) {\n        const sessionsStore = db.createObjectStore(\"sessions\", {\n            keyPath: [\"deviceKey\", \"sessionId\"],\n        });\n        sessionsStore.createIndex(\"deviceKey\", \"deviceKey\");\n    }\n    if (oldVersion < 4) {\n        db.createObjectStore(\"inbound_group_sessions\", {\n            keyPath: [\"senderCurve25519Key\", \"sessionId\"],\n        });\n    }\n    if (oldVersion < 5) {\n        db.createObjectStore(\"device_data\");\n    }\n    if (oldVersion < 6) {\n        db.createObjectStore(\"rooms\");\n    }\n    if (oldVersion < 7) {\n        db.createObjectStore(\"sessions_needing_backup\", {\n            keyPath: [\"senderCurve25519Key\", \"sessionId\"],\n        });\n    }\n    if (oldVersion < 8) {\n        db.createObjectStore(\"inbound_group_sessions_withheld\", {\n            keyPath: [\"senderCurve25519Key\", \"sessionId\"],\n        });\n    }\n    if (oldVersion < 9) {\n        const problemsStore = db.createObjectStore(\"session_problems\", {\n            keyPath: [\"deviceKey\", \"time\"],\n        });\n        problemsStore.createIndex(\"deviceKey\", \"deviceKey\");\n\n        db.createObjectStore(\"notified_error_devices\", {\n            keyPath: [\"userId\", \"deviceId\"],\n        });\n    }\n    if (oldVersion < 10) {\n        db.createObjectStore(\"shared_history_inbound_group_sessions\", {\n            keyPath: [\"roomId\"],\n        });\n    }\n    // Expand as needed.\n}\n\nfunction createDatabase(db: IDBDatabase): void {\n    const outgoingRoomKeyRequestsStore =\n        db.createObjectStore(\"outgoingRoomKeyRequests\", { keyPath: \"requestId\" });\n\n    // we assume that the RoomKeyRequestBody will have room_id and session_id\n    // properties, to make the index efficient.\n    outgoingRoomKeyRequestsStore.createIndex(\"session\",\n        [\"requestBody.room_id\", \"requestBody.session_id\"],\n    );\n\n    outgoingRoomKeyRequestsStore.createIndex(\"state\", \"state\");\n}\n\ninterface IWrappedIDBTransaction extends IDBTransaction {\n    _mx_abortexception: Error; // eslint-disable-line camelcase\n}\n\n/*\n * Aborts a transaction with a given exception\n * The transaction promise will be rejected with this exception.\n */\nfunction abortWithException(txn: IDBTransaction, e: Error) {\n    // We cheekily stick our exception onto the transaction object here\n    // We could alternatively make the thing we pass back to the app\n    // an object containing the transaction and exception.\n    (txn as IWrappedIDBTransaction)._mx_abortexception = e;\n    try {\n        txn.abort();\n    } catch (e) {\n        // sometimes we won't be able to abort the transaction\n        // (ie. if it's aborted or completed)\n    }\n}\n\nfunction promiseifyTxn<T>(txn: IDBTransaction): Promise<T> {\n    return new Promise((resolve, reject) => {\n        txn.oncomplete = () => {\n            if ((txn as IWrappedIDBTransaction)._mx_abortexception !== undefined) {\n                reject((txn as IWrappedIDBTransaction)._mx_abortexception);\n            }\n            resolve(null);\n        };\n        txn.onerror = (event) => {\n            if ((txn as IWrappedIDBTransaction)._mx_abortexception !== undefined) {\n                reject((txn as IWrappedIDBTransaction)._mx_abortexception);\n            } else {\n                logger.log(\"Error performing indexeddb txn\", event);\n                reject(txn.error);\n            }\n        };\n        txn.onabort = (event) => {\n            if ((txn as IWrappedIDBTransaction)._mx_abortexception !== undefined) {\n                reject((txn as IWrappedIDBTransaction)._mx_abortexception);\n            } else {\n                logger.log(\"Error performing indexeddb txn\", event);\n                reject(txn.error);\n            }\n        };\n    });\n}\n",
    "/*\nCopyright 2017 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { logger, PrefixedLogger } from '../../logger';\nimport { LocalStorageCryptoStore } from './localStorage-crypto-store';\nimport { MemoryCryptoStore } from './memory-crypto-store';\nimport * as IndexedDBCryptoStoreBackend from './indexeddb-crypto-store-backend';\nimport { InvalidCryptoStoreError } from '../../errors';\nimport * as IndexedDBHelpers from \"../../indexeddb-helpers\";\nimport {\n    CryptoStore,\n    IDeviceData,\n    IProblem,\n    ISession,\n    ISessionInfo,\n    IWithheld,\n    Mode,\n    OutgoingRoomKeyRequest,\n} from \"./base\";\nimport { IRoomKeyRequestBody } from \"../index\";\nimport { ICrossSigningKey } from \"../../client\";\nimport { IOlmDevice } from \"../algorithms/megolm\";\nimport { IRoomEncryption } from \"../RoomList\";\nimport { InboundGroupSessionData } from \"../OlmDevice\";\nimport { IEncryptedPayload } from \"../aes\";\n\n/**\n * Internal module. indexeddb storage for e2e.\n *\n * @module\n */\n\n/**\n * An implementation of CryptoStore, which is normally backed by an indexeddb,\n * but with fallback to MemoryCryptoStore.\n *\n * @implements {module:crypto/store/base~CryptoStore}\n */\nexport class IndexedDBCryptoStore implements CryptoStore {\n    public static STORE_ACCOUNT = 'account';\n    public static STORE_SESSIONS = 'sessions';\n    public static STORE_INBOUND_GROUP_SESSIONS = 'inbound_group_sessions';\n    public static STORE_INBOUND_GROUP_SESSIONS_WITHHELD = 'inbound_group_sessions_withheld';\n    public static STORE_SHARED_HISTORY_INBOUND_GROUP_SESSIONS = 'shared_history_inbound_group_sessions';\n    public static STORE_DEVICE_DATA = 'device_data';\n    public static STORE_ROOMS = 'rooms';\n    public static STORE_BACKUP = 'sessions_needing_backup';\n\n    public static exists(indexedDB: IDBFactory, dbName: string): Promise<boolean> {\n        return IndexedDBHelpers.exists(indexedDB, dbName);\n    }\n\n    private backendPromise: Promise<CryptoStore> = null;\n    private backend: CryptoStore = null;\n\n    /**\n     * Create a new IndexedDBCryptoStore\n     *\n     * @param {IDBFactory} indexedDB  global indexedDB instance\n     * @param {string} dbName   name of db to connect to\n     */\n    constructor(private readonly indexedDB: IDBFactory, private readonly dbName: string) {}\n\n    /**\n     * Ensure the database exists and is up-to-date, or fall back to\n     * a local storage or in-memory store.\n     *\n     * This must be called before the store can be used.\n     *\n     * @return {Promise} resolves to either an IndexedDBCryptoStoreBackend.Backend,\n     * or a MemoryCryptoStore\n     */\n    public startup(): Promise<CryptoStore> {\n        if (this.backendPromise) {\n            return this.backendPromise;\n        }\n\n        this.backendPromise = new Promise<CryptoStore>((resolve, reject) => {\n            if (!this.indexedDB) {\n                reject(new Error('no indexeddb support available'));\n                return;\n            }\n\n            logger.log(`connecting to indexeddb ${this.dbName}`);\n\n            const req = this.indexedDB.open(this.dbName, IndexedDBCryptoStoreBackend.VERSION);\n\n            req.onupgradeneeded = (ev) => {\n                const db = req.result;\n                const oldVersion = ev.oldVersion;\n                IndexedDBCryptoStoreBackend.upgradeDatabase(db, oldVersion);\n            };\n\n            req.onblocked = () => {\n                logger.log(\n                    `can't yet open IndexedDBCryptoStore because it is open elsewhere`,\n                );\n            };\n\n            req.onerror = (ev) => {\n                logger.log(\"Error connecting to indexeddb\", ev);\n                reject(req.error);\n            };\n\n            req.onsuccess = () => {\n                const db = req.result;\n\n                logger.log(`connected to indexeddb ${this.dbName}`);\n                resolve(new IndexedDBCryptoStoreBackend.Backend(db));\n            };\n        }).then((backend) => {\n            // Edge has IndexedDB but doesn't support compund keys which we use fairly extensively.\n            // Try a dummy query which will fail if the browser doesn't support compund keys, so\n            // we can fall back to a different backend.\n            return backend.doTxn(\n                'readonly',\n                [\n                    IndexedDBCryptoStore.STORE_INBOUND_GROUP_SESSIONS,\n                    IndexedDBCryptoStore.STORE_INBOUND_GROUP_SESSIONS_WITHHELD,\n                ],\n                (txn) => {\n                    backend.getEndToEndInboundGroupSession('', '', txn, () => {});\n                }).then(() => backend,\n            );\n        }).catch((e) => {\n            if (e.name === 'VersionError') {\n                logger.warn(\"Crypto DB is too new for us to use!\", e);\n                // don't fall back to a different store: the user has crypto data\n                // in this db so we should use it or nothing at all.\n                throw new InvalidCryptoStoreError(InvalidCryptoStoreError.TOO_NEW);\n            }\n            logger.warn(\n                `unable to connect to indexeddb ${this.dbName}` +\n                    `: falling back to localStorage store: ${e}`,\n            );\n\n            try {\n                return new LocalStorageCryptoStore(global.localStorage);\n            } catch (e) {\n                logger.warn(\n                    `unable to open localStorage: falling back to in-memory store: ${e}`,\n                );\n                return new MemoryCryptoStore();\n            }\n        }).then(backend => {\n            this.backend = backend;\n            return backend as CryptoStore;\n        });\n\n        return this.backendPromise;\n    }\n\n    /**\n     * Delete all data from this store.\n     *\n     * @returns {Promise} resolves when the store has been cleared.\n     */\n    public deleteAllData(): Promise<void> {\n        return new Promise<void>((resolve, reject) => {\n            if (!this.indexedDB) {\n                reject(new Error('no indexeddb support available'));\n                return;\n            }\n\n            logger.log(`Removing indexeddb instance: ${this.dbName}`);\n            const req = this.indexedDB.deleteDatabase(this.dbName);\n\n            req.onblocked = () => {\n                logger.log(\n                    `can't yet delete IndexedDBCryptoStore because it is open elsewhere`,\n                );\n            };\n\n            req.onerror = (ev) => {\n                logger.log(\"Error deleting data from indexeddb\", ev);\n                reject(req.error);\n            };\n\n            req.onsuccess = () => {\n                logger.log(`Removed indexeddb instance: ${this.dbName}`);\n                resolve();\n            };\n        }).catch((e) => {\n            // in firefox, with indexedDB disabled, this fails with a\n            // DOMError. We treat this as non-fatal, so that people can\n            // still use the app.\n            logger.warn(`unable to delete IndexedDBCryptoStore: ${e}`);\n        });\n    }\n\n    /**\n     * Look for an existing outgoing room key request, and if none is found,\n     * add a new one\n     *\n     * @param {module:crypto/store/base~OutgoingRoomKeyRequest} request\n     *\n     * @returns {Promise} resolves to\n     *    {@link module:crypto/store/base~OutgoingRoomKeyRequest}: either the\n     *    same instance as passed in, or the existing one.\n     */\n    public getOrAddOutgoingRoomKeyRequest(request: OutgoingRoomKeyRequest): Promise<OutgoingRoomKeyRequest> {\n        return this.backend.getOrAddOutgoingRoomKeyRequest(request);\n    }\n\n    /**\n     * Look for an existing room key request\n     *\n     * @param {module:crypto~RoomKeyRequestBody} requestBody\n     *    existing request to look for\n     *\n     * @return {Promise} resolves to the matching\n     *    {@link module:crypto/store/base~OutgoingRoomKeyRequest}, or null if\n     *    not found\n     */\n    public getOutgoingRoomKeyRequest(requestBody: IRoomKeyRequestBody): Promise<OutgoingRoomKeyRequest | null> {\n        return this.backend.getOutgoingRoomKeyRequest(requestBody);\n    }\n\n    /**\n     * Look for room key requests by state\n     *\n     * @param {Array<Number>} wantedStates list of acceptable states\n     *\n     * @return {Promise} resolves to the a\n     *    {@link module:crypto/store/base~OutgoingRoomKeyRequest}, or null if\n     *    there are no pending requests in those states. If there are multiple\n     *    requests in those states, an arbitrary one is chosen.\n     */\n    public getOutgoingRoomKeyRequestByState(wantedStates: number[]): Promise<OutgoingRoomKeyRequest | null> {\n        return this.backend.getOutgoingRoomKeyRequestByState(wantedStates);\n    }\n\n    /**\n     * Look for room key requests by state –\n     * unlike above, return a list of all entries in one state.\n     *\n     * @param {Number} wantedState\n     * @return {Promise<Array<*>>} Returns an array of requests in the given state\n     */\n    public getAllOutgoingRoomKeyRequestsByState(wantedState: number): Promise<OutgoingRoomKeyRequest[]> {\n        return this.backend.getAllOutgoingRoomKeyRequestsByState(wantedState);\n    }\n\n    /**\n     * Look for room key requests by target device and state\n     *\n     * @param {string} userId Target user ID\n     * @param {string} deviceId Target device ID\n     * @param {Array<Number>} wantedStates list of acceptable states\n     *\n     * @return {Promise} resolves to a list of all the\n     *    {@link module:crypto/store/base~OutgoingRoomKeyRequest}\n     */\n    public getOutgoingRoomKeyRequestsByTarget(\n        userId: string,\n        deviceId: string,\n        wantedStates: number[],\n    ): Promise<OutgoingRoomKeyRequest[]> {\n        return this.backend.getOutgoingRoomKeyRequestsByTarget(\n            userId, deviceId, wantedStates,\n        );\n    }\n\n    /**\n     * Look for an existing room key request by id and state, and update it if\n     * found\n     *\n     * @param {string} requestId      ID of request to update\n     * @param {number} expectedState  state we expect to find the request in\n     * @param {Object} updates        name/value map of updates to apply\n     *\n     * @returns {Promise} resolves to\n     *    {@link module:crypto/store/base~OutgoingRoomKeyRequest}\n     *    updated request, or null if no matching row was found\n     */\n    public updateOutgoingRoomKeyRequest(\n        requestId: string,\n        expectedState: number,\n        updates: Partial<OutgoingRoomKeyRequest>,\n    ): Promise<OutgoingRoomKeyRequest | null> {\n        return this.backend.updateOutgoingRoomKeyRequest(\n            requestId, expectedState, updates,\n        );\n    }\n\n    /**\n     * Look for an existing room key request by id and state, and delete it if\n     * found\n     *\n     * @param {string} requestId      ID of request to update\n     * @param {number} expectedState  state we expect to find the request in\n     *\n     * @returns {Promise} resolves once the operation is completed\n     */\n    public deleteOutgoingRoomKeyRequest(\n        requestId: string,\n        expectedState: number,\n    ): Promise<OutgoingRoomKeyRequest | null> {\n        return this.backend.deleteOutgoingRoomKeyRequest(requestId, expectedState);\n    }\n\n    // Olm Account\n\n    /*\n     * Get the account pickle from the store.\n     * This requires an active transaction. See doTxn().\n     *\n     * @param {*} txn An active transaction. See doTxn().\n     * @param {function(string)} func Called with the account pickle\n     */\n    public getAccount(txn: IDBTransaction, func: (accountPickle: string) => void) {\n        this.backend.getAccount(txn, func);\n    }\n\n    /**\n     * Write the account pickle to the store.\n     * This requires an active transaction. See doTxn().\n     *\n     * @param {*} txn An active transaction. See doTxn().\n     * @param {string} accountPickle The new account pickle to store.\n     */\n    public storeAccount(txn: IDBTransaction, accountPickle: string): void {\n        this.backend.storeAccount(txn, accountPickle);\n    }\n\n    /**\n     * Get the public part of the cross-signing keys (eg. self-signing key,\n     * user signing key).\n     *\n     * @param {*} txn An active transaction. See doTxn().\n     * @param {function(string)} func Called with the account keys object:\n     *        { key_type: base64 encoded seed } where key type = user_signing_key_seed or self_signing_key_seed\n     */\n    public getCrossSigningKeys(txn: IDBTransaction, func: (keys: Record<string, ICrossSigningKey>) => void): void {\n        this.backend.getCrossSigningKeys(txn, func);\n    }\n\n    /**\n     * @param {*} txn An active transaction. See doTxn().\n     * @param {function(string)} func Called with the private key\n     * @param {string} type A key type\n     */\n    public getSecretStorePrivateKey(\n        txn: IDBTransaction,\n        func: (key: IEncryptedPayload | null) => void,\n        type: string,\n    ): void {\n        this.backend.getSecretStorePrivateKey(txn, func, type);\n    }\n\n    /**\n     * Write the cross-signing keys back to the store\n     *\n     * @param {*} txn An active transaction. See doTxn().\n     * @param {string} keys keys object as getCrossSigningKeys()\n     */\n    public storeCrossSigningKeys(txn: IDBTransaction, keys: Record<string, ICrossSigningKey>): void {\n        this.backend.storeCrossSigningKeys(txn, keys);\n    }\n\n    /**\n     * Write the cross-signing private keys back to the store\n     *\n     * @param {*} txn An active transaction. See doTxn().\n     * @param {string} type The type of cross-signing private key to store\n     * @param {string} key keys object as getCrossSigningKeys()\n     */\n    public storeSecretStorePrivateKey(txn: IDBTransaction, type: string, key: IEncryptedPayload): void {\n        this.backend.storeSecretStorePrivateKey(txn, type, key);\n    }\n\n    // Olm sessions\n\n    /**\n     * Returns the number of end-to-end sessions in the store\n     * @param {*} txn An active transaction. See doTxn().\n     * @param {function(int)} func Called with the count of sessions\n     */\n    public countEndToEndSessions(txn: IDBTransaction, func: (count: number) => void): void {\n        this.backend.countEndToEndSessions(txn, func);\n    }\n\n    /**\n     * Retrieve a specific end-to-end session between the logged-in user\n     * and another device.\n     * @param {string} deviceKey The public key of the other device.\n     * @param {string} sessionId The ID of the session to retrieve\n     * @param {*} txn An active transaction. See doTxn().\n     * @param {function(object)} func Called with A map from sessionId\n     *     to session information object with 'session' key being the\n     *     Base64 end-to-end session and lastReceivedMessageTs being the\n     *     timestamp in milliseconds at which the session last received\n     *     a message.\n     */\n    public getEndToEndSession(\n        deviceKey: string,\n        sessionId: string,\n        txn: IDBTransaction,\n        func: (sessions: { [ sessionId: string ]: ISessionInfo }) => void,\n    ): void {\n        this.backend.getEndToEndSession(deviceKey, sessionId, txn, func);\n    }\n\n    /**\n     * Retrieve the end-to-end sessions between the logged-in user and another\n     * device.\n     * @param {string} deviceKey The public key of the other device.\n     * @param {*} txn An active transaction. See doTxn().\n     * @param {function(object)} func Called with A map from sessionId\n     *     to session information object with 'session' key being the\n     *     Base64 end-to-end session and lastReceivedMessageTs being the\n     *     timestamp in milliseconds at which the session last received\n     *     a message.\n     */\n    public getEndToEndSessions(\n        deviceKey: string,\n        txn: IDBTransaction,\n        func: (sessions: { [sessionId: string]: ISessionInfo }) => void,\n    ): void {\n        this.backend.getEndToEndSessions(deviceKey, txn, func);\n    }\n\n    /**\n     * Retrieve all end-to-end sessions\n     * @param {*} txn An active transaction. See doTxn().\n     * @param {function(object)} func Called one for each session with\n     *     an object with, deviceKey, lastReceivedMessageTs, sessionId\n     *     and session keys.\n     */\n    public getAllEndToEndSessions(txn: IDBTransaction, func: (session: ISessionInfo) => void): void {\n        this.backend.getAllEndToEndSessions(txn, func);\n    }\n\n    /**\n     * Store a session between the logged-in user and another device\n     * @param {string} deviceKey The public key of the other device.\n     * @param {string} sessionId The ID for this end-to-end session.\n     * @param {string} sessionInfo Session information object\n     * @param {*} txn An active transaction. See doTxn().\n     */\n    public storeEndToEndSession(\n        deviceKey: string,\n        sessionId: string,\n        sessionInfo: ISessionInfo,\n        txn: IDBTransaction,\n    ): void {\n        this.backend.storeEndToEndSession(deviceKey, sessionId, sessionInfo, txn);\n    }\n\n    public storeEndToEndSessionProblem(deviceKey: string, type: string, fixed: boolean): Promise<void> {\n        return this.backend.storeEndToEndSessionProblem(deviceKey, type, fixed);\n    }\n\n    public getEndToEndSessionProblem(deviceKey: string, timestamp: number): Promise<IProblem | null> {\n        return this.backend.getEndToEndSessionProblem(deviceKey, timestamp);\n    }\n\n    public filterOutNotifiedErrorDevices(devices: IOlmDevice[]): Promise<IOlmDevice[]> {\n        return this.backend.filterOutNotifiedErrorDevices(devices);\n    }\n\n    // Inbound group sessions\n\n    /**\n     * Retrieve the end-to-end inbound group session for a given\n     * server key and session ID\n     * @param {string} senderCurve25519Key The sender's curve 25519 key\n     * @param {string} sessionId The ID of the session\n     * @param {*} txn An active transaction. See doTxn().\n     * @param {function(object)} func Called with A map from sessionId\n     *     to Base64 end-to-end session.\n     */\n    public getEndToEndInboundGroupSession(\n        senderCurve25519Key: string,\n        sessionId: string,\n        txn: IDBTransaction,\n        func: (groupSession: InboundGroupSessionData | null, groupSessionWithheld: IWithheld | null) => void,\n    ): void {\n        this.backend.getEndToEndInboundGroupSession(senderCurve25519Key, sessionId, txn, func);\n    }\n\n    /**\n     * Fetches all inbound group sessions in the store\n     * @param {*} txn An active transaction. See doTxn().\n     * @param {function(object)} func Called once for each group session\n     *     in the store with an object having keys {senderKey, sessionId,\n     *     sessionData}, then once with null to indicate the end of the list.\n     */\n    public getAllEndToEndInboundGroupSessions(\n        txn: IDBTransaction,\n        func: (session: ISession | null) => void,\n    ): void {\n        this.backend.getAllEndToEndInboundGroupSessions(txn, func);\n    }\n\n    /**\n     * Adds an end-to-end inbound group session to the store.\n     * If there already exists an inbound group session with the same\n     * senderCurve25519Key and sessionID, the session will not be added.\n     * @param {string} senderCurve25519Key The sender's curve 25519 key\n     * @param {string} sessionId The ID of the session\n     * @param {object} sessionData The session data structure\n     * @param {*} txn An active transaction. See doTxn().\n     */\n    public addEndToEndInboundGroupSession(\n        senderCurve25519Key: string,\n        sessionId: string,\n        sessionData: InboundGroupSessionData,\n        txn: IDBTransaction,\n    ): void {\n        this.backend.addEndToEndInboundGroupSession(senderCurve25519Key, sessionId, sessionData, txn);\n    }\n\n    /**\n     * Writes an end-to-end inbound group session to the store.\n     * If there already exists an inbound group session with the same\n     * senderCurve25519Key and sessionID, it will be overwritten.\n     * @param {string} senderCurve25519Key The sender's curve 25519 key\n     * @param {string} sessionId The ID of the session\n     * @param {object} sessionData The session data structure\n     * @param {*} txn An active transaction. See doTxn().\n     */\n    public storeEndToEndInboundGroupSession(\n        senderCurve25519Key: string,\n        sessionId: string,\n        sessionData: InboundGroupSessionData,\n        txn: IDBTransaction,\n    ): void {\n        this.backend.storeEndToEndInboundGroupSession(senderCurve25519Key, sessionId, sessionData, txn);\n    }\n\n    public storeEndToEndInboundGroupSessionWithheld(\n        senderCurve25519Key: string,\n        sessionId: string,\n        sessionData: IWithheld,\n        txn: IDBTransaction,\n    ): void {\n        this.backend.storeEndToEndInboundGroupSessionWithheld(senderCurve25519Key, sessionId, sessionData, txn);\n    }\n\n    // End-to-end device tracking\n\n    /**\n     * Store the state of all tracked devices\n     * This contains devices for each user, a tracking state for each user\n     * and a sync token matching the point in time the snapshot represents.\n     * These all need to be written out in full each time such that the snapshot\n     * is always consistent, so they are stored in one object.\n     *\n     * @param {Object} deviceData\n     * @param {*} txn An active transaction. See doTxn().\n     */\n    public storeEndToEndDeviceData(deviceData: IDeviceData, txn: IDBTransaction): void {\n        this.backend.storeEndToEndDeviceData(deviceData, txn);\n    }\n\n    /**\n     * Get the state of all tracked devices\n     *\n     * @param {*} txn An active transaction. See doTxn().\n     * @param {function(Object)} func Function called with the\n     *     device data\n     */\n    public getEndToEndDeviceData(txn: IDBTransaction, func: (deviceData: IDeviceData | null) => void): void {\n        this.backend.getEndToEndDeviceData(txn, func);\n    }\n\n    // End to End Rooms\n\n    /**\n     * Store the end-to-end state for a room.\n     * @param {string} roomId The room's ID.\n     * @param {object} roomInfo The end-to-end info for the room.\n     * @param {*} txn An active transaction. See doTxn().\n     */\n    public storeEndToEndRoom(roomId: string, roomInfo: IRoomEncryption, txn: IDBTransaction): void {\n        this.backend.storeEndToEndRoom(roomId, roomInfo, txn);\n    }\n\n    /**\n     * Get an object of roomId->roomInfo for all e2e rooms in the store\n     * @param {*} txn An active transaction. See doTxn().\n     * @param {function(Object)} func Function called with the end to end encrypted rooms\n     */\n    public getEndToEndRooms(txn: IDBTransaction, func: (rooms: Record<string, IRoomEncryption>) => void): void {\n        this.backend.getEndToEndRooms(txn, func);\n    }\n\n    // session backups\n\n    /**\n     * Get the inbound group sessions that need to be backed up.\n     * @param {number} limit The maximum number of sessions to retrieve.  0\n     * for no limit.\n     * @returns {Promise} resolves to an array of inbound group sessions\n     */\n    public getSessionsNeedingBackup(limit: number): Promise<ISession[]> {\n        return this.backend.getSessionsNeedingBackup(limit);\n    }\n\n    /**\n     * Count the inbound group sessions that need to be backed up.\n     * @param {*} txn An active transaction. See doTxn(). (optional)\n     * @returns {Promise} resolves to the number of sessions\n     */\n    public countSessionsNeedingBackup(txn?: IDBTransaction): Promise<number> {\n        return this.backend.countSessionsNeedingBackup(txn);\n    }\n\n    /**\n     * Unmark sessions as needing to be backed up.\n     * @param {Array<object>} sessions The sessions that need to be backed up.\n     * @param {*} txn An active transaction. See doTxn(). (optional)\n     * @returns {Promise} resolves when the sessions are unmarked\n     */\n    public unmarkSessionsNeedingBackup(sessions: ISession[], txn?: IDBTransaction): Promise<void> {\n        return this.backend.unmarkSessionsNeedingBackup(sessions, txn);\n    }\n\n    /**\n     * Mark sessions as needing to be backed up.\n     * @param {Array<object>} sessions The sessions that need to be backed up.\n     * @param {*} txn An active transaction. See doTxn(). (optional)\n     * @returns {Promise} resolves when the sessions are marked\n     */\n    public markSessionsNeedingBackup(sessions: ISession[], txn?: IDBTransaction): Promise<void> {\n        return this.backend.markSessionsNeedingBackup(sessions, txn);\n    }\n\n    /**\n     * Add a shared-history group session for a room.\n     * @param {string} roomId The room that the key belongs to\n     * @param {string} senderKey The sender's curve 25519 key\n     * @param {string} sessionId The ID of the session\n     * @param {*} txn An active transaction. See doTxn(). (optional)\n     */\n    public addSharedHistoryInboundGroupSession(\n        roomId: string,\n        senderKey: string,\n        sessionId: string,\n        txn?: IDBTransaction,\n    ): void {\n        this.backend.addSharedHistoryInboundGroupSession(roomId, senderKey, sessionId, txn);\n    }\n\n    /**\n     * Get the shared-history group session for a room.\n     * @param {string} roomId The room that the key belongs to\n     * @param {*} txn An active transaction. See doTxn(). (optional)\n     * @returns {Promise} Resolves to an array of [senderKey, sessionId]\n     */\n    public getSharedHistoryInboundGroupSessions(\n        roomId: string,\n        txn?: IDBTransaction,\n    ): Promise<[senderKey: string, sessionId: string][]> {\n        return this.backend.getSharedHistoryInboundGroupSessions(roomId, txn);\n    }\n\n    /**\n     * Perform a transaction on the crypto store. Any store methods\n     * that require a transaction (txn) object to be passed in may\n     * only be called within a callback of either this function or\n     * one of the store functions operating on the same transaction.\n     *\n     * @param {string} mode 'readwrite' if you need to call setter\n     *     functions with this transaction. Otherwise, 'readonly'.\n     * @param {string[]} stores List IndexedDBCryptoStore.STORE_*\n     *     options representing all types of object that will be\n     *     accessed or written to with this transaction.\n     * @param {function(*)} func Function called with the\n     *     transaction object: an opaque object that should be passed\n     *     to store functions.\n     * @param {Logger} [log] A possibly customised log\n     * @return {Promise} Promise that resolves with the result of the `func`\n     *     when the transaction is complete. If the backend is\n     *     async (ie. the indexeddb backend) any of the callback\n     *     functions throwing an exception will cause this promise to\n     *     reject with that exception. On synchronous backends, the\n     *     exception will propagate to the caller of the getFoo method.\n     */\n    doTxn<T>(mode: Mode, stores: Iterable<string>, func: (txn: IDBTransaction) => T, log?: PrefixedLogger): Promise<T> {\n        return this.backend.doTxn(mode, stores, func, log);\n    }\n}\n",
    "/*\nCopyright 2017 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { logger } from '../../logger';\nimport { MemoryCryptoStore } from './memory-crypto-store';\nimport { IDeviceData, IProblem, ISession, ISessionInfo, IWithheld, Mode } from \"./base\";\nimport { IOlmDevice } from \"../algorithms/megolm\";\nimport { IRoomEncryption } from \"../RoomList\";\nimport { ICrossSigningKey } from \"../../client\";\nimport { InboundGroupSessionData } from \"../OlmDevice\";\nimport { IEncryptedPayload } from \"../aes\";\n\n/**\n * Internal module. Partial localStorage backed storage for e2e.\n * This is not a full crypto store, just the in-memory store with\n * some things backed by localStorage. It exists because indexedDB\n * is broken in Firefox private mode or set to, \"will not remember\n * history\".\n *\n * @module\n */\n\nconst E2E_PREFIX = \"crypto.\";\nconst KEY_END_TO_END_ACCOUNT = E2E_PREFIX + \"account\";\nconst KEY_CROSS_SIGNING_KEYS = E2E_PREFIX + \"cross_signing_keys\";\nconst KEY_NOTIFIED_ERROR_DEVICES = E2E_PREFIX + \"notified_error_devices\";\nconst KEY_DEVICE_DATA = E2E_PREFIX + \"device_data\";\nconst KEY_INBOUND_SESSION_PREFIX = E2E_PREFIX + \"inboundgroupsessions/\";\nconst KEY_INBOUND_SESSION_WITHHELD_PREFIX = E2E_PREFIX + \"inboundgroupsessions.withheld/\";\nconst KEY_ROOMS_PREFIX = E2E_PREFIX + \"rooms/\";\nconst KEY_SESSIONS_NEEDING_BACKUP = E2E_PREFIX + \"sessionsneedingbackup\";\n\nfunction keyEndToEndSessions(deviceKey: string): string {\n    return E2E_PREFIX + \"sessions/\" + deviceKey;\n}\n\nfunction keyEndToEndSessionProblems(deviceKey: string): string {\n    return E2E_PREFIX + \"session.problems/\" + deviceKey;\n}\n\nfunction keyEndToEndInboundGroupSession(senderKey: string, sessionId: string): string {\n    return KEY_INBOUND_SESSION_PREFIX + senderKey + \"/\" + sessionId;\n}\n\nfunction keyEndToEndInboundGroupSessionWithheld(senderKey: string, sessionId: string): string {\n    return KEY_INBOUND_SESSION_WITHHELD_PREFIX + senderKey + \"/\" + sessionId;\n}\n\nfunction keyEndToEndRoomsPrefix(roomId: string): string {\n    return KEY_ROOMS_PREFIX + roomId;\n}\n\n/**\n * @implements {module:crypto/store/base~CryptoStore}\n */\nexport class LocalStorageCryptoStore extends MemoryCryptoStore {\n    public static exists(store: Storage): boolean {\n        const length = store.length;\n        for (let i = 0; i < length; i++) {\n            if (store.key(i).startsWith(E2E_PREFIX)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    constructor(private readonly store: Storage) {\n        super();\n    }\n\n    // Olm Sessions\n\n    public countEndToEndSessions(txn: unknown, func: (count: number) => void): void {\n        let count = 0;\n        for (let i = 0; i < this.store.length; ++i) {\n            if (this.store.key(i).startsWith(keyEndToEndSessions(''))) ++count;\n        }\n        func(count);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    private _getEndToEndSessions(deviceKey: string): Record<string, ISessionInfo> {\n        const sessions = getJsonItem(this.store, keyEndToEndSessions(deviceKey));\n        const fixedSessions: Record<string, ISessionInfo> = {};\n\n        // fix up any old sessions to be objects rather than just the base64 pickle\n        for (const [sid, val] of Object.entries(sessions || {})) {\n            if (typeof val === 'string') {\n                fixedSessions[sid] = {\n                    session: val,\n                };\n            } else {\n                fixedSessions[sid] = val;\n            }\n        }\n\n        return fixedSessions;\n    }\n\n    public getEndToEndSession(\n        deviceKey: string,\n        sessionId: string,\n        txn: unknown,\n        func: (session: ISessionInfo) => void,\n    ): void {\n        const sessions = this._getEndToEndSessions(deviceKey);\n        func(sessions[sessionId] || {});\n    }\n\n    public getEndToEndSessions(\n        deviceKey: string,\n        txn: unknown,\n        func: (sessions: { [sessionId: string]: ISessionInfo }) => void,\n    ): void {\n        func(this._getEndToEndSessions(deviceKey) || {});\n    }\n\n    public getAllEndToEndSessions(txn: unknown, func: (session: ISessionInfo) => void): void {\n        for (let i = 0; i < this.store.length; ++i) {\n            if (this.store.key(i).startsWith(keyEndToEndSessions(''))) {\n                const deviceKey = this.store.key(i).split('/')[1];\n                for (const sess of Object.values(this._getEndToEndSessions(deviceKey))) {\n                    func(sess);\n                }\n            }\n        }\n    }\n\n    public storeEndToEndSession(deviceKey: string, sessionId: string, sessionInfo: ISessionInfo, txn: unknown): void {\n        const sessions = this._getEndToEndSessions(deviceKey) || {};\n        sessions[sessionId] = sessionInfo;\n        setJsonItem(this.store, keyEndToEndSessions(deviceKey), sessions);\n    }\n\n    public async storeEndToEndSessionProblem(deviceKey: string, type: string, fixed: boolean): Promise<void> {\n        const key = keyEndToEndSessionProblems(deviceKey);\n        const problems = getJsonItem<IProblem[]>(this.store, key) || [];\n        problems.push({ type, fixed, time: Date.now() });\n        problems.sort((a, b) => {\n            return a.time - b.time;\n        });\n        setJsonItem(this.store, key, problems);\n    }\n\n    async getEndToEndSessionProblem(deviceKey: string, timestamp: number): Promise<IProblem | null> {\n        const key = keyEndToEndSessionProblems(deviceKey);\n        const problems = getJsonItem<IProblem[]>(this.store, key) || [];\n        if (!problems.length) {\n            return null;\n        }\n        const lastProblem = problems[problems.length - 1];\n        for (const problem of problems) {\n            if (problem.time > timestamp) {\n                return Object.assign({}, problem, { fixed: lastProblem.fixed });\n            }\n        }\n        if (lastProblem.fixed) {\n            return null;\n        } else {\n            return lastProblem;\n        }\n    }\n\n    public async filterOutNotifiedErrorDevices(devices: IOlmDevice[]): Promise<IOlmDevice[]> {\n        const notifiedErrorDevices = getJsonItem<MemoryCryptoStore[\"notifiedErrorDevices\"]>(\n            this.store, KEY_NOTIFIED_ERROR_DEVICES,\n        ) || {};\n        const ret: IOlmDevice[] = [];\n\n        for (const device of devices) {\n            const { userId, deviceInfo } = device;\n            if (userId in notifiedErrorDevices) {\n                if (!(deviceInfo.deviceId in notifiedErrorDevices[userId])) {\n                    ret.push(device);\n                    notifiedErrorDevices[userId][deviceInfo.deviceId] = true;\n                }\n            } else {\n                ret.push(device);\n                notifiedErrorDevices[userId] = { [deviceInfo.deviceId]: true };\n            }\n        }\n\n        setJsonItem(this.store, KEY_NOTIFIED_ERROR_DEVICES, notifiedErrorDevices);\n\n        return ret;\n    }\n\n    // Inbound Group Sessions\n\n    public getEndToEndInboundGroupSession(\n        senderCurve25519Key: string,\n        sessionId: string,\n        txn: unknown,\n        func: (groupSession: InboundGroupSessionData | null, groupSessionWithheld: IWithheld | null) => void,\n    ): void {\n        func(\n            getJsonItem(\n                this.store,\n                keyEndToEndInboundGroupSession(senderCurve25519Key, sessionId),\n            ),\n            getJsonItem(\n                this.store,\n                keyEndToEndInboundGroupSessionWithheld(senderCurve25519Key, sessionId),\n            ),\n        );\n    }\n\n    public getAllEndToEndInboundGroupSessions(txn: unknown, func: (session: ISession | null) => void): void {\n        for (let i = 0; i < this.store.length; ++i) {\n            const key = this.store.key(i);\n            if (key.startsWith(KEY_INBOUND_SESSION_PREFIX)) {\n                // we can't use split, as the components we are trying to split out\n                // might themselves contain '/' characters. We rely on the\n                // senderKey being a (32-byte) curve25519 key, base64-encoded\n                // (hence 43 characters long).\n\n                func({\n                    senderKey: key.slice(KEY_INBOUND_SESSION_PREFIX.length, KEY_INBOUND_SESSION_PREFIX.length + 43),\n                    sessionId: key.slice(KEY_INBOUND_SESSION_PREFIX.length + 44),\n                    sessionData: getJsonItem(this.store, key),\n                });\n            }\n        }\n        func(null);\n    }\n\n    public addEndToEndInboundGroupSession(\n        senderCurve25519Key: string,\n        sessionId: string,\n        sessionData: InboundGroupSessionData,\n        txn: unknown,\n    ): void {\n        const existing = getJsonItem(\n            this.store,\n            keyEndToEndInboundGroupSession(senderCurve25519Key, sessionId),\n        );\n        if (!existing) {\n            this.storeEndToEndInboundGroupSession(\n                senderCurve25519Key, sessionId, sessionData, txn,\n            );\n        }\n    }\n\n    public storeEndToEndInboundGroupSession(\n        senderCurve25519Key: string,\n        sessionId: string,\n        sessionData: InboundGroupSessionData,\n        txn: unknown,\n    ): void {\n        setJsonItem(\n            this.store,\n            keyEndToEndInboundGroupSession(senderCurve25519Key, sessionId),\n            sessionData,\n        );\n    }\n\n    public storeEndToEndInboundGroupSessionWithheld(\n        senderCurve25519Key: string,\n        sessionId: string,\n        sessionData: IWithheld,\n        txn: unknown,\n    ): void {\n        setJsonItem(\n            this.store,\n            keyEndToEndInboundGroupSessionWithheld(senderCurve25519Key, sessionId),\n            sessionData,\n        );\n    }\n\n    public getEndToEndDeviceData(txn: unknown, func: (deviceData: IDeviceData | null) => void): void {\n        func(getJsonItem(this.store, KEY_DEVICE_DATA));\n    }\n\n    public storeEndToEndDeviceData(deviceData: IDeviceData, txn: unknown): void {\n        setJsonItem(this.store, KEY_DEVICE_DATA, deviceData);\n    }\n\n    public storeEndToEndRoom(roomId: string, roomInfo: IRoomEncryption, txn: unknown): void {\n        setJsonItem(this.store, keyEndToEndRoomsPrefix(roomId), roomInfo);\n    }\n\n    public getEndToEndRooms(txn: unknown, func: (rooms: Record<string, IRoomEncryption>) => void): void {\n        const result: Record<string, IRoomEncryption> = {};\n        const prefix = keyEndToEndRoomsPrefix('');\n\n        for (let i = 0; i < this.store.length; ++i) {\n            const key = this.store.key(i);\n            if (key.startsWith(prefix)) {\n                const roomId = key.slice(prefix.length);\n                result[roomId] = getJsonItem(this.store, key);\n            }\n        }\n        func(result);\n    }\n\n    public getSessionsNeedingBackup(limit: number): Promise<ISession[]> {\n        const sessionsNeedingBackup = getJsonItem<string[]>(this.store, KEY_SESSIONS_NEEDING_BACKUP) || {};\n        const sessions: ISession[] = [];\n\n        for (const session in sessionsNeedingBackup) {\n            if (Object.prototype.hasOwnProperty.call(sessionsNeedingBackup, session)) {\n                // see getAllEndToEndInboundGroupSessions for the magic number explanations\n                const senderKey = session.slice(0, 43);\n                const sessionId = session.slice(44);\n                this.getEndToEndInboundGroupSession(\n                    senderKey, sessionId, null,\n                    (sessionData) => {\n                        sessions.push({\n                            senderKey: senderKey,\n                            sessionId: sessionId,\n                            sessionData: sessionData,\n                        });\n                    },\n                );\n                if (limit && sessions.length >= limit) {\n                    break;\n                }\n            }\n        }\n        return Promise.resolve(sessions);\n    }\n\n    public countSessionsNeedingBackup(): Promise<number> {\n        const sessionsNeedingBackup = getJsonItem(this.store, KEY_SESSIONS_NEEDING_BACKUP) || {};\n        return Promise.resolve(Object.keys(sessionsNeedingBackup).length);\n    }\n\n    public unmarkSessionsNeedingBackup(sessions: ISession[]): Promise<void> {\n        const sessionsNeedingBackup\n              = getJsonItem(this.store, KEY_SESSIONS_NEEDING_BACKUP) || {};\n        for (const session of sessions) {\n            delete sessionsNeedingBackup[session.senderKey + '/' + session.sessionId];\n        }\n        setJsonItem(\n            this.store, KEY_SESSIONS_NEEDING_BACKUP, sessionsNeedingBackup,\n        );\n        return Promise.resolve();\n    }\n\n    public markSessionsNeedingBackup(sessions: ISession[]): Promise<void> {\n        const sessionsNeedingBackup\n              = getJsonItem(this.store, KEY_SESSIONS_NEEDING_BACKUP) || {};\n        for (const session of sessions) {\n            sessionsNeedingBackup[session.senderKey + '/' + session.sessionId] = true;\n        }\n        setJsonItem(\n            this.store, KEY_SESSIONS_NEEDING_BACKUP, sessionsNeedingBackup,\n        );\n        return Promise.resolve();\n    }\n\n    /**\n     * Delete all data from this store.\n     *\n     * @returns {Promise} Promise which resolves when the store has been cleared.\n     */\n    public deleteAllData(): Promise<void> {\n        this.store.removeItem(KEY_END_TO_END_ACCOUNT);\n        return Promise.resolve();\n    }\n\n    // Olm account\n\n    public getAccount(txn: unknown, func: (accountPickle: string) => void): void {\n        const accountPickle = getJsonItem<string>(this.store, KEY_END_TO_END_ACCOUNT);\n        func(accountPickle);\n    }\n\n    public storeAccount(txn: unknown, accountPickle: string): void {\n        setJsonItem(this.store, KEY_END_TO_END_ACCOUNT, accountPickle);\n    }\n\n    public getCrossSigningKeys(txn: unknown, func: (keys: Record<string, ICrossSigningKey>) => void): void {\n        const keys = getJsonItem<Record<string, ICrossSigningKey>>(this.store, KEY_CROSS_SIGNING_KEYS);\n        func(keys);\n    }\n\n    public getSecretStorePrivateKey(txn: unknown, func: (key: IEncryptedPayload | null) => void, type: string): void {\n        const key = getJsonItem<IEncryptedPayload>(this.store, E2E_PREFIX + `ssss_cache.${type}`);\n        func(key);\n    }\n\n    public storeCrossSigningKeys(txn: unknown, keys: Record<string, ICrossSigningKey>): void {\n        setJsonItem(this.store, KEY_CROSS_SIGNING_KEYS, keys);\n    }\n\n    public storeSecretStorePrivateKey(txn: unknown, type: string, key: IEncryptedPayload): void {\n        setJsonItem(this.store, E2E_PREFIX + `ssss_cache.${type}`, key);\n    }\n\n    doTxn<T>(mode: Mode, stores: Iterable<string>, func: (txn: unknown) => T): Promise<T> {\n        return Promise.resolve(func(null));\n    }\n}\n\nfunction getJsonItem<T>(store: Storage, key: string): T | null {\n    try {\n        // if the key is absent, store.getItem() returns null, and\n        // JSON.parse(null) === null, so this returns null.\n        return JSON.parse(store.getItem(key));\n    } catch (e) {\n        logger.log(\"Error: Failed to get key %s: %s\", key, e.stack || e);\n        logger.log(e.stack);\n    }\n    return null;\n}\n\nfunction setJsonItem<T>(store: Storage, key: string, val: T): void {\n    store.setItem(key, JSON.stringify(val));\n}\n",
    "/*\nCopyright 2017 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { logger } from '../../logger';\nimport * as utils from \"../../utils\";\nimport {\n    CryptoStore,\n    IDeviceData,\n    IProblem,\n    ISession,\n    ISessionInfo,\n    IWithheld,\n    Mode,\n    OutgoingRoomKeyRequest,\n} from \"./base\";\nimport { IRoomKeyRequestBody } from \"../index\";\nimport { ICrossSigningKey } from \"../../client\";\nimport { IOlmDevice } from \"../algorithms/megolm\";\nimport { IRoomEncryption } from \"../RoomList\";\nimport { InboundGroupSessionData } from \"../OlmDevice\";\nimport { IEncryptedPayload } from \"../aes\";\n\n/**\n * Internal module. in-memory storage for e2e.\n *\n * @module\n */\n\n/**\n * @implements {module:crypto/store/base~CryptoStore}\n */\nexport class MemoryCryptoStore implements CryptoStore {\n    private outgoingRoomKeyRequests: OutgoingRoomKeyRequest[] = [];\n    private account: string = null;\n    private crossSigningKeys: Record<string, ICrossSigningKey> = null;\n    private privateKeys: Record<string, IEncryptedPayload> = {};\n\n    private sessions: { [deviceKey: string]: { [sessionId: string]: ISessionInfo } } = {};\n    private sessionProblems: { [deviceKey: string]: IProblem[] } = {};\n    private notifiedErrorDevices: { [userId: string]: { [deviceId: string]: boolean } } = {};\n    private inboundGroupSessions: { [sessionKey: string]: InboundGroupSessionData } = {};\n    private inboundGroupSessionsWithheld: Record<string, IWithheld> = {};\n    // Opaque device data object\n    private deviceData: IDeviceData = null;\n    private rooms: { [roomId: string]: IRoomEncryption } = {};\n    private sessionsNeedingBackup: { [sessionKey: string]: boolean } = {};\n    private sharedHistoryInboundGroupSessions: { [roomId: string]: [senderKey: string, sessionId: string][] } = {};\n\n    /**\n     * Ensure the database exists and is up-to-date.\n     *\n     * This must be called before the store can be used.\n     *\n     * @return {Promise} resolves to the store.\n     */\n    public async startup(): Promise<CryptoStore> {\n        // No startup work to do for the memory store.\n        return this;\n    }\n\n    /**\n     * Delete all data from this store.\n     *\n     * @returns {Promise} Promise which resolves when the store has been cleared.\n     */\n    public deleteAllData(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Look for an existing outgoing room key request, and if none is found,\n     * add a new one\n     *\n     * @param {module:crypto/store/base~OutgoingRoomKeyRequest} request\n     *\n     * @returns {Promise} resolves to\n     *    {@link module:crypto/store/base~OutgoingRoomKeyRequest}: either the\n     *    same instance as passed in, or the existing one.\n     */\n    public getOrAddOutgoingRoomKeyRequest(request: OutgoingRoomKeyRequest): Promise<OutgoingRoomKeyRequest> {\n        const requestBody = request.requestBody;\n\n        return utils.promiseTry(() => {\n            // first see if we already have an entry for this request.\n            const existing = this._getOutgoingRoomKeyRequest(requestBody);\n\n            if (existing) {\n                // this entry matches the request - return it.\n                logger.log(\n                    `already have key request outstanding for ` +\n                    `${requestBody.room_id} / ${requestBody.session_id}: ` +\n                    `not sending another`,\n                );\n                return existing;\n            }\n\n            // we got to the end of the list without finding a match\n            // - add the new request.\n            logger.log(\n                `enqueueing key request for ${requestBody.room_id} / ` +\n                requestBody.session_id,\n            );\n            this.outgoingRoomKeyRequests.push(request);\n            return request;\n        });\n    }\n\n    /**\n     * Look for an existing room key request\n     *\n     * @param {module:crypto~RoomKeyRequestBody} requestBody\n     *    existing request to look for\n     *\n     * @return {Promise} resolves to the matching\n     *    {@link module:crypto/store/base~OutgoingRoomKeyRequest}, or null if\n     *    not found\n     */\n    public getOutgoingRoomKeyRequest(requestBody: IRoomKeyRequestBody): Promise<OutgoingRoomKeyRequest | null> {\n        return Promise.resolve(this._getOutgoingRoomKeyRequest(requestBody));\n    }\n\n    /**\n     * Looks for existing room key request, and returns the result synchronously.\n     *\n     * @internal\n     *\n     * @param {module:crypto~RoomKeyRequestBody} requestBody\n     *    existing request to look for\n     *\n     * @return {module:crypto/store/base~OutgoingRoomKeyRequest?}\n     *    the matching request, or null if not found\n     */\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    private _getOutgoingRoomKeyRequest(requestBody: IRoomKeyRequestBody): OutgoingRoomKeyRequest | null {\n        for (const existing of this.outgoingRoomKeyRequests) {\n            if (utils.deepCompare(existing.requestBody, requestBody)) {\n                return existing;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Look for room key requests by state\n     *\n     * @param {Array<Number>} wantedStates list of acceptable states\n     *\n     * @return {Promise} resolves to the a\n     *    {@link module:crypto/store/base~OutgoingRoomKeyRequest}, or null if\n     *    there are no pending requests in those states\n     */\n    public getOutgoingRoomKeyRequestByState(wantedStates: number[]): Promise<OutgoingRoomKeyRequest | null> {\n        for (const req of this.outgoingRoomKeyRequests) {\n            for (const state of wantedStates) {\n                if (req.state === state) {\n                    return Promise.resolve(req);\n                }\n            }\n        }\n        return Promise.resolve(null);\n    }\n\n    /**\n     *\n     * @param {Number} wantedState\n     * @return {Promise<Array<*>>} All OutgoingRoomKeyRequests in state\n     */\n    public getAllOutgoingRoomKeyRequestsByState(wantedState: number): Promise<OutgoingRoomKeyRequest[]> {\n        return Promise.resolve(\n            this.outgoingRoomKeyRequests.filter(\n                (r) => r.state == wantedState,\n            ),\n        );\n    }\n\n    public getOutgoingRoomKeyRequestsByTarget(\n        userId: string,\n        deviceId: string,\n        wantedStates: number[],\n    ): Promise<OutgoingRoomKeyRequest[]> {\n        const results = [];\n\n        for (const req of this.outgoingRoomKeyRequests) {\n            for (const state of wantedStates) {\n                if (req.state === state && req.recipients.includes({ userId, deviceId })) {\n                    results.push(req);\n                }\n            }\n        }\n        return Promise.resolve(results);\n    }\n\n    /**\n     * Look for an existing room key request by id and state, and update it if\n     * found\n     *\n     * @param {string} requestId      ID of request to update\n     * @param {number} expectedState  state we expect to find the request in\n     * @param {Object} updates        name/value map of updates to apply\n     *\n     * @returns {Promise} resolves to\n     *    {@link module:crypto/store/base~OutgoingRoomKeyRequest}\n     *    updated request, or null if no matching row was found\n     */\n    public updateOutgoingRoomKeyRequest(\n        requestId: string,\n        expectedState: number,\n        updates: Partial<OutgoingRoomKeyRequest>,\n    ): Promise<OutgoingRoomKeyRequest | null> {\n        for (const req of this.outgoingRoomKeyRequests) {\n            if (req.requestId !== requestId) {\n                continue;\n            }\n\n            if (req.state !== expectedState) {\n                logger.warn(\n                    `Cannot update room key request from ${expectedState} ` +\n                    `as it was already updated to ${req.state}`,\n                );\n                return Promise.resolve(null);\n            }\n            Object.assign(req, updates);\n            return Promise.resolve(req);\n        }\n\n        return Promise.resolve(null);\n    }\n\n    /**\n     * Look for an existing room key request by id and state, and delete it if\n     * found\n     *\n     * @param {string} requestId      ID of request to update\n     * @param {number} expectedState  state we expect to find the request in\n     *\n     * @returns {Promise} resolves once the operation is completed\n     */\n    public deleteOutgoingRoomKeyRequest(\n        requestId: string,\n        expectedState: number,\n    ): Promise<OutgoingRoomKeyRequest | null> {\n        for (let i = 0; i < this.outgoingRoomKeyRequests.length; i++) {\n            const req = this.outgoingRoomKeyRequests[i];\n\n            if (req.requestId !== requestId) {\n                continue;\n            }\n\n            if (req.state != expectedState) {\n                logger.warn(\n                    `Cannot delete room key request in state ${req.state} `\n                    + `(expected ${expectedState})`,\n                );\n                return Promise.resolve(null);\n            }\n\n            this.outgoingRoomKeyRequests.splice(i, 1);\n            return Promise.resolve(req);\n        }\n\n        return Promise.resolve(null);\n    }\n\n    // Olm Account\n\n    public getAccount(txn: unknown, func: (accountPickle: string) => void) {\n        func(this.account);\n    }\n\n    public storeAccount(txn: unknown, accountPickle: string): void {\n        this.account = accountPickle;\n    }\n\n    public getCrossSigningKeys(txn: unknown, func: (keys: Record<string, ICrossSigningKey>) => void): void {\n        func(this.crossSigningKeys);\n    }\n\n    public getSecretStorePrivateKey(txn: unknown, func: (key: IEncryptedPayload | null) => void, type: string): void {\n        const result = this.privateKeys[type];\n        func(result || null);\n    }\n\n    public storeCrossSigningKeys(txn: unknown, keys: Record<string, ICrossSigningKey>): void {\n        this.crossSigningKeys = keys;\n    }\n\n    public storeSecretStorePrivateKey(txn: unknown, type: string, key: IEncryptedPayload): void {\n        this.privateKeys[type] = key;\n    }\n\n    // Olm Sessions\n\n    public countEndToEndSessions(txn: unknown, func: (count: number) => void): void {\n        func(Object.keys(this.sessions).length);\n    }\n\n    public getEndToEndSession(\n        deviceKey: string,\n        sessionId: string,\n        txn: unknown,\n        func: (session: ISessionInfo) => void,\n    ): void {\n        const deviceSessions = this.sessions[deviceKey] || {};\n        func(deviceSessions[sessionId] || null);\n    }\n\n    public getEndToEndSessions(\n        deviceKey: string,\n        txn: unknown,\n        func: (sessions: { [sessionId: string]: ISessionInfo }) => void,\n    ): void {\n        func(this.sessions[deviceKey] || {});\n    }\n\n    public getAllEndToEndSessions(txn: unknown, func: (session: ISessionInfo) => void): void {\n        Object.entries(this.sessions).forEach(([deviceKey, deviceSessions]) => {\n            Object.entries(deviceSessions).forEach(([sessionId, session]) => {\n                func({\n                    ...session,\n                    deviceKey,\n                    sessionId,\n                });\n            });\n        });\n    }\n\n    public storeEndToEndSession(deviceKey: string, sessionId: string, sessionInfo: ISessionInfo, txn: unknown): void {\n        let deviceSessions = this.sessions[deviceKey];\n        if (deviceSessions === undefined) {\n            deviceSessions = {};\n            this.sessions[deviceKey] = deviceSessions;\n        }\n        deviceSessions[sessionId] = sessionInfo;\n    }\n\n    public async storeEndToEndSessionProblem(deviceKey: string, type: string, fixed: boolean): Promise<void> {\n        const problems = this.sessionProblems[deviceKey] = this.sessionProblems[deviceKey] || [];\n        problems.push({ type, fixed, time: Date.now() });\n        problems.sort((a, b) => {\n            return a.time - b.time;\n        });\n    }\n\n    public async getEndToEndSessionProblem(deviceKey: string, timestamp: number): Promise<IProblem | null> {\n        const problems = this.sessionProblems[deviceKey] || [];\n        if (!problems.length) {\n            return null;\n        }\n        const lastProblem = problems[problems.length - 1];\n        for (const problem of problems) {\n            if (problem.time > timestamp) {\n                return Object.assign({}, problem, { fixed: lastProblem.fixed });\n            }\n        }\n        if (lastProblem.fixed) {\n            return null;\n        } else {\n            return lastProblem;\n        }\n    }\n\n    public async filterOutNotifiedErrorDevices(devices: IOlmDevice[]): Promise<IOlmDevice[]> {\n        const notifiedErrorDevices = this.notifiedErrorDevices;\n        const ret: IOlmDevice[] = [];\n\n        for (const device of devices) {\n            const { userId, deviceInfo } = device;\n            if (userId in notifiedErrorDevices) {\n                if (!(deviceInfo.deviceId in notifiedErrorDevices[userId])) {\n                    ret.push(device);\n                    notifiedErrorDevices[userId][deviceInfo.deviceId] = true;\n                }\n            } else {\n                ret.push(device);\n                notifiedErrorDevices[userId] = { [deviceInfo.deviceId]: true };\n            }\n        }\n\n        return ret;\n    }\n\n    // Inbound Group Sessions\n\n    public getEndToEndInboundGroupSession(\n        senderCurve25519Key: string,\n        sessionId: string,\n        txn: unknown,\n        func: (groupSession: InboundGroupSessionData | null, groupSessionWithheld: IWithheld | null) => void,\n    ): void {\n        const k = senderCurve25519Key+'/'+sessionId;\n        func(\n            this.inboundGroupSessions[k] || null,\n            this.inboundGroupSessionsWithheld[k] || null,\n        );\n    }\n\n    public getAllEndToEndInboundGroupSessions(\n        txn: unknown,\n        func: (session: ISession | null) => void,\n    ): void {\n        for (const key of Object.keys(this.inboundGroupSessions)) {\n            // we can't use split, as the components we are trying to split out\n            // might themselves contain '/' characters. We rely on the\n            // senderKey being a (32-byte) curve25519 key, base64-encoded\n            // (hence 43 characters long).\n\n            func({\n                senderKey: key.slice(0, 43),\n                sessionId: key.slice(44),\n                sessionData: this.inboundGroupSessions[key],\n            });\n        }\n        func(null);\n    }\n\n    public addEndToEndInboundGroupSession(\n        senderCurve25519Key: string,\n        sessionId: string,\n        sessionData: InboundGroupSessionData,\n        txn: unknown,\n    ): void {\n        const k = senderCurve25519Key+'/'+sessionId;\n        if (this.inboundGroupSessions[k] === undefined) {\n            this.inboundGroupSessions[k] = sessionData;\n        }\n    }\n\n    public storeEndToEndInboundGroupSession(\n        senderCurve25519Key: string,\n        sessionId: string,\n        sessionData: InboundGroupSessionData,\n        txn: unknown,\n    ): void {\n        this.inboundGroupSessions[senderCurve25519Key+'/'+sessionId] = sessionData;\n    }\n\n    public storeEndToEndInboundGroupSessionWithheld(\n        senderCurve25519Key: string,\n        sessionId: string,\n        sessionData: IWithheld,\n        txn: unknown,\n    ): void {\n        const k = senderCurve25519Key+'/'+sessionId;\n        this.inboundGroupSessionsWithheld[k] = sessionData;\n    }\n\n    // Device Data\n\n    public getEndToEndDeviceData(txn: unknown, func: (deviceData: IDeviceData | null) => void): void {\n        func(this.deviceData);\n    }\n\n    public storeEndToEndDeviceData(deviceData: IDeviceData, txn: unknown): void {\n        this.deviceData = deviceData;\n    }\n\n    // E2E rooms\n\n    public storeEndToEndRoom(roomId: string, roomInfo: IRoomEncryption, txn: unknown): void {\n        this.rooms[roomId] = roomInfo;\n    }\n\n    public getEndToEndRooms(txn: unknown, func: (rooms: Record<string, IRoomEncryption>) => void): void {\n        func(this.rooms);\n    }\n\n    public getSessionsNeedingBackup(limit: number): Promise<ISession[]> {\n        const sessions: ISession[] = [];\n        for (const session in this.sessionsNeedingBackup) {\n            if (this.inboundGroupSessions[session]) {\n                sessions.push({\n                    senderKey: session.slice(0, 43),\n                    sessionId: session.slice(44),\n                    sessionData: this.inboundGroupSessions[session],\n                });\n                if (limit && session.length >= limit) {\n                    break;\n                }\n            }\n        }\n        return Promise.resolve(sessions);\n    }\n\n    public countSessionsNeedingBackup(): Promise<number> {\n        return Promise.resolve(Object.keys(this.sessionsNeedingBackup).length);\n    }\n\n    public unmarkSessionsNeedingBackup(sessions: ISession[]): Promise<void> {\n        for (const session of sessions) {\n            const sessionKey = session.senderKey + '/' + session.sessionId;\n            delete this.sessionsNeedingBackup[sessionKey];\n        }\n        return Promise.resolve();\n    }\n\n    public markSessionsNeedingBackup(sessions: ISession[]): Promise<void> {\n        for (const session of sessions) {\n            const sessionKey = session.senderKey + '/' + session.sessionId;\n            this.sessionsNeedingBackup[sessionKey] = true;\n        }\n        return Promise.resolve();\n    }\n\n    public addSharedHistoryInboundGroupSession(roomId: string, senderKey: string, sessionId: string): void {\n        const sessions = this.sharedHistoryInboundGroupSessions[roomId] || [];\n        sessions.push([senderKey, sessionId]);\n        this.sharedHistoryInboundGroupSessions[roomId] = sessions;\n    }\n\n    public getSharedHistoryInboundGroupSessions(roomId: string): Promise<[senderKey: string, sessionId: string][]> {\n        return Promise.resolve(this.sharedHistoryInboundGroupSessions[roomId] || []);\n    }\n\n    // Session key backups\n\n    public doTxn<T>(mode: Mode, stores: Iterable<string>, func: (txn?: unknown) => T): Promise<T> {\n        return Promise.resolve(func(null));\n    }\n}\n",
    "/*\nCopyright 2018 New Vector Ltd\nCopyright 2020 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * Base class for verification methods.\n * @module crypto/verification/Base\n */\n\nimport { MatrixEvent } from '../../models/event';\nimport { logger } from '../../logger';\nimport { DeviceInfo } from '../deviceinfo';\nimport { newTimeoutError } from \"./Error\";\nimport { KeysDuringVerification, requestKeysDuringVerification } from \"../CrossSigning\";\nimport { IVerificationChannel } from \"./request/Channel\";\nimport { MatrixClient } from \"../../client\";\nimport { VerificationRequest } from \"./request/VerificationRequest\";\nimport { ListenerMap, TypedEventEmitter } from \"../../models/typed-event-emitter\";\n\nconst timeoutException = new Error(\"Verification timed out\");\n\nexport class SwitchStartEventError extends Error {\n    constructor(public readonly startEvent: MatrixEvent) {\n        super();\n    }\n}\n\nexport type KeyVerifier = (keyId: string, device: DeviceInfo, keyInfo: string) => void;\n\nexport enum VerificationEvent {\n    Cancel = \"cancel\",\n}\n\nexport type VerificationEventHandlerMap = {\n    [VerificationEvent.Cancel]: (e: Error | MatrixEvent) => void;\n};\n\nexport class VerificationBase<\n    Events extends string,\n    Arguments extends ListenerMap<Events | VerificationEvent>,\n> extends TypedEventEmitter<Events | VerificationEvent, Arguments, VerificationEventHandlerMap> {\n    private cancelled = false;\n    private _done = false;\n    private promise: Promise<void> = null;\n    private transactionTimeoutTimer: number = null;\n    protected expectedEvent: string;\n    private resolve: () => void;\n    private reject: (e: Error | MatrixEvent) => void;\n    private resolveEvent: (e: MatrixEvent) => void;\n    private rejectEvent: (e: Error) => void;\n    private started: boolean;\n\n    /**\n     * Base class for verification methods.\n     *\n     * <p>Once a verifier object is created, the verification can be started by\n     * calling the verify() method, which will return a promise that will\n     * resolve when the verification is completed, or reject if it could not\n     * complete.</p>\n     *\n     * <p>Subclasses must have a NAME class property.</p>\n     *\n     * @class\n     *\n     * @param {Object} channel the verification channel to send verification messages over.\n     * TODO: Channel types\n     *\n     * @param {MatrixClient} baseApis base matrix api interface\n     *\n     * @param {string} userId the user ID that is being verified\n     *\n     * @param {string} deviceId the device ID that is being verified\n     *\n     * @param {object} [startEvent] the m.key.verification.start event that\n     * initiated this verification, if any\n     *\n     * @param {object} [request] the key verification request object related to\n     * this verification, if any\n     */\n    constructor(\n        public readonly channel: IVerificationChannel,\n        public readonly baseApis: MatrixClient,\n        public readonly userId: string,\n        public readonly deviceId: string,\n        public startEvent: MatrixEvent,\n        public readonly request: VerificationRequest,\n    ) {\n        super();\n    }\n\n    public get initiatedByMe(): boolean {\n        // if there is no start event yet,\n        // we probably want to send it,\n        // which happens if we initiate\n        if (!this.startEvent) {\n            return true;\n        }\n        const sender = this.startEvent.getSender();\n        const content = this.startEvent.getContent();\n        return sender === this.baseApis.getUserId() &&\n            content.from_device === this.baseApis.getDeviceId();\n    }\n\n    public get hasBeenCancelled(): boolean {\n        return this.cancelled;\n    }\n\n    private resetTimer(): void {\n        logger.info(\"Refreshing/starting the verification transaction timeout timer\");\n        if (this.transactionTimeoutTimer !== null) {\n            clearTimeout(this.transactionTimeoutTimer);\n        }\n        this.transactionTimeoutTimer = setTimeout(() => {\n            if (!this._done && !this.cancelled) {\n                logger.info(\"Triggering verification timeout\");\n                this.cancel(timeoutException);\n            }\n        }, 10 * 60 * 1000); // 10 minutes\n    }\n\n    private endTimer(): void {\n        if (this.transactionTimeoutTimer !== null) {\n            clearTimeout(this.transactionTimeoutTimer);\n            this.transactionTimeoutTimer = null;\n        }\n    }\n\n    protected send(type: string, uncompletedContent: Record<string, any>): Promise<void> {\n        return this.channel.send(type, uncompletedContent);\n    }\n\n    protected waitForEvent(type: string): Promise<MatrixEvent> {\n        if (this._done) {\n            return Promise.reject(new Error(\"Verification is already done\"));\n        }\n        const existingEvent = this.request.getEventFromOtherParty(type);\n        if (existingEvent) {\n            return Promise.resolve(existingEvent);\n        }\n\n        this.expectedEvent = type;\n        return new Promise((resolve, reject) => {\n            this.resolveEvent = resolve;\n            this.rejectEvent = reject;\n        });\n    }\n\n    public canSwitchStartEvent(event: MatrixEvent): boolean {\n        return false;\n    }\n\n    public switchStartEvent(event: MatrixEvent): void {\n        if (this.canSwitchStartEvent(event)) {\n            logger.log(\"Verification Base: switching verification start event\",\n                { restartingFlow: !!this.rejectEvent });\n            if (this.rejectEvent) {\n                const reject = this.rejectEvent;\n                this.rejectEvent = undefined;\n                reject(new SwitchStartEventError(event));\n            } else {\n                this.startEvent = event;\n            }\n        }\n    }\n\n    public handleEvent(e: MatrixEvent): void {\n        if (this._done) {\n            return;\n        } else if (e.getType() === this.expectedEvent) {\n            // if we receive an expected m.key.verification.done, then just\n            // ignore it, since we don't need to do anything about it\n            if (this.expectedEvent !== \"m.key.verification.done\") {\n                this.expectedEvent = undefined;\n                this.rejectEvent = undefined;\n                this.resetTimer();\n                this.resolveEvent(e);\n            }\n        } else if (e.getType() === \"m.key.verification.cancel\") {\n            const reject = this.reject;\n            this.reject = undefined;\n            // there is only promise to reject if verify has been called\n            if (reject) {\n                const content = e.getContent();\n                const { reason, code } = content;\n                reject(new Error(`Other side cancelled verification ` +\n                    `because ${reason} (${code})`));\n            }\n        } else if (this.expectedEvent) {\n            // only cancel if there is an event expected.\n            // if there is no event expected, it means verify() wasn't called\n            // and we're just replaying the timeline events when syncing\n            // after a refresh when the events haven't been stored in the cache yet.\n            const exception = new Error(\n                \"Unexpected message: expecting \" + this.expectedEvent\n                    + \" but got \" + e.getType(),\n            );\n            this.expectedEvent = undefined;\n            if (this.rejectEvent) {\n                const reject = this.rejectEvent;\n                this.rejectEvent = undefined;\n                reject(exception);\n            }\n            this.cancel(exception);\n        }\n    }\n\n    public done(): Promise<KeysDuringVerification | void> {\n        this.endTimer(); // always kill the activity timer\n        if (!this._done) {\n            this.request.onVerifierFinished();\n            this.resolve();\n            return requestKeysDuringVerification(this.baseApis, this.userId, this.deviceId);\n        }\n    }\n\n    public cancel(e: Error | MatrixEvent): void {\n        this.endTimer(); // always kill the activity timer\n        if (!this._done) {\n            this.cancelled = true;\n            this.request.onVerifierCancelled();\n            if (this.userId && this.deviceId) {\n                // send a cancellation to the other user (if it wasn't\n                // cancelled by the other user)\n                if (e === timeoutException) {\n                    const timeoutEvent = newTimeoutError();\n                    this.send(timeoutEvent.getType(), timeoutEvent.getContent());\n                } else if (e instanceof MatrixEvent) {\n                    const sender = e.getSender();\n                    if (sender !== this.userId) {\n                        const content = e.getContent();\n                        if (e.getType() === \"m.key.verification.cancel\") {\n                            content.code = content.code || \"m.unknown\";\n                            content.reason = content.reason || content.body\n                                || \"Unknown reason\";\n                            this.send(\"m.key.verification.cancel\", content);\n                        } else {\n                            this.send(\"m.key.verification.cancel\", {\n                                code: \"m.unknown\",\n                                reason: content.body || \"Unknown reason\",\n                            });\n                        }\n                    }\n                } else {\n                    this.send(\"m.key.verification.cancel\", {\n                        code: \"m.unknown\",\n                        reason: e.toString(),\n                    });\n                }\n            }\n            if (this.promise !== null) {\n                // when we cancel without a promise, we end up with a promise\n                // but no reject function. If cancel is called again, we'd error.\n                if (this.reject) this.reject(e);\n            } else {\n                // FIXME: this causes an \"Uncaught promise\" console message\n                // if nothing ends up chaining this promise.\n                this.promise = Promise.reject(e);\n            }\n            // Also emit a 'cancel' event that the app can listen for to detect cancellation\n            // before calling verify()\n            this.emit(VerificationEvent.Cancel, e);\n        }\n    }\n\n    /**\n     * Begin the key verification\n     *\n     * @returns {Promise} Promise which resolves when the verification has\n     *     completed.\n     */\n    public verify(): Promise<void> {\n        if (this.promise) return this.promise;\n\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = (...args) => {\n                this._done = true;\n                this.endTimer();\n                resolve(...args);\n            };\n            this.reject = (e: Error) => {\n                this._done = true;\n                this.endTimer();\n                reject(e);\n            };\n        });\n        if (this.doVerification && !this.started) {\n            this.started = true;\n            this.resetTimer(); // restart the timeout\n            Promise.resolve(this.doVerification()).then(this.done.bind(this), this.cancel.bind(this));\n        }\n        return this.promise;\n    }\n\n    protected doVerification?: () => Promise<void>;\n\n    protected async verifyKeys(userId: string, keys: Record<string, string>, verifier: KeyVerifier): Promise<void> {\n        // we try to verify all the keys that we're told about, but we might\n        // not know about all of them, so keep track of the keys that we know\n        // about, and ignore the rest\n        const verifiedDevices = [];\n\n        for (const [keyId, keyInfo] of Object.entries(keys)) {\n            const deviceId = keyId.split(':', 2)[1];\n            const device = this.baseApis.getStoredDevice(userId, deviceId);\n            if (device) {\n                verifier(keyId, device, keyInfo);\n                verifiedDevices.push(deviceId);\n            } else {\n                const crossSigningInfo = this.baseApis.crypto.deviceList.getStoredCrossSigningForUser(userId);\n                if (crossSigningInfo && crossSigningInfo.getId() === deviceId) {\n                    verifier(keyId, DeviceInfo.fromStorage({\n                        keys: {\n                            [keyId]: deviceId,\n                        },\n                    }, deviceId), keyInfo);\n                    verifiedDevices.push(deviceId);\n                } else {\n                    logger.warn(\n                        `verification: Could not find device ${deviceId} to verify`,\n                    );\n                }\n            }\n        }\n\n        // if none of the keys could be verified, then error because the app\n        // should be informed about that\n        if (!verifiedDevices.length) {\n            throw new Error(\"No devices could be verified\");\n        }\n\n        logger.info(\n            \"Verification completed! Marking devices verified: \",\n            verifiedDevices,\n        );\n        // TODO: There should probably be a batch version of this, otherwise it's going\n        // to upload each signature in a separate API call which is silly because the\n        // API supports as many signatures as you like.\n        for (const deviceId of verifiedDevices) {\n            await this.baseApis.setDeviceVerified(userId, deviceId);\n        }\n    }\n\n    public get events(): string[] | undefined {\n        return undefined;\n    }\n}\n",
    "/*\nCopyright 2018 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * Error messages.\n *\n * @module crypto/verification/Error\n */\n\nimport { MatrixEvent } from \"../../models/event\";\n\nexport function newVerificationError(code: string, reason: string, extraData: Record<string, any>): MatrixEvent {\n    const content = Object.assign({}, { code, reason }, extraData);\n    return new MatrixEvent({\n        type: \"m.key.verification.cancel\",\n        content,\n    });\n}\n\nexport function errorFactory(code: string, reason: string): (extraData?: Record<string, any>) => MatrixEvent {\n    return function(extraData?: Record<string, any>) {\n        return newVerificationError(code, reason, extraData);\n    };\n}\n\n/**\n * The verification was cancelled by the user.\n */\nexport const newUserCancelledError = errorFactory(\"m.user\", \"Cancelled by user\");\n\n/**\n * The verification timed out.\n */\nexport const newTimeoutError = errorFactory(\"m.timeout\", \"Timed out\");\n\n/**\n * The transaction is unknown.\n */\nexport const newUnknownTransactionError = errorFactory(\n    \"m.unknown_transaction\", \"Unknown transaction\",\n);\n\n/**\n * An unknown method was selected.\n */\nexport const newUnknownMethodError = errorFactory(\"m.unknown_method\", \"Unknown method\");\n\n/**\n * An unexpected message was sent.\n */\nexport const newUnexpectedMessageError = errorFactory(\n    \"m.unexpected_message\", \"Unexpected message\",\n);\n\n/**\n * The key does not match.\n */\nexport const newKeyMismatchError = errorFactory(\n    \"m.key_mismatch\", \"Key mismatch\",\n);\n\n/**\n * The user does not match.\n */\nexport const newUserMismatchError = errorFactory(\"m.user_error\", \"User mismatch\");\n\n/**\n * An invalid message was sent.\n */\nexport const newInvalidMessageError = errorFactory(\n    \"m.invalid_message\", \"Invalid message\",\n);\n\nexport function errorFromEvent(event: MatrixEvent): { code: string, reason: string } {\n    const content = event.getContent();\n    if (content) {\n        const { code, reason } = content;\n        return { code, reason };\n    } else {\n        return { code: \"Unknown error\", reason: \"m.unknown\" };\n    }\n}\n",
    "/*\nCopyright 2020 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * Verification method that is illegal to have (cannot possibly\n * do verification with this method).\n * @module crypto/verification/IllegalMethod\n */\n\nimport { VerificationBase as Base, VerificationEvent, VerificationEventHandlerMap } from \"./Base\";\nimport { IVerificationChannel } from \"./request/Channel\";\nimport { MatrixClient } from \"../../client\";\nimport { MatrixEvent } from \"../../models/event\";\nimport { VerificationRequest } from \"./request/VerificationRequest\";\n\n/**\n * @class crypto/verification/IllegalMethod/IllegalMethod\n * @extends {module:crypto/verification/Base}\n */\nexport class IllegalMethod extends Base<VerificationEvent, VerificationEventHandlerMap> {\n    public static factory(\n        channel: IVerificationChannel,\n        baseApis: MatrixClient,\n        userId: string,\n        deviceId: string,\n        startEvent: MatrixEvent,\n        request: VerificationRequest,\n    ): IllegalMethod {\n        return new IllegalMethod(channel, baseApis, userId, deviceId, startEvent, request);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    public static get NAME(): string {\n        // Typically the name will be something else, but to complete\n        // the contract we offer a default one here.\n        return \"org.matrix.illegal_method\";\n    }\n\n    protected doVerification = async (): Promise<void> => {\n        throw new Error(\"Verification is not possible with this method\");\n    };\n}\n",
    "/*\nCopyright 2018 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * QR code key verification.\n * @module crypto/verification/QRCode\n */\n\nimport { VerificationBase as Base, VerificationEventHandlerMap } from \"./Base\";\nimport { newKeyMismatchError, newUserCancelledError } from './Error';\nimport { decodeBase64, encodeUnpaddedBase64 } from \"../olmlib\";\nimport { logger } from '../../logger';\nimport { VerificationRequest } from \"./request/VerificationRequest\";\nimport { MatrixClient } from \"../../client\";\nimport { IVerificationChannel } from \"./request/Channel\";\nimport { MatrixEvent } from \"../../models/event\";\n\nexport const SHOW_QR_CODE_METHOD = \"m.qr_code.show.v1\";\nexport const SCAN_QR_CODE_METHOD = \"m.qr_code.scan.v1\";\n\ninterface IReciprocateQr {\n    confirm(): void;\n    cancel(): void;\n}\n\nexport enum QrCodeEvent {\n    ShowReciprocateQr = \"show_reciprocate_qr\",\n}\n\ntype EventHandlerMap = {\n    [QrCodeEvent.ShowReciprocateQr]: (qr: IReciprocateQr) => void;\n} & VerificationEventHandlerMap;\n\n/**\n * @class crypto/verification/QRCode/ReciprocateQRCode\n * @extends {module:crypto/verification/Base}\n */\nexport class ReciprocateQRCode extends Base<QrCodeEvent, EventHandlerMap> {\n    public reciprocateQREvent: IReciprocateQr;\n\n    public static factory(\n        channel: IVerificationChannel,\n        baseApis: MatrixClient,\n        userId: string,\n        deviceId: string,\n        startEvent: MatrixEvent,\n        request: VerificationRequest,\n    ): ReciprocateQRCode {\n        return new ReciprocateQRCode(channel, baseApis, userId, deviceId, startEvent, request);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    public static get NAME(): string {\n        return \"m.reciprocate.v1\";\n    }\n\n    protected doVerification = async (): Promise<void> => {\n        if (!this.startEvent) {\n            // TODO: Support scanning QR codes\n            throw new Error(\"It is not currently possible to start verification\" +\n                \"with this method yet.\");\n        }\n\n        const { qrCodeData } = this.request;\n        // 1. check the secret\n        if (this.startEvent.getContent()['secret'] !== qrCodeData.encodedSharedSecret) {\n            throw newKeyMismatchError();\n        }\n\n        // 2. ask if other user shows shield as well\n        await new Promise<void>((resolve, reject) => {\n            this.reciprocateQREvent = {\n                confirm: resolve,\n                cancel: () => reject(newUserCancelledError()),\n            };\n            this.emit(QrCodeEvent.ShowReciprocateQr, this.reciprocateQREvent);\n        });\n\n        // 3. determine key to sign / mark as trusted\n        const keys: Record<string, string> = {};\n\n        switch (qrCodeData.mode) {\n            case Mode.VerifyOtherUser: {\n                // add master key to keys to be signed, only if we're not doing self-verification\n                const masterKey = qrCodeData.otherUserMasterKey;\n                keys[`ed25519:${masterKey}`] = masterKey;\n                break;\n            }\n            case Mode.VerifySelfTrusted: {\n                const deviceId = this.request.targetDevice.deviceId;\n                keys[`ed25519:${deviceId}`] = qrCodeData.otherDeviceKey;\n                break;\n            }\n            case Mode.VerifySelfUntrusted: {\n                const masterKey = qrCodeData.myMasterKey;\n                keys[`ed25519:${masterKey}`] = masterKey;\n                break;\n            }\n        }\n\n        // 4. sign the key (or mark own MSK as verified in case of MODE_VERIFY_SELF_TRUSTED)\n        await this.verifyKeys(this.userId, keys, (keyId, device, keyInfo) => {\n            // make sure the device has the expected keys\n            const targetKey = keys[keyId];\n            if (!targetKey) throw newKeyMismatchError();\n\n            if (keyInfo !== targetKey) {\n                logger.error(\"key ID from key info does not match\");\n                throw newKeyMismatchError();\n            }\n            for (const deviceKeyId in device.keys) {\n                if (!deviceKeyId.startsWith(\"ed25519\")) continue;\n                const deviceTargetKey = keys[deviceKeyId];\n                if (!deviceTargetKey) throw newKeyMismatchError();\n                if (device.keys[deviceKeyId] !== deviceTargetKey) {\n                    logger.error(\"master key does not match\");\n                    throw newKeyMismatchError();\n                }\n            }\n        });\n    };\n}\n\nconst CODE_VERSION = 0x02; // the version of binary QR codes we support\nconst BINARY_PREFIX = \"MATRIX\"; // ASCII, used to prefix the binary format\n\nenum Mode {\n    VerifyOtherUser = 0x00, // Verifying someone who isn't us\n    VerifySelfTrusted = 0x01, // We trust the master key\n    VerifySelfUntrusted = 0x02, // We do not trust the master key\n}\n\ninterface IQrData {\n    prefix: string;\n    version: number;\n    mode: Mode;\n    transactionId: string;\n    firstKeyB64: string;\n    secondKeyB64: string;\n    secretB64: string;\n}\n\nexport class QRCodeData {\n    constructor(\n        public readonly mode: Mode,\n        private readonly sharedSecret: string,\n        // only set when mode is MODE_VERIFY_OTHER_USER, master key of other party at time of generating QR code\n        public readonly otherUserMasterKey: string | undefined,\n        // only set when mode is MODE_VERIFY_SELF_TRUSTED, device key of other party at time of generating QR code\n        public readonly otherDeviceKey: string | undefined,\n        // only set when mode is MODE_VERIFY_SELF_UNTRUSTED, own master key at time of generating QR code\n        public readonly myMasterKey: string | undefined,\n        private readonly buffer: Buffer,\n    ) {}\n\n    public static async create(request: VerificationRequest, client: MatrixClient): Promise<QRCodeData> {\n        const sharedSecret = QRCodeData.generateSharedSecret();\n        const mode = QRCodeData.determineMode(request, client);\n        let otherUserMasterKey = null;\n        let otherDeviceKey = null;\n        let myMasterKey = null;\n        if (mode === Mode.VerifyOtherUser) {\n            const otherUserCrossSigningInfo =\n                client.getStoredCrossSigningForUser(request.otherUserId);\n            otherUserMasterKey = otherUserCrossSigningInfo.getId(\"master\");\n        } else if (mode === Mode.VerifySelfTrusted) {\n            otherDeviceKey = await QRCodeData.getOtherDeviceKey(request, client);\n        } else if (mode === Mode.VerifySelfUntrusted) {\n            const myUserId = client.getUserId();\n            const myCrossSigningInfo = client.getStoredCrossSigningForUser(myUserId);\n            myMasterKey = myCrossSigningInfo.getId(\"master\");\n        }\n        const qrData = QRCodeData.generateQrData(\n            request, client, mode,\n            sharedSecret,\n            otherUserMasterKey,\n            otherDeviceKey,\n            myMasterKey,\n        );\n        const buffer = QRCodeData.generateBuffer(qrData);\n        return new QRCodeData(mode, sharedSecret,\n            otherUserMasterKey, otherDeviceKey, myMasterKey, buffer);\n    }\n\n    /**\n     * The unpadded base64 encoded shared secret.\n     */\n    public get encodedSharedSecret(): string {\n        return this.sharedSecret;\n    }\n\n    public getBuffer(): Buffer {\n        return this.buffer;\n    }\n\n    private static generateSharedSecret(): string {\n        const secretBytes = new Uint8Array(11);\n        global.crypto.getRandomValues(secretBytes);\n        return encodeUnpaddedBase64(secretBytes);\n    }\n\n    private static async getOtherDeviceKey(request: VerificationRequest, client: MatrixClient): Promise<string> {\n        const myUserId = client.getUserId();\n        const otherDevice = request.targetDevice;\n        const otherDeviceId = otherDevice ? otherDevice.deviceId : null;\n        const device = client.getStoredDevice(myUserId, otherDeviceId);\n        if (!device) {\n            throw new Error(\"could not find device \" + otherDeviceId);\n        }\n        return device.getFingerprint();\n    }\n\n    private static determineMode(request: VerificationRequest, client: MatrixClient): Mode {\n        const myUserId = client.getUserId();\n        const otherUserId = request.otherUserId;\n\n        let mode = Mode.VerifyOtherUser;\n        if (myUserId === otherUserId) {\n            // Mode changes depending on whether or not we trust the master cross signing key\n            const myTrust = client.checkUserTrust(myUserId);\n            if (myTrust.isCrossSigningVerified()) {\n                mode = Mode.VerifySelfTrusted;\n            } else {\n                mode = Mode.VerifySelfUntrusted;\n            }\n        }\n        return mode;\n    }\n\n    private static generateQrData(\n        request: VerificationRequest,\n        client: MatrixClient,\n        mode: Mode,\n        encodedSharedSecret: string,\n        otherUserMasterKey: string,\n        otherDeviceKey: string,\n        myMasterKey: string,\n    ): IQrData {\n        const myUserId = client.getUserId();\n        const transactionId = request.channel.transactionId;\n        const qrData = {\n            prefix: BINARY_PREFIX,\n            version: CODE_VERSION,\n            mode,\n            transactionId,\n            firstKeyB64: '', // worked out shortly\n            secondKeyB64: '', // worked out shortly\n            secretB64: encodedSharedSecret,\n        };\n\n        const myCrossSigningInfo = client.getStoredCrossSigningForUser(myUserId);\n\n        if (mode === Mode.VerifyOtherUser) {\n            // First key is our master cross signing key\n            qrData.firstKeyB64 = myCrossSigningInfo.getId(\"master\");\n            // Second key is the other user's master cross signing key\n            qrData.secondKeyB64 = otherUserMasterKey;\n        } else if (mode === Mode.VerifySelfTrusted) {\n            // First key is our master cross signing key\n            qrData.firstKeyB64 = myCrossSigningInfo.getId(\"master\");\n            qrData.secondKeyB64 = otherDeviceKey;\n        } else if (mode === Mode.VerifySelfUntrusted) {\n            // First key is our device's key\n            qrData.firstKeyB64 = client.getDeviceEd25519Key();\n            // Second key is what we think our master cross signing key is\n            qrData.secondKeyB64 = myMasterKey;\n        }\n        return qrData;\n    }\n\n    private static generateBuffer(qrData: IQrData): Buffer {\n        let buf = Buffer.alloc(0); // we'll concat our way through life\n\n        const appendByte = (b) => {\n            const tmpBuf = Buffer.from([b]);\n            buf = Buffer.concat([buf, tmpBuf]);\n        };\n        const appendInt = (i) => {\n            const tmpBuf = Buffer.alloc(2);\n            tmpBuf.writeInt16BE(i, 0);\n            buf = Buffer.concat([buf, tmpBuf]);\n        };\n        const appendStr = (s, enc, withLengthPrefix = true) => {\n            const tmpBuf = Buffer.from(s, enc);\n            if (withLengthPrefix) appendInt(tmpBuf.byteLength);\n            buf = Buffer.concat([buf, tmpBuf]);\n        };\n        const appendEncBase64 = (b64) => {\n            const b = decodeBase64(b64);\n            const tmpBuf = Buffer.from(b);\n            buf = Buffer.concat([buf, tmpBuf]);\n        };\n\n        // Actually build the buffer for the QR code\n        appendStr(qrData.prefix, \"ascii\", false);\n        appendByte(qrData.version);\n        appendByte(qrData.mode);\n        appendStr(qrData.transactionId, \"utf-8\");\n        appendEncBase64(qrData.firstKeyB64);\n        appendEncBase64(qrData.secondKeyB64);\n        appendEncBase64(qrData.secretB64);\n\n        return buf;\n    }\n}\n",
    "/*\nCopyright 2018 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * Short Authentication String (SAS) verification.\n * @module crypto/verification/SAS\n */\n\nimport anotherjson from 'another-json';\nimport { Utility, SAS as OlmSAS } from \"@matrix-org/olm\";\n\nimport { VerificationBase as Base, SwitchStartEventError, VerificationEventHandlerMap } from \"./Base\";\nimport {\n    errorFactory,\n    newInvalidMessageError,\n    newKeyMismatchError,\n    newUnknownMethodError,\n    newUserCancelledError,\n} from './Error';\nimport { logger } from '../../logger';\nimport { IContent, MatrixEvent } from \"../../models/event\";\n\nconst START_TYPE = \"m.key.verification.start\";\n\nconst EVENTS = [\n    \"m.key.verification.accept\",\n    \"m.key.verification.key\",\n    \"m.key.verification.mac\",\n];\n\nlet olmutil: Utility;\n\nconst newMismatchedSASError = errorFactory(\n    \"m.mismatched_sas\", \"Mismatched short authentication string\",\n);\n\nconst newMismatchedCommitmentError = errorFactory(\n    \"m.mismatched_commitment\", \"Mismatched commitment\",\n);\n\nfunction generateDecimalSas(sasBytes: number[]): [number, number, number] {\n    /**\n     *      +--------+--------+--------+--------+--------+\n     *      | Byte 0 | Byte 1 | Byte 2 | Byte 3 | Byte 4 |\n     *      +--------+--------+--------+--------+--------+\n     * bits: 87654321 87654321 87654321 87654321 87654321\n     *       \\____________/\\_____________/\\____________/\n     *         1st number    2nd number     3rd number\n     */\n    return [\n        (sasBytes[0] << 5 | sasBytes[1] >> 3) + 1000,\n        ((sasBytes[1] & 0x7) << 10 | sasBytes[2] << 2 | sasBytes[3] >> 6) + 1000,\n        ((sasBytes[3] & 0x3f) << 7 | sasBytes[4] >> 1) + 1000,\n    ];\n}\n\ntype EmojiMapping = [emoji: string, name: string];\n\nconst emojiMapping: EmojiMapping[] = [\n    [\"🐶\", \"dog\"],        //  0\n    [\"🐱\", \"cat\"],        //  1\n    [\"🦁\", \"lion\"],       //  2\n    [\"🐎\", \"horse\"],      //  3\n    [\"🦄\", \"unicorn\"],    //  4\n    [\"🐷\", \"pig\"],        //  5\n    [\"🐘\", \"elephant\"],   //  6\n    [\"🐰\", \"rabbit\"],     //  7\n    [\"🐼\", \"panda\"],      //  8\n    [\"🐓\", \"rooster\"],    //  9\n    [\"🐧\", \"penguin\"],    // 10\n    [\"🐢\", \"turtle\"],     // 11\n    [\"🐟\", \"fish\"],       // 12\n    [\"🐙\", \"octopus\"],    // 13\n    [\"🦋\", \"butterfly\"],  // 14\n    [\"🌷\", \"flower\"],     // 15\n    [\"🌳\", \"tree\"],       // 16\n    [\"🌵\", \"cactus\"],     // 17\n    [\"🍄\", \"mushroom\"],   // 18\n    [\"🌏\", \"globe\"],      // 19\n    [\"🌙\", \"moon\"],       // 20\n    [\"☁️\", \"cloud\"],       // 21\n    [\"🔥\", \"fire\"],       // 22\n    [\"🍌\", \"banana\"],     // 23\n    [\"🍎\", \"apple\"],      // 24\n    [\"🍓\", \"strawberry\"], // 25\n    [\"🌽\", \"corn\"],       // 26\n    [\"🍕\", \"pizza\"],      // 27\n    [\"🎂\", \"cake\"],       // 28\n    [\"❤️\", \"heart\"],      // 29\n    [\"🙂\", \"smiley\"],      // 30\n    [\"🤖\", \"robot\"],      // 31\n    [\"🎩\", \"hat\"],        // 32\n    [\"👓\", \"glasses\"],    // 33\n    [\"🔧\", \"spanner\"],     // 34\n    [\"🎅\", \"santa\"],      // 35\n    [\"👍\", \"thumbs up\"],  // 36\n    [\"☂️\", \"umbrella\"],    // 37\n    [\"⌛\", \"hourglass\"],   // 38\n    [\"⏰\", \"clock\"],      // 39\n    [\"🎁\", \"gift\"],       // 40\n    [\"💡\", \"light bulb\"], // 41\n    [\"📕\", \"book\"],       // 42\n    [\"✏️\", \"pencil\"],     // 43\n    [\"📎\", \"paperclip\"],  // 44\n    [\"✂️\", \"scissors\"],    // 45\n    [\"🔒\", \"lock\"],       // 46\n    [\"🔑\", \"key\"],        // 47\n    [\"🔨\", \"hammer\"],     // 48\n    [\"☎️\", \"telephone\"],  // 49\n    [\"🏁\", \"flag\"],       // 50\n    [\"🚂\", \"train\"],      // 51\n    [\"🚲\", \"bicycle\"],    // 52\n    [\"✈️\", \"aeroplane\"],   // 53\n    [\"🚀\", \"rocket\"],     // 54\n    [\"🏆\", \"trophy\"],     // 55\n    [\"⚽\", \"ball\"],       // 56\n    [\"🎸\", \"guitar\"],     // 57\n    [\"🎺\", \"trumpet\"],    // 58\n    [\"🔔\", \"bell\"],       // 59\n    [\"⚓️\", \"anchor\"],     // 60\n    [\"🎧\", \"headphones\"], // 61\n    [\"📁\", \"folder\"],     // 62\n    [\"📌\", \"pin\"],        // 63\n];\n\nfunction generateEmojiSas(sasBytes: number[]): EmojiMapping[] {\n    const emojis = [\n        // just like base64 encoding\n        sasBytes[0] >> 2,\n        (sasBytes[0] & 0x3) << 4 | sasBytes[1] >> 4,\n        (sasBytes[1] & 0xf) << 2 | sasBytes[2] >> 6,\n        sasBytes[2] & 0x3f,\n        sasBytes[3] >> 2,\n        (sasBytes[3] & 0x3) << 4 | sasBytes[4] >> 4,\n        (sasBytes[4] & 0xf) << 2 | sasBytes[5] >> 6,\n    ];\n\n    return emojis.map((num) => emojiMapping[num]);\n}\n\nconst sasGenerators = {\n    decimal: generateDecimalSas,\n    emoji: generateEmojiSas,\n};\n\nexport interface IGeneratedSas {\n    decimal?: [number, number, number];\n    emoji?: EmojiMapping[];\n}\n\nexport interface ISasEvent {\n    sas: IGeneratedSas;\n    confirm(): Promise<void>;\n    cancel(): void;\n    mismatch(): void;\n}\n\nfunction generateSas(sasBytes: number[], methods: string[]): IGeneratedSas {\n    const sas: IGeneratedSas = {};\n    for (const method of methods) {\n        if (method in sasGenerators) {\n            sas[method] = sasGenerators[method](sasBytes);\n        }\n    }\n    return sas;\n}\n\nconst macMethods = {\n    \"hkdf-hmac-sha256\": \"calculate_mac\",\n    \"hmac-sha256\": \"calculate_mac_long_kdf\",\n};\n\nfunction calculateMAC(olmSAS: OlmSAS, method: string) {\n    return function(...args) {\n        const macFunction = olmSAS[macMethods[method]];\n        const mac = macFunction.apply(olmSAS, args);\n        logger.log(\"SAS calculateMAC:\", method, args, mac);\n        return mac;\n    };\n}\n\nconst calculateKeyAgreement = {\n    \"curve25519-hkdf-sha256\": function(sas: SAS, olmSAS: OlmSAS, bytes: number): Uint8Array {\n        const ourInfo = `${sas.baseApis.getUserId()}|${sas.baseApis.deviceId}|`\n              + `${sas.ourSASPubKey}|`;\n        const theirInfo = `${sas.userId}|${sas.deviceId}|${sas.theirSASPubKey}|`;\n        const sasInfo =\n            \"MATRIX_KEY_VERIFICATION_SAS|\"\n              + (sas.initiatedByMe ? ourInfo + theirInfo : theirInfo + ourInfo)\n              + sas.channel.transactionId;\n        return olmSAS.generate_bytes(sasInfo, bytes);\n    },\n    \"curve25519\": function(sas: SAS, olmSAS: OlmSAS, bytes: number): Uint8Array {\n        const ourInfo = `${sas.baseApis.getUserId()}${sas.baseApis.deviceId}`;\n        const theirInfo = `${sas.userId}${sas.deviceId}`;\n        const sasInfo =\n            \"MATRIX_KEY_VERIFICATION_SAS\"\n              + (sas.initiatedByMe ? ourInfo + theirInfo : theirInfo + ourInfo)\n              + sas.channel.transactionId;\n        return olmSAS.generate_bytes(sasInfo, bytes);\n    },\n};\n\n/* lists of algorithms/methods that are supported.  The key agreement, hashes,\n * and MAC lists should be sorted in order of preference (most preferred\n * first).\n */\nconst KEY_AGREEMENT_LIST = [\"curve25519-hkdf-sha256\", \"curve25519\"];\nconst HASHES_LIST = [\"sha256\"];\nconst MAC_LIST = [\"hkdf-hmac-sha256\", \"hmac-sha256\"];\nconst SAS_LIST = Object.keys(sasGenerators);\n\nconst KEY_AGREEMENT_SET = new Set(KEY_AGREEMENT_LIST);\nconst HASHES_SET = new Set(HASHES_LIST);\nconst MAC_SET = new Set(MAC_LIST);\nconst SAS_SET = new Set(SAS_LIST);\n\nfunction intersection<T>(anArray: T[], aSet: Set<T>): T[] {\n    return anArray instanceof Array ? anArray.filter(x => aSet.has(x)) : [];\n}\n\nexport enum SasEvent {\n    ShowSas = \"show_sas\",\n}\n\ntype EventHandlerMap = {\n    [SasEvent.ShowSas]: (sas: ISasEvent) => void;\n} & VerificationEventHandlerMap;\n\n/**\n * @alias module:crypto/verification/SAS\n * @extends {module:crypto/verification/Base}\n */\nexport class SAS extends Base<SasEvent, EventHandlerMap> {\n    private waitingForAccept: boolean;\n    public ourSASPubKey: string;\n    public theirSASPubKey: string;\n    public sasEvent: ISasEvent;\n\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    public static get NAME(): string {\n        return \"m.sas.v1\";\n    }\n\n    public get events(): string[] {\n        return EVENTS;\n    }\n\n    protected doVerification = async (): Promise<void> => {\n        await global.Olm.init();\n        olmutil = olmutil || new global.Olm.Utility();\n\n        // make sure user's keys are downloaded\n        await this.baseApis.downloadKeys([this.userId]);\n\n        let retry = false;\n        do {\n            try {\n                if (this.initiatedByMe) {\n                    return await this.doSendVerification();\n                } else {\n                    return await this.doRespondVerification();\n                }\n            } catch (err) {\n                if (err instanceof SwitchStartEventError) {\n                    // this changes what initiatedByMe returns\n                    this.startEvent = err.startEvent;\n                    retry = true;\n                } else {\n                    throw err;\n                }\n            }\n        } while (retry);\n    };\n\n    public canSwitchStartEvent(event: MatrixEvent): boolean {\n        if (event.getType() !== START_TYPE) {\n            return false;\n        }\n        const content = event.getContent();\n        return content && content.method === SAS.NAME && this.waitingForAccept;\n    }\n\n    private async sendStart(): Promise<Record<string, any>> {\n        const startContent = this.channel.completeContent(START_TYPE, {\n            method: SAS.NAME,\n            from_device: this.baseApis.deviceId,\n            key_agreement_protocols: KEY_AGREEMENT_LIST,\n            hashes: HASHES_LIST,\n            message_authentication_codes: MAC_LIST,\n            // FIXME: allow app to specify what SAS methods can be used\n            short_authentication_string: SAS_LIST,\n        });\n        await this.channel.sendCompleted(START_TYPE, startContent);\n        return startContent;\n    }\n\n    private async doSendVerification(): Promise<void> {\n        this.waitingForAccept = true;\n        let startContent;\n        if (this.startEvent) {\n            startContent = this.channel.completedContentFromEvent(this.startEvent);\n        } else {\n            startContent = await this.sendStart();\n        }\n\n        // we might have switched to a different start event,\n        // but was we didn't call _waitForEvent there was no\n        // call that could throw yet. So check manually that\n        // we're still on the initiator side\n        if (!this.initiatedByMe) {\n            throw new SwitchStartEventError(this.startEvent);\n        }\n\n        let e;\n        try {\n            e = await this.waitForEvent(\"m.key.verification.accept\");\n        } finally {\n            this.waitingForAccept = false;\n        }\n        let content = e.getContent();\n        const sasMethods\n              = intersection(content.short_authentication_string, SAS_SET);\n        if (!(KEY_AGREEMENT_SET.has(content.key_agreement_protocol)\n              && HASHES_SET.has(content.hash)\n              && MAC_SET.has(content.message_authentication_code)\n              && sasMethods.length)) {\n            throw newUnknownMethodError();\n        }\n        if (typeof content.commitment !== \"string\") {\n            throw newInvalidMessageError();\n        }\n        const keyAgreement = content.key_agreement_protocol;\n        const macMethod = content.message_authentication_code;\n        const hashCommitment = content.commitment;\n        const olmSAS = new global.Olm.SAS();\n        try {\n            this.ourSASPubKey = olmSAS.get_pubkey();\n            await this.send(\"m.key.verification.key\", {\n                key: this.ourSASPubKey,\n            });\n\n            e = await this.waitForEvent(\"m.key.verification.key\");\n            // FIXME: make sure event is properly formed\n            content = e.getContent();\n            const commitmentStr = content.key + anotherjson.stringify(startContent);\n            // TODO: use selected hash function (when we support multiple)\n            if (olmutil.sha256(commitmentStr) !== hashCommitment) {\n                throw newMismatchedCommitmentError();\n            }\n            this.theirSASPubKey = content.key;\n            olmSAS.set_their_key(content.key);\n\n            const sasBytes = calculateKeyAgreement[keyAgreement](this, olmSAS, 6);\n            const verifySAS = new Promise<void>((resolve, reject) => {\n                this.sasEvent = {\n                    sas: generateSas(sasBytes, sasMethods),\n                    confirm: async () => {\n                        try {\n                            await this.sendMAC(olmSAS, macMethod);\n                            resolve();\n                        } catch (err) {\n                            reject(err);\n                        }\n                    },\n                    cancel: () => reject(newUserCancelledError()),\n                    mismatch: () => reject(newMismatchedSASError()),\n                };\n                this.emit(SasEvent.ShowSas, this.sasEvent);\n            });\n\n            [e] = await Promise.all([\n                this.waitForEvent(\"m.key.verification.mac\")\n                    .then((e) => {\n                        // we don't expect any more messages from the other\n                        // party, and they may send a m.key.verification.done\n                        // when they're done on their end\n                        this.expectedEvent = \"m.key.verification.done\";\n                        return e;\n                    }),\n                verifySAS,\n            ]);\n            content = e.getContent();\n            await this.checkMAC(olmSAS, content, macMethod);\n        } finally {\n            olmSAS.free();\n        }\n    }\n\n    private async doRespondVerification(): Promise<void> {\n        // as m.related_to is not included in the encrypted content in e2e rooms,\n        // we need to make sure it is added\n        let content = this.channel.completedContentFromEvent(this.startEvent);\n\n        // Note: we intersect using our pre-made lists, rather than the sets,\n        // so that the result will be in our order of preference.  Then\n        // fetching the first element from the array will give our preferred\n        // method out of the ones offered by the other party.\n        const keyAgreement = intersection(KEY_AGREEMENT_LIST, new Set(content.key_agreement_protocols))[0];\n        const hashMethod = intersection(HASHES_LIST, new Set(content.hashes))[0];\n        const macMethod = intersection(MAC_LIST, new Set(content.message_authentication_codes))[0];\n        // FIXME: allow app to specify what SAS methods can be used\n        const sasMethods = intersection(content.short_authentication_string, SAS_SET);\n        if (!(keyAgreement !== undefined && hashMethod !== undefined && macMethod !== undefined && sasMethods.length)) {\n            throw newUnknownMethodError();\n        }\n\n        const olmSAS = new global.Olm.SAS();\n        try {\n            const commitmentStr = olmSAS.get_pubkey() + anotherjson.stringify(content);\n            await this.send(\"m.key.verification.accept\", {\n                key_agreement_protocol: keyAgreement,\n                hash: hashMethod,\n                message_authentication_code: macMethod,\n                short_authentication_string: sasMethods,\n                // TODO: use selected hash function (when we support multiple)\n                commitment: olmutil.sha256(commitmentStr),\n            });\n\n            let e = await this.waitForEvent(\"m.key.verification.key\");\n            // FIXME: make sure event is properly formed\n            content = e.getContent();\n            this.theirSASPubKey = content.key;\n            olmSAS.set_their_key(content.key);\n            this.ourSASPubKey = olmSAS.get_pubkey();\n            await this.send(\"m.key.verification.key\", {\n                key: this.ourSASPubKey,\n            });\n\n            const sasBytes = calculateKeyAgreement[keyAgreement](this, olmSAS, 6);\n            const verifySAS = new Promise<void>((resolve, reject) => {\n                this.sasEvent = {\n                    sas: generateSas(sasBytes, sasMethods),\n                    confirm: async () => {\n                        try {\n                            await this.sendMAC(olmSAS, macMethod);\n                            resolve();\n                        } catch (err) {\n                            reject(err);\n                        }\n                    },\n                    cancel: () => reject(newUserCancelledError()),\n                    mismatch: () => reject(newMismatchedSASError()),\n                };\n                this.emit(SasEvent.ShowSas, this.sasEvent);\n            });\n\n            [e] = await Promise.all([\n                this.waitForEvent(\"m.key.verification.mac\")\n                    .then((e) => {\n                        // we don't expect any more messages from the other\n                        // party, and they may send a m.key.verification.done\n                        // when they're done on their end\n                        this.expectedEvent = \"m.key.verification.done\";\n                        return e;\n                    }),\n                verifySAS,\n            ]);\n            content = e.getContent();\n            await this.checkMAC(olmSAS, content, macMethod);\n        } finally {\n            olmSAS.free();\n        }\n    }\n\n    private sendMAC(olmSAS: OlmSAS, method: string): Promise<void> {\n        const mac = {};\n        const keyList = [];\n        const baseInfo = \"MATRIX_KEY_VERIFICATION_MAC\"\n              + this.baseApis.getUserId() + this.baseApis.deviceId\n              + this.userId + this.deviceId\n              + this.channel.transactionId;\n\n        const deviceKeyId = `ed25519:${this.baseApis.deviceId}`;\n        mac[deviceKeyId] = calculateMAC(olmSAS, method)(\n            this.baseApis.getDeviceEd25519Key(),\n            baseInfo + deviceKeyId,\n        );\n        keyList.push(deviceKeyId);\n\n        const crossSigningId = this.baseApis.getCrossSigningId();\n        if (crossSigningId) {\n            const crossSigningKeyId = `ed25519:${crossSigningId}`;\n            mac[crossSigningKeyId] = calculateMAC(olmSAS, method)(\n                crossSigningId,\n                baseInfo + crossSigningKeyId,\n            );\n            keyList.push(crossSigningKeyId);\n        }\n\n        const keys = calculateMAC(olmSAS, method)(\n            keyList.sort().join(\",\"),\n            baseInfo + \"KEY_IDS\",\n        );\n        return this.send(\"m.key.verification.mac\", { mac, keys });\n    }\n\n    private async checkMAC(olmSAS: OlmSAS, content: IContent, method: string): Promise<void> {\n        const baseInfo = \"MATRIX_KEY_VERIFICATION_MAC\"\n              + this.userId + this.deviceId\n              + this.baseApis.getUserId() + this.baseApis.deviceId\n              + this.channel.transactionId;\n\n        if (content.keys !== calculateMAC(olmSAS, method)(\n            Object.keys(content.mac).sort().join(\",\"),\n            baseInfo + \"KEY_IDS\",\n        )) {\n            throw newKeyMismatchError();\n        }\n\n        await this.verifyKeys(this.userId, content.mac, (keyId, device, keyInfo) => {\n            if (keyInfo !== calculateMAC(olmSAS, method)(\n                device.keys[keyId],\n                baseInfo + keyId,\n            )) {\n                throw newKeyMismatchError();\n            }\n        });\n    }\n}\n",
    "/*\nCopyright 2018 New Vector Ltd\nCopyright 2019 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport {\n    VerificationRequest,\n    REQUEST_TYPE,\n    READY_TYPE,\n    START_TYPE,\n} from \"./VerificationRequest\";\nimport { logger } from '../../../logger';\nimport { IVerificationChannel } from \"./Channel\";\nimport { EventType } from \"../../../@types/event\";\nimport { MatrixClient } from \"../../../client\";\nimport { MatrixEvent } from \"../../../models/event\";\nimport { IRequestsMap } from \"../..\";\n\nconst MESSAGE_TYPE = EventType.RoomMessage;\nconst M_REFERENCE = \"m.reference\";\nconst M_RELATES_TO = \"m.relates_to\";\n\n/**\n * A key verification channel that sends verification events in the timeline of a room.\n * Uses the event id of the initial m.key.verification.request event as a transaction id.\n */\nexport class InRoomChannel implements IVerificationChannel {\n    private requestEventId: string = null;\n\n    /**\n     * @param {MatrixClient} client the matrix client, to send messages with and get current user & device from.\n     * @param {string} roomId id of the room where verification events should be posted in, should be a DM with the given user.\n     * @param {string} userId id of user that the verification request is directed at, should be present in the room.\n     */\n    constructor(\n        private readonly client: MatrixClient,\n        public readonly roomId: string,\n        public userId: string = null,\n    ) {\n    }\n\n    public get receiveStartFromOtherDevices(): boolean {\n        return true;\n    }\n\n    /** The transaction id generated/used by this verification channel */\n    public get transactionId(): string {\n        return this.requestEventId;\n    }\n\n    public static getOtherPartyUserId(event: MatrixEvent, client: MatrixClient): string {\n        const type = InRoomChannel.getEventType(event);\n        if (type !== REQUEST_TYPE) {\n            return;\n        }\n        const ownUserId = client.getUserId();\n        const sender = event.getSender();\n        const content = event.getContent();\n        const receiver = content.to;\n\n        if (sender === ownUserId) {\n            return receiver;\n        } else if (receiver === ownUserId) {\n            return sender;\n        }\n    }\n\n    /**\n     * @param {MatrixEvent} event the event to get the timestamp of\n     * @return {number} the timestamp when the event was sent\n     */\n    public getTimestamp(event: MatrixEvent): number {\n        return event.getTs();\n    }\n\n    /**\n     * Checks whether the given event type should be allowed to initiate a new VerificationRequest over this channel\n     * @param {string} type the event type to check\n     * @returns {boolean} boolean flag\n     */\n    public static canCreateRequest(type: string): boolean {\n        return type === REQUEST_TYPE;\n    }\n\n    public canCreateRequest(type: string): boolean {\n        return InRoomChannel.canCreateRequest(type);\n    }\n\n    /**\n     * Extract the transaction id used by a given key verification event, if any\n     * @param {MatrixEvent} event the event\n     * @returns {string} the transaction id\n     */\n    public static getTransactionId(event: MatrixEvent): string {\n        if (InRoomChannel.getEventType(event) === REQUEST_TYPE) {\n            return event.getId();\n        } else {\n            const relation = event.getRelation();\n            if (relation && relation.rel_type === M_REFERENCE) {\n                return relation.event_id;\n            }\n        }\n    }\n\n    /**\n     * Checks whether this event is a well-formed key verification event.\n     * This only does checks that don't rely on the current state of a potentially already channel\n     * so we can prevent channels being created by invalid events.\n     * `handleEvent` can do more checks and choose to ignore invalid events.\n     * @param {MatrixEvent} event the event to validate\n     * @param {MatrixClient} client the client to get the current user and device id from\n     * @returns {boolean} whether the event is valid and should be passed to handleEvent\n     */\n    public static validateEvent(event: MatrixEvent, client: MatrixClient): boolean {\n        const txnId = InRoomChannel.getTransactionId(event);\n        if (typeof txnId !== \"string\" || txnId.length === 0) {\n            return false;\n        }\n        const type = InRoomChannel.getEventType(event);\n        const content = event.getContent();\n\n        // from here on we're fairly sure that this is supposed to be\n        // part of a verification request, so be noisy when rejecting something\n        if (type === REQUEST_TYPE) {\n            if (!content || typeof content.to !== \"string\" || !content.to.length) {\n                logger.log(\"InRoomChannel: validateEvent: \" +\n                    \"no valid to \" + (content && content.to));\n                return false;\n            }\n\n            // ignore requests that are not direct to or sent by the syncing user\n            if (!InRoomChannel.getOtherPartyUserId(event, client)) {\n                logger.log(\"InRoomChannel: validateEvent: \" +\n                    `not directed to or sent by me: ${event.getSender()}` +\n                    `, ${content && content.to}`);\n                return false;\n            }\n        }\n\n        return VerificationRequest.validateEvent(type, event, client);\n    }\n\n    /**\n     * As m.key.verification.request events are as m.room.message events with the InRoomChannel\n     * to have a fallback message in non-supporting clients, we map the real event type\n     * to the symbolic one to keep things in unison with ToDeviceChannel\n     * @param {MatrixEvent} event the event to get the type of\n     * @returns {string} the \"symbolic\" event type\n     */\n    public static getEventType(event: MatrixEvent): string {\n        const type = event.getType();\n        if (type === MESSAGE_TYPE) {\n            const content = event.getContent();\n            if (content) {\n                const { msgtype } = content;\n                if (msgtype === REQUEST_TYPE) {\n                    return REQUEST_TYPE;\n                }\n            }\n        }\n        if (type && type !== REQUEST_TYPE) {\n            return type;\n        } else {\n            return \"\";\n        }\n    }\n\n    /**\n     * Changes the state of the channel, request, and verifier in response to a key verification event.\n     * @param {MatrixEvent} event to handle\n     * @param {VerificationRequest} request the request to forward handling to\n     * @param {boolean} isLiveEvent whether this is an even received through sync or not\n     * @returns {Promise} a promise that resolves when any requests as an answer to the passed-in event are sent.\n     */\n    public async handleEvent(event: MatrixEvent, request: VerificationRequest, isLiveEvent = false): Promise<void> {\n        // prevent processing the same event multiple times, as under\n        // some circumstances Room.timeline can get emitted twice for the same event\n        if (request.hasEventId(event.getId())) {\n            return;\n        }\n        const type = InRoomChannel.getEventType(event);\n        // do validations that need state (roomId, userId),\n        // ignore if invalid\n\n        if (event.getRoomId() !== this.roomId) {\n            return;\n        }\n        // set userId if not set already\n        if (this.userId === null) {\n            const userId = InRoomChannel.getOtherPartyUserId(event, this.client);\n            if (userId) {\n                this.userId = userId;\n            }\n        }\n        // ignore events not sent by us or the other party\n        const ownUserId = this.client.getUserId();\n        const sender = event.getSender();\n        if (this.userId !== null) {\n            if (sender !== ownUserId && sender !== this.userId) {\n                logger.log(`InRoomChannel: ignoring verification event from ` +\n                    `non-participating sender ${sender}`);\n                return;\n            }\n        }\n        if (this.requestEventId === null) {\n            this.requestEventId = InRoomChannel.getTransactionId(event);\n        }\n\n        const isRemoteEcho = !!event.getUnsigned().transaction_id;\n        const isSentByUs = event.getSender() === this.client.getUserId();\n\n        return await request.handleEvent(\n            type, event, isLiveEvent, isRemoteEcho, isSentByUs);\n    }\n\n    /**\n     * Adds the transaction id (relation) back to a received event\n     * so it has the same format as returned by `completeContent` before sending.\n     * The relation can not appear on the event content because of encryption,\n     * relations are excluded from encryption.\n     * @param {MatrixEvent} event the received event\n     * @returns {Object} the content object with the relation added again\n     */\n    public completedContentFromEvent(event: MatrixEvent): Record<string, any> {\n        // ensure m.related_to is included in e2ee rooms\n        // as the field is excluded from encryption\n        const content = Object.assign({}, event.getContent());\n        content[M_RELATES_TO] = event.getRelation();\n        return content;\n    }\n\n    /**\n     * Add all the fields to content needed for sending it over this channel.\n     * This is public so verification methods (SAS uses this) can get the exact\n     * content that will be sent independent of the used channel,\n     * as they need to calculate the hash of it.\n     * @param {string} type the event type\n     * @param {object} content the (incomplete) content\n     * @returns {object} the complete content, as it will be sent.\n     */\n    public completeContent(type: string, content: Record<string, any>): Record<string, any> {\n        content = Object.assign({}, content);\n        if (type === REQUEST_TYPE || type === READY_TYPE || type === START_TYPE) {\n            content.from_device = this.client.getDeviceId();\n        }\n        if (type === REQUEST_TYPE) {\n            // type is mapped to m.room.message in the send method\n            content = {\n                body: this.client.getUserId() + \" is requesting to verify \" +\n                    \"your key, but your client does not support in-chat key \" +\n                    \"verification.  You will need to use legacy key \" +\n                    \"verification to verify keys.\",\n                msgtype: REQUEST_TYPE,\n                to: this.userId,\n                from_device: content.from_device,\n                methods: content.methods,\n            };\n        } else {\n            content[M_RELATES_TO] = {\n                rel_type: M_REFERENCE,\n                event_id: this.transactionId,\n            };\n        }\n        return content;\n    }\n\n    /**\n     * Send an event over the channel with the content not having gone through `completeContent`.\n     * @param {string} type the event type\n     * @param {object} uncompletedContent the (incomplete) content\n     * @returns {Promise} the promise of the request\n     */\n    public send(type: string, uncompletedContent: Record<string, any>): Promise<void> {\n        const content = this.completeContent(type, uncompletedContent);\n        return this.sendCompleted(type, content);\n    }\n\n    /**\n     * Send an event over the channel with the content having gone through `completeContent` already.\n     * @param {string} type the event type\n     * @param {object} content\n     * @returns {Promise} the promise of the request\n     */\n    public async sendCompleted(type: string, content: Record<string, any>): Promise<void> {\n        let sendType = type;\n        if (type === REQUEST_TYPE) {\n            sendType = MESSAGE_TYPE;\n        }\n        const response = await this.client.sendEvent(this.roomId, sendType, content);\n        if (type === REQUEST_TYPE) {\n            this.requestEventId = response.event_id;\n        }\n    }\n}\n\nexport class InRoomRequests implements IRequestsMap {\n    private requestsByRoomId = new Map<string, Map<string, VerificationRequest>>();\n\n    public getRequest(event: MatrixEvent): VerificationRequest {\n        const roomId = event.getRoomId();\n        const txnId = InRoomChannel.getTransactionId(event);\n        return this.getRequestByTxnId(roomId, txnId);\n    }\n\n    public getRequestByChannel(channel: InRoomChannel): VerificationRequest {\n        return this.getRequestByTxnId(channel.roomId, channel.transactionId);\n    }\n\n    private getRequestByTxnId(roomId: string, txnId: string): VerificationRequest {\n        const requestsByTxnId = this.requestsByRoomId.get(roomId);\n        if (requestsByTxnId) {\n            return requestsByTxnId.get(txnId);\n        }\n    }\n\n    public setRequest(event: MatrixEvent, request: VerificationRequest): void {\n        this.doSetRequest(event.getRoomId(), InRoomChannel.getTransactionId(event), request);\n    }\n\n    public setRequestByChannel(channel: IVerificationChannel, request: VerificationRequest): void {\n        this.doSetRequest(channel.roomId, channel.transactionId, request);\n    }\n\n    private doSetRequest(roomId: string, txnId: string, request: VerificationRequest): void {\n        let requestsByTxnId = this.requestsByRoomId.get(roomId);\n        if (!requestsByTxnId) {\n            requestsByTxnId = new Map();\n            this.requestsByRoomId.set(roomId, requestsByTxnId);\n        }\n        requestsByTxnId.set(txnId, request);\n    }\n\n    public removeRequest(event: MatrixEvent): void {\n        const roomId = event.getRoomId();\n        const requestsByTxnId = this.requestsByRoomId.get(roomId);\n        if (requestsByTxnId) {\n            requestsByTxnId.delete(InRoomChannel.getTransactionId(event));\n            if (requestsByTxnId.size === 0) {\n                this.requestsByRoomId.delete(roomId);\n            }\n        }\n    }\n\n    public findRequestInProgress(roomId: string): VerificationRequest {\n        const requestsByTxnId = this.requestsByRoomId.get(roomId);\n        if (requestsByTxnId) {\n            for (const request of requestsByTxnId.values()) {\n                if (request.pending) {\n                    return request;\n                }\n            }\n        }\n    }\n}\n",
    "/*\nCopyright 2018 New Vector Ltd\nCopyright 2019 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { randomString } from '../../../randomstring';\nimport { logger } from '../../../logger';\nimport {\n    CANCEL_TYPE,\n    PHASE_STARTED,\n    PHASE_READY,\n    REQUEST_TYPE,\n    READY_TYPE,\n    START_TYPE,\n    VerificationRequest,\n} from \"./VerificationRequest\";\nimport { errorFromEvent, newUnexpectedMessageError } from \"../Error\";\nimport { MatrixEvent } from \"../../../models/event\";\nimport { IVerificationChannel } from \"./Channel\";\nimport { MatrixClient } from \"../../../client\";\nimport { IRequestsMap } from '../..';\n\nexport type Request = VerificationRequest<ToDeviceChannel>;\n\n/**\n * A key verification channel that sends verification events over to_device messages.\n * Generates its own transaction ids.\n */\nexport class ToDeviceChannel implements IVerificationChannel {\n    public request?: VerificationRequest;\n\n    // userId and devices of user we're about to verify\n    constructor(\n        private readonly client: MatrixClient,\n        public readonly userId: string,\n        private readonly devices: string[],\n        public transactionId: string = null,\n        public deviceId: string = null,\n    ) {}\n\n    public isToDevices(devices: string[]): boolean {\n        if (devices.length === this.devices.length) {\n            for (const device of devices) {\n                if (!this.devices.includes(device)) {\n                    return false;\n                }\n            }\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public static getEventType(event: MatrixEvent): string {\n        return event.getType();\n    }\n\n    /**\n     * Extract the transaction id used by a given key verification event, if any\n     * @param {MatrixEvent} event the event\n     * @returns {string} the transaction id\n     */\n    public static getTransactionId(event: MatrixEvent): string {\n        const content = event.getContent();\n        return content && content.transaction_id;\n    }\n\n    /**\n     * Checks whether the given event type should be allowed to initiate a new VerificationRequest over this channel\n     * @param {string} type the event type to check\n     * @returns {boolean} boolean flag\n     */\n    public static canCreateRequest(type: string): boolean {\n        return type === REQUEST_TYPE || type === START_TYPE;\n    }\n\n    public canCreateRequest(type: string): boolean {\n        return ToDeviceChannel.canCreateRequest(type);\n    }\n\n    /**\n     * Checks whether this event is a well-formed key verification event.\n     * This only does checks that don't rely on the current state of a potentially already channel\n     * so we can prevent channels being created by invalid events.\n     * `handleEvent` can do more checks and choose to ignore invalid events.\n     * @param {MatrixEvent} event the event to validate\n     * @param {MatrixClient} client the client to get the current user and device id from\n     * @returns {boolean} whether the event is valid and should be passed to handleEvent\n     */\n    public static validateEvent(event: MatrixEvent, client: MatrixClient): boolean {\n        if (event.isCancelled()) {\n            logger.warn(\"Ignoring flagged verification request from \"\n                 + event.getSender());\n            return false;\n        }\n        const content = event.getContent();\n        if (!content) {\n            logger.warn(\"ToDeviceChannel.validateEvent: invalid: no content\");\n            return false;\n        }\n\n        if (!content.transaction_id) {\n            logger.warn(\"ToDeviceChannel.validateEvent: invalid: no transaction_id\");\n            return false;\n        }\n\n        const type = event.getType();\n\n        if (type === REQUEST_TYPE) {\n            if (!Number.isFinite(content.timestamp)) {\n                logger.warn(\"ToDeviceChannel.validateEvent: invalid: no timestamp\");\n                return false;\n            }\n            if (event.getSender() === client.getUserId() &&\n                    content.from_device == client.getDeviceId()\n            ) {\n                // ignore requests from ourselves, because it doesn't make sense for a\n                // device to verify itself\n                logger.warn(\"ToDeviceChannel.validateEvent: invalid: from own device\");\n                return false;\n            }\n        }\n\n        return VerificationRequest.validateEvent(type, event, client);\n    }\n\n    /**\n     * @param {MatrixEvent} event the event to get the timestamp of\n     * @return {number} the timestamp when the event was sent\n     */\n    public getTimestamp(event: MatrixEvent): number {\n        const content = event.getContent();\n        return content && content.timestamp;\n    }\n\n    /**\n     * Changes the state of the channel, request, and verifier in response to a key verification event.\n     * @param {MatrixEvent} event to handle\n     * @param {VerificationRequest} request the request to forward handling to\n     * @param {boolean} isLiveEvent whether this is an even received through sync or not\n     * @returns {Promise} a promise that resolves when any requests as an answer to the passed-in event are sent.\n     */\n    public async handleEvent(event: MatrixEvent, request: Request, isLiveEvent = false): Promise<void> {\n        const type = event.getType();\n        const content = event.getContent();\n        if (type === REQUEST_TYPE || type === READY_TYPE || type === START_TYPE) {\n            if (!this.transactionId) {\n                this.transactionId = content.transaction_id;\n            }\n            const deviceId = content.from_device;\n            // adopt deviceId if not set before and valid\n            if (!this.deviceId && this.devices.includes(deviceId)) {\n                this.deviceId = deviceId;\n            }\n            // if no device id or different from adopted one, cancel with sender\n            if (!this.deviceId || this.deviceId !== deviceId) {\n                // also check that message came from the device we sent the request to earlier on\n                // and do send a cancel message to that device\n                // (but don't cancel the request for the device we should be talking to)\n                const cancelContent = this.completeContent(CANCEL_TYPE, errorFromEvent(newUnexpectedMessageError()));\n                return this.sendToDevices(CANCEL_TYPE, cancelContent, [deviceId]);\n            }\n        }\n        const wasStarted = request.phase === PHASE_STARTED ||\n                           request.phase === PHASE_READY;\n\n        await request.handleEvent(event.getType(), event, isLiveEvent, false, false);\n\n        const isStarted = request.phase === PHASE_STARTED ||\n                          request.phase === PHASE_READY;\n\n        const isAcceptingEvent = type === START_TYPE || type === READY_TYPE;\n        // the request has picked a ready or start event, tell the other devices about it\n        if (isAcceptingEvent && !wasStarted && isStarted && this.deviceId) {\n            const nonChosenDevices = this.devices.filter(\n                d => d !== this.deviceId && d !== this.client.getDeviceId(),\n            );\n            if (nonChosenDevices.length) {\n                const message = this.completeContent(CANCEL_TYPE, {\n                    code: \"m.accepted\",\n                    reason: \"Verification request accepted by another device\",\n                });\n                await this.sendToDevices(CANCEL_TYPE, message, nonChosenDevices);\n            }\n        }\n    }\n\n    /**\n     * See {InRoomChannel.completedContentFromEvent} why this is needed.\n     * @param {MatrixEvent} event the received event\n     * @returns {Object} the content object\n     */\n    public completedContentFromEvent(event: MatrixEvent): Record<string, any> {\n        return event.getContent();\n    }\n\n    /**\n     * Add all the fields to content needed for sending it over this channel.\n     * This is public so verification methods (SAS uses this) can get the exact\n     * content that will be sent independent of the used channel,\n     * as they need to calculate the hash of it.\n     * @param {string} type the event type\n     * @param {object} content the (incomplete) content\n     * @returns {object} the complete content, as it will be sent.\n     */\n    public completeContent(type: string, content: Record<string, any>): Record<string, any> {\n        // make a copy\n        content = Object.assign({}, content);\n        if (this.transactionId) {\n            content.transaction_id = this.transactionId;\n        }\n        if (type === REQUEST_TYPE || type === READY_TYPE || type === START_TYPE) {\n            content.from_device = this.client.getDeviceId();\n        }\n        if (type === REQUEST_TYPE) {\n            content.timestamp = Date.now();\n        }\n        return content;\n    }\n\n    /**\n     * Send an event over the channel with the content not having gone through `completeContent`.\n     * @param {string} type the event type\n     * @param {object} uncompletedContent the (incomplete) content\n     * @returns {Promise} the promise of the request\n     */\n    public send(type: string, uncompletedContent: Record<string, any> = {}): Promise<void> {\n        // create transaction id when sending request\n        if ((type === REQUEST_TYPE || type === START_TYPE) && !this.transactionId) {\n            this.transactionId = ToDeviceChannel.makeTransactionId();\n        }\n        const content = this.completeContent(type, uncompletedContent);\n        return this.sendCompleted(type, content);\n    }\n\n    /**\n     * Send an event over the channel with the content having gone through `completeContent` already.\n     * @param {string} type the event type\n     * @param {object} content\n     * @returns {Promise} the promise of the request\n     */\n    public async sendCompleted(type: string, content: Record<string, any>): Promise<void> {\n        let result;\n        if (type === REQUEST_TYPE || (type === CANCEL_TYPE && !this.deviceId)) {\n            result = await this.sendToDevices(type, content, this.devices);\n        } else {\n            result = await this.sendToDevices(type, content, [this.deviceId]);\n        }\n        // the VerificationRequest state machine requires remote echos of the event\n        // the client sends itself, so we fake this for to_device messages\n        const remoteEchoEvent = new MatrixEvent({\n            sender: this.client.getUserId(),\n            content,\n            type,\n        });\n        await this.request.handleEvent(\n            type,\n            remoteEchoEvent,\n            /*isLiveEvent=*/true,\n            /*isRemoteEcho=*/true,\n            /*isSentByUs=*/true,\n        );\n        return result;\n    }\n\n    private async sendToDevices(type: string, content: Record<string, any>, devices: string[]): Promise<void> {\n        if (devices.length) {\n            const msgMap: Record<string, Record<string, any>> = {};\n            for (const deviceId of devices) {\n                msgMap[deviceId] = content;\n            }\n\n            await this.client.sendToDevice(type, { [this.userId]: msgMap });\n        }\n    }\n\n    /**\n     * Allow Crypto module to create and know the transaction id before the .start event gets sent.\n     * @returns {string} the transaction id\n     */\n    public static makeTransactionId(): string {\n        return randomString(32);\n    }\n}\n\nexport class ToDeviceRequests implements IRequestsMap {\n    private requestsByUserId = new Map<string, Map<string, Request>>();\n\n    public getRequest(event: MatrixEvent): Request {\n        return this.getRequestBySenderAndTxnId(\n            event.getSender(),\n            ToDeviceChannel.getTransactionId(event),\n        );\n    }\n\n    public getRequestByChannel(channel: ToDeviceChannel): Request {\n        return this.getRequestBySenderAndTxnId(channel.userId, channel.transactionId);\n    }\n\n    public getRequestBySenderAndTxnId(sender: string, txnId: string): Request {\n        const requestsByTxnId = this.requestsByUserId.get(sender);\n        if (requestsByTxnId) {\n            return requestsByTxnId.get(txnId);\n        }\n    }\n\n    public setRequest(event: MatrixEvent, request: Request): void {\n        this.setRequestBySenderAndTxnId(event.getSender(), ToDeviceChannel.getTransactionId(event), request);\n    }\n\n    public setRequestByChannel(channel: ToDeviceChannel, request: Request): void {\n        this.setRequestBySenderAndTxnId(channel.userId, channel.transactionId, request);\n    }\n\n    public setRequestBySenderAndTxnId(sender: string, txnId: string, request: Request): void {\n        let requestsByTxnId = this.requestsByUserId.get(sender);\n        if (!requestsByTxnId) {\n            requestsByTxnId = new Map();\n            this.requestsByUserId.set(sender, requestsByTxnId);\n        }\n        requestsByTxnId.set(txnId, request);\n    }\n\n    public removeRequest(event: MatrixEvent): void {\n        const userId = event.getSender();\n        const requestsByTxnId = this.requestsByUserId.get(userId);\n        if (requestsByTxnId) {\n            requestsByTxnId.delete(ToDeviceChannel.getTransactionId(event));\n            if (requestsByTxnId.size === 0) {\n                this.requestsByUserId.delete(userId);\n            }\n        }\n    }\n\n    public findRequestInProgress(userId: string, devices: string[]): Request {\n        const requestsByTxnId = this.requestsByUserId.get(userId);\n        if (requestsByTxnId) {\n            for (const request of requestsByTxnId.values()) {\n                if (request.pending && request.channel.isToDevices(devices)) {\n                    return request;\n                }\n            }\n        }\n    }\n\n    public getRequestsInProgress(userId: string): Request[] {\n        const requestsByTxnId = this.requestsByUserId.get(userId);\n        if (requestsByTxnId) {\n            return Array.from(requestsByTxnId.values()).filter(r => r.pending);\n        }\n        return [];\n    }\n}\n",
    "/*\nCopyright 2018 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { logger } from '../../../logger';\nimport {\n    errorFactory,\n    errorFromEvent,\n    newUnexpectedMessageError,\n    newUnknownMethodError,\n} from \"../Error\";\nimport { QRCodeData, SCAN_QR_CODE_METHOD } from \"../QRCode\";\nimport { IVerificationChannel } from \"./Channel\";\nimport { MatrixClient } from \"../../../client\";\nimport { MatrixEvent } from \"../../../models/event\";\nimport { VerificationBase } from \"../Base\";\nimport { VerificationMethod } from \"../../index\";\nimport { TypedEventEmitter } from \"../../../models/typed-event-emitter\";\n\n// How long after the event's timestamp that the request times out\nconst TIMEOUT_FROM_EVENT_TS = 10 * 60 * 1000; // 10 minutes\n\n// How long after we receive the event that the request times out\nconst TIMEOUT_FROM_EVENT_RECEIPT = 2 * 60 * 1000; // 2 minutes\n\n// to avoid almost expired verification notifications\n// from showing a notification and almost immediately\n// disappearing, also ignore verification requests that\n// are this amount of time away from expiring.\nconst VERIFICATION_REQUEST_MARGIN = 3 * 1000; // 3 seconds\n\nexport const EVENT_PREFIX = \"m.key.verification.\";\nexport const REQUEST_TYPE = EVENT_PREFIX + \"request\";\nexport const START_TYPE = EVENT_PREFIX + \"start\";\nexport const CANCEL_TYPE = EVENT_PREFIX + \"cancel\";\nexport const DONE_TYPE = EVENT_PREFIX + \"done\";\nexport const READY_TYPE = EVENT_PREFIX + \"ready\";\n\nexport enum Phase {\n    Unsent = 1,\n    Requested,\n    Ready,\n    Started,\n    Cancelled,\n    Done,\n}\n\n// Legacy export fields\nexport const PHASE_UNSENT = Phase.Unsent;\nexport const PHASE_REQUESTED = Phase.Requested;\nexport const PHASE_READY = Phase.Ready;\nexport const PHASE_STARTED = Phase.Started;\nexport const PHASE_CANCELLED = Phase.Cancelled;\nexport const PHASE_DONE = Phase.Done;\n\ninterface ITargetDevice {\n    userId?: string;\n    deviceId?: string;\n}\n\ninterface ITransition {\n    phase: Phase;\n    event?: MatrixEvent;\n}\n\nexport enum VerificationRequestEvent {\n    Change = \"change\",\n}\n\ntype EventHandlerMap = {\n    [VerificationRequestEvent.Change]: () => void;\n};\n\n/**\n * State machine for verification requests.\n * Things that differ based on what channel is used to\n * send and receive verification events are put in `InRoomChannel` or `ToDeviceChannel`.\n * @event \"change\" whenever the state of the request object has changed.\n */\nexport class VerificationRequest<\n    C extends IVerificationChannel = IVerificationChannel,\n> extends TypedEventEmitter<VerificationRequestEvent, EventHandlerMap> {\n    private eventsByUs = new Map<string, MatrixEvent>();\n    private eventsByThem = new Map<string, MatrixEvent>();\n    private _observeOnly = false;\n    private timeoutTimer: number = null;\n    private _accepting = false;\n    private _declining = false;\n    private verifierHasFinished = false;\n    private _cancelled = false;\n    private _chosenMethod: VerificationMethod = null;\n    // we keep a copy of the QR Code data (including other user master key) around\n    // for QR reciprocate verification, to protect against\n    // cross-signing identity reset between the .ready and .start event\n    // and signing the wrong key after .start\n    private _qrCodeData: QRCodeData = null;\n\n    // The timestamp when we received the request event from the other side\n    private requestReceivedAt: number = null;\n\n    private commonMethods: VerificationMethod[] = [];\n    private _phase: Phase;\n    public _cancellingUserId: string; // Used in tests only\n    private _verifier: VerificationBase<any, any>;\n\n    constructor(\n        public readonly channel: C,\n        private readonly verificationMethods: Map<VerificationMethod, typeof VerificationBase>,\n        private readonly client: MatrixClient,\n    ) {\n        super();\n        this.channel.request = this;\n        this.setPhase(PHASE_UNSENT, false);\n    }\n\n    /**\n     * Stateless validation logic not specific to the channel.\n     * Invoked by the same static method in either channel.\n     * @param {string} type the \"symbolic\" event type, as returned by the `getEventType` function on the channel.\n     * @param {MatrixEvent} event the event to validate. Don't call getType() on it but use the `type` parameter instead.\n     * @param {MatrixClient} client the client to get the current user and device id from\n     * @returns {boolean} whether the event is valid and should be passed to handleEvent\n     */\n    public static validateEvent(type: string, event: MatrixEvent, client: MatrixClient): boolean {\n        const content = event.getContent();\n\n        if (!type || !type.startsWith(EVENT_PREFIX)) {\n            return false;\n        }\n\n        // from here on we're fairly sure that this is supposed to be\n        // part of a verification request, so be noisy when rejecting something\n        if (!content) {\n            logger.log(\"VerificationRequest: validateEvent: no content\");\n            return false;\n        }\n\n        if (type === REQUEST_TYPE || type === READY_TYPE) {\n            if (!Array.isArray(content.methods)) {\n                logger.log(\"VerificationRequest: validateEvent: \" +\n                    \"fail because methods\");\n                return false;\n            }\n        }\n\n        if (type === REQUEST_TYPE || type === READY_TYPE || type === START_TYPE) {\n            if (typeof content.from_device !== \"string\" ||\n                content.from_device.length === 0\n            ) {\n                logger.log(\"VerificationRequest: validateEvent: \"+\n                    \"fail because from_device\");\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    public get invalid(): boolean {\n        return this.phase === PHASE_UNSENT;\n    }\n\n    /** returns whether the phase is PHASE_REQUESTED */\n    public get requested(): boolean {\n        return this.phase === PHASE_REQUESTED;\n    }\n\n    /** returns whether the phase is PHASE_CANCELLED */\n    public get cancelled(): boolean {\n        return this.phase === PHASE_CANCELLED;\n    }\n\n    /** returns whether the phase is PHASE_READY */\n    public get ready(): boolean {\n        return this.phase === PHASE_READY;\n    }\n\n    /** returns whether the phase is PHASE_STARTED */\n    public get started(): boolean {\n        return this.phase === PHASE_STARTED;\n    }\n\n    /** returns whether the phase is PHASE_DONE */\n    public get done(): boolean {\n        return this.phase === PHASE_DONE;\n    }\n\n    /** once the phase is PHASE_STARTED (and !initiatedByMe) or PHASE_READY: common methods supported by both sides */\n    public get methods(): VerificationMethod[] {\n        return this.commonMethods;\n    }\n\n    /** the method picked in the .start event */\n    public get chosenMethod(): VerificationMethod {\n        return this._chosenMethod;\n    }\n\n    public calculateEventTimeout(event: MatrixEvent): number {\n        let effectiveExpiresAt = this.channel.getTimestamp(event)\n            + TIMEOUT_FROM_EVENT_TS;\n\n        if (this.requestReceivedAt && !this.initiatedByMe &&\n            this.phase <= PHASE_REQUESTED\n        ) {\n            const expiresAtByReceipt = this.requestReceivedAt\n                + TIMEOUT_FROM_EVENT_RECEIPT;\n            effectiveExpiresAt = Math.min(effectiveExpiresAt, expiresAtByReceipt);\n        }\n\n        return Math.max(0, effectiveExpiresAt - Date.now());\n    }\n\n    /** The current remaining amount of ms before the request should be automatically cancelled */\n    public get timeout(): number {\n        const requestEvent = this.getEventByEither(REQUEST_TYPE);\n        if (requestEvent) {\n            return this.calculateEventTimeout(requestEvent);\n        }\n        return 0;\n    }\n\n    /**\n     * The key verification request event.\n     * @returns {MatrixEvent} The request event, or falsey if not found.\n     */\n    public get requestEvent(): MatrixEvent {\n        return this.getEventByEither(REQUEST_TYPE);\n    }\n\n    /** current phase of the request. Some properties might only be defined in a current phase. */\n    public get phase(): Phase {\n        return this._phase;\n    }\n\n    /** The verifier to do the actual verification, once the method has been established. Only defined when the `phase` is PHASE_STARTED. */\n    public get verifier(): VerificationBase<any, any> {\n        return this._verifier;\n    }\n\n    public get canAccept(): boolean {\n        return this.phase < PHASE_READY && !this._accepting && !this._declining;\n    }\n\n    public get accepting(): boolean {\n        return this._accepting;\n    }\n\n    public get declining(): boolean {\n        return this._declining;\n    }\n\n    /** whether this request has sent it's initial event and needs more events to complete */\n    public get pending(): boolean {\n        return !this.observeOnly &&\n            this._phase !== PHASE_DONE &&\n            this._phase !== PHASE_CANCELLED;\n    }\n\n    /** Only set after a .ready if the other party can scan a QR code */\n    public get qrCodeData(): QRCodeData {\n        return this._qrCodeData;\n    }\n\n    /** Checks whether the other party supports a given verification method.\n     *  This is useful when setting up the QR code UI, as it is somewhat asymmetrical:\n     *  if the other party supports SCAN_QR, we should show a QR code in the UI, and vice versa.\n     *  For methods that need to be supported by both ends, use the `methods` property.\n     *  @param {string} method the method to check\n     *  @param {boolean} force to check even if the phase is not ready or started yet, internal usage\n     *  @return {boolean} whether or not the other party said the supported the method */\n    public otherPartySupportsMethod(method: string, force = false): boolean {\n        if (!force && !this.ready && !this.started) {\n            return false;\n        }\n        const theirMethodEvent = this.eventsByThem.get(REQUEST_TYPE) ||\n            this.eventsByThem.get(READY_TYPE);\n        if (!theirMethodEvent) {\n            // if we started straight away with .start event,\n            // we are assuming that the other side will support the\n            // chosen method, so return true for that.\n            if (this.started && this.initiatedByMe) {\n                const myStartEvent = this.eventsByUs.get(START_TYPE);\n                const content = myStartEvent && myStartEvent.getContent();\n                const myStartMethod = content && content.method;\n                return method == myStartMethod;\n            }\n            return false;\n        }\n        const content = theirMethodEvent.getContent();\n        if (!content) {\n            return false;\n        }\n        const { methods } = content;\n        if (!Array.isArray(methods)) {\n            return false;\n        }\n\n        return methods.includes(method);\n    }\n\n    /** Whether this request was initiated by the syncing user.\n     * For InRoomChannel, this is who sent the .request event.\n     * For ToDeviceChannel, this is who sent the .start event\n     */\n    public get initiatedByMe(): boolean {\n        // event created by us but no remote echo has been received yet\n        const noEventsYet = (this.eventsByUs.size + this.eventsByThem.size) === 0;\n        if (this._phase === PHASE_UNSENT && noEventsYet) {\n            return true;\n        }\n        const hasMyRequest = this.eventsByUs.has(REQUEST_TYPE);\n        const hasTheirRequest = this.eventsByThem.has(REQUEST_TYPE);\n        if (hasMyRequest && !hasTheirRequest) {\n            return true;\n        }\n        if (!hasMyRequest && hasTheirRequest) {\n            return false;\n        }\n        const hasMyStart = this.eventsByUs.has(START_TYPE);\n        const hasTheirStart = this.eventsByThem.has(START_TYPE);\n        if (hasMyStart && !hasTheirStart) {\n            return true;\n        }\n        return false;\n    }\n\n    /** The id of the user that initiated the request */\n    public get requestingUserId(): string {\n        if (this.initiatedByMe) {\n            return this.client.getUserId();\n        } else {\n            return this.otherUserId;\n        }\n    }\n\n    /** The id of the user that (will) receive(d) the request */\n    public get receivingUserId(): string {\n        if (this.initiatedByMe) {\n            return this.otherUserId;\n        } else {\n            return this.client.getUserId();\n        }\n    }\n\n    /** The user id of the other party in this request */\n    public get otherUserId(): string {\n        return this.channel.userId;\n    }\n\n    public get isSelfVerification(): boolean {\n        return this.client.getUserId() === this.otherUserId;\n    }\n\n    /**\n     * The id of the user that cancelled the request,\n     * only defined when phase is PHASE_CANCELLED\n     */\n    public get cancellingUserId(): string {\n        const myCancel = this.eventsByUs.get(CANCEL_TYPE);\n        const theirCancel = this.eventsByThem.get(CANCEL_TYPE);\n\n        if (myCancel && (!theirCancel || myCancel.getId() < theirCancel.getId())) {\n            return myCancel.getSender();\n        }\n        if (theirCancel) {\n            return theirCancel.getSender();\n        }\n        return undefined;\n    }\n\n    /**\n     * The cancellation code e.g m.user which is responsible for cancelling this verification\n     */\n    public get cancellationCode(): string {\n        const ev = this.getEventByEither(CANCEL_TYPE);\n        return ev ? ev.getContent().code : null;\n    }\n\n    public get observeOnly(): boolean {\n        return this._observeOnly;\n    }\n\n    /**\n     * Gets which device the verification should be started with\n     * given the events sent so far in the verification. This is the\n     * same algorithm used to determine which device to send the\n     * verification to when no specific device is specified.\n     * @returns {{userId: *, deviceId: *}} The device information\n     */\n    public get targetDevice(): ITargetDevice {\n        const theirFirstEvent =\n            this.eventsByThem.get(REQUEST_TYPE) ||\n            this.eventsByThem.get(READY_TYPE) ||\n            this.eventsByThem.get(START_TYPE);\n        const theirFirstContent = theirFirstEvent.getContent();\n        const fromDevice = theirFirstContent.from_device;\n        return {\n            userId: this.otherUserId,\n            deviceId: fromDevice,\n        };\n    }\n\n    /* Start the key verification, creating a verifier and sending a .start event.\n     * If no previous events have been sent, pass in `targetDevice` to set who to direct this request to.\n     * @param {string} method the name of the verification method to use.\n     * @param {string?} targetDevice.userId the id of the user to direct this request to\n     * @param {string?} targetDevice.deviceId the id of the device to direct this request to\n     * @returns {VerifierBase} the verifier of the given method\n     */\n    public beginKeyVerification(\n        method: VerificationMethod,\n        targetDevice: ITargetDevice = null,\n    ): VerificationBase<any, any> {\n        // need to allow also when unsent in case of to_device\n        if (!this.observeOnly && !this._verifier) {\n            const validStartPhase =\n                this.phase === PHASE_REQUESTED ||\n                this.phase === PHASE_READY ||\n                (this.phase === PHASE_UNSENT && this.channel.canCreateRequest(START_TYPE));\n            if (validStartPhase) {\n                // when called on a request that was initiated with .request event\n                // check the method is supported by both sides\n                if (this.commonMethods.length && !this.commonMethods.includes(method)) {\n                    throw newUnknownMethodError();\n                }\n                this._verifier = this.createVerifier(method, null, targetDevice);\n                if (!this._verifier) {\n                    throw newUnknownMethodError();\n                }\n                this._chosenMethod = method;\n            }\n        }\n        return this._verifier;\n    }\n\n    /**\n     * sends the initial .request event.\n     * @returns {Promise} resolves when the event has been sent.\n     */\n    public async sendRequest(): Promise<void> {\n        if (!this.observeOnly && this._phase === PHASE_UNSENT) {\n            const methods = [...this.verificationMethods.keys()];\n            await this.channel.send(REQUEST_TYPE, { methods });\n        }\n    }\n\n    /**\n     * Cancels the request, sending a cancellation to the other party\n     * @param {string?} error.reason the error reason to send the cancellation with\n     * @param {string?} error.code the error code to send the cancellation with\n     * @returns {Promise} resolves when the event has been sent.\n     */\n    public async cancel({ reason = \"User declined\", code = \"m.user\" } = {}): Promise<void> {\n        if (!this.observeOnly && this._phase !== PHASE_CANCELLED) {\n            this._declining = true;\n            this.emit(VerificationRequestEvent.Change);\n            if (this._verifier) {\n                return this._verifier.cancel(errorFactory(code, reason)());\n            } else {\n                this._cancellingUserId = this.client.getUserId();\n                await this.channel.send(CANCEL_TYPE, { code, reason });\n            }\n        }\n    }\n\n    /**\n     * Accepts the request, sending a .ready event to the other party\n     * @returns {Promise} resolves when the event has been sent.\n     */\n    public async accept(): Promise<void> {\n        if (!this.observeOnly && this.phase === PHASE_REQUESTED && !this.initiatedByMe) {\n            const methods = [...this.verificationMethods.keys()];\n            this._accepting = true;\n            this.emit(VerificationRequestEvent.Change);\n            await this.channel.send(READY_TYPE, { methods });\n        }\n    }\n\n    /**\n     * Can be used to listen for state changes until the callback returns true.\n     * @param {Function} fn callback to evaluate whether the request is in the desired state.\n     *                      Takes the request as an argument.\n     * @returns {Promise} that resolves once the callback returns true\n     * @throws {Error} when the request is cancelled\n     */\n    public waitFor(fn: (request: VerificationRequest) => boolean): Promise<VerificationRequest> {\n        return new Promise((resolve, reject) => {\n            const check = () => {\n                let handled = false;\n                if (fn(this)) {\n                    resolve(this);\n                    handled = true;\n                } else if (this.cancelled) {\n                    reject(new Error(\"cancelled\"));\n                    handled = true;\n                }\n                if (handled) {\n                    this.off(VerificationRequestEvent.Change, check);\n                }\n                return handled;\n            };\n            if (!check()) {\n                this.on(VerificationRequestEvent.Change, check);\n            }\n        });\n    }\n\n    private setPhase(phase: Phase, notify = true): void {\n        this._phase = phase;\n        if (notify) {\n            this.emit(VerificationRequestEvent.Change);\n        }\n    }\n\n    private getEventByEither(type: string): MatrixEvent {\n        return this.eventsByThem.get(type) || this.eventsByUs.get(type);\n    }\n\n    private getEventBy(type: string, byThem = false): MatrixEvent {\n        if (byThem) {\n            return this.eventsByThem.get(type);\n        } else {\n            return this.eventsByUs.get(type);\n        }\n    }\n\n    private calculatePhaseTransitions(): ITransition[] {\n        const transitions: ITransition[] = [{ phase: PHASE_UNSENT }];\n        const phase = () => transitions[transitions.length - 1].phase;\n\n        // always pass by .request first to be sure channel.userId has been set\n        const hasRequestByThem = this.eventsByThem.has(REQUEST_TYPE);\n        const requestEvent = this.getEventBy(REQUEST_TYPE, hasRequestByThem);\n        if (requestEvent) {\n            transitions.push({ phase: PHASE_REQUESTED, event: requestEvent });\n        }\n\n        const readyEvent =\n            requestEvent && this.getEventBy(READY_TYPE, !hasRequestByThem);\n        if (readyEvent && phase() === PHASE_REQUESTED) {\n            transitions.push({ phase: PHASE_READY, event: readyEvent });\n        }\n\n        let startEvent;\n        if (readyEvent || !requestEvent) {\n            const theirStartEvent = this.eventsByThem.get(START_TYPE);\n            const ourStartEvent = this.eventsByUs.get(START_TYPE);\n            // any party can send .start after a .ready or unsent\n            if (theirStartEvent && ourStartEvent) {\n                startEvent = theirStartEvent.getSender() < ourStartEvent.getSender() ?\n                    theirStartEvent : ourStartEvent;\n            } else {\n                startEvent = theirStartEvent ? theirStartEvent : ourStartEvent;\n            }\n        } else {\n            startEvent = this.getEventBy(START_TYPE, !hasRequestByThem);\n        }\n        if (startEvent) {\n            const fromRequestPhase = phase() === PHASE_REQUESTED && requestEvent.getSender() !== startEvent.getSender();\n            const fromUnsentPhase = phase() === PHASE_UNSENT && this.channel.canCreateRequest(START_TYPE);\n            if (fromRequestPhase || phase() === PHASE_READY || fromUnsentPhase) {\n                transitions.push({ phase: PHASE_STARTED, event: startEvent });\n            }\n        }\n\n        const ourDoneEvent = this.eventsByUs.get(DONE_TYPE);\n        if (this.verifierHasFinished || (ourDoneEvent && phase() === PHASE_STARTED)) {\n            transitions.push({ phase: PHASE_DONE });\n        }\n\n        const cancelEvent = this.getEventByEither(CANCEL_TYPE);\n        if ((this._cancelled || cancelEvent) && phase() !== PHASE_DONE) {\n            transitions.push({ phase: PHASE_CANCELLED, event: cancelEvent });\n            return transitions;\n        }\n\n        return transitions;\n    }\n\n    private transitionToPhase(transition: ITransition): void {\n        const { phase, event } = transition;\n        // get common methods\n        if (phase === PHASE_REQUESTED || phase === PHASE_READY) {\n            if (!this.wasSentByOwnDevice(event)) {\n                const content = event.getContent<{\n                    methods: string[];\n                }>();\n                this.commonMethods =\n                    content.methods.filter(m => this.verificationMethods.has(m));\n            }\n        }\n        // detect if we're not a party in the request, and we should just observe\n        if (!this.observeOnly) {\n            // if requested or accepted by one of my other devices\n            if (phase === PHASE_REQUESTED ||\n                phase === PHASE_STARTED ||\n                phase === PHASE_READY\n            ) {\n                if (\n                    this.channel.receiveStartFromOtherDevices &&\n                    this.wasSentByOwnUser(event) &&\n                    !this.wasSentByOwnDevice(event)\n                ) {\n                    this._observeOnly = true;\n                }\n            }\n        }\n        // create verifier\n        if (phase === PHASE_STARTED) {\n            const { method } = event.getContent();\n            if (!this._verifier && !this.observeOnly) {\n                this._verifier = this.createVerifier(method, event);\n                if (!this._verifier) {\n                    this.cancel({\n                        code: \"m.unknown_method\",\n                        reason: `Unknown method: ${method}`,\n                    });\n                } else {\n                    this._chosenMethod = method;\n                }\n            }\n        }\n    }\n\n    private applyPhaseTransitions(): ITransition[] {\n        const transitions = this.calculatePhaseTransitions();\n        const existingIdx = transitions.findIndex(t => t.phase === this.phase);\n        // trim off phases we already went through, if any\n        const newTransitions = transitions.slice(existingIdx + 1);\n        // transition to all new phases\n        for (const transition of newTransitions) {\n            this.transitionToPhase(transition);\n        }\n        return newTransitions;\n    }\n\n    private isWinningStartRace(newEvent: MatrixEvent): boolean {\n        if (newEvent.getType() !== START_TYPE) {\n            return false;\n        }\n        const oldEvent = this._verifier.startEvent;\n\n        let oldRaceIdentifier;\n        if (this.isSelfVerification) {\n            // if the verifier does not have a startEvent,\n            // it is because it's still sending and we are on the initator side\n            // we know we are sending a .start event because we already\n            // have a verifier (checked in calling method)\n            if (oldEvent) {\n                const oldContent = oldEvent.getContent();\n                oldRaceIdentifier = oldContent && oldContent.from_device;\n            } else {\n                oldRaceIdentifier = this.client.getDeviceId();\n            }\n        } else {\n            if (oldEvent) {\n                oldRaceIdentifier = oldEvent.getSender();\n            } else {\n                oldRaceIdentifier = this.client.getUserId();\n            }\n        }\n\n        let newRaceIdentifier;\n        if (this.isSelfVerification) {\n            const newContent = newEvent.getContent();\n            newRaceIdentifier = newContent && newContent.from_device;\n        } else {\n            newRaceIdentifier = newEvent.getSender();\n        }\n        return newRaceIdentifier < oldRaceIdentifier;\n    }\n\n    public hasEventId(eventId: string): boolean {\n        for (const event of this.eventsByUs.values()) {\n            if (event.getId() === eventId) {\n                return true;\n            }\n        }\n        for (const event of this.eventsByThem.values()) {\n            if (event.getId() === eventId) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Changes the state of the request and verifier in response to a key verification event.\n     * @param {string} type the \"symbolic\" event type, as returned by the `getEventType` function on the channel.\n     * @param {MatrixEvent} event the event to handle. Don't call getType() on it but use the `type` parameter instead.\n     * @param {boolean} isLiveEvent whether this is an even received through sync or not\n     * @param {boolean} isRemoteEcho whether this is the remote echo of an event sent by the same device\n     * @param {boolean} isSentByUs whether this event is sent by a party that can accept and/or observe the request like one of our peers.\n     *   For InRoomChannel this means any device for the syncing user. For ToDeviceChannel, just the syncing device.\n     * @returns {Promise} a promise that resolves when any requests as an answer to the passed-in event are sent.\n     */\n    public async handleEvent(\n        type: string,\n        event: MatrixEvent,\n        isLiveEvent: boolean,\n        isRemoteEcho: boolean,\n        isSentByUs: boolean,\n    ): Promise<void> {\n        // if reached phase cancelled or done, ignore anything else that comes\n        if (this.done || this.cancelled) {\n            return;\n        }\n        const wasObserveOnly = this._observeOnly;\n\n        this.adjustObserveOnly(event, isLiveEvent);\n\n        if (!this.observeOnly && !isRemoteEcho) {\n            if (await this.cancelOnError(type, event)) {\n                return;\n            }\n        }\n\n        // This assumes verification won't need to send an event with\n        // the same type for the same party twice.\n        // This is true for QR and SAS verification, and was\n        // added here to prevent verification getting cancelled\n        // when the server duplicates an event (https://github.com/matrix-org/synapse/issues/3365)\n        const isDuplicateEvent = isSentByUs ?\n            this.eventsByUs.has(type) :\n            this.eventsByThem.has(type);\n        if (isDuplicateEvent) {\n            return;\n        }\n\n        const oldPhase = this.phase;\n        this.addEvent(type, event, isSentByUs);\n\n        // this will create if needed the verifier so needs to happen before calling it\n        const newTransitions = this.applyPhaseTransitions();\n        try {\n            // only pass events from the other side to the verifier,\n            // no remote echos of our own events\n            if (this._verifier && !this.observeOnly) {\n                const newEventWinsRace = this.isWinningStartRace(event);\n                if (this._verifier.canSwitchStartEvent(event) && newEventWinsRace) {\n                    this._verifier.switchStartEvent(event);\n                } else if (!isRemoteEcho) {\n                    if (type === CANCEL_TYPE || this._verifier.events?.includes(type)) {\n                        this._verifier.handleEvent(event);\n                    }\n                }\n            }\n\n            if (newTransitions.length) {\n                // create QRCodeData if the other side can scan\n                // important this happens before emitting a phase change,\n                // so listeners can rely on it being there already\n                // We only do this for live events because it is important that\n                // we sign the keys that were in the QR code, and not the keys\n                // we happen to have at some later point in time.\n                if (isLiveEvent && newTransitions.some(t => t.phase === PHASE_READY)) {\n                    const shouldGenerateQrCode =\n                        this.otherPartySupportsMethod(SCAN_QR_CODE_METHOD, true);\n                    if (shouldGenerateQrCode) {\n                        this._qrCodeData = await QRCodeData.create(this, this.client);\n                    }\n                }\n\n                const lastTransition = newTransitions[newTransitions.length - 1];\n                const { phase } = lastTransition;\n\n                this.setupTimeout(phase);\n                // set phase as last thing as this emits the \"change\" event\n                this.setPhase(phase);\n            } else if (this._observeOnly !== wasObserveOnly) {\n                this.emit(VerificationRequestEvent.Change);\n            }\n        } finally {\n            // log events we processed so we can see from rageshakes what events were added to a request\n            logger.log(`Verification request ${this.channel.transactionId}: ` +\n                `${type} event with id:${event.getId()}, ` +\n                `content:${JSON.stringify(event.getContent())} ` +\n                `deviceId:${this.channel.deviceId}, ` +\n                `sender:${event.getSender()}, isSentByUs:${isSentByUs}, ` +\n                `isLiveEvent:${isLiveEvent}, isRemoteEcho:${isRemoteEcho}, ` +\n                `phase:${oldPhase}=>${this.phase}, ` +\n                `observeOnly:${wasObserveOnly}=>${this._observeOnly}`);\n        }\n    }\n\n    private setupTimeout(phase: Phase): void {\n        const shouldTimeout = !this.timeoutTimer && !this.observeOnly &&\n            phase === PHASE_REQUESTED;\n\n        if (shouldTimeout) {\n            this.timeoutTimer = setTimeout(this.cancelOnTimeout, this.timeout);\n        }\n        if (this.timeoutTimer) {\n            const shouldClear = phase === PHASE_STARTED ||\n                phase === PHASE_READY ||\n                phase === PHASE_DONE ||\n                phase === PHASE_CANCELLED;\n            if (shouldClear) {\n                clearTimeout(this.timeoutTimer);\n                this.timeoutTimer = null;\n            }\n        }\n    }\n\n    private cancelOnTimeout = () => {\n        try {\n            if (this.initiatedByMe) {\n                this.cancel({\n                    reason: \"Other party didn't accept in time\",\n                    code: \"m.timeout\",\n                });\n            } else {\n                this.cancel({\n                    reason: \"User didn't accept in time\",\n                    code: \"m.timeout\",\n                });\n            }\n        } catch (err) {\n            logger.error(\"Error while cancelling verification request\", err);\n        }\n    };\n\n    private async cancelOnError(type: string, event: MatrixEvent): Promise<boolean> {\n        if (type === START_TYPE) {\n            const method = event.getContent().method;\n            if (!this.verificationMethods.has(method)) {\n                await this.cancel(errorFromEvent(newUnknownMethodError()));\n                return true;\n            }\n        }\n\n        const isUnexpectedRequest = type === REQUEST_TYPE && this.phase !== PHASE_UNSENT;\n        const isUnexpectedReady = type === READY_TYPE && this.phase !== PHASE_REQUESTED;\n        // only if phase has passed from PHASE_UNSENT should we cancel, because events\n        // are allowed to come in in any order (at least with InRoomChannel). So we only know\n        // we're dealing with a valid request we should participate in once we've moved to PHASE_REQUESTED\n        // before that, we could be looking at somebody elses verification request and we just\n        // happen to be in the room\n        if (this.phase !== PHASE_UNSENT && (isUnexpectedRequest || isUnexpectedReady)) {\n            logger.warn(`Cancelling, unexpected ${type} verification ` +\n                `event from ${event.getSender()}`);\n            const reason = `Unexpected ${type} event in phase ${this.phase}`;\n            await this.cancel(errorFromEvent(newUnexpectedMessageError({ reason })));\n            return true;\n        }\n        return false;\n    }\n\n    private adjustObserveOnly(event: MatrixEvent, isLiveEvent = false): void {\n        // don't send out events for historical requests\n        if (!isLiveEvent) {\n            this._observeOnly = true;\n        }\n        if (this.calculateEventTimeout(event) < VERIFICATION_REQUEST_MARGIN) {\n            this._observeOnly = true;\n        }\n    }\n\n    private addEvent(type: string, event: MatrixEvent, isSentByUs = false): void {\n        if (isSentByUs) {\n            this.eventsByUs.set(type, event);\n        } else {\n            this.eventsByThem.set(type, event);\n        }\n\n        // once we know the userId of the other party (from the .request event)\n        // see if any event by anyone else crept into this.eventsByThem\n        if (type === REQUEST_TYPE) {\n            for (const [type, event] of this.eventsByThem.entries()) {\n                if (event.getSender() !== this.otherUserId) {\n                    this.eventsByThem.delete(type);\n                }\n            }\n            // also remember when we received the request event\n            this.requestReceivedAt = Date.now();\n        }\n    }\n\n    private createVerifier(\n        method: VerificationMethod,\n        startEvent: MatrixEvent = null,\n        targetDevice: ITargetDevice = null,\n    ): VerificationBase<any, any> {\n        if (!targetDevice) {\n            targetDevice = this.targetDevice;\n        }\n        const { userId, deviceId } = targetDevice;\n\n        const VerifierCtor = this.verificationMethods.get(method);\n        if (!VerifierCtor) {\n            logger.warn(\"could not find verifier constructor for method\", method);\n            return;\n        }\n        return new VerifierCtor(this.channel, this.client, userId, deviceId, startEvent, this);\n    }\n\n    private wasSentByOwnUser(event: MatrixEvent): boolean {\n        return event.getSender() === this.client.getUserId();\n    }\n\n    // only for .request, .ready or .start\n    private wasSentByOwnDevice(event: MatrixEvent): boolean {\n        if (!this.wasSentByOwnUser(event)) {\n            return false;\n        }\n        const content = event.getContent();\n        if (!content || content.from_device !== this.client.getDeviceId()) {\n            return false;\n        }\n        return true;\n    }\n\n    public onVerifierCancelled(): void {\n        this._cancelled = true;\n        // move to cancelled phase\n        const newTransitions = this.applyPhaseTransitions();\n        if (newTransitions.length) {\n            this.setPhase(newTransitions[newTransitions.length - 1].phase);\n        }\n    }\n\n    public onVerifierFinished(): void {\n        this.channel.send(\"m.key.verification.done\", {});\n        this.verifierHasFinished = true;\n        // move to .done phase\n        const newTransitions = this.applyPhaseTransitions();\n        if (newTransitions.length) {\n            this.setPhase(newTransitions[newTransitions.length - 1].phase);\n        }\n    }\n\n    public getEventFromOtherParty(type: string): MatrixEvent {\n        return this.eventsByThem.get(type);\n    }\n}\n",
    "// can't just do InvalidStoreError extends Error\n// because of http://babeljs.io/docs/usage/caveats/#classes\nexport function InvalidStoreError(reason, value) {\n    const message = `Store is invalid because ${reason}, ` +\n        `please stop the client, delete all data and start the client again`;\n    const instance = Reflect.construct(Error, [message]);\n    Reflect.setPrototypeOf(instance, Reflect.getPrototypeOf(this));\n    instance.reason = reason;\n    instance.value = value;\n    return instance;\n}\n\nInvalidStoreError.TOGGLED_LAZY_LOADING = \"TOGGLED_LAZY_LOADING\";\n\nInvalidStoreError.prototype = Object.create(Error.prototype, {\n  constructor: {\n    value: Error,\n    enumerable: false,\n    writable: true,\n    configurable: true,\n  },\n});\nReflect.setPrototypeOf(InvalidStoreError, Error);\n\nexport function InvalidCryptoStoreError(reason) {\n    const message = `Crypto store is invalid because ${reason}, ` +\n        `please stop the client, delete all data and start the client again`;\n    const instance = Reflect.construct(Error, [message]);\n    Reflect.setPrototypeOf(instance, Reflect.getPrototypeOf(this));\n    instance.reason = reason;\n    instance.name = 'InvalidCryptoStoreError';\n    return instance;\n}\n\nInvalidCryptoStoreError.TOO_NEW = \"TOO_NEW\";\n\nInvalidCryptoStoreError.prototype = Object.create(Error.prototype, {\n  constructor: {\n    value: Error,\n    enumerable: false,\n    writable: true,\n    configurable: true,\n  },\n});\nReflect.setPrototypeOf(InvalidCryptoStoreError, Error);\n\nexport class KeySignatureUploadError extends Error {\n  constructor(message, value) {\n    super(message);\n    this.value = value;\n  }\n}\n",
    "/*\nCopyright 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { MatrixClient } from \"./client\";\nimport { IEvent, MatrixEvent, MatrixEventEvent } from \"./models/event\";\n\nexport type EventMapper = (obj: Partial<IEvent>) => MatrixEvent;\n\nexport interface MapperOpts {\n    preventReEmit?: boolean;\n    decrypt?: boolean;\n}\n\nexport function eventMapperFor(client: MatrixClient, options: MapperOpts): EventMapper {\n    let preventReEmit = Boolean(options.preventReEmit);\n    const decrypt = options.decrypt !== false;\n\n    function mapper(plainOldJsObject: Partial<IEvent>) {\n        const room = client.getRoom(plainOldJsObject.room_id);\n\n        let event: MatrixEvent;\n        // If the event is already known to the room, let's re-use the model rather than duplicating.\n        // We avoid doing this to state events as they may be forward or backwards looking which tweaks behaviour.\n        if (room && plainOldJsObject.state_key === undefined) {\n            event = room.findEventById(plainOldJsObject.event_id);\n        }\n\n        if (!event || event.status) {\n            event = new MatrixEvent(plainOldJsObject);\n        } else {\n            // merge the latest unsigned data from the server\n            event.setUnsigned({ ...event.getUnsigned(), ...plainOldJsObject.unsigned });\n            // prevent doubling up re-emitters\n            preventReEmit = true;\n        }\n\n        const thread = room?.findThreadForEvent(event);\n        if (thread) {\n            event.setThread(thread);\n        }\n\n        if (event.isEncrypted()) {\n            if (!preventReEmit) {\n                client.reEmitter.reEmit(event, [\n                    MatrixEventEvent.Decrypted,\n                ]);\n            }\n            if (decrypt) {\n                client.decryptEventIfNeeded(event);\n            }\n        }\n\n        if (!preventReEmit) {\n            client.reEmitter.reEmit(event, [\n                MatrixEventEvent.Replaced,\n                MatrixEventEvent.VisibilityChange,\n            ]);\n            room?.reEmitter.reEmit(event, [\n                MatrixEventEvent.BeforeRedaction,\n            ]);\n        }\n        return event;\n    }\n\n    return mapper;\n}\n",
    "/*\nCopyright 2016 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { RelationType } from \"./@types/event\";\nimport { MatrixEvent } from \"./models/event\";\nimport {\n    FILTER_RELATED_BY_REL_TYPES,\n    FILTER_RELATED_BY_SENDERS,\n    THREAD_RELATION_TYPE,\n} from \"./models/thread\";\n\n/**\n * @module filter-component\n */\n\n/**\n * Checks if a value matches a given field value, which may be a * terminated\n * wildcard pattern.\n * @param {String} actualValue  The value to be compared\n * @param {String} filterValue  The filter pattern to be compared\n * @return {boolean} true if the actualValue matches the filterValue\n */\nfunction matchesWildcard(actualValue: string, filterValue: string): boolean {\n    if (filterValue.endsWith(\"*\")) {\n        const typePrefix = filterValue.slice(0, -1);\n        return actualValue.slice(0, typePrefix.length) === typePrefix;\n    } else {\n        return actualValue === filterValue;\n    }\n}\n\n/* eslint-disable camelcase */\nexport interface IFilterComponent {\n    types?: string[];\n    not_types?: string[];\n    rooms?: string[];\n    not_rooms?: string[];\n    senders?: string[];\n    not_senders?: string[];\n    contains_url?: boolean;\n    limit?: number;\n    related_by_senders?: Array<RelationType | string>;\n    related_by_rel_types?: string[];\n\n    // Unstable values\n    \"io.element.relation_senders\"?: Array<RelationType | string>;\n    \"io.element.relation_types\"?: string[];\n}\n/* eslint-enable camelcase */\n\n/**\n * FilterComponent is a section of a Filter definition which defines the\n * types, rooms, senders filters etc to be applied to a particular type of resource.\n * This is all ported over from synapse's Filter object.\n *\n * N.B. that synapse refers to these as 'Filters', and what js-sdk refers to as\n * 'Filters' are referred to as 'FilterCollections'.\n *\n * @constructor\n * @param {Object} filterJson the definition of this filter JSON, e.g. { 'contains_url': true }\n */\nexport class FilterComponent {\n    constructor(private filterJson: IFilterComponent, public readonly userId?: string) {}\n\n    /**\n     * Checks with the filter component matches the given event\n     * @param {MatrixEvent} event event to be checked against the filter\n     * @return {boolean} true if the event matches the filter\n     */\n    public check(event: MatrixEvent): boolean {\n        const bundledRelationships = event.getUnsigned()?.[\"m.relations\"] || {};\n        const relations: Array<string | RelationType> = Object.keys(bundledRelationships);\n        // Relation senders allows in theory a look-up of any senders\n        // however clients can only know about the current user participation status\n        // as sending a whole list of participants could be proven problematic in terms\n        // of performance\n        // This should be improved when bundled relationships solve that problem\n        const relationSenders = [];\n        if (this.userId && bundledRelationships?.[THREAD_RELATION_TYPE.name]?.current_user_participated) {\n            relationSenders.push(this.userId);\n        }\n\n        return this.checkFields(\n            event.getRoomId(),\n            event.getSender(),\n            event.getType(),\n            event.getContent() ? event.getContent().url !== undefined : false,\n            relations,\n            relationSenders,\n        );\n    }\n\n    /**\n     * Converts the filter component into the form expected over the wire\n     */\n    public toJSON(): object {\n        return {\n            \"types\": this.filterJson.types || null,\n            \"not_types\": this.filterJson.not_types || [],\n            \"rooms\": this.filterJson.rooms || null,\n            \"not_rooms\": this.filterJson.not_rooms || [],\n            \"senders\": this.filterJson.senders || null,\n            \"not_senders\": this.filterJson.not_senders || [],\n            \"contains_url\": this.filterJson.contains_url || null,\n            [FILTER_RELATED_BY_SENDERS.name]: this.filterJson[FILTER_RELATED_BY_SENDERS.name] || [],\n            [FILTER_RELATED_BY_REL_TYPES.name]: this.filterJson[FILTER_RELATED_BY_REL_TYPES.name] || [],\n        };\n    }\n\n    /**\n     * Checks whether the filter component matches the given event fields.\n     * @param {String} roomId        the roomId for the event being checked\n     * @param {String} sender        the sender of the event being checked\n     * @param {String} eventType     the type of the event being checked\n     * @param {boolean} containsUrl  whether the event contains a content.url field\n     * @param {boolean} relationTypes  whether has aggregated relation of the given type\n     * @param {boolean} relationSenders whether one of the relation is sent by the user listed\n     * @return {boolean} true if the event fields match the filter\n     */\n    private checkFields(\n        roomId: string,\n        sender: string,\n        eventType: string,\n        containsUrl: boolean,\n        relationTypes: Array<RelationType | string>,\n        relationSenders: string[],\n    ): boolean {\n        const literalKeys = {\n            \"rooms\": function(v: string): boolean {\n                return roomId === v;\n            },\n            \"senders\": function(v: string): boolean {\n                return sender === v;\n            },\n            \"types\": function(v: string): boolean {\n                return matchesWildcard(eventType, v);\n            },\n        };\n\n        for (let n = 0; n < Object.keys(literalKeys).length; n++) {\n            const name = Object.keys(literalKeys)[n];\n            const matchFunc = literalKeys[name];\n            const notName = \"not_\" + name;\n            const disallowedValues: string[] = this.filterJson[notName];\n            if (disallowedValues?.some(matchFunc)) {\n                return false;\n            }\n\n            const allowedValues: string[] = this.filterJson[name];\n            if (allowedValues && !allowedValues.some(matchFunc)) {\n                return false;\n            }\n        }\n\n        const containsUrlFilter = this.filterJson.contains_url;\n        if (containsUrlFilter !== undefined && containsUrlFilter !== containsUrl) {\n            return false;\n        }\n\n        const relationTypesFilter = this.filterJson[FILTER_RELATED_BY_REL_TYPES.name];\n        if (relationTypesFilter !== undefined) {\n            if (!this.arrayMatchesFilter(relationTypesFilter, relationTypes)) {\n                return false;\n            }\n        }\n\n        const relationSendersFilter = this.filterJson[FILTER_RELATED_BY_SENDERS.name];\n        if (relationSendersFilter !== undefined) {\n            if (!this.arrayMatchesFilter(relationSendersFilter, relationSenders)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    private arrayMatchesFilter(filter: any[], values: any[]): boolean {\n        return values.length > 0 && filter.every(value => {\n            return values.includes(value);\n        });\n    }\n\n    /**\n     * Filters a list of events down to those which match this filter component\n     * @param {MatrixEvent[]} events  Events to be checked against the filter component\n     * @return {MatrixEvent[]} events which matched the filter component\n     */\n    public filter(events: MatrixEvent[]): MatrixEvent[] {\n        return events.filter(this.check, this);\n    }\n\n    /**\n     * Returns the limit field for a given filter component, providing a default of\n     * 10 if none is otherwise specified. Cargo-culted from Synapse.\n     * @return {Number} the limit for this filter component.\n     */\n    public limit(): number {\n        return this.filterJson.limit !== undefined ? this.filterJson.limit : 10;\n    }\n}\n",
    "/*\nCopyright 2015 - 2021 Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * @module filter\n */\n\nimport {\n    EventType,\n    RelationType,\n} from \"./@types/event\";\nimport { FilterComponent, IFilterComponent } from \"./filter-component\";\nimport { MatrixEvent } from \"./models/event\";\n\n/**\n * @param {Object} obj\n * @param {string} keyNesting\n * @param {*} val\n */\nfunction setProp(obj: object, keyNesting: string, val: any) {\n    const nestedKeys = keyNesting.split(\".\");\n    let currentObj = obj;\n    for (let i = 0; i < (nestedKeys.length - 1); i++) {\n        if (!currentObj[nestedKeys[i]]) {\n            currentObj[nestedKeys[i]] = {};\n        }\n        currentObj = currentObj[nestedKeys[i]];\n    }\n    currentObj[nestedKeys[nestedKeys.length - 1]] = val;\n}\n\n/* eslint-disable camelcase */\nexport interface IFilterDefinition {\n    event_fields?: string[];\n    event_format?: \"client\" | \"federation\";\n    presence?: IFilterComponent;\n    account_data?: IFilterComponent;\n    room?: IRoomFilter;\n}\n\nexport interface IRoomEventFilter extends IFilterComponent {\n    lazy_load_members?: boolean;\n    include_redundant_members?: boolean;\n    types?: Array<EventType | string>;\n    related_by_senders?: Array<RelationType | string>;\n    related_by_rel_types?: string[];\n\n    // Unstable values\n    \"io.element.relation_senders\"?: Array<RelationType | string>;\n    \"io.element.relation_types\"?: string[];\n}\n\ninterface IStateFilter extends IRoomEventFilter {}\n\ninterface IRoomFilter {\n    not_rooms?: string[];\n    rooms?: string[];\n    ephemeral?: IRoomEventFilter;\n    include_leave?: boolean;\n    state?: IStateFilter;\n    timeline?: IRoomEventFilter;\n    account_data?: IRoomEventFilter;\n}\n/* eslint-enable camelcase */\n\n/**\n * Construct a new Filter.\n * @constructor\n * @param {string} userId The user ID for this filter.\n * @param {string=} filterId The filter ID if known.\n * @prop {string} userId The user ID of the filter\n * @prop {?string} filterId The filter ID\n */\nexport class Filter {\n    static LAZY_LOADING_MESSAGES_FILTER = {\n        lazy_load_members: true,\n    };\n\n    /**\n     * Create a filter from existing data.\n     * @static\n     * @param {string} userId\n     * @param {string} filterId\n     * @param {Object} jsonObj\n     * @return {Filter}\n     */\n    public static fromJson(userId: string, filterId: string, jsonObj: IFilterDefinition): Filter {\n        const filter = new Filter(userId, filterId);\n        filter.setDefinition(jsonObj);\n        return filter;\n    }\n\n    private definition: IFilterDefinition = {};\n    private roomFilter: FilterComponent;\n    private roomTimelineFilter: FilterComponent;\n\n    constructor(public readonly userId: string, public filterId?: string) {}\n\n    /**\n     * Get the ID of this filter on your homeserver (if known)\n     * @return {?string} The filter ID\n     */\n    getFilterId(): string | null {\n        return this.filterId;\n    }\n\n    /**\n     * Get the JSON body of the filter.\n     * @return {Object} The filter definition\n     */\n    getDefinition(): IFilterDefinition {\n        return this.definition;\n    }\n\n    /**\n     * Set the JSON body of the filter\n     * @param {Object} definition The filter definition\n     */\n    setDefinition(definition: IFilterDefinition) {\n        this.definition = definition;\n\n        // This is all ported from synapse's FilterCollection()\n\n        // definitions look something like:\n        // {\n        //   \"room\": {\n        //     \"rooms\": [\"!abcde:example.com\"],\n        //     \"not_rooms\": [\"!123456:example.com\"],\n        //     \"state\": {\n        //       \"types\": [\"m.room.*\"],\n        //       \"not_rooms\": [\"!726s6s6q:example.com\"],\n        //       \"lazy_load_members\": true,\n        //     },\n        //     \"timeline\": {\n        //       \"limit\": 10,\n        //       \"types\": [\"m.room.message\"],\n        //       \"not_rooms\": [\"!726s6s6q:example.com\"],\n        //       \"not_senders\": [\"@spam:example.com\"]\n        //       \"contains_url\": true\n        //     },\n        //     \"ephemeral\": {\n        //       \"types\": [\"m.receipt\", \"m.typing\"],\n        //       \"not_rooms\": [\"!726s6s6q:example.com\"],\n        //       \"not_senders\": [\"@spam:example.com\"]\n        //     }\n        //   },\n        //   \"presence\": {\n        //     \"types\": [\"m.presence\"],\n        //     \"not_senders\": [\"@alice:example.com\"]\n        //   },\n        //   \"event_format\": \"client\",\n        //   \"event_fields\": [\"type\", \"content\", \"sender\"]\n        // }\n\n        const roomFilterJson = definition.room;\n\n        // consider the top level rooms/not_rooms filter\n        const roomFilterFields: IRoomFilter = {};\n        if (roomFilterJson) {\n            if (roomFilterJson.rooms) {\n                roomFilterFields.rooms = roomFilterJson.rooms;\n            }\n            if (roomFilterJson.rooms) {\n                roomFilterFields.not_rooms = roomFilterJson.not_rooms;\n            }\n        }\n\n        this.roomFilter = new FilterComponent(roomFilterFields, this.userId);\n        this.roomTimelineFilter = new FilterComponent(roomFilterJson?.timeline || {}, this.userId);\n\n        // don't bother porting this from synapse yet:\n        // this._room_state_filter =\n        //     new FilterComponent(roomFilterJson.state || {});\n        // this._room_ephemeral_filter =\n        //     new FilterComponent(roomFilterJson.ephemeral || {});\n        // this._room_account_data_filter =\n        //     new FilterComponent(roomFilterJson.account_data || {});\n        // this._presence_filter =\n        //     new FilterComponent(definition.presence || {});\n        // this._account_data_filter =\n        //     new FilterComponent(definition.account_data || {});\n    }\n\n    /**\n     * Get the room.timeline filter component of the filter\n     * @return {FilterComponent} room timeline filter component\n     */\n    getRoomTimelineFilterComponent(): FilterComponent {\n        return this.roomTimelineFilter;\n    }\n\n    /**\n     * Filter the list of events based on whether they are allowed in a timeline\n     * based on this filter\n     * @param {MatrixEvent[]} events  the list of events being filtered\n     * @return {MatrixEvent[]} the list of events which match the filter\n     */\n    filterRoomTimeline(events: MatrixEvent[]): MatrixEvent[] {\n        return this.roomTimelineFilter.filter(this.roomFilter.filter(events));\n    }\n\n    /**\n     * Set the max number of events to return for each room's timeline.\n     * @param {Number} limit The max number of events to return for each room.\n     */\n    setTimelineLimit(limit: number) {\n        setProp(this.definition, \"room.timeline.limit\", limit);\n    }\n\n    setLazyLoadMembers(enabled: boolean) {\n        setProp(this.definition, \"room.state.lazy_load_members\", !!enabled);\n    }\n\n    /**\n     * Control whether left rooms should be included in responses.\n     * @param {boolean} includeLeave True to make rooms the user has left appear\n     * in responses.\n     */\n    setIncludeLeaveRooms(includeLeave: boolean) {\n        setProp(this.definition, \"room.include_leave\", includeLeave);\n    }\n}\n",
    "/*\nCopyright 2015, 2016 OpenMarket Ltd\nCopyright 2019 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * This is an internal module. See {@link MatrixHttpApi} for the public class.\n * @module http-api\n */\n\nimport { parse as parseContentType, ParsedMediaType } from \"content-type\";\n\nimport type { IncomingHttpHeaders, IncomingMessage } from \"http\";\nimport type { Request as _Request, CoreOptions } from \"request\";\n// we use our own implementation of setTimeout, so that if we get suspended in\n// the middle of a /sync, we cancel the sync as soon as we awake, rather than\n// waiting for the delay to elapse.\nimport * as callbacks from \"./realtime-callbacks\";\nimport { IUploadOpts } from \"./@types/requests\";\nimport { IAbortablePromise, IUsageLimit } from \"./@types/partials\";\nimport { IDeferred } from \"./utils\";\nimport { Callback } from \"./client\";\nimport * as utils from \"./utils\";\nimport { logger } from './logger';\nimport { TypedEventEmitter } from \"./models/typed-event-emitter\";\n\n/*\nTODO:\n- CS: complete register function (doing stages)\n- Identity server: linkEmail, authEmail, bindEmail, lookup3pid\n*/\n\n/**\n * A constant representing the URI path for release 0 of the Client-Server HTTP API.\n */\nexport const PREFIX_R0 = \"/_matrix/client/r0\";\n\n/**\n * A constant representing the URI path for release v1 of the Client-Server HTTP API.\n */\nexport const PREFIX_V1 = \"/_matrix/client/v1\";\n\n/**\n * A constant representing the URI path for as-yet unspecified Client-Server HTTP APIs.\n */\nexport const PREFIX_UNSTABLE = \"/_matrix/client/unstable\";\n\n/**\n * URI path for v1 of the the identity API\n * @deprecated Use v2.\n */\nexport const PREFIX_IDENTITY_V1 = \"/_matrix/identity/api/v1\";\n\n/**\n * URI path for the v2 identity API\n */\nexport const PREFIX_IDENTITY_V2 = \"/_matrix/identity/v2\";\n\n/**\n * URI path for the media repo API\n */\nexport const PREFIX_MEDIA_R0 = \"/_matrix/media/r0\";\n\ntype RequestProps = \"method\"\n    | \"withCredentials\"\n    | \"json\"\n    | \"headers\"\n    | \"qs\"\n    | \"body\"\n    | \"qsStringifyOptions\"\n    | \"useQuerystring\"\n    | \"timeout\";\n\nexport interface IHttpOpts {\n    baseUrl: string;\n    idBaseUrl?: string;\n    prefix: string;\n    onlyData: boolean;\n    accessToken?: string;\n    extraParams?: Record<string, string>;\n    localTimeoutMs?: number;\n    useAuthorizationHeader?: boolean;\n    request(opts: Pick<CoreOptions, RequestProps> & {\n        uri: string;\n        method: Method;\n        // eslint-disable-next-line camelcase\n        _matrix_opts: IHttpOpts;\n    }, callback: RequestCallback): IRequest;\n}\n\ninterface IRequest extends _Request {\n    onprogress?(e: unknown): void;\n}\n\ninterface IRequestOpts<T> {\n    prefix?: string;\n    localTimeoutMs?: number;\n    headers?: Record<string, string>;\n    json?: boolean; // defaults to true\n    qsStringifyOptions?: CoreOptions[\"qsStringifyOptions\"];\n    bodyParser?(body: string): T;\n\n    // Set to true to prevent the request function from emitting\n    // a Session.logged_out event. This is intended for use on\n    // endpoints where M_UNKNOWN_TOKEN is a valid/notable error\n    // response, such as with token refreshes.\n    inhibitLogoutEmit?: boolean;\n}\n\nexport interface IUpload {\n    loaded: number;\n    total: number;\n    promise: IAbortablePromise<unknown>;\n}\n\ninterface IContentUri {\n    base: string;\n    path: string;\n    params: {\n        // eslint-disable-next-line camelcase\n        access_token: string;\n    };\n}\n\ntype ResponseType<T, O extends IRequestOpts<T> | void = void> =\n    O extends { bodyParser: (body: string) => T } ? T :\n    O extends { json: false } ? string :\n    T;\n\ninterface IUploadResponse {\n    // eslint-disable-next-line camelcase\n    content_uri: string;\n}\n\n// This type's defaults only work for the Browser\n// in the Browser we default rawResponse = false & onlyContentUri = true\n// in Node we default rawResponse = true & onlyContentUri = false\nexport type UploadContentResponseType<O extends IUploadOpts> =\n    O extends undefined ? string :\n    O extends { rawResponse: true } ? string :\n    O extends { onlyContentUri: true } ? string :\n    O extends { rawResponse: false } ? IUploadResponse :\n    O extends { onlyContentUri: false } ? IUploadResponse :\n    string;\n\nexport enum Method {\n    Get = \"GET\",\n    Put = \"PUT\",\n    Post = \"POST\",\n    Delete = \"DELETE\",\n}\n\nexport type FileType = Document | XMLHttpRequestBodyInit;\n\nexport enum HttpApiEvent {\n    SessionLoggedOut = \"Session.logged_out\",\n    NoConsent = \"no_consent\",\n}\n\nexport type HttpApiEventHandlerMap = {\n    [HttpApiEvent.SessionLoggedOut]: (err: MatrixError) => void;\n    [HttpApiEvent.NoConsent]: (message: string, consentUri: string) => void;\n};\n\n/**\n * Construct a MatrixHttpApi.\n * @constructor\n * @param {EventEmitter} eventEmitter The event emitter to use for emitting events\n * @param {Object} opts The options to use for this HTTP API.\n * @param {string} opts.baseUrl Required. The base client-server URL e.g.\n * 'http://localhost:8008'.\n * @param {Function} opts.request Required. The function to call for HTTP\n * requests. This function must look like function(opts, callback){ ... }.\n * @param {string} opts.prefix Required. The matrix client prefix to use, e.g.\n * '/_matrix/client/r0'. See PREFIX_R0 and PREFIX_UNSTABLE for constants.\n *\n * @param {boolean} opts.onlyData True to return only the 'data' component of the\n * response (e.g. the parsed HTTP body). If false, requests will return an\n * object with the properties <tt>code</tt>, <tt>headers</tt> and <tt>data</tt>.\n *\n * @param {string=} opts.accessToken The access_token to send with requests. Can be\n * null to not send an access token.\n * @param {Object=} opts.extraParams Optional. Extra query parameters to send on\n * requests.\n * @param {Number=} opts.localTimeoutMs The default maximum amount of time to wait\n * before timing out the request. If not specified, there is no timeout.\n * @param {boolean} [opts.useAuthorizationHeader = false] Set to true to use\n * Authorization header instead of query param to send the access token to the server.\n */\nexport class MatrixHttpApi {\n    private uploads: IUpload[] = [];\n\n    constructor(\n        private eventEmitter: TypedEventEmitter<HttpApiEvent, HttpApiEventHandlerMap>,\n        public readonly opts: IHttpOpts,\n    ) {\n        utils.checkObjectHasKeys(opts, [\"baseUrl\", \"request\", \"prefix\"]);\n        opts.onlyData = !!opts.onlyData;\n        opts.useAuthorizationHeader = !!opts.useAuthorizationHeader;\n    }\n\n    /**\n     * Sets the base URL for the identity server\n     * @param {string} url The new base url\n     */\n    public setIdBaseUrl(url: string): void {\n        this.opts.idBaseUrl = url;\n    }\n\n    /**\n     * Get the content repository url with query parameters.\n     * @return {Object} An object with a 'base', 'path' and 'params' for base URL,\n     *          path and query parameters respectively.\n     */\n    public getContentUri(): IContentUri {\n        return {\n            base: this.opts.baseUrl,\n            path: \"/_matrix/media/r0/upload\",\n            params: {\n                access_token: this.opts.accessToken,\n            },\n        };\n    }\n\n    /**\n     * Upload content to the homeserver\n     *\n     * @param {object} file The object to upload. On a browser, something that\n     *   can be sent to XMLHttpRequest.send (typically a File).  Under node.js,\n     *   a Buffer, String or ReadStream.\n     *\n     * @param {object} opts  options object\n     *\n     * @param {string=} opts.name   Name to give the file on the server. Defaults\n     *   to <tt>file.name</tt>.\n     *\n     * @param {boolean=} opts.includeFilename if false will not send the filename,\n     *   e.g for encrypted file uploads where filename leaks are undesirable.\n     *   Defaults to true.\n     *\n     * @param {string=} opts.type   Content-type for the upload. Defaults to\n     *   <tt>file.type</tt>, or <tt>applicaton/octet-stream</tt>.\n     *\n     * @param {boolean=} opts.rawResponse Return the raw body, rather than\n     *   parsing the JSON. Defaults to false (except on node.js, where it\n     *   defaults to true for backwards compatibility).\n     *\n     * @param {boolean=} opts.onlyContentUri Just return the content URI,\n     *   rather than the whole body. Defaults to false (except on browsers,\n     *   where it defaults to true for backwards compatibility). Ignored if\n     *   opts.rawResponse is true.\n     *\n     * @param {Function=} opts.callback Deprecated. Optional. The callback to\n     *    invoke on success/failure. See the promise return values for more\n     *    information.\n     *\n     * @param {Function=} opts.progressHandler Optional. Called when a chunk of\n     *    data has been uploaded, with an object containing the fields `loaded`\n     *    (number of bytes transferred) and `total` (total size, if known).\n     *\n     * @return {Promise} Resolves to response object, as\n     *    determined by this.opts.onlyData, opts.rawResponse, and\n     *    opts.onlyContentUri.  Rejects with an error (usually a MatrixError).\n     */\n    public uploadContent<O extends IUploadOpts>(\n        file: FileType,\n        opts?: O,\n    ): IAbortablePromise<UploadContentResponseType<O>> {\n        if (utils.isFunction(opts)) {\n            // opts used to be callback, backwards compatibility\n            opts = {\n                callback: opts as unknown as IUploadOpts[\"callback\"],\n            } as O;\n        } else if (!opts) {\n            opts = {} as O;\n        }\n\n        // default opts.includeFilename to true (ignoring falsey values)\n        const includeFilename = opts.includeFilename !== false;\n\n        // if the file doesn't have a mime type, use a default since\n        // the HS errors if we don't supply one.\n        const contentType = opts.type || (file as File).type || 'application/octet-stream';\n        const fileName = opts.name || (file as File).name;\n\n        // We used to recommend setting file.stream to the thing to upload on\n        // Node.js. As of 2019-06-11, this is still in widespread use in various\n        // clients, so we should preserve this for simple objects used in\n        // Node.js. File API objects (via either the File or Blob interfaces) in\n        // the browser now define a `stream` method, which leads to trouble\n        // here, so we also check the type of `stream`.\n        let body = file;\n        const bodyStream = (body as File | Blob).stream; // this type is wrong but for legacy reasons is good enough\n        if (bodyStream && typeof bodyStream !== \"function\") {\n            logger.warn(\n                \"Using `file.stream` as the content to upload. Future \" +\n                \"versions of the js-sdk will change this to expect `file` to \" +\n                \"be the content directly.\",\n            );\n            body = bodyStream;\n        }\n\n        // backwards-compatibility hacks where we used to do different things\n        // between browser and node.\n        let rawResponse = opts.rawResponse;\n        if (rawResponse === undefined) {\n            if (global.XMLHttpRequest) {\n                rawResponse = false;\n            } else {\n                logger.warn(\n                    \"Returning the raw JSON from uploadContent(). Future \" +\n                    \"versions of the js-sdk will change this default, to \" +\n                    \"return the parsed object. Set opts.rawResponse=false \" +\n                    \"to change this behaviour now.\",\n                );\n                rawResponse = true;\n            }\n        }\n\n        let onlyContentUri = opts.onlyContentUri;\n        if (!rawResponse && onlyContentUri === undefined) {\n            if (global.XMLHttpRequest) {\n                logger.warn(\n                    \"Returning only the content-uri from uploadContent(). \" +\n                    \"Future versions of the js-sdk will change this \" +\n                    \"default, to return the whole response object. Set \" +\n                    \"opts.onlyContentUri=false to change this behaviour now.\",\n                );\n                onlyContentUri = true;\n            } else {\n                onlyContentUri = false;\n            }\n        }\n\n        // browser-request doesn't support File objects because it deep-copies\n        // the options using JSON.parse(JSON.stringify(options)). Instead of\n        // loading the whole file into memory as a string and letting\n        // browser-request base64 encode and then decode it again, we just\n        // use XMLHttpRequest directly.\n        // (browser-request doesn't support progress either, which is also kind\n        // of important here)\n\n        const upload = { loaded: 0, total: 0 } as IUpload;\n        let promise: IAbortablePromise<UploadContentResponseType<O>>;\n\n        // XMLHttpRequest doesn't parse JSON for us. request normally does, but\n        // we're setting opts.json=false so that it doesn't JSON-encode the\n        // request, which also means it doesn't JSON-decode the response. Either\n        // way, we have to JSON-parse the response ourselves.\n        let bodyParser = null;\n        if (!rawResponse) {\n            bodyParser = function(rawBody: string) {\n                let body = JSON.parse(rawBody);\n                if (onlyContentUri) {\n                    body = body.content_uri;\n                    if (body === undefined) {\n                        throw Error('Bad response');\n                    }\n                }\n                return body;\n            };\n        }\n\n        if (global.XMLHttpRequest) {\n            const defer = utils.defer<UploadContentResponseType<O>>();\n            const xhr = new global.XMLHttpRequest();\n            const cb = requestCallback(defer, opts.callback, this.opts.onlyData);\n\n            const timeoutFn = function() {\n                xhr.abort();\n                cb(new Error('Timeout'));\n            };\n\n            // set an initial timeout of 30s; we'll advance it each time we get a progress notification\n            let timeoutTimer = callbacks.setTimeout(timeoutFn, 30000);\n\n            xhr.onreadystatechange = function() {\n                let resp: string;\n                switch (xhr.readyState) {\n                    case global.XMLHttpRequest.DONE:\n                        callbacks.clearTimeout(timeoutTimer);\n                        try {\n                            if (xhr.status === 0) {\n                                throw new AbortError();\n                            }\n                            if (!xhr.responseText) {\n                                throw new Error('No response body.');\n                            }\n                            resp = xhr.responseText;\n                            if (bodyParser) {\n                                resp = bodyParser(resp);\n                            }\n                        } catch (err) {\n                            err.http_status = xhr.status;\n                            cb(err);\n                            return;\n                        }\n                        cb(undefined, xhr, resp);\n                        break;\n                }\n            };\n            xhr.upload.addEventListener(\"progress\", function(ev) {\n                callbacks.clearTimeout(timeoutTimer);\n                upload.loaded = ev.loaded;\n                upload.total = ev.total;\n                timeoutTimer = callbacks.setTimeout(timeoutFn, 30000);\n                if (opts.progressHandler) {\n                    opts.progressHandler({\n                        loaded: ev.loaded,\n                        total: ev.total,\n                    });\n                }\n            });\n            let url = this.opts.baseUrl + \"/_matrix/media/r0/upload\";\n\n            const queryArgs = [];\n\n            if (includeFilename && fileName) {\n                queryArgs.push(\"filename=\" + encodeURIComponent(fileName));\n            }\n\n            if (!this.opts.useAuthorizationHeader) {\n                queryArgs.push(\"access_token=\" + encodeURIComponent(this.opts.accessToken));\n            }\n\n            if (queryArgs.length > 0) {\n                url += \"?\" + queryArgs.join(\"&\");\n            }\n\n            xhr.open(\"POST\", url);\n            if (this.opts.useAuthorizationHeader) {\n                xhr.setRequestHeader(\"Authorization\", \"Bearer \" + this.opts.accessToken);\n            }\n            xhr.setRequestHeader(\"Content-Type\", contentType);\n            xhr.send(body);\n            promise = defer.promise as IAbortablePromise<UploadContentResponseType<O>>;\n\n            // dirty hack (as per doRequest) to allow the upload to be cancelled.\n            promise.abort = xhr.abort.bind(xhr);\n        } else {\n            const queryParams: Record<string, string> = {};\n\n            if (includeFilename && fileName) {\n                queryParams.filename = fileName;\n            }\n\n            const headers: Record<string, string> = { \"Content-Type\": contentType };\n\n            // authedRequest uses `request` which is no longer maintained.\n            // `request` has a bug where if the body is zero bytes then you get an error: `Argument error, options.body`.\n            // See https://github.com/request/request/issues/920\n            // if body looks like a byte array and empty then set the Content-Length explicitly as a workaround:\n            if ((body as unknown as ArrayLike<number>).length === 0) {\n                headers[\"Content-Length\"] = \"0\";\n            }\n\n            promise = this.authedRequest(\n                opts.callback, Method.Post, \"/upload\", queryParams, body, {\n                    prefix: \"/_matrix/media/r0\",\n                    headers,\n                    json: false,\n                    bodyParser,\n                },\n            );\n        }\n\n        // remove the upload from the list on completion\n        upload.promise = promise.finally(() => {\n            for (let i = 0; i < this.uploads.length; ++i) {\n                if (this.uploads[i] === upload) {\n                    this.uploads.splice(i, 1);\n                    return;\n                }\n            }\n        }) as IAbortablePromise<UploadContentResponseType<O>>;\n\n        // copy our dirty abort() method to the new promise\n        upload.promise.abort = promise.abort;\n        this.uploads.push(upload);\n\n        return upload.promise as IAbortablePromise<UploadContentResponseType<O>>;\n    }\n\n    public cancelUpload(promise: IAbortablePromise<unknown>): boolean {\n        if (promise.abort) {\n            promise.abort();\n            return true;\n        }\n        return false;\n    }\n\n    public getCurrentUploads(): IUpload[] {\n        return this.uploads;\n    }\n\n    public idServerRequest<T>(\n        callback: Callback<T>,\n        method: Method,\n        path: string,\n        params: Record<string, string | string[]>,\n        prefix: string,\n        accessToken: string,\n    ): Promise<T> {\n        if (!this.opts.idBaseUrl) {\n            throw new Error(\"No identity server base URL set\");\n        }\n\n        const fullUri = this.opts.idBaseUrl + prefix + path;\n\n        if (callback !== undefined && !utils.isFunction(callback)) {\n            throw Error(\n                \"Expected callback to be a function but got \" + typeof callback,\n            );\n        }\n\n        const opts = {\n            uri: fullUri,\n            method,\n            withCredentials: false,\n            json: true, // we want a JSON response if we can\n            _matrix_opts: this.opts,\n            headers: {},\n        } as Parameters<IHttpOpts[\"request\"]>[0];\n\n        if (method === Method.Get) {\n            opts.qs = params;\n        } else if (typeof params === \"object\") {\n            opts.json = params;\n        }\n\n        if (accessToken) {\n            opts.headers['Authorization'] = `Bearer ${accessToken}`;\n        }\n\n        const defer = utils.defer<T>();\n        this.opts.request(opts, requestCallback(defer, callback, this.opts.onlyData));\n        return defer.promise;\n    }\n\n    /**\n     * Perform an authorised request to the homeserver.\n     * @param {Function} callback Optional. The callback to invoke on\n     * success/failure. See the promise return values for more information.\n     * @param {string} method The HTTP method e.g. \"GET\".\n     * @param {string} path The HTTP path <b>after</b> the supplied prefix e.g.\n     * \"/createRoom\".\n     *\n     * @param {Object=} queryParams A dict of query params (these will NOT be\n     * urlencoded). If unspecified, there will be no query params.\n     *\n     * @param {Object} [data] The HTTP JSON body.\n     *\n     * @param {Object|Number=} opts additional options. If a number is specified,\n     * this is treated as `opts.localTimeoutMs`.\n     *\n     * @param {Number=} opts.localTimeoutMs The maximum amount of time to wait before\n     * timing out the request. If not specified, there is no timeout.\n     *\n     * @param {string=} opts.prefix The full prefix to use e.g.\n     * \"/_matrix/client/v2_alpha\". If not specified, uses this.opts.prefix.\n     *\n     * @param {Object=} opts.headers map of additional request headers\n     *\n     * @return {Promise} Resolves to <code>{data: {Object},\n     * headers: {Object}, code: {Number}}</code>.\n     * If <code>onlyData</code> is set, this will resolve to the <code>data</code>\n     * object only.\n     * @return {module:http-api.MatrixError} Rejects with an error if a problem\n     * occurred. This includes network problems and Matrix-specific error JSON.\n     */\n    public authedRequest<T, O extends IRequestOpts<T> = IRequestOpts<T>>(\n        callback: Callback<T>,\n        method: Method,\n        path: string,\n        queryParams?: Record<string, string | string[]>,\n        data?: CoreOptions[\"body\"],\n        opts?: O | number, // number is legacy\n    ): IAbortablePromise<ResponseType<T, O>> {\n        if (!queryParams) queryParams = {};\n        let requestOpts = (opts || {}) as O;\n\n        if (this.opts.useAuthorizationHeader) {\n            if (isFinite(opts as number)) {\n                // opts used to be localTimeoutMs\n                requestOpts = {\n                    localTimeoutMs: opts as number,\n                } as O;\n            }\n\n            if (!requestOpts.headers) {\n                requestOpts.headers = {};\n            }\n            if (!requestOpts.headers.Authorization) {\n                requestOpts.headers.Authorization = \"Bearer \" + this.opts.accessToken;\n            }\n            if (queryParams.access_token) {\n                delete queryParams.access_token;\n            }\n        } else if (!queryParams.access_token) {\n            queryParams.access_token = this.opts.accessToken;\n        }\n\n        const requestPromise = this.request<T, O>(callback, method, path, queryParams, data, requestOpts);\n\n        requestPromise.catch((err: MatrixError) => {\n            if (err.errcode == 'M_UNKNOWN_TOKEN' && !requestOpts?.inhibitLogoutEmit) {\n                this.eventEmitter.emit(HttpApiEvent.SessionLoggedOut, err);\n            } else if (err.errcode == 'M_CONSENT_NOT_GIVEN') {\n                this.eventEmitter.emit(HttpApiEvent.NoConsent, err.message, err.data.consent_uri);\n            }\n        });\n\n        // return the original promise, otherwise tests break due to it having to\n        // go around the event loop one more time to process the result of the request\n        return requestPromise;\n    }\n\n    /**\n     * Perform a request to the homeserver without any credentials.\n     * @param {Function} callback Optional. The callback to invoke on\n     * success/failure. See the promise return values for more information.\n     * @param {string} method The HTTP method e.g. \"GET\".\n     * @param {string} path The HTTP path <b>after</b> the supplied prefix e.g.\n     * \"/createRoom\".\n     *\n     * @param {Object=} queryParams A dict of query params (these will NOT be\n     * urlencoded). If unspecified, there will be no query params.\n     *\n     * @param {Object} [data] The HTTP JSON body.\n     *\n     * @param {Object=} opts additional options\n     *\n     * @param {Number=} opts.localTimeoutMs The maximum amount of time to wait before\n     * timing out the request. If not specified, there is no timeout.\n     *\n     * @param {string=} opts.prefix The full prefix to use e.g.\n     * \"/_matrix/client/v2_alpha\". If not specified, uses this.opts.prefix.\n     *\n     * @param {Object=} opts.headers map of additional request headers\n     *\n     * @return {Promise} Resolves to <code>{data: {Object},\n     * headers: {Object}, code: {Number}}</code>.\n     * If <code>onlyData</code> is set, this will resolve to the <code>data</code>\n     * object only.\n     * @return {module:http-api.MatrixError} Rejects with an error if a problem\n     * occurred. This includes network problems and Matrix-specific error JSON.\n     */\n    public request<T, O extends IRequestOpts<T> = IRequestOpts<T>>(\n        callback: Callback<T>,\n        method: Method,\n        path: string,\n        queryParams?: CoreOptions[\"qs\"],\n        data?: CoreOptions[\"body\"],\n        opts?: O,\n    ): IAbortablePromise<ResponseType<T, O>> {\n        const prefix = opts?.prefix ?? this.opts.prefix;\n        const fullUri = this.opts.baseUrl + prefix + path;\n\n        return this.requestOtherUrl<T, O>(callback, method, fullUri, queryParams, data, opts);\n    }\n\n    /**\n     * Perform a request to an arbitrary URL.\n     * @param {Function} callback Optional. The callback to invoke on\n     * success/failure. See the promise return values for more information.\n     * @param {string} method The HTTP method e.g. \"GET\".\n     * @param {string} uri The HTTP URI\n     *\n     * @param {Object=} queryParams A dict of query params (these will NOT be\n     * urlencoded). If unspecified, there will be no query params.\n     *\n     * @param {Object} [data] The HTTP JSON body.\n     *\n     * @param {Object=} opts additional options\n     *\n     * @param {Number=} opts.localTimeoutMs The maximum amount of time to wait before\n     * timing out the request. If not specified, there is no timeout.\n     *\n     * @param {string=} opts.prefix The full prefix to use e.g.\n     * \"/_matrix/client/v2_alpha\". If not specified, uses this.opts.prefix.\n     *\n     * @param {Object=} opts.headers map of additional request headers\n     *\n     * @return {Promise} Resolves to <code>{data: {Object},\n     * headers: {Object}, code: {Number}}</code>.\n     * If <code>onlyData</code> is set, this will resolve to the <code>data</code>\n     * object only.\n     * @return {module:http-api.MatrixError} Rejects with an error if a problem\n     * occurred. This includes network problems and Matrix-specific error JSON.\n     */\n    public requestOtherUrl<T, O extends IRequestOpts<T> = IRequestOpts<T>>(\n        callback: Callback<T>,\n        method: Method,\n        uri: string,\n        queryParams?: CoreOptions[\"qs\"],\n        data?: CoreOptions[\"body\"],\n        opts?: O | number, // number is legacy\n    ): IAbortablePromise<ResponseType<T, O>> {\n        let requestOpts = (opts || {}) as O;\n        if (isFinite(opts as number)) {\n            // opts used to be localTimeoutMs\n            requestOpts = {\n                localTimeoutMs: opts as number,\n            } as O;\n        }\n\n        return this.doRequest<T, O>(callback, method, uri, queryParams, data, requestOpts);\n    }\n\n    /**\n     * Form and return a homeserver request URL based on the given path\n     * params and prefix.\n     * @param {string} path The HTTP path <b>after</b> the supplied prefix e.g.\n     * \"/createRoom\".\n     * @param {Object} queryParams A dict of query params (these will NOT be\n     * urlencoded).\n     * @param {string} prefix The full prefix to use e.g.\n     * \"/_matrix/client/v2_alpha\".\n     * @return {string} URL\n     */\n    public getUrl(path: string, queryParams: CoreOptions[\"qs\"], prefix: string): string {\n        let queryString = \"\";\n        if (queryParams) {\n            queryString = \"?\" + utils.encodeParams(queryParams);\n        }\n        return this.opts.baseUrl + prefix + path + queryString;\n    }\n\n    /**\n     * @private\n     *\n     * @param {function} callback\n     * @param {string} method\n     * @param {string} uri\n     * @param {object} queryParams\n     * @param {object|string} data\n     * @param {object=} opts\n     *\n     * @param {boolean} [opts.json =true] Json-encode data before sending, and\n     *   decode response on receipt. (We will still json-decode error\n     *   responses, even if this is false.)\n     *\n     * @param {object=} opts.headers  extra request headers\n     *\n     * @param {number=} opts.localTimeoutMs client-side timeout for the\n     *    request. Default timeout if falsy.\n     *\n     * @param {function=} opts.bodyParser function to parse the body of the\n     *    response before passing it to the promise and callback.\n     *\n     * @return {Promise} a promise which resolves to either the\n     * response object (if this.opts.onlyData is truthy), or the parsed\n     * body. Rejects\n     *\n     * Generic T is the callback/promise resolve type\n     * Generic O should be inferred\n     */\n    private doRequest<T, O extends IRequestOpts<T> = IRequestOpts<T>>(\n        callback: Callback<T>,\n        method: Method,\n        uri: string,\n        queryParams?: Record<string, string>,\n        data?: CoreOptions[\"body\"],\n        opts?: O,\n    ): IAbortablePromise<ResponseType<T, O>> {\n        if (callback !== undefined && !utils.isFunction(callback)) {\n            throw Error(\"Expected callback to be a function but got \" + typeof callback);\n        }\n\n        if (this.opts.extraParams) {\n            queryParams = {\n                ...(queryParams || {}),\n                ...this.opts.extraParams,\n            };\n        }\n\n        const headers = Object.assign({}, opts.headers || {});\n        if (!opts) opts = {} as O;\n        const json = opts.json ?? true;\n        let bodyParser = opts.bodyParser;\n\n        // we handle the json encoding/decoding here, because request and\n        // browser-request make a mess of it. Specifically, they attempt to\n        // json-decode plain-text error responses, which in turn means that the\n        // actual error gets swallowed by a SyntaxError.\n\n        if (json) {\n            if (data) {\n                data = JSON.stringify(data);\n                headers['content-type'] = 'application/json';\n            }\n\n            if (!headers['accept']) {\n                headers['accept'] = 'application/json';\n            }\n\n            if (bodyParser === undefined) {\n                bodyParser = function(rawBody: string) {\n                    return JSON.parse(rawBody);\n                };\n            }\n        }\n\n        const defer = utils.defer<T>();\n\n        let timeoutId: number;\n        let timedOut = false;\n        let req: IRequest;\n        const localTimeoutMs = opts.localTimeoutMs || this.opts.localTimeoutMs;\n\n        const resetTimeout = () => {\n            if (localTimeoutMs) {\n                if (timeoutId) {\n                    callbacks.clearTimeout(timeoutId);\n                }\n                timeoutId = callbacks.setTimeout(function() {\n                    timedOut = true;\n                    req?.abort?.();\n                    defer.reject(new MatrixError({\n                        error: \"Locally timed out waiting for a response\",\n                        errcode: \"ORG.MATRIX.JSSDK_TIMEOUT\",\n                        timeout: localTimeoutMs,\n                    }));\n                }, localTimeoutMs);\n            }\n        };\n        resetTimeout();\n\n        const reqPromise = defer.promise as IAbortablePromise<ResponseType<T, O>>;\n\n        try {\n            req = this.opts.request(\n                {\n                    uri: uri,\n                    method: method,\n                    withCredentials: false,\n                    qs: queryParams,\n                    qsStringifyOptions: opts.qsStringifyOptions,\n                    useQuerystring: true,\n                    body: data,\n                    json: false,\n                    timeout: localTimeoutMs,\n                    headers: headers || {},\n                    _matrix_opts: this.opts,\n                },\n                (err, response, body) => {\n                    if (localTimeoutMs) {\n                        callbacks.clearTimeout(timeoutId);\n                        if (timedOut) {\n                            return; // already rejected promise\n                        }\n                    }\n\n                    const handlerFn = requestCallback(defer, callback, this.opts.onlyData, bodyParser);\n                    handlerFn(err, response, body);\n                },\n            );\n            if (req) {\n                // This will only work in a browser, where opts.request is the\n                // `browser-request` import. Currently, `request` does not support progress\n                // updates - see https://github.com/request/request/pull/2346.\n                // `browser-request` returns an XHRHttpRequest which exposes `onprogress`\n                if ('onprogress' in req) {\n                    req.onprogress = (e) => {\n                        // Prevent the timeout from rejecting the deferred promise if progress is\n                        // seen with the request\n                        resetTimeout();\n                    };\n                }\n\n                // FIXME: This is EVIL, but I can't think of a better way to expose\n                // abort() operations on underlying HTTP requests :(\n                if (req.abort) {\n                    reqPromise.abort = req.abort.bind(req);\n                }\n            }\n        } catch (ex) {\n            defer.reject(ex);\n            if (callback) {\n                callback(ex);\n            }\n        }\n        return reqPromise;\n    }\n}\n\ntype RequestCallback = (err?: Error, response?: XMLHttpRequest | IncomingMessage, body?: string) => void;\n\n// if using onlyData=false then wrap your expected data type in this generic\nexport interface IResponse<T> {\n    code: number;\n    data: T;\n    headers?: IncomingHttpHeaders;\n}\n\nfunction getStatusCode(response: XMLHttpRequest | IncomingMessage): number {\n    return (response as XMLHttpRequest).status || (response as IncomingMessage).statusCode;\n}\n\n/*\n * Returns a callback that can be invoked by an HTTP request on completion,\n * that will either resolve or reject the given defer as well as invoke the\n * given userDefinedCallback (if any).\n *\n * HTTP errors are transformed into javascript errors and the deferred is rejected.\n *\n * If bodyParser is given, it is used to transform the body of the successful\n * responses before passing to the defer/callback.\n *\n * If onlyData is true, the defer/callback is invoked with the body of the\n * response, otherwise the result object (with `code` and `data` fields)\n *\n */\nfunction requestCallback<T>(\n    defer: IDeferred<T>,\n    userDefinedCallback?: Callback<T>,\n    onlyData = false,\n    bodyParser?: (body: string) => T,\n): RequestCallback {\n    return function(err: Error, response: XMLHttpRequest | IncomingMessage, body: string): void {\n        if (err) {\n            // the unit tests use matrix-mock-request, which throw the string \"aborted\" when aborting a request.\n            // See https://github.com/matrix-org/matrix-mock-request/blob/3276d0263a561b5b8326b47bae720578a2c7473a/src/index.js#L48\n            const aborted = err.name === \"AbortError\" || (err as any as string) === \"aborted\";\n            if (!aborted && !(err instanceof MatrixError)) {\n                // browser-request just throws normal Error objects,\n                // not `TypeError`s like fetch does. So just assume any\n                // error is due to the connection.\n                err = new ConnectionError(\"request failed\", err);\n            }\n        }\n\n        let data: T | string = body;\n\n        if (!err) {\n            try {\n                if (getStatusCode(response) >= 400) {\n                    err = parseErrorResponse(response, body);\n                } else if (bodyParser) {\n                    data = bodyParser(body);\n                }\n            } catch (e) {\n                err = new Error(`Error parsing server response: ${e}`);\n            }\n        }\n\n        if (err) {\n            defer.reject(err);\n            userDefinedCallback?.(err);\n        } else if (onlyData) {\n            defer.resolve(data as T);\n            userDefinedCallback?.(null, data as T);\n        } else {\n            const res: IResponse<T> = {\n                code: getStatusCode(response),\n\n                // XXX: why do we bother with this? it doesn't work for\n                // XMLHttpRequest, so clearly we don't use it.\n                headers: (response as IncomingMessage).headers,\n                data: data as T,\n            };\n            // XXX: the variations in caller-expected types here are horrible,\n            // typescript doesn't do conditional types based on runtime values\n            defer.resolve(res as any as T);\n            userDefinedCallback?.(null, res as any as T);\n        }\n    };\n}\n\n/**\n * Attempt to turn an HTTP error response into a Javascript Error.\n *\n * If it is a JSON response, we will parse it into a MatrixError. Otherwise\n * we return a generic Error.\n *\n * @param {XMLHttpRequest|http.IncomingMessage} response response object\n * @param {String} body raw body of the response\n * @returns {Error}\n */\nfunction parseErrorResponse(response: XMLHttpRequest | IncomingMessage, body?: string) {\n    const httpStatus = getStatusCode(response);\n    const contentType = getResponseContentType(response);\n\n    let err;\n    if (contentType) {\n        if (contentType.type === 'application/json') {\n            const jsonBody = typeof(body) === 'object' ? body : JSON.parse(body);\n            err = new MatrixError(jsonBody);\n        } else if (contentType.type === 'text/plain') {\n            err = new Error(`Server returned ${httpStatus} error: ${body}`);\n        }\n    }\n\n    if (!err) {\n        err = new Error(`Server returned ${httpStatus} error`);\n    }\n    err.httpStatus = httpStatus;\n    return err;\n}\n\n/**\n * extract the Content-Type header from the response object, and\n * parse it to a `{type, parameters}` object.\n *\n * returns null if no content-type header could be found.\n *\n * @param {XMLHttpRequest|http.IncomingMessage} response response object\n * @returns {{type: String, parameters: Object}?} parsed content-type header, or null if not found\n */\nfunction getResponseContentType(response: XMLHttpRequest | IncomingMessage): ParsedMediaType {\n    let contentType;\n    if ((response as XMLHttpRequest).getResponseHeader) {\n        // XMLHttpRequest provides getResponseHeader\n        contentType = (response as XMLHttpRequest).getResponseHeader(\"Content-Type\");\n    } else if ((response as IncomingMessage).headers) {\n        // request provides http.IncomingMessage which has a message.headers map\n        contentType = (response as IncomingMessage).headers['content-type'] || null;\n    }\n\n    if (!contentType) {\n        return null;\n    }\n\n    try {\n        return parseContentType(contentType);\n    } catch (e) {\n        throw new Error(`Error parsing Content-Type '${contentType}': ${e}`);\n    }\n}\n\ninterface IErrorJson extends Partial<IUsageLimit> {\n    [key: string]: any; // extensible\n    errcode?: string;\n    error?: string;\n}\n\n/**\n * Construct a Matrix error. This is a JavaScript Error with additional\n * information specific to the standard Matrix error response.\n * @constructor\n * @param {Object} errorJson The Matrix error JSON returned from the homeserver.\n * @prop {string} errcode The Matrix 'errcode' value, e.g. \"M_FORBIDDEN\".\n * @prop {string} name Same as MatrixError.errcode but with a default unknown string.\n * @prop {string} message The Matrix 'error' value, e.g. \"Missing token.\"\n * @prop {Object} data The raw Matrix error JSON used to construct this object.\n * @prop {integer} httpStatus The numeric HTTP status code given\n */\nexport class MatrixError extends Error {\n    public readonly errcode: string;\n    public readonly data: IErrorJson;\n    public httpStatus?: number; // set by http-api\n\n    constructor(errorJson: IErrorJson = {}) {\n        super(`MatrixError: ${errorJson.errcode}`);\n        this.errcode = errorJson.errcode;\n        this.name = errorJson.errcode || \"Unknown error code\";\n        this.message = errorJson.error || \"Unknown message\";\n        this.data = errorJson;\n    }\n}\n\n/**\n * Construct a ConnectionError. This is a JavaScript Error indicating\n * that a request failed because of some error with the connection, either\n * CORS was not correctly configured on the server, the server didn't response,\n * the request timed out, or the internet connection on the client side went down.\n * @constructor\n */\nexport class ConnectionError extends Error {\n    constructor(message: string, cause: Error = undefined) {\n        super(message + (cause ? `: ${cause.message}` : \"\"));\n    }\n\n    get name() {\n        return \"ConnectionError\";\n    }\n}\n\nexport class AbortError extends Error {\n    constructor() {\n        super(\"Operation aborted\");\n    }\n\n    get name() {\n        return \"AbortError\";\n    }\n}\n\n/**\n * Retries a network operation run in a callback.\n * @param  {number}   maxAttempts maximum attempts to try\n * @param  {Function} callback    callback that returns a promise of the network operation. If rejected with ConnectionError, it will be retried by calling the callback again.\n * @return {any} the result of the network operation\n * @throws {ConnectionError} If after maxAttempts the callback still throws ConnectionError\n */\nexport async function retryNetworkOperation<T>(maxAttempts: number, callback: () => T): Promise<T> {\n    let attempts = 0;\n    let lastConnectionError = null;\n    while (attempts < maxAttempts) {\n        try {\n            if (attempts > 0) {\n                const timeout = 1000 * Math.pow(2, attempts);\n                logger.log(`network operation failed ${attempts} times,` +\n                    ` retrying in ${timeout}ms...`);\n                await new Promise(r => setTimeout(r, timeout));\n            }\n            return await callback();\n        } catch (err) {\n            if (err instanceof ConnectionError) {\n                attempts += 1;\n                lastConnectionError = err;\n            } else {\n                throw err;\n            }\n        }\n    }\n    throw lastConnectionError;\n}\n",
    "/*\nCopyright 2019 New Vector Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * Check if an IndexedDB database exists. The only way to do so is to try opening it, so\n * we do that and then delete it did not exist before.\n *\n * @param {Object} indexedDB The `indexedDB` interface\n * @param {string} dbName The database name to test for\n * @returns {boolean} Whether the database exists\n */\nexport function exists(indexedDB: IDBFactory, dbName: string): Promise<boolean> {\n    return new Promise<boolean>((resolve, reject) => {\n        let exists = true;\n        const req = indexedDB.open(dbName);\n        req.onupgradeneeded = () => {\n            // Since we did not provide an explicit version when opening, this event\n            // should only fire if the DB did not exist before at any version.\n            exists = false;\n        };\n        req.onblocked = () => reject(req.error);\n        req.onsuccess = () => {\n            const db = req.result;\n            db.close();\n            if (!exists) {\n                // The DB did not exist before, but has been created as part of this\n                // existence check. Delete it now to restore previous state. Delete can\n                // actually take a while to complete in some browsers, so don't wait for\n                // it. This won't block future open calls that a store might issue next to\n                // properly set up the DB.\n                indexedDB.deleteDatabase(dbName);\n            }\n            resolve(exists);\n        };\n        req.onerror = ev => reject(req.error);\n    });\n}\n",
    "/*\nCopyright 2016 OpenMarket Ltd\nCopyright 2017 Vector Creations Ltd\nCopyright 2019 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/** @module interactive-auth */\n\nimport { logger } from './logger';\nimport { MatrixClient } from \"./client\";\nimport { defer, IDeferred } from \"./utils\";\n\nconst EMAIL_STAGE_TYPE = \"m.login.email.identity\";\nconst MSISDN_STAGE_TYPE = \"m.login.msisdn\";\n\ninterface IFlow {\n    stages: AuthType[];\n}\n\nexport interface IInputs {\n    emailAddress?: string;\n    phoneCountry?: string;\n    phoneNumber?: string;\n    registrationToken?: string;\n}\n\nexport interface IStageStatus {\n    emailSid?: string;\n    errcode?: string;\n    error?: string;\n}\n\nexport interface IAuthData {\n    session?: string;\n    completed?: string[];\n    flows?: IFlow[];\n    params?: Record<string, Record<string, any>>;\n    errcode?: string;\n    error?: string;\n}\n\nexport enum AuthType {\n    Password = \"m.login.password\",\n    Recaptcha = \"m.login.recaptcha\",\n    Terms = \"m.login.terms\",\n    Email = \"m.login.email.identity\",\n    Msisdn = \"m.login.msisdn\",\n    Sso = \"m.login.sso\",\n    SsoUnstable = \"org.matrix.login.sso\",\n    Dummy = \"m.login.dummy\",\n    RegistrationToken = \"m.login.registration_token\",\n    // For backwards compatability with servers that have not yet updated to\n    // use the stable \"m.login.registration_token\" type.\n    // The authentication flow is the same in both cases.\n    UnstableRegistrationToken = \"org.matrix.msc3231.login.registration_token\",\n}\n\nexport interface IAuthDict {\n    // [key: string]: any;\n    type?: string;\n    session?: string;\n    // TODO: Remove `user` once servers support proper UIA\n    // See https://github.com/vector-im/element-web/issues/10312\n    user?: string;\n    identifier?: any;\n    password?: string;\n    response?: string;\n    // TODO: Remove `threepid_creds` once servers support proper UIA\n    // See https://github.com/vector-im/element-web/issues/10312\n    // See https://github.com/matrix-org/matrix-doc/issues/2220\n    // eslint-disable-next-line camelcase\n    threepid_creds?: any;\n    threepidCreds?: any;\n    // For m.login.registration_token type\n    token?: string;\n}\n\nclass NoAuthFlowFoundError extends Error {\n    public name = \"NoAuthFlowFoundError\";\n\n    // eslint-disable-next-line @typescript-eslint/naming-convention, camelcase\n    constructor(m: string, public readonly required_stages: string[], public readonly flows: IFlow[]) {\n        super(m);\n    }\n}\n\ninterface IOpts {\n    matrixClient: MatrixClient;\n    authData?: IAuthData;\n    inputs?: IInputs;\n    sessionId?: string;\n    clientSecret?: string;\n    emailSid?: string;\n    doRequest(auth: IAuthData, background: boolean): Promise<IAuthData>;\n    stateUpdated(nextStage: AuthType, status: IStageStatus): void;\n    requestEmailToken(email: string, secret: string, attempt: number, session: string): Promise<{ sid: string }>;\n    busyChanged?(busy: boolean): void;\n    startAuthStage?(nextStage: string): Promise<void>; // LEGACY\n}\n\n/**\n * Abstracts the logic used to drive the interactive auth process.\n *\n * <p>Components implementing an interactive auth flow should instantiate one of\n * these, passing in the necessary callbacks to the constructor. They should\n * then call attemptAuth, which will return a promise which will resolve or\n * reject when the interactive-auth process completes.\n *\n * <p>Meanwhile, calls will be made to the startAuthStage and doRequest\n * callbacks, and information gathered from the user can be submitted with\n * submitAuthDict.\n *\n * @constructor\n * @alias module:interactive-auth\n *\n * @param {object} opts  options object\n *\n * @param {object} opts.matrixClient A matrix client to use for the auth process\n *\n * @param {object?} opts.authData error response from the last request. If\n *    null, a request will be made with no auth before starting.\n *\n * @param {function(object?): Promise} opts.doRequest\n *     called with the new auth dict to submit the request. Also passes a\n *     second deprecated arg which is a flag set to true if this request\n *     is a background request. The busyChanged callback should be used\n *     instead of the background flag. Should return a promise which resolves\n *     to the successful response or rejects with a MatrixError.\n *\n * @param {function(boolean): Promise} opts.busyChanged\n *     called whenever the interactive auth logic becomes busy submitting\n *     information provided by the user or finishes. After this has been\n *     called with true the UI should indicate that a request is in progress\n *     until it is called again with false.\n *\n * @param {function(string, object?)} opts.stateUpdated\n *     called when the status of the UI auth changes, ie. when the state of\n *     an auth stage changes of when the auth flow moves to a new stage.\n *     The arguments are: the login type (eg m.login.password); and an object\n *     which is either an error or an informational object specific to the\n *     login type. If the 'errcode' key is defined, the object is an error,\n *     and has keys:\n *         errcode: string, the textual error code, eg. M_UNKNOWN\n *         error: string, human readable string describing the error\n *\n *     The login type specific objects are as follows:\n *         m.login.email.identity:\n *          * emailSid: string, the sid of the active email auth session\n *\n * @param {object?} opts.inputs Inputs provided by the user and used by different\n *     stages of the auto process. The inputs provided will affect what flow is chosen.\n *\n * @param {string?} opts.inputs.emailAddress An email address. If supplied, a flow\n *     using email verification will be chosen.\n *\n * @param {string?} opts.inputs.phoneCountry An ISO two letter country code. Gives\n *     the country that opts.phoneNumber should be resolved relative to.\n *\n * @param {string?} opts.inputs.phoneNumber A phone number. If supplied, a flow\n *     using phone number validation will be chosen.\n *\n * @param {string?} opts.sessionId If resuming an existing interactive auth session,\n *     the sessionId of that session.\n *\n * @param {string?} opts.clientSecret If resuming an existing interactive auth session,\n *     the client secret for that session\n *\n * @param {string?} opts.emailSid If returning from having completed m.login.email.identity\n *     auth, the sid for the email verification session.\n *\n * @param {function?} opts.requestEmailToken A function that takes the email address (string),\n *     clientSecret (string), attempt number (int) and sessionId (string) and calls the\n *     relevant requestToken function and returns the promise returned by that function.\n *     If the resulting promise rejects, the rejection will propagate through to the\n *     attemptAuth promise.\n *\n */\nexport class InteractiveAuth {\n    private readonly matrixClient: MatrixClient;\n    private readonly inputs: IInputs;\n    private readonly clientSecret: string;\n    private readonly requestCallback: IOpts[\"doRequest\"];\n    private readonly busyChangedCallback?: IOpts[\"busyChanged\"];\n    private readonly stateUpdatedCallback: IOpts[\"stateUpdated\"];\n    private readonly requestEmailTokenCallback: IOpts[\"requestEmailToken\"];\n\n    private data: IAuthData;\n    private emailSid?: string;\n    private requestingEmailToken = false;\n    private attemptAuthDeferred: IDeferred<IAuthData> = null;\n    private chosenFlow: IFlow = null;\n    private currentStage: string = null;\n\n    // if we are currently trying to submit an auth dict (which includes polling)\n    // the promise the will resolve/reject when it completes\n    private submitPromise: Promise<void> = null;\n\n    constructor(opts: IOpts) {\n        this.matrixClient = opts.matrixClient;\n        this.data = opts.authData || {};\n        this.requestCallback = opts.doRequest;\n        this.busyChangedCallback = opts.busyChanged;\n        // startAuthStage included for backwards compat\n        this.stateUpdatedCallback = opts.stateUpdated || opts.startAuthStage;\n        this.requestEmailTokenCallback = opts.requestEmailToken;\n        this.inputs = opts.inputs || {};\n\n        if (opts.sessionId) this.data.session = opts.sessionId;\n        this.clientSecret = opts.clientSecret || this.matrixClient.generateClientSecret();\n        this.emailSid = opts.emailSid ?? null;\n    }\n\n    /**\n     * begin the authentication process.\n     *\n     * @return {Promise} which resolves to the response on success,\n     * or rejects with the error on failure. Rejects with NoAuthFlowFoundError if\n     *     no suitable authentication flow can be found\n     */\n    public attemptAuth(): Promise<IAuthData> {\n        // This promise will be quite long-lived and will resolve when the\n        // request is authenticated and completes successfully.\n        this.attemptAuthDeferred = defer();\n        // pluck the promise out now, as doRequest may clear before we return\n        const promise = this.attemptAuthDeferred.promise;\n\n        // if we have no flows, try a request to acquire the flows\n        if (!this.data?.flows) {\n            this.busyChangedCallback?.(true);\n            // use the existing sessionId, if one is present.\n            let auth = null;\n            if (this.data.session) {\n                auth = {\n                    session: this.data.session,\n                };\n            }\n            this.doRequest(auth).finally(() => {\n                this.busyChangedCallback?.(false);\n            });\n        } else {\n            this.startNextAuthStage();\n        }\n\n        return promise;\n    }\n\n    /**\n     * Poll to check if the auth session or current stage has been\n     * completed out-of-band. If so, the attemptAuth promise will\n     * be resolved.\n     */\n    public async poll(): Promise<void> {\n        if (!this.data.session) return;\n        // likewise don't poll if there is no auth session in progress\n        if (!this.attemptAuthDeferred) return;\n        // if we currently have a request in flight, there's no point making\n        // another just to check what the status is\n        if (this.submitPromise) return;\n\n        let authDict: IAuthDict = {};\n        if (this.currentStage == EMAIL_STAGE_TYPE) {\n            // The email can be validated out-of-band, but we need to provide the\n            // creds so the HS can go & check it.\n            if (this.emailSid) {\n                const creds: Record<string, string> = {\n                    sid: this.emailSid,\n                    client_secret: this.clientSecret,\n                };\n                if (await this.matrixClient.doesServerRequireIdServerParam()) {\n                    const idServerParsedUrl = new URL(this.matrixClient.getIdentityServerUrl());\n                    creds.id_server = idServerParsedUrl.host;\n                }\n                authDict = {\n                    type: EMAIL_STAGE_TYPE,\n                    // TODO: Remove `threepid_creds` once servers support proper UIA\n                    // See https://github.com/matrix-org/synapse/issues/5665\n                    // See https://github.com/matrix-org/matrix-doc/issues/2220\n                    threepid_creds: creds,\n                    threepidCreds: creds,\n                };\n            }\n        }\n\n        this.submitAuthDict(authDict, true);\n    }\n\n    /**\n     * get the auth session ID\n     *\n     * @return {string} session id\n     */\n    public getSessionId(): string {\n        return this.data ? this.data.session : undefined;\n    }\n\n    /**\n     * get the client secret used for validation sessions\n     * with the identity server.\n     *\n     * @return {string} client secret\n     */\n    public getClientSecret(): string {\n        return this.clientSecret;\n    }\n\n    /**\n     * get the server params for a given stage\n     *\n     * @param {string} loginType login type for the stage\n     * @return {object?} any parameters from the server for this stage\n     */\n    public getStageParams(loginType: string): Record<string, any> {\n        return this.data.params?.[loginType];\n    }\n\n    public getChosenFlow(): IFlow {\n        return this.chosenFlow;\n    }\n\n    /**\n     * submit a new auth dict and fire off the request. This will either\n     * make attemptAuth resolve/reject, or cause the startAuthStage callback\n     * to be called for a new stage.\n     *\n     * @param {object} authData new auth dict to send to the server. Should\n     *    include a `type` property denoting the login type, as well as any\n     *    other params for that stage.\n     * @param {boolean} background If true, this request failing will not result\n     *    in the attemptAuth promise being rejected. This can be set to true\n     *    for requests that just poll to see if auth has been completed elsewhere.\n     */\n    public async submitAuthDict(authData: IAuthDict, background = false): Promise<void> {\n        if (!this.attemptAuthDeferred) {\n            throw new Error(\"submitAuthDict() called before attemptAuth()\");\n        }\n\n        if (!background) {\n            this.busyChangedCallback?.(true);\n        }\n\n        // if we're currently trying a request, wait for it to finish\n        // as otherwise we can get multiple 200 responses which can mean\n        // things like multiple logins for register requests.\n        // (but discard any exceptions as we only care when its done,\n        // not whether it worked or not)\n        while (this.submitPromise) {\n            try {\n                await this.submitPromise;\n            } catch (e) {\n            }\n        }\n\n        // use the sessionid from the last request, if one is present.\n        let auth: IAuthDict;\n        if (this.data.session) {\n            auth = {\n                session: this.data.session,\n            };\n            Object.assign(auth, authData);\n        } else {\n            auth = authData;\n        }\n\n        try {\n            // NB. the 'background' flag is deprecated by the busyChanged\n            // callback and is here for backwards compat\n            this.submitPromise = this.doRequest(auth, background);\n            await this.submitPromise;\n        } finally {\n            this.submitPromise = null;\n            if (!background) {\n                this.busyChangedCallback?.(false);\n            }\n        }\n    }\n\n    /**\n     * Gets the sid for the email validation session\n     * Specific to m.login.email.identity\n     *\n     * @returns {string} The sid of the email auth session\n     */\n    public getEmailSid(): string {\n        return this.emailSid;\n    }\n\n    /**\n     * Sets the sid for the email validation session\n     * This must be set in order to successfully poll for completion\n     * of the email validation.\n     * Specific to m.login.email.identity\n     *\n     * @param {string} sid The sid for the email validation session\n     */\n    public setEmailSid(sid: string): void {\n        this.emailSid = sid;\n    }\n\n    /**\n     * Fire off a request, and either resolve the promise, or call\n     * startAuthStage.\n     *\n     * @private\n     * @param {object?} auth new auth dict, including session id\n     * @param {boolean?} background If true, this request is a background poll, so it\n     *    failing will not result in the attemptAuth promise being rejected.\n     *    This can be set to true for requests that just poll to see if auth has\n     *    been completed elsewhere.\n     */\n    private async doRequest(auth: IAuthData, background = false): Promise<void> {\n        try {\n            const result = await this.requestCallback(auth, background);\n            this.attemptAuthDeferred.resolve(result);\n            this.attemptAuthDeferred = null;\n        } catch (error) {\n            // sometimes UI auth errors don't come with flows\n            const errorFlows = error.data?.flows ?? null;\n            const haveFlows = this.data.flows || Boolean(errorFlows);\n            if (error.httpStatus !== 401 || !error.data || !haveFlows) {\n                // doesn't look like an interactive-auth failure.\n                if (!background) {\n                    this.attemptAuthDeferred?.reject(error);\n                } else {\n                    // We ignore all failures here (even non-UI auth related ones)\n                    // since we don't want to suddenly fail if the internet connection\n                    // had a blip whilst we were polling\n                    logger.log(\"Background poll request failed doing UI auth: ignoring\", error);\n                }\n            }\n            // if the error didn't come with flows, completed flows or session ID,\n            // copy over the ones we have. Synapse sometimes sends responses without\n            // any UI auth data (eg. when polling for email validation, if the email\n            // has not yet been validated). This appears to be a Synapse bug, which\n            // we workaround here.\n            if (!error.data.flows && !error.data.completed && !error.data.session) {\n                error.data.flows = this.data.flows;\n                error.data.completed = this.data.completed;\n                error.data.session = this.data.session;\n            }\n            this.data = error.data;\n            try {\n                this.startNextAuthStage();\n            } catch (e) {\n                this.attemptAuthDeferred.reject(e);\n                this.attemptAuthDeferred = null;\n                return;\n            }\n\n            if (\n                !this.emailSid &&\n                !this.requestingEmailToken &&\n                this.chosenFlow.stages.includes(AuthType.Email)\n            ) {\n                // If we've picked a flow with email auth, we send the email\n                // now because we want the request to fail as soon as possible\n                // if the email address is not valid (ie. already taken or not\n                // registered, depending on what the operation is).\n                this.requestingEmailToken = true;\n                try {\n                    const requestTokenResult = await this.requestEmailTokenCallback(\n                        this.inputs.emailAddress,\n                        this.clientSecret,\n                        1, // TODO: Multiple send attempts?\n                        this.data.session,\n                    );\n                    this.emailSid = requestTokenResult.sid;\n                    // NB. promise is not resolved here - at some point, doRequest\n                    // will be called again and if the user has jumped through all\n                    // the hoops correctly, auth will be complete and the request\n                    // will succeed.\n                    // Also, we should expose the fact that this request has compledted\n                    // so clients can know that the email has actually been sent.\n                } catch (e) {\n                    // we failed to request an email token, so fail the request.\n                    // This could be due to the email already beeing registered\n                    // (or not being registered, depending on what we're trying\n                    // to do) or it could be a network failure. Either way, pass\n                    // the failure up as the user can't complete auth if we can't\n                    // send the email, for whatever reason.\n                    this.attemptAuthDeferred.reject(e);\n                    this.attemptAuthDeferred = null;\n                } finally {\n                    this.requestingEmailToken = false;\n                }\n            }\n        }\n    }\n\n    /**\n     * Pick the next stage and call the callback\n     *\n     * @private\n     * @throws {NoAuthFlowFoundError} If no suitable authentication flow can be found\n     */\n    private startNextAuthStage(): void {\n        const nextStage = this.chooseStage();\n        if (!nextStage) {\n            throw new Error(\"No incomplete flows from the server\");\n        }\n        this.currentStage = nextStage;\n\n        if (nextStage === AuthType.Dummy) {\n            this.submitAuthDict({\n                type: 'm.login.dummy',\n            });\n            return;\n        }\n\n        if (this.data && this.data.errcode || this.data.error) {\n            this.stateUpdatedCallback(nextStage, {\n                errcode: this.data.errcode || \"\",\n                error: this.data.error || \"\",\n            });\n            return;\n        }\n\n        const stageStatus: IStageStatus = {};\n        if (nextStage == EMAIL_STAGE_TYPE) {\n            stageStatus.emailSid = this.emailSid;\n        }\n        this.stateUpdatedCallback(nextStage, stageStatus);\n    }\n\n    /**\n     * Pick the next auth stage\n     *\n     * @private\n     * @return {string?} login type\n     * @throws {NoAuthFlowFoundError} If no suitable authentication flow can be found\n     */\n    private chooseStage(): AuthType {\n        if (this.chosenFlow === null) {\n            this.chosenFlow = this.chooseFlow();\n        }\n        logger.log(\"Active flow => %s\", JSON.stringify(this.chosenFlow));\n        const nextStage = this.firstUncompletedStage(this.chosenFlow);\n        logger.log(\"Next stage: %s\", nextStage);\n        return nextStage;\n    }\n\n    /**\n     * Pick one of the flows from the returned list\n     * If a flow using all of the inputs is found, it will\n     * be returned, otherwise, null will be returned.\n     *\n     * Only flows using all given inputs are chosen because it\n     * is likely to be surprising if the user provides a\n     * credential and it is not used. For example, for registration,\n     * this could result in the email not being used which would leave\n     * the account with no means to reset a password.\n     *\n     * @private\n     * @return {object} flow\n     * @throws {NoAuthFlowFoundError} If no suitable authentication flow can be found\n     */\n    private chooseFlow(): IFlow {\n        const flows = this.data.flows || [];\n\n        // we've been given an email or we've already done an email part\n        const haveEmail = Boolean(this.inputs.emailAddress) || Boolean(this.emailSid);\n        const haveMsisdn = (\n            Boolean(this.inputs.phoneCountry) &&\n            Boolean(this.inputs.phoneNumber)\n        );\n\n        for (const flow of flows) {\n            let flowHasEmail = false;\n            let flowHasMsisdn = false;\n            for (const stage of flow.stages) {\n                if (stage === EMAIL_STAGE_TYPE) {\n                    flowHasEmail = true;\n                } else if (stage == MSISDN_STAGE_TYPE) {\n                    flowHasMsisdn = true;\n                }\n            }\n\n            if (flowHasEmail == haveEmail && flowHasMsisdn == haveMsisdn) {\n                return flow;\n            }\n        }\n\n        const requiredStages: string[] = [];\n        if (haveEmail) requiredStages.push(EMAIL_STAGE_TYPE);\n        if (haveMsisdn) requiredStages.push(MSISDN_STAGE_TYPE);\n        // Throw an error with a fairly generic description, but with more\n        // information such that the app can give a better one if so desired.\n        throw new NoAuthFlowFoundError(\"No appropriate authentication flow found\", requiredStages, flows);\n    }\n\n    /**\n     * Get the first uncompleted stage in the given flow\n     *\n     * @private\n     * @param {object} flow\n     * @return {string} login type\n     */\n    private firstUncompletedStage(flow: IFlow): AuthType {\n        const completed = this.data.completed || [];\n        for (let i = 0; i < flow.stages.length; ++i) {\n            const stageType = flow.stages[i];\n            if (completed.indexOf(stageType) === -1) {\n                return stageType;\n            }\n        }\n    }\n}\n",
    "/*\nCopyright 2018 André Jaenisch\nCopyright 2019, 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * @module logger\n */\n\nimport log, { Logger } from \"loglevel\";\n\n// This is to demonstrate, that you can use any namespace you want.\n// Namespaces allow you to turn on/off the logging for specific parts of the\n// application.\n// An idea would be to control this via an environment variable (on Node.js).\n// See https://www.npmjs.com/package/debug to see how this could be implemented\n// Part of #332 is introducing a logging library in the first place.\nconst DEFAULT_NAMESPACE = \"matrix\";\n\n// because rageshakes in react-sdk hijack the console log, also at module load time,\n// initializing the logger here races with the initialization of rageshakes.\n// to avoid the issue, we override the methodFactory of loglevel that binds to the\n// console methods at initialization time by a factory that looks up the console methods\n// when logging so we always get the current value of console methods.\nlog.methodFactory = function(methodName, logLevel, loggerName) {\n    return function(...args) {\n        /* eslint-disable @typescript-eslint/no-invalid-this */\n        if (this.prefix) {\n            args.unshift(this.prefix);\n        }\n        /* eslint-enable @typescript-eslint/no-invalid-this */\n        const supportedByConsole = methodName === \"error\" ||\n            methodName === \"warn\" ||\n            methodName === \"trace\" ||\n            methodName === \"info\";\n        /* eslint-disable no-console */\n        if (supportedByConsole) {\n            return console[methodName](...args);\n        } else {\n            return console.log(...args);\n        }\n        /* eslint-enable no-console */\n    };\n};\n\n/**\n * Drop-in replacement for <code>console</code> using {@link https://www.npmjs.com/package/loglevel|loglevel}.\n * Can be tailored down to specific use cases if needed.\n */\nexport const logger: PrefixedLogger = log.getLogger(DEFAULT_NAMESPACE);\nlogger.setLevel(log.levels.DEBUG, false);\n\nexport interface PrefixedLogger extends Logger {\n    withPrefix?: (prefix: string) => PrefixedLogger;\n    prefix?: string;\n}\n\nfunction extendLogger(logger: PrefixedLogger) {\n    logger.withPrefix = function(prefix: string): PrefixedLogger {\n        const existingPrefix = this.prefix || \"\";\n        return getPrefixedLogger(existingPrefix + prefix);\n    };\n}\n\nextendLogger(logger);\n\nfunction getPrefixedLogger(prefix: string): PrefixedLogger {\n    const prefixLogger: PrefixedLogger = log.getLogger(`${DEFAULT_NAMESPACE}-${prefix}`);\n    if (prefixLogger.prefix !== prefix) {\n        // Only do this setup work the first time through, as loggers are saved by name.\n        extendLogger(prefixLogger);\n        prefixLogger.prefix = prefix;\n        prefixLogger.setLevel(log.levels.DEBUG, false);\n    }\n    return prefixLogger;\n}\n",
    "/*\nCopyright 2015-2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { MemoryCryptoStore } from \"./crypto/store/memory-crypto-store\";\nimport { MemoryStore } from \"./store/memory\";\nimport { MatrixScheduler } from \"./scheduler\";\nimport { MatrixClient } from \"./client\";\nimport { ICreateClientOpts } from \"./client\";\nimport { DeviceTrustLevel } from \"./crypto/CrossSigning\";\nimport { ISecretStorageKeyInfo } from \"./crypto/api\";\n\nexport * from \"./client\";\nexport * from \"./http-api\";\nexport * from \"./autodiscovery\";\nexport * from \"./sync-accumulator\";\nexport * from \"./errors\";\nexport * from \"./models/beacon\";\nexport * from \"./models/event\";\nexport * from \"./models/room\";\nexport * from \"./models/event-timeline\";\nexport * from \"./models/event-timeline-set\";\nexport * from \"./models/room-member\";\nexport * from \"./models/room-state\";\nexport * from \"./models/user\";\nexport * from \"./scheduler\";\nexport * from \"./filter\";\nexport * from \"./timeline-window\";\nexport * from \"./interactive-auth\";\nexport * from \"./service-types\";\nexport * from \"./store/memory\";\nexport * from \"./store/indexeddb\";\nexport * from \"./store/session/webstorage\";\nexport * from \"./crypto/store/memory-crypto-store\";\nexport * from \"./crypto/store/indexeddb-crypto-store\";\nexport * from \"./content-repo\";\nexport * from './@types/event';\nexport * from './@types/PushRules';\nexport * from './@types/partials';\nexport * from './@types/requests';\nexport * from './@types/search';\nexport * from './models/room-summary';\nexport * as ContentHelpers from \"./content-helpers\";\nexport {\n    createNewMatrixCall,\n} from \"./webrtc/call\";\n\n// expose the underlying request object so different environments can use\n// different request libs (e.g. request or browser-request)\nlet requestInstance;\n\n/**\n * The function used to perform HTTP requests. Only use this if you want to\n * use a different HTTP library, e.g. Angular's <code>$http</code>. This should\n * be set prior to calling {@link createClient}.\n * @param {requestFunction} r The request function to use.\n */\nexport function request(r) {\n    requestInstance = r;\n}\n\n/**\n * Return the currently-set request function.\n * @return {requestFunction} The current request function.\n */\nexport function getRequest() {\n    return requestInstance;\n}\n\n/**\n * Apply wrapping code around the request function. The wrapper function is\n * installed as the new request handler, and when invoked it is passed the\n * previous value, along with the options and callback arguments.\n * @param {requestWrapperFunction} wrapper The wrapping function.\n */\nexport function wrapRequest(wrapper) {\n    const origRequest = requestInstance;\n    requestInstance = function(options, callback) {\n        return wrapper(origRequest, options, callback);\n    };\n}\n\nlet cryptoStoreFactory = () => new MemoryCryptoStore;\n\n/**\n * Configure a different factory to be used for creating crypto stores\n *\n * @param {Function} fac  a function which will return a new\n *    {@link module:crypto.store.base~CryptoStore}.\n */\nexport function setCryptoStoreFactory(fac) {\n    cryptoStoreFactory = fac;\n}\n\nexport interface ICryptoCallbacks {\n    getCrossSigningKey?: (keyType: string, pubKey: string) => Promise<Uint8Array>;\n    saveCrossSigningKeys?: (keys: Record<string, Uint8Array>) => void;\n    shouldUpgradeDeviceVerifications?: (\n        users: Record<string, any>\n    ) => Promise<string[]>;\n    getSecretStorageKey?: (\n        keys: {keys: Record<string, ISecretStorageKeyInfo>}, name: string\n    ) => Promise<[string, Uint8Array] | null>;\n    cacheSecretStorageKey?: (\n        keyId: string, keyInfo: ISecretStorageKeyInfo, key: Uint8Array\n    ) => void;\n    onSecretRequested?: (\n        userId: string, deviceId: string,\n        requestId: string, secretName: string, deviceTrust: DeviceTrustLevel\n    ) => Promise<string>;\n    getDehydrationKey?: (\n        keyInfo: ISecretStorageKeyInfo,\n        checkFunc: (key: Uint8Array) => void,\n    ) => Promise<Uint8Array>;\n    getBackupKey?: () => Promise<Uint8Array>;\n}\n\n/**\n * Construct a Matrix Client. Similar to {@link module:client.MatrixClient}\n * except that the 'request', 'store' and 'scheduler' dependencies are satisfied.\n * @param {(Object|string)} opts The configuration options for this client. If\n * this is a string, it is assumed to be the base URL. These configuration\n * options will be passed directly to {@link module:client.MatrixClient}.\n * @param {Object} opts.store If not set, defaults to\n * {@link module:store/memory.MemoryStore}.\n * @param {Object} opts.scheduler If not set, defaults to\n * {@link module:scheduler~MatrixScheduler}.\n * @param {requestFunction} opts.request If not set, defaults to the function\n * supplied to {@link request} which defaults to the request module from NPM.\n *\n * @param {module:crypto.store.base~CryptoStore=} opts.cryptoStore\n *    crypto store implementation. Calls the factory supplied to\n *    {@link setCryptoStoreFactory} if unspecified; or if no factory has been\n *    specified, uses a default implementation (indexeddb in the browser,\n *    in-memory otherwise).\n *\n * @return {MatrixClient} A new matrix client.\n * @see {@link module:client.MatrixClient} for the full list of options for\n * <code>opts</code>.\n */\nexport function createClient(opts: ICreateClientOpts | string) {\n    if (typeof opts === \"string\") {\n        opts = {\n            \"baseUrl\": opts as string,\n        };\n    }\n    opts.request = opts.request || requestInstance;\n    opts.store = opts.store || new MemoryStore({\n        localStorage: global.localStorage,\n    });\n    opts.scheduler = opts.scheduler || new MatrixScheduler();\n    opts.cryptoStore = opts.cryptoStore || cryptoStoreFactory();\n    return new MatrixClient(opts);\n}\n\n/**\n * The request function interface for performing HTTP requests. This matches the\n * API for the {@link https://github.com/request/request#requestoptions-callback|\n * request NPM module}. The SDK will attempt to call this function in order to\n * perform an HTTP request.\n * @callback requestFunction\n * @param {Object} opts The options for this HTTP request.\n * @param {string} opts.uri The complete URI.\n * @param {string} opts.method The HTTP method.\n * @param {Object} opts.qs The query parameters to append to the URI.\n * @param {Object} opts.body The JSON-serializable object.\n * @param {boolean} opts.json True if this is a JSON request.\n * @param {Object} opts._matrix_opts The underlying options set for\n * {@link MatrixHttpApi}.\n * @param {requestCallback} callback The request callback.\n */\n\n/**\n * A wrapper for the request function interface.\n * @callback requestWrapperFunction\n * @param {requestFunction} origRequest The underlying request function being\n * wrapped\n * @param {Object} opts The options for this HTTP request, given in the same\n * form as {@link requestFunction}.\n * @param {requestCallback} callback The request callback.\n */\n\n/**\n  * The request callback interface for performing HTTP requests. This matches the\n  * API for the {@link https://github.com/request/request#requestoptions-callback|\n  * request NPM module}. The SDK will implement a callback which meets this\n  * interface in order to handle the HTTP response.\n  * @callback requestCallback\n  * @param {Error} err The error if one occurred, else falsey.\n  * @param {Object} response The HTTP response which consists of\n  * <code>{statusCode: {Number}, headers: {Object}}</code>\n  * @param {Object} body The parsed HTTP response body.\n  */\n",
    "/*\nCopyright 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { MatrixClient } from \"../client\";\nimport { IEncryptedFile, RelationType, UNSTABLE_MSC3089_BRANCH } from \"../@types/event\";\nimport { IContent, MatrixEvent } from \"./event\";\nimport { MSC3089TreeSpace } from \"./MSC3089TreeSpace\";\nimport { EventTimeline } from \"./event-timeline\";\nimport { FileType } from \"../http-api\";\nimport type { ISendEventResponse } from \"..\";\n\n/**\n * Represents a [MSC3089](https://github.com/matrix-org/matrix-doc/pull/3089) branch - a reference\n * to a file (leaf) in the tree. Note that this is UNSTABLE and subject to breaking changes\n * without notice.\n */\nexport class MSC3089Branch {\n    public constructor(\n        private client: MatrixClient,\n        public readonly indexEvent: MatrixEvent,\n        public readonly directory: MSC3089TreeSpace,\n    ) {\n        // Nothing to do\n    }\n\n    /**\n     * The file ID.\n     */\n    public get id(): string {\n        const stateKey = this.indexEvent.getStateKey();\n        if (!stateKey) {\n            throw new Error(\"State key not found for branch\");\n        }\n        return stateKey;\n    }\n\n    /**\n     * Whether this branch is active/valid.\n     */\n    public get isActive(): boolean {\n        return this.indexEvent.getContent()[\"active\"] === true;\n    }\n\n    /**\n     * Version for the file, one-indexed.\n     */\n    public get version(): number {\n        return this.indexEvent.getContent()[\"version\"] ?? 1;\n    }\n\n    private get roomId(): string {\n        return this.indexEvent.getRoomId();\n    }\n\n    /**\n     * Deletes the file from the tree, including all prior edits/versions.\n     * @returns {Promise<void>} Resolves when complete.\n     */\n    public async delete(): Promise<void> {\n        await this.client.sendStateEvent(this.roomId, UNSTABLE_MSC3089_BRANCH.name, {}, this.id);\n        await this.client.redactEvent(this.roomId, this.id);\n\n        const nextVersion = (await this.getVersionHistory())[1]; // [0] will be us\n        if (nextVersion) await nextVersion.delete(); // implicit recursion\n    }\n\n    /**\n     * Gets the name for this file.\n     * @returns {string} The name, or \"Unnamed File\" if unknown.\n     */\n    public getName(): string {\n        return this.indexEvent.getContent()['name'] || \"Unnamed File\";\n    }\n\n    /**\n     * Sets the name for this file.\n     * @param {string} name The new name for this file.\n     * @returns {Promise<void>} Resolves when complete.\n     */\n    public async setName(name: string): Promise<void> {\n        await this.client.sendStateEvent(this.roomId, UNSTABLE_MSC3089_BRANCH.name, {\n            ...this.indexEvent.getContent(),\n            name: name,\n        }, this.id);\n    }\n\n    /**\n     * Gets whether or not a file is locked.\n     * @returns {boolean} True if locked, false otherwise.\n     */\n    public isLocked(): boolean {\n        return this.indexEvent.getContent()['locked'] || false;\n    }\n\n    /**\n     * Sets a file as locked or unlocked.\n     * @param {boolean} locked True to lock the file, false otherwise.\n     * @returns {Promise<void>} Resolves when complete.\n     */\n    public async setLocked(locked: boolean): Promise<void> {\n        await this.client.sendStateEvent(this.roomId, UNSTABLE_MSC3089_BRANCH.name, {\n            ...this.indexEvent.getContent(),\n            locked: locked,\n        }, this.id);\n    }\n\n    /**\n     * Gets information about the file needed to download it.\n     * @returns {Promise<{info: IEncryptedFile, httpUrl: string}>} Information about the file.\n     */\n    public async getFileInfo(): Promise<{ info: IEncryptedFile, httpUrl: string }> {\n        const event = await this.getFileEvent();\n\n        const file = event.getOriginalContent()['file'];\n        const httpUrl = this.client.mxcUrlToHttp(file['url']);\n\n        if (!httpUrl) {\n            throw new Error(`No HTTP URL available for ${file['url']}`);\n        }\n\n        return { info: file, httpUrl: httpUrl };\n    }\n\n    /**\n     * Gets the event the file points to.\n     * @returns {Promise<MatrixEvent>} Resolves to the file's event.\n     */\n    public async getFileEvent(): Promise<MatrixEvent> {\n        const room = this.client.getRoom(this.roomId);\n        if (!room) throw new Error(\"Unknown room\");\n\n        let event: MatrixEvent | undefined = room.getUnfilteredTimelineSet().findEventById(this.id);\n\n        // keep scrolling back if needed until we find the event or reach the start of the room:\n        while (!event && room.getLiveTimeline().getState(EventTimeline.BACKWARDS).paginationToken) {\n            await this.client.scrollback(room, 100);\n            event = room.getUnfilteredTimelineSet().findEventById(this.id);\n        }\n\n        if (!event) throw new Error(\"Failed to find event\");\n\n        // Sometimes the event isn't decrypted for us, so do that. We specifically set `emit: true`\n        // to ensure that the relations system in the sdk will function.\n        await this.client.decryptEventIfNeeded(event, { emit: true, isRetry: true });\n\n        return event;\n    }\n\n    /**\n     * Creates a new version of this file with contents in a type that is compatible with MatrixClient.uploadContent().\n     * @param {string} name The name of the file.\n     * @param {File | String | Buffer | ReadStream | Blob} encryptedContents The encrypted contents.\n     * @param {Partial<IEncryptedFile>} info The encrypted file information.\n     * @param {IContent} additionalContent Optional event content fields to include in the message.\n     * @returns {Promise<ISendEventResponse>} Resolves to the file event's sent response.\n     */\n    public async createNewVersion(\n        name: string,\n        encryptedContents: FileType,\n        info: Partial<IEncryptedFile>,\n        additionalContent?: IContent,\n    ): Promise<ISendEventResponse> {\n        const fileEventResponse = await this.directory.createFile(name, encryptedContents, info, {\n            ...(additionalContent ?? {}),\n            \"m.new_content\": true,\n            \"m.relates_to\": {\n                \"rel_type\": RelationType.Replace,\n                \"event_id\": this.id,\n            },\n        });\n\n        // Update the version of the new event\n        await this.client.sendStateEvent(this.roomId, UNSTABLE_MSC3089_BRANCH.name, {\n            active: true,\n            name: name,\n            version: this.version + 1,\n        }, fileEventResponse['event_id']);\n\n        // Deprecate ourselves\n        await this.client.sendStateEvent(this.roomId, UNSTABLE_MSC3089_BRANCH.name, {\n            ...(this.indexEvent.getContent()),\n            active: false,\n        }, this.id);\n\n        return fileEventResponse;\n    }\n\n    /**\n     * Gets the file's version history, starting at this file.\n     * @returns {Promise<MSC3089Branch[]>} Resolves to the file's version history, with the\n     * first element being the current version and the last element being the first version.\n     */\n    public async getVersionHistory(): Promise<MSC3089Branch[]> {\n        const fileHistory: MSC3089Branch[] = [];\n        fileHistory.push(this); // start with ourselves\n\n        const room = this.client.getRoom(this.roomId);\n        if (!room) throw new Error(\"Invalid or unknown room\");\n\n        // Clone the timeline to reverse it, getting most-recent-first ordering, hopefully\n        // shortening the awful loop below. Without the clone, we can unintentionally mutate\n        // the timeline.\n        const timelineEvents = [...room.getLiveTimeline().getEvents()].reverse();\n\n        // XXX: This is a very inefficient search, but it's the best we can do with the\n        // relations structure we have in the SDK. As of writing, it is not worth the\n        // investment in improving the structure.\n        let childEvent: MatrixEvent | undefined;\n        let parentEvent = await this.getFileEvent();\n        do {\n            childEvent = timelineEvents.find(e => e.replacingEventId() === parentEvent.getId());\n            if (childEvent) {\n                const branch = this.directory.getFile(childEvent.getId());\n                if (branch) {\n                    fileHistory.push(branch);\n                    parentEvent = childEvent;\n                } else {\n                    break; // prevent infinite loop\n                }\n            }\n        } while (childEvent);\n\n        return fileHistory;\n    }\n}\n",
    "/*\nCopyright 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport promiseRetry from \"p-retry\";\n\nimport { MatrixClient } from \"../client\";\nimport { EventType, IEncryptedFile, MsgType, UNSTABLE_MSC3089_BRANCH, UNSTABLE_MSC3089_LEAF } from \"../@types/event\";\nimport { Room } from \"./room\";\nimport { logger } from \"../logger\";\nimport { IContent, MatrixEvent } from \"./event\";\nimport {\n    averageBetweenStrings,\n    DEFAULT_ALPHABET,\n    lexicographicCompare,\n    nextString,\n    prevString,\n    simpleRetryOperation,\n} from \"../utils\";\nimport { MSC3089Branch } from \"./MSC3089Branch\";\nimport { isRoomSharedHistory } from \"../crypto/algorithms/megolm\";\nimport { ISendEventResponse } from \"../@types/requests\";\nimport { FileType } from \"../http-api\";\n\n/**\n * The recommended defaults for a tree space's power levels. Note that this\n * is UNSTABLE and subject to breaking changes without notice.\n */\nexport const DEFAULT_TREE_POWER_LEVELS_TEMPLATE = {\n    // Owner\n    invite: 100,\n    kick: 100,\n    ban: 100,\n\n    // Editor\n    redact: 50,\n    state_default: 50,\n    events_default: 50,\n\n    // Viewer\n    users_default: 0,\n\n    // Mixed\n    events: {\n        [EventType.RoomPowerLevels]: 100,\n        [EventType.RoomHistoryVisibility]: 100,\n        [EventType.RoomTombstone]: 100,\n        [EventType.RoomEncryption]: 100,\n        [EventType.RoomName]: 50,\n        [EventType.RoomMessage]: 50,\n        [EventType.RoomMessageEncrypted]: 50,\n        [EventType.Sticker]: 50,\n    },\n\n    users: {}, // defined by calling code\n};\n\n/**\n * Ease-of-use representation for power levels represented as simple roles.\n * Note that this is UNSTABLE and subject to breaking changes without notice.\n */\nexport enum TreePermissions {\n    Viewer = \"viewer\", // Default\n    Editor = \"editor\", // \"Moderator\" or ~PL50\n    Owner = \"owner\", // \"Admin\" or PL100\n}\n\n/**\n * Represents a [MSC3089](https://github.com/matrix-org/matrix-doc/pull/3089)\n * file tree Space. Note that this is UNSTABLE and subject to breaking changes\n * without notice.\n */\nexport class MSC3089TreeSpace {\n    public readonly room: Room;\n\n    public constructor(private client: MatrixClient, public readonly roomId: string) {\n        this.room = this.client.getRoom(this.roomId);\n\n        if (!this.room) throw new Error(\"Unknown room\");\n    }\n\n    /**\n     * Syntactic sugar for room ID of the Space.\n     */\n    public get id(): string {\n        return this.roomId;\n    }\n\n    /**\n     * Whether or not this is a top level space.\n     */\n    public get isTopLevel(): boolean {\n        // XXX: This is absolutely not how you find out if the space is top level\n        // but is safe for a managed usecase like we offer in the SDK.\n        const parentEvents = this.room.currentState.getStateEvents(EventType.SpaceParent);\n        if (!parentEvents?.length) return true;\n        return parentEvents.every(e => !e.getContent()?.['via']);\n    }\n\n    /**\n     * Sets the name of the tree space.\n     * @param {string} name The new name for the space.\n     * @returns {Promise<void>} Resolves when complete.\n     */\n    public async setName(name: string): Promise<void> {\n        await this.client.sendStateEvent(this.roomId, EventType.RoomName, { name }, \"\");\n    }\n\n    /**\n     * Invites a user to the tree space. They will be given the default Viewer\n     * permission level unless specified elsewhere.\n     * @param {string} userId The user ID to invite.\n     * @param {boolean} andSubspaces True (default) to invite the user to all\n     * directories/subspaces too, recursively.\n     * @param {boolean} shareHistoryKeys True (default) to share encryption keys\n     * with the invited user. This will allow them to decrypt the events (files)\n     * in the tree. Keys will not be shared if the room is lacking appropriate\n     * history visibility (by default, history visibility is \"shared\" in trees,\n     * which is an appropriate visibility for these purposes).\n     * @returns {Promise<void>} Resolves when complete.\n     */\n    public async invite(userId: string, andSubspaces = true, shareHistoryKeys = true): Promise<void> {\n        const promises: Promise<void>[] = [this.retryInvite(userId)];\n        if (andSubspaces) {\n            promises.push(...this.getDirectories().map(d => d.invite(userId, andSubspaces, shareHistoryKeys)));\n        }\n        return Promise.all(promises).then(() => {\n            // Note: key sharing is default on because for file trees it is relatively important that the invite\n            // target can actually decrypt the files. The implied use case is that by inviting a user to the tree\n            // it means the sender would like the receiver to view/download the files contained within, much like\n            // sharing a folder in other circles.\n            if (shareHistoryKeys && isRoomSharedHistory(this.room)) {\n                // noinspection JSIgnoredPromiseFromCall - we aren't concerned as much if this fails.\n                this.client.sendSharedHistoryKeys(this.roomId, [userId]);\n            }\n        });\n    }\n\n    private retryInvite(userId: string): Promise<void> {\n        return simpleRetryOperation(async () => {\n            await this.client.invite(this.roomId, userId).catch(e => {\n                // We don't want to retry permission errors forever...\n                if (e?.errcode === \"M_FORBIDDEN\") {\n                    throw new promiseRetry.AbortError(e);\n                }\n                throw e;\n            });\n        });\n    }\n\n    /**\n     * Sets the permissions of a user to the given role. Note that if setting a user\n     * to Owner then they will NOT be able to be demoted. If the user does not have\n     * permission to change the power level of the target, an error will be thrown.\n     * @param {string} userId The user ID to change the role of.\n     * @param {TreePermissions} role The role to assign.\n     * @returns {Promise<void>} Resolves when complete.\n     */\n    public async setPermissions(userId: string, role: TreePermissions): Promise<void> {\n        const currentPls = this.room.currentState.getStateEvents(EventType.RoomPowerLevels, \"\");\n        if (Array.isArray(currentPls)) throw new Error(\"Unexpected return type for power levels\");\n\n        const pls = currentPls.getContent() || {};\n        const viewLevel = pls['users_default'] || 0;\n        const editLevel = pls['events_default'] || 50;\n        const adminLevel = pls['events']?.[EventType.RoomPowerLevels] || 100;\n\n        const users = pls['users'] || {};\n        switch (role) {\n            case TreePermissions.Viewer:\n                users[userId] = viewLevel;\n                break;\n            case TreePermissions.Editor:\n                users[userId] = editLevel;\n                break;\n            case TreePermissions.Owner:\n                users[userId] = adminLevel;\n                break;\n            default:\n                throw new Error(\"Invalid role: \" + role);\n        }\n        pls['users'] = users;\n\n        await this.client.sendStateEvent(this.roomId, EventType.RoomPowerLevels, pls, \"\");\n    }\n\n    /**\n     * Gets the current permissions of a user. Note that any users missing explicit permissions (or not\n     * in the space) will be considered Viewers. Appropriate membership checks need to be performed\n     * elsewhere.\n     * @param {string} userId The user ID to check permissions of.\n     * @returns {TreePermissions} The permissions for the user, defaulting to Viewer.\n     */\n    public getPermissions(userId: string): TreePermissions {\n        const currentPls = this.room.currentState.getStateEvents(EventType.RoomPowerLevels, \"\");\n        if (Array.isArray(currentPls)) throw new Error(\"Unexpected return type for power levels\");\n\n        const pls = currentPls.getContent() || {};\n        const viewLevel = pls['users_default'] || 0;\n        const editLevel = pls['events_default'] || 50;\n        const adminLevel = pls['events']?.[EventType.RoomPowerLevels] || 100;\n\n        const userLevel = pls['users']?.[userId] || viewLevel;\n        if (userLevel >= adminLevel) return TreePermissions.Owner;\n        if (userLevel >= editLevel) return TreePermissions.Editor;\n        return TreePermissions.Viewer;\n    }\n\n    /**\n     * Creates a directory under this tree space, represented as another tree space.\n     * @param {string} name The name for the directory.\n     * @returns {Promise<MSC3089TreeSpace>} Resolves to the created directory.\n     */\n    public async createDirectory(name: string): Promise<MSC3089TreeSpace> {\n        const directory = await this.client.unstableCreateFileTree(name);\n\n        await this.client.sendStateEvent(this.roomId, EventType.SpaceChild, {\n            via: [this.client.getDomain()],\n        }, directory.roomId);\n\n        await this.client.sendStateEvent(directory.roomId, EventType.SpaceParent, {\n            via: [this.client.getDomain()],\n        }, this.roomId);\n\n        return directory;\n    }\n\n    /**\n     * Gets a list of all known immediate subdirectories to this tree space.\n     * @returns {MSC3089TreeSpace[]} The tree spaces (directories). May be empty, but not null.\n     */\n    public getDirectories(): MSC3089TreeSpace[] {\n        const trees: MSC3089TreeSpace[] = [];\n        const children = this.room.currentState.getStateEvents(EventType.SpaceChild);\n        for (const child of children) {\n            try {\n                const stateKey = child.getStateKey();\n                if (stateKey) {\n                    const tree = this.client.unstableGetFileTreeSpace(stateKey);\n                    if (tree) trees.push(tree);\n                }\n            } catch (e) {\n                logger.warn(\"Unable to create tree space instance for listing. Are we joined?\", e);\n            }\n        }\n        return trees;\n    }\n\n    /**\n     * Gets a subdirectory of a given ID under this tree space. Note that this will not recurse\n     * into children and instead only look one level deep.\n     * @param {string} roomId The room ID (directory ID) to find.\n     * @returns {MSC3089TreeSpace | undefined} The directory, or undefined if not found.\n     */\n    public getDirectory(roomId: string): MSC3089TreeSpace | undefined {\n        return this.getDirectories().find(r => r.roomId === roomId);\n    }\n\n    /**\n     * Deletes the tree, kicking all members and deleting **all subdirectories**.\n     * @returns {Promise<void>} Resolves when complete.\n     */\n    public async delete(): Promise<void> {\n        const subdirectories = this.getDirectories();\n        for (const dir of subdirectories) {\n            await dir.delete();\n        }\n\n        const kickMemberships = [\"invite\", \"knock\", \"join\"];\n        const members = this.room.currentState.getStateEvents(EventType.RoomMember);\n        for (const member of members) {\n            const isNotUs = member.getStateKey() !== this.client.getUserId();\n            if (isNotUs && kickMemberships.includes(member.getContent().membership)) {\n                const stateKey = member.getStateKey();\n                if (!stateKey) {\n                    throw new Error(\"State key not found for branch\");\n                }\n                await this.client.kick(this.roomId, stateKey, \"Room deleted\");\n            }\n        }\n\n        await this.client.leave(this.roomId);\n    }\n\n    private getOrderedChildren(children: MatrixEvent[]): { roomId: string, order: string }[] {\n        const ordered: { roomId: string, order: string }[] = children\n            .map(c => ({ roomId: c.getStateKey(), order: c.getContent()['order'] }))\n            .filter(c => c.roomId) as { roomId: string, order: string }[];\n        ordered.sort((a, b) => {\n            if (a.order && !b.order) {\n                return -1;\n            } else if (!a.order && b.order) {\n                return 1;\n            } else if (!a.order && !b.order) {\n                const roomA = this.client.getRoom(a.roomId);\n                const roomB = this.client.getRoom(b.roomId);\n                if (!roomA || !roomB) { // just don't bother trying to do more partial sorting\n                    return lexicographicCompare(a.roomId, b.roomId);\n                }\n\n                const createTsA = roomA.currentState.getStateEvents(EventType.RoomCreate, \"\")?.getTs() ?? 0;\n                const createTsB = roomB.currentState.getStateEvents(EventType.RoomCreate, \"\")?.getTs() ?? 0;\n                if (createTsA === createTsB) {\n                    return lexicographicCompare(a.roomId, b.roomId);\n                }\n                return createTsA - createTsB;\n            } else { // both not-null orders\n                return lexicographicCompare(a.order, b.order);\n            }\n        });\n        return ordered;\n    }\n\n    private getParentRoom(): Room {\n        const parents = this.room.currentState.getStateEvents(EventType.SpaceParent);\n        const parent = parents[0]; // XXX: Wild assumption\n        if (!parent) throw new Error(\"Expected to have a parent in a non-top level space\");\n\n        // XXX: We are assuming the parent is a valid tree space.\n        // We probably don't need to validate the parent room state for this usecase though.\n        const stateKey = parent.getStateKey();\n        if (!stateKey) throw new Error(\"No state key found for parent\");\n        const parentRoom = this.client.getRoom(stateKey);\n        if (!parentRoom) throw new Error(\"Unable to locate room for parent\");\n\n        return parentRoom;\n    }\n\n    /**\n     * Gets the current order index for this directory. Note that if this is the top level space\n     * then -1 will be returned.\n     * @returns {number} The order index of this space.\n     */\n    public getOrder(): number {\n        if (this.isTopLevel) return -1;\n\n        const parentRoom = this.getParentRoom();\n        const children = parentRoom.currentState.getStateEvents(EventType.SpaceChild);\n        const ordered = this.getOrderedChildren(children);\n\n        return ordered.findIndex(c => c.roomId === this.roomId);\n    }\n\n    /**\n     * Sets the order index for this directory within its parent. Note that if this is a top level\n     * space then an error will be thrown. -1 can be used to move the child to the start, and numbers\n     * larger than the number of children can be used to move the child to the end.\n     * @param {number} index The new order index for this space.\n     * @returns {Promise<void>} Resolves when complete.\n     * @throws Throws if this is a top level space.\n     */\n    public async setOrder(index: number): Promise<void> {\n        if (this.isTopLevel) throw new Error(\"Cannot set order of top level spaces currently\");\n\n        const parentRoom = this.getParentRoom();\n        const children = parentRoom.currentState.getStateEvents(EventType.SpaceChild);\n        const ordered = this.getOrderedChildren(children);\n        index = Math.max(Math.min(index, ordered.length - 1), 0);\n\n        const currentIndex = this.getOrder();\n        const movingUp = currentIndex < index;\n        if (movingUp && index === (ordered.length - 1)) {\n            index--;\n        } else if (!movingUp && index === 0) {\n            index++;\n        }\n\n        const prev = ordered[movingUp ? index : (index - 1)];\n        const next = ordered[movingUp ? (index + 1) : index];\n\n        let newOrder = DEFAULT_ALPHABET[0];\n        let ensureBeforeIsSane = false;\n        if (!prev) {\n            // Move to front\n            if (next?.order) {\n                newOrder = prevString(next.order);\n            }\n        } else if (index === (ordered.length - 1)) {\n            // Move to back\n            if (next?.order) {\n                newOrder = nextString(next.order);\n            }\n        } else {\n            // Move somewhere in the middle\n            const startOrder = prev?.order;\n            const endOrder = next?.order;\n            if (startOrder && endOrder) {\n                if (startOrder === endOrder) {\n                    // Error case: just move +1 to break out of awful math\n                    newOrder = nextString(startOrder);\n                } else {\n                    newOrder = averageBetweenStrings(startOrder, endOrder);\n                }\n            } else {\n                if (startOrder) {\n                    // We're at the end (endOrder is null, so no explicit order)\n                    newOrder = nextString(startOrder);\n                } else if (endOrder) {\n                    // We're at the start (startOrder is null, so nothing before us)\n                    newOrder = prevString(endOrder);\n                } else {\n                    // Both points are unknown. We're likely in a range where all the children\n                    // don't have particular order values, so we may need to update them too.\n                    // The other possibility is there's only us as a child, but we should have\n                    // shown up in the other states.\n                    ensureBeforeIsSane = true;\n                }\n            }\n        }\n\n        if (ensureBeforeIsSane) {\n            // We were asked by the order algorithm to prepare the moving space for a landing\n            // in the undefined order part of the order array, which means we need to update the\n            // spaces that come before it with a stable order value.\n            let lastOrder: string | undefined;\n            for (let i = 0; i <= index; i++) {\n                const target = ordered[i];\n                if (i === 0) {\n                    lastOrder = target.order;\n                }\n                if (!target.order) {\n                    // XXX: We should be creating gaps to avoid conflicts\n                    lastOrder = lastOrder ? nextString(lastOrder) : DEFAULT_ALPHABET[0];\n                    const currentChild = parentRoom.currentState.getStateEvents(EventType.SpaceChild, target.roomId);\n                    const content = currentChild?.getContent() ?? { via: [this.client.getDomain()] };\n                    await this.client.sendStateEvent(parentRoom.roomId, EventType.SpaceChild, {\n                        ...content,\n                        order: lastOrder,\n                    }, target.roomId);\n                } else {\n                    lastOrder = target.order;\n                }\n            }\n            if (lastOrder) {\n                newOrder = nextString(lastOrder);\n            }\n        }\n\n        // TODO: Deal with order conflicts by reordering\n\n        // Now we can finally update our own order state\n        const currentChild = parentRoom.currentState.getStateEvents(EventType.SpaceChild, this.roomId);\n        const content = currentChild?.getContent() ?? { via: [this.client.getDomain()] };\n        await this.client.sendStateEvent(parentRoom.roomId, EventType.SpaceChild, {\n            ...content,\n\n            // TODO: Safely constrain to 50 character limit required by spaces.\n            order: newOrder,\n        }, this.roomId);\n    }\n\n    /**\n     * Creates (uploads) a new file to this tree. The file must have already been encrypted for the room.\n     * The file contents are in a type that is compatible with MatrixClient.uploadContent().\n     * @param {string} name The name of the file.\n     * @param {File | String | Buffer | ReadStream | Blob} encryptedContents The encrypted contents.\n     * @param {Partial<IEncryptedFile>} info The encrypted file information.\n     * @param {IContent} additionalContent Optional event content fields to include in the message.\n     * @returns {Promise<ISendEventResponse>} Resolves to the file event's sent response.\n     */\n    public async createFile(\n        name: string,\n        encryptedContents: FileType,\n        info: Partial<IEncryptedFile>,\n        additionalContent?: IContent,\n    ): Promise<ISendEventResponse> {\n        const mxc = await this.client.uploadContent(encryptedContents, {\n            includeFilename: false,\n            onlyContentUri: true,\n            rawResponse: false, // make this explicit otherwise behaviour is different on browser vs NodeJS\n        });\n        info.url = mxc;\n\n        const fileContent = {\n            msgtype: MsgType.File,\n            body: name,\n            url: mxc,\n            file: info,\n        };\n\n        additionalContent = additionalContent ?? {};\n        if (additionalContent[\"m.new_content\"]) {\n            // We do the right thing according to the spec, but due to how relations are\n            // handled we also end up duplicating this information to the regular `content`\n            // as well.\n            additionalContent[\"m.new_content\"] = fileContent;\n        }\n\n        const res = await this.client.sendMessage(this.roomId, {\n            ...additionalContent,\n            ...fileContent,\n            [UNSTABLE_MSC3089_LEAF.name]: {},\n        });\n\n        await this.client.sendStateEvent(this.roomId, UNSTABLE_MSC3089_BRANCH.name, {\n            active: true,\n            name: name,\n        }, res['event_id']);\n\n        return res;\n    }\n\n    /**\n     * Retrieves a file from the tree.\n     * @param {string} fileEventId The event ID of the file.\n     * @returns {MSC3089Branch | null} The file, or null if not found.\n     */\n    public getFile(fileEventId: string): MSC3089Branch | null {\n        const branch = this.room.currentState.getStateEvents(UNSTABLE_MSC3089_BRANCH.name, fileEventId);\n        return branch ? new MSC3089Branch(this.client, branch, this) : null;\n    }\n\n    /**\n     * Gets an array of all known files for the tree.\n     * @returns {MSC3089Branch[]} The known files. May be empty, but not null.\n     */\n    public listFiles(): MSC3089Branch[] {\n        return this.listAllFiles().filter(b => b.isActive);\n    }\n\n    /**\n     * Gets an array of all known files for the tree, including inactive/invalid ones.\n     * @returns {MSC3089Branch[]} The known files. May be empty, but not null.\n     */\n    public listAllFiles(): MSC3089Branch[] {\n        const branches = this.room.currentState.getStateEvents(UNSTABLE_MSC3089_BRANCH.name) ?? [];\n        return branches.map(e => new MSC3089Branch(this.client, e, this));\n    }\n}\n",
    "/*\nCopyright 2022 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { MBeaconEventContent } from \"../@types/beacon\";\nimport { M_TIMESTAMP } from \"../@types/location\";\nimport { BeaconInfoState, BeaconLocationState, parseBeaconContent, parseBeaconInfoContent } from \"../content-helpers\";\nimport { MatrixEvent } from \"../matrix\";\nimport { sortEventsByLatestContentTimestamp } from \"../utils\";\nimport { TypedEventEmitter } from \"./typed-event-emitter\";\n\nexport enum BeaconEvent {\n    New = \"Beacon.new\",\n    Update = \"Beacon.update\",\n    LivenessChange = \"Beacon.LivenessChange\",\n    Destroy = \"Beacon.Destroy\",\n    LocationUpdate = \"Beacon.LocationUpdate\",\n}\n\nexport type BeaconEventHandlerMap = {\n    [BeaconEvent.Update]: (event: MatrixEvent, beacon: Beacon) => void;\n    [BeaconEvent.LivenessChange]: (isLive: boolean, beacon: Beacon) => void;\n    [BeaconEvent.Destroy]: (beaconIdentifier: string) => void;\n    [BeaconEvent.LocationUpdate]: (locationState: BeaconLocationState) => void;\n    [BeaconEvent.Destroy]: (beaconIdentifier: string) => void;\n};\n\nexport const isTimestampInDuration = (\n    startTimestamp: number,\n    durationMs: number,\n    timestamp: number,\n): boolean => timestamp >= startTimestamp && startTimestamp + durationMs >= timestamp;\n\n// beacon info events are uniquely identified by\n// `<roomId>_<state_key>`\nexport type BeaconIdentifier = string;\nexport const getBeaconInfoIdentifier = (event: MatrixEvent): BeaconIdentifier =>\n    `${event.getRoomId()}_${event.getStateKey()}`;\n\n// https://github.com/matrix-org/matrix-spec-proposals/pull/3672\nexport class Beacon extends TypedEventEmitter<Exclude<BeaconEvent, BeaconEvent.New>, BeaconEventHandlerMap> {\n    public readonly roomId: string;\n    private _beaconInfo: BeaconInfoState;\n    private _isLive: boolean;\n    private livenessWatchInterval: number;\n    private _latestLocationState: BeaconLocationState | undefined;\n\n    constructor(\n        private rootEvent: MatrixEvent,\n    ) {\n        super();\n        this.setBeaconInfo(this.rootEvent);\n        this.roomId = this.rootEvent.getRoomId();\n    }\n\n    public get isLive(): boolean {\n        return this._isLive;\n    }\n\n    public get identifier(): BeaconIdentifier {\n        return getBeaconInfoIdentifier(this.rootEvent);\n    }\n\n    public get beaconInfoId(): string {\n        return this.rootEvent.getId();\n    }\n\n    public get beaconInfoOwner(): string {\n        return this.rootEvent.getStateKey();\n    }\n\n    public get beaconInfoEventType(): string {\n        return this.rootEvent.getType();\n    }\n\n    public get beaconInfo(): BeaconInfoState {\n        return this._beaconInfo;\n    }\n\n    public get latestLocationState(): BeaconLocationState | undefined {\n        return this._latestLocationState;\n    }\n\n    public update(beaconInfoEvent: MatrixEvent): void {\n        if (getBeaconInfoIdentifier(beaconInfoEvent) !== this.identifier) {\n            throw new Error('Invalid updating event');\n        }\n        // don't update beacon with an older event\n        if (beaconInfoEvent.event.origin_server_ts < this.rootEvent.event.origin_server_ts) {\n            return;\n        }\n        this.rootEvent = beaconInfoEvent;\n        this.setBeaconInfo(this.rootEvent);\n\n        this.emit(BeaconEvent.Update, beaconInfoEvent, this);\n        this.clearLatestLocation();\n    }\n\n    public destroy(): void {\n        if (this.livenessWatchInterval) {\n            clearInterval(this.livenessWatchInterval);\n        }\n\n        this._isLive = false;\n        this.emit(BeaconEvent.Destroy, this.identifier);\n    }\n\n    /**\n     * Monitor liveness of a beacon\n     * Emits BeaconEvent.LivenessChange when beacon expires\n     */\n    public monitorLiveness(): void {\n        if (this.livenessWatchInterval) {\n            clearInterval(this.livenessWatchInterval);\n        }\n\n        this.checkLiveness();\n        if (this.isLive) {\n            const expiryInMs = (this._beaconInfo?.timestamp + this._beaconInfo?.timeout) - Date.now();\n            if (expiryInMs > 1) {\n                this.livenessWatchInterval = setInterval(\n                    () => { this.monitorLiveness(); },\n                    expiryInMs,\n                );\n            }\n        }\n    }\n\n    /**\n     * Process Beacon locations\n     * Emits BeaconEvent.LocationUpdate\n     */\n    public addLocations(beaconLocationEvents: MatrixEvent[]): void {\n        // discard locations for beacons that are not live\n        if (!this.isLive) {\n            return;\n        }\n\n        const validLocationEvents = beaconLocationEvents.filter(event => {\n            const content = event.getContent<MBeaconEventContent>();\n            const timestamp = M_TIMESTAMP.findIn<number>(content);\n            return (\n                // only include positions that were taken inside the beacon's live period\n                isTimestampInDuration(this._beaconInfo.timestamp, this._beaconInfo.timeout, timestamp) &&\n                // ignore positions older than our current latest location\n                (!this.latestLocationState || timestamp > this.latestLocationState.timestamp)\n            );\n        });\n        const latestLocationEvent = validLocationEvents.sort(sortEventsByLatestContentTimestamp)?.[0];\n\n        if (latestLocationEvent) {\n            this._latestLocationState = parseBeaconContent(latestLocationEvent.getContent());\n            this.emit(BeaconEvent.LocationUpdate, this.latestLocationState);\n        }\n    }\n\n    private clearLatestLocation = () => {\n        this._latestLocationState = undefined;\n        this.emit(BeaconEvent.LocationUpdate, this.latestLocationState);\n    };\n\n    private setBeaconInfo(event: MatrixEvent): void {\n        this._beaconInfo = parseBeaconInfoContent(event.getContent());\n        this.checkLiveness();\n    }\n\n    private checkLiveness(): void {\n        const prevLiveness = this.isLive;\n        this._isLive = this._beaconInfo?.live &&\n            isTimestampInDuration(this._beaconInfo?.timestamp, this._beaconInfo?.timeout, Date.now());\n\n        if (prevLiveness !== this.isLive) {\n            this.emit(BeaconEvent.LivenessChange, this.isLive, this);\n        }\n    }\n}\n",
    "/*\nCopyright 2015 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { MatrixEvent } from \"./event\";\nimport { Direction } from \"./event-timeline\";\n\n/**\n * @module models/event-context\n */\nexport class EventContext {\n    private timeline: MatrixEvent[];\n    private ourEventIndex = 0;\n    private paginateTokens: Record<Direction, string | null> = {\n        [Direction.Backward]: null,\n        [Direction.Forward]: null,\n    };\n\n    /**\n     * Construct a new EventContext\n     *\n     * An eventcontext is used for circumstances such as search results, when we\n     * have a particular event of interest, and a bunch of events before and after\n     * it.\n     *\n     * It also stores pagination tokens for going backwards and forwards in the\n     * timeline.\n     *\n     * @param {MatrixEvent} ourEvent  the event at the centre of this context\n     *\n     * @constructor\n     */\n    constructor(public readonly ourEvent: MatrixEvent) {\n        this.timeline = [ourEvent];\n    }\n\n    /**\n     * Get the main event of interest\n     *\n     * This is a convenience function for getTimeline()[getOurEventIndex()].\n     *\n     * @return {MatrixEvent} The event at the centre of this context.\n     */\n    public getEvent(): MatrixEvent {\n        return this.timeline[this.ourEventIndex];\n    }\n\n    /**\n     * Get the list of events in this context\n     *\n     * @return {Array} An array of MatrixEvents\n     */\n    public getTimeline(): MatrixEvent[] {\n        return this.timeline;\n    }\n\n    /**\n     * Get the index in the timeline of our event\n     *\n     * @return {Number}\n     */\n    public getOurEventIndex(): number {\n        return this.ourEventIndex;\n    }\n\n    /**\n     * Get a pagination token.\n     *\n     * @param {boolean} backwards   true to get the pagination token for going\n     *                                  backwards in time\n     * @return {string}\n     */\n    public getPaginateToken(backwards = false): string {\n        return this.paginateTokens[backwards ? Direction.Backward : Direction.Forward];\n    }\n\n    /**\n     * Set a pagination token.\n     *\n     * Generally this will be used only by the matrix js sdk.\n     *\n     * @param {string} token        pagination token\n     * @param {boolean} backwards   true to set the pagination token for going\n     *                                   backwards in time\n     */\n    public setPaginateToken(token: string, backwards = false): void {\n        this.paginateTokens[backwards ? Direction.Backward : Direction.Forward] = token;\n    }\n\n    /**\n     * Add more events to the timeline\n     *\n     * @param {Array} events      new events, in timeline order\n     * @param {boolean} atStart   true to insert new events at the start\n     */\n    public addEvents(events: MatrixEvent[], atStart = false): void {\n        // TODO: should we share logic with Room.addEventsToTimeline?\n        // Should Room even use EventContext?\n\n        if (atStart) {\n            this.timeline = events.concat(this.timeline);\n            this.ourEventIndex += events.length;\n        } else {\n            this.timeline = this.timeline.concat(events);\n        }\n    }\n}\n",
    "/*\nCopyright 2015 - 2022 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * Enum for event statuses.\n * @readonly\n * @enum {string}\n */\nexport enum EventStatus {\n    /** The event was not sent and will no longer be retried. */\n    NOT_SENT = \"not_sent\",\n\n    /** The message is being encrypted */\n    ENCRYPTING = \"encrypting\",\n\n    /** The event is in the process of being sent. */\n    SENDING = \"sending\",\n\n    /** The event is in a queue waiting to be sent. */\n    QUEUED = \"queued\",\n\n    /** The event has been sent to the server, but we have not yet received the echo. */\n    SENT = \"sent\",\n\n    /** The event was cancelled before it was successfully sent. */\n    CANCELLED = \"cancelled\",\n}\n",
    "/*\nCopyright 2016 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * @module models/event-timeline-set\n */\n\nimport { EventTimeline } from \"./event-timeline\";\nimport { EventStatus, MatrixEvent, MatrixEventEvent } from \"./event\";\nimport { logger } from '../logger';\nimport { Relations } from './relations';\nimport { Room, RoomEvent } from \"./room\";\nimport { Filter } from \"../filter\";\nimport { EventType, RelationType } from \"../@types/event\";\nimport { RoomState } from \"./room-state\";\nimport { TypedEventEmitter } from \"./typed-event-emitter\";\n\n// var DEBUG = false;\nconst DEBUG = true;\n\nlet debuglog: (...args: any[]) => void;\nif (DEBUG) {\n    // using bind means that we get to keep useful line numbers in the console\n    debuglog = logger.log.bind(logger);\n} else {\n    debuglog = function() {};\n}\n\ninterface IOpts {\n    timelineSupport?: boolean;\n    filter?: Filter;\n    unstableClientRelationAggregation?: boolean;\n    pendingEvents?: boolean;\n}\n\nexport enum DuplicateStrategy {\n    Ignore = \"ignore\",\n    Replace = \"replace\",\n}\n\nexport interface IRoomTimelineData {\n    timeline: EventTimeline;\n    liveEvent?: boolean;\n}\n\ntype EmittedEvents = RoomEvent.Timeline | RoomEvent.TimelineReset;\n\nexport type EventTimelineSetHandlerMap = {\n    [RoomEvent.Timeline]:\n        (event: MatrixEvent, room: Room, toStartOfTimeline: boolean, removed: boolean, data: IRoomTimelineData) => void;\n    [RoomEvent.TimelineReset]: (room: Room, eventTimelineSet: EventTimelineSet, resetAllTimelines: boolean) => void;\n};\n\nexport class EventTimelineSet extends TypedEventEmitter<EmittedEvents, EventTimelineSetHandlerMap> {\n    private readonly timelineSupport: boolean;\n    private unstableClientRelationAggregation: boolean;\n    private displayPendingEvents: boolean;\n    private liveTimeline: EventTimeline;\n    private timelines: EventTimeline[];\n    private _eventIdToTimeline: Record<string, EventTimeline>;\n    private filter?: Filter;\n    private relations: Record<string, Record<string, Record<RelationType, Relations>>>;\n\n    /**\n     * Construct a set of EventTimeline objects, typically on behalf of a given\n     * room.  A room may have multiple EventTimelineSets for different levels\n     * of filtering.  The global notification list is also an EventTimelineSet, but\n     * lacks a room.\n     *\n     * <p>This is an ordered sequence of timelines, which may or may not\n     * be continuous. Each timeline lists a series of events, as well as tracking\n     * the room state at the start and the end of the timeline (if appropriate).\n     * It also tracks forward and backward pagination tokens, as well as containing\n     * links to the next timeline in the sequence.\n     *\n     * <p>There is one special timeline - the 'live' timeline, which represents the\n     * timeline to which events are being added in real-time as they are received\n     * from the /sync API. Note that you should not retain references to this\n     * timeline - even if it is the current timeline right now, it may not remain\n     * so if the server gives us a timeline gap in /sync.\n     *\n     * <p>In order that we can find events from their ids later, we also maintain a\n     * map from event_id to timeline and index.\n     *\n     * @constructor\n     * @param {?Room} room\n     * Room for this timelineSet. May be null for non-room cases, such as the\n     * notification timeline.\n     * @param {Object} opts Options inherited from Room.\n     *\n     * @param {boolean} [opts.timelineSupport = false]\n     * Set to true to enable improved timeline support.\n     * @param {Object} [opts.filter = null]\n     * The filter object, if any, for this timelineSet.\n     * @param {boolean} [opts.unstableClientRelationAggregation = false]\n     * Optional. Set to true to enable client-side aggregation of event relations\n     * via `getRelationsForEvent`.\n     * This feature is currently unstable and the API may change without notice.\n     */\n    constructor(public readonly room: Room, opts: IOpts) {\n        super();\n\n        this.timelineSupport = Boolean(opts.timelineSupport);\n        this.liveTimeline = new EventTimeline(this);\n        this.unstableClientRelationAggregation = !!opts.unstableClientRelationAggregation;\n        this.displayPendingEvents = opts.pendingEvents !== false;\n\n        // just a list - *not* ordered.\n        this.timelines = [this.liveTimeline];\n        this._eventIdToTimeline = {};\n\n        this.filter = opts.filter;\n\n        if (this.unstableClientRelationAggregation) {\n            // A tree of objects to access a set of relations for an event, as in:\n            // this.relations[relatesToEventId][relationType][relationEventType]\n            this.relations = {};\n        }\n    }\n\n    /**\n     * Get all the timelines in this set\n     * @return {module:models/event-timeline~EventTimeline[]} the timelines in this set\n     */\n    public getTimelines(): EventTimeline[] {\n        return this.timelines;\n    }\n\n    /**\n     * Get the filter object this timeline set is filtered on, if any\n     * @return {?Filter} the optional filter for this timelineSet\n     */\n    public getFilter(): Filter | undefined {\n        return this.filter;\n    }\n\n    /**\n     * Set the filter object this timeline set is filtered on\n     * (passed to the server when paginating via /messages).\n     * @param {Filter} filter the filter for this timelineSet\n     */\n    public setFilter(filter?: Filter): void {\n        this.filter = filter;\n    }\n\n    /**\n     * Get the list of pending sent events for this timelineSet's room, filtered\n     * by the timelineSet's filter if appropriate.\n     *\n     * @return {module:models/event.MatrixEvent[]} A list of the sent events\n     * waiting for remote echo.\n     *\n     * @throws If <code>opts.pendingEventOrdering</code> was not 'detached'\n     */\n    public getPendingEvents(): MatrixEvent[] {\n        if (!this.room || !this.displayPendingEvents) {\n            return [];\n        }\n\n        return this.room.getPendingEvents();\n    }\n    /**\n     * Get the live timeline for this room.\n     *\n     * @return {module:models/event-timeline~EventTimeline} live timeline\n     */\n    public getLiveTimeline(): EventTimeline {\n        return this.liveTimeline;\n    }\n\n    /**\n     * Return the timeline (if any) this event is in.\n     * @param {String} eventId the eventId being sought\n     * @return {module:models/event-timeline~EventTimeline} timeline\n     */\n    public eventIdToTimeline(eventId: string): EventTimeline {\n        return this._eventIdToTimeline[eventId];\n    }\n\n    /**\n     * Track a new event as if it were in the same timeline as an old event,\n     * replacing it.\n     * @param {String} oldEventId  event ID of the original event\n     * @param {String} newEventId  event ID of the replacement event\n     */\n    public replaceEventId(oldEventId: string, newEventId: string): void {\n        const existingTimeline = this._eventIdToTimeline[oldEventId];\n        if (existingTimeline) {\n            delete this._eventIdToTimeline[oldEventId];\n            this._eventIdToTimeline[newEventId] = existingTimeline;\n        }\n    }\n\n    /**\n     * Reset the live timeline, and start a new one.\n     *\n     * <p>This is used when /sync returns a 'limited' timeline.\n     *\n     * @param {string=} backPaginationToken   token for back-paginating the new timeline\n     * @param {string=} forwardPaginationToken token for forward-paginating the old live timeline,\n     * if absent or null, all timelines are reset.\n     *\n     * @fires module:client~MatrixClient#event:\"Room.timelineReset\"\n     */\n    public resetLiveTimeline(backPaginationToken?: string, forwardPaginationToken?: string): void {\n        // Each EventTimeline has RoomState objects tracking the state at the start\n        // and end of that timeline. The copies at the end of the live timeline are\n        // special because they will have listeners attached to monitor changes to\n        // the current room state, so we move this RoomState from the end of the\n        // current live timeline to the end of the new one and, if necessary,\n        // replace it with a newly created one. We also make a copy for the start\n        // of the new timeline.\n\n        // if timeline support is disabled, forget about the old timelines\n        const resetAllTimelines = !this.timelineSupport || !forwardPaginationToken;\n\n        const oldTimeline = this.liveTimeline;\n        const newTimeline = resetAllTimelines ?\n            oldTimeline.forkLive(EventTimeline.FORWARDS) :\n            oldTimeline.fork(EventTimeline.FORWARDS);\n\n        if (resetAllTimelines) {\n            this.timelines = [newTimeline];\n            this._eventIdToTimeline = {};\n        } else {\n            this.timelines.push(newTimeline);\n        }\n\n        if (forwardPaginationToken) {\n            // Now set the forward pagination token on the old live timeline\n            // so it can be forward-paginated.\n            oldTimeline.setPaginationToken(\n                forwardPaginationToken, EventTimeline.FORWARDS,\n            );\n        }\n\n        // make sure we set the pagination token before firing timelineReset,\n        // otherwise clients which start back-paginating will fail, and then get\n        // stuck without realising that they *can* back-paginate.\n        newTimeline.setPaginationToken(backPaginationToken, EventTimeline.BACKWARDS);\n\n        // Now we can swap the live timeline to the new one.\n        this.liveTimeline = newTimeline;\n        this.emit(RoomEvent.TimelineReset, this.room, this, resetAllTimelines);\n    }\n\n    /**\n     * Get the timeline which contains the given event, if any\n     *\n     * @param {string} eventId  event ID to look for\n     * @return {?module:models/event-timeline~EventTimeline} timeline containing\n     * the given event, or null if unknown\n     */\n    public getTimelineForEvent(eventId: string): EventTimeline | null {\n        const res = this._eventIdToTimeline[eventId];\n        return (res === undefined) ? null : res;\n    }\n\n    /**\n     * Get an event which is stored in our timelines\n     *\n     * @param {string} eventId  event ID to look for\n     * @return {?module:models/event~MatrixEvent} the given event, or undefined if unknown\n     */\n    public findEventById(eventId: string): MatrixEvent | undefined {\n        const tl = this.getTimelineForEvent(eventId);\n        if (!tl) {\n            return undefined;\n        }\n        return tl.getEvents().find(function(ev) {\n            return ev.getId() == eventId;\n        });\n    }\n\n    /**\n     * Add a new timeline to this timeline list\n     *\n     * @return {module:models/event-timeline~EventTimeline} newly-created timeline\n     */\n    public addTimeline(): EventTimeline {\n        if (!this.timelineSupport) {\n            throw new Error(\"timeline support is disabled. Set the 'timelineSupport'\" +\n                \" parameter to true when creating MatrixClient to enable\" +\n                \" it.\");\n        }\n\n        const timeline = new EventTimeline(this);\n        this.timelines.push(timeline);\n        return timeline;\n    }\n\n    /**\n     * Add events to a timeline\n     *\n     * <p>Will fire \"Room.timeline\" for each event added.\n     *\n     * @param {MatrixEvent[]} events A list of events to add.\n     *\n     * @param {boolean} toStartOfTimeline   True to add these events to the start\n     * (oldest) instead of the end (newest) of the timeline. If true, the oldest\n     * event will be the <b>last</b> element of 'events'.\n     *\n     * @param {module:models/event-timeline~EventTimeline} timeline   timeline to\n     *    add events to.\n     *\n     * @param {string=} paginationToken   token for the next batch of events\n     *\n     * @fires module:client~MatrixClient#event:\"Room.timeline\"\n     *\n     */\n    public addEventsToTimeline(\n        events: MatrixEvent[],\n        toStartOfTimeline: boolean,\n        timeline: EventTimeline,\n        paginationToken: string,\n    ): void {\n        if (!timeline) {\n            throw new Error(\n                \"'timeline' not specified for EventTimelineSet.addEventsToTimeline\",\n            );\n        }\n\n        if (!toStartOfTimeline && timeline == this.liveTimeline) {\n            throw new Error(\n                \"EventTimelineSet.addEventsToTimeline cannot be used for adding events to \" +\n                \"the live timeline - use Room.addLiveEvents instead\",\n            );\n        }\n\n        if (this.filter) {\n            events = this.filter.filterRoomTimeline(events);\n            if (!events.length) {\n                return;\n            }\n        }\n\n        const direction = toStartOfTimeline ? EventTimeline.BACKWARDS :\n            EventTimeline.FORWARDS;\n        const inverseDirection = toStartOfTimeline ? EventTimeline.FORWARDS :\n            EventTimeline.BACKWARDS;\n\n        // Adding events to timelines can be quite complicated. The following\n        // illustrates some of the corner-cases.\n        //\n        // Let's say we start by knowing about four timelines. timeline3 and\n        // timeline4 are neighbours:\n        //\n        //    timeline1    timeline2    timeline3    timeline4\n        //      [M]          [P]          [S] <------> [T]\n        //\n        // Now we paginate timeline1, and get the following events from the server:\n        // [M, N, P, R, S, T, U].\n        //\n        // 1. First, we ignore event M, since we already know about it.\n        //\n        // 2. Next, we append N to timeline 1.\n        //\n        // 3. Next, we don't add event P, since we already know about it,\n        //    but we do link together the timelines. We now have:\n        //\n        //    timeline1    timeline2    timeline3    timeline4\n        //      [M, N] <---> [P]          [S] <------> [T]\n        //\n        // 4. Now we add event R to timeline2:\n        //\n        //    timeline1    timeline2    timeline3    timeline4\n        //      [M, N] <---> [P, R]       [S] <------> [T]\n        //\n        //    Note that we have switched the timeline we are working on from\n        //    timeline1 to timeline2.\n        //\n        // 5. We ignore event S, but again join the timelines:\n        //\n        //    timeline1    timeline2    timeline3    timeline4\n        //      [M, N] <---> [P, R] <---> [S] <------> [T]\n        //\n        // 6. We ignore event T, and the timelines are already joined, so there\n        //    is nothing to do.\n        //\n        // 7. Finally, we add event U to timeline4:\n        //\n        //    timeline1    timeline2    timeline3    timeline4\n        //      [M, N] <---> [P, R] <---> [S] <------> [T, U]\n        //\n        // The important thing to note in the above is what happened when we\n        // already knew about a given event:\n        //\n        //   - if it was appropriate, we joined up the timelines (steps 3, 5).\n        //   - in any case, we started adding further events to the timeline which\n        //       contained the event we knew about (steps 3, 5, 6).\n        //\n        //\n        // So much for adding events to the timeline. But what do we want to do\n        // with the pagination token?\n        //\n        // In the case above, we will be given a pagination token which tells us how to\n        // get events beyond 'U' - in this case, it makes sense to store this\n        // against timeline4. But what if timeline4 already had 'U' and beyond? in\n        // that case, our best bet is to throw away the pagination token we were\n        // given and stick with whatever token timeline4 had previously. In short,\n        // we want to only store the pagination token if the last event we receive\n        // is one we didn't previously know about.\n        //\n        // We make an exception for this if it turns out that we already knew about\n        // *all* of the events, and we weren't able to join up any timelines. When\n        // that happens, it means our existing pagination token is faulty, since it\n        // is only telling us what we already know. Rather than repeatedly\n        // paginating with the same token, we might as well use the new pagination\n        // token in the hope that we eventually work our way out of the mess.\n\n        let didUpdate = false;\n        let lastEventWasNew = false;\n        for (let i = 0; i < events.length; i++) {\n            const event = events[i];\n            const eventId = event.getId();\n\n            const existingTimeline = this._eventIdToTimeline[eventId];\n\n            if (!existingTimeline) {\n                // we don't know about this event yet. Just add it to the timeline.\n                this.addEventToTimeline(event, timeline, toStartOfTimeline);\n                lastEventWasNew = true;\n                didUpdate = true;\n                continue;\n            }\n\n            lastEventWasNew = false;\n\n            if (existingTimeline == timeline) {\n                debuglog(\"Event \" + eventId + \" already in timeline \" + timeline);\n                continue;\n            }\n\n            const neighbour = timeline.getNeighbouringTimeline(direction);\n            if (neighbour) {\n                // this timeline already has a neighbour in the relevant direction;\n                // let's assume the timelines are already correctly linked up, and\n                // skip over to it.\n                //\n                // there's probably some edge-case here where we end up with an\n                // event which is in a timeline a way down the chain, and there is\n                // a break in the chain somewhere. But I can't really imagine how\n                // that would happen, so I'm going to ignore it for now.\n                //\n                if (existingTimeline == neighbour) {\n                    debuglog(\"Event \" + eventId + \" in neighbouring timeline - \" +\n                        \"switching to \" + existingTimeline);\n                } else {\n                    debuglog(\"Event \" + eventId + \" already in a different \" +\n                        \"timeline \" + existingTimeline);\n                }\n                timeline = existingTimeline;\n                continue;\n            }\n\n            // time to join the timelines.\n            logger.info(\"Already have timeline for \" + eventId +\n                \" - joining timeline \" + timeline + \" to \" +\n                existingTimeline);\n\n            // Variables to keep the line length limited below.\n            const existingIsLive = existingTimeline === this.liveTimeline;\n            const timelineIsLive = timeline === this.liveTimeline;\n\n            const backwardsIsLive = direction === EventTimeline.BACKWARDS && existingIsLive;\n            const forwardsIsLive = direction === EventTimeline.FORWARDS && timelineIsLive;\n\n            if (backwardsIsLive || forwardsIsLive) {\n                // The live timeline should never be spliced into a non-live position.\n                // We use independent logging to better discover the problem at a glance.\n                if (backwardsIsLive) {\n                    logger.warn(\n                        \"Refusing to set a preceding existingTimeLine on our \" +\n                        \"timeline as the existingTimeLine is live (\" + existingTimeline + \")\",\n                    );\n                }\n                if (forwardsIsLive) {\n                    logger.warn(\n                        \"Refusing to set our preceding timeline on a existingTimeLine \" +\n                        \"as our timeline is live (\" + timeline + \")\",\n                    );\n                }\n                continue; // abort splicing - try next event\n            }\n\n            timeline.setNeighbouringTimeline(existingTimeline, direction);\n            existingTimeline.setNeighbouringTimeline(timeline, inverseDirection);\n\n            timeline = existingTimeline;\n            didUpdate = true;\n        }\n\n        // see above - if the last event was new to us, or if we didn't find any\n        // new information, we update the pagination token for whatever\n        // timeline we ended up on.\n        if (lastEventWasNew || !didUpdate) {\n            if (direction === EventTimeline.FORWARDS && timeline === this.liveTimeline) {\n                logger.warn({ lastEventWasNew, didUpdate }); // for debugging\n                logger.warn(\n                    `Refusing to set forwards pagination token of live timeline ` +\n                    `${timeline} to ${paginationToken}`,\n                );\n                return;\n            }\n            timeline.setPaginationToken(paginationToken, direction);\n        }\n    }\n\n    /**\n     * Add an event to the end of this live timeline.\n     *\n     * @param {MatrixEvent} event Event to be added\n     * @param {string?} duplicateStrategy 'ignore' or 'replace'\n     * @param {boolean} fromCache whether the sync response came from cache\n     * @param roomState the state events to reconcile metadata from\n     */\n    public addLiveEvent(\n        event: MatrixEvent,\n        duplicateStrategy: DuplicateStrategy = DuplicateStrategy.Ignore,\n        fromCache = false,\n        roomState?: RoomState,\n    ): void {\n        if (this.filter) {\n            const events = this.filter.filterRoomTimeline([event]);\n            if (!events.length) {\n                return;\n            }\n        }\n\n        const timeline = this._eventIdToTimeline[event.getId()];\n        if (timeline) {\n            if (duplicateStrategy === DuplicateStrategy.Replace) {\n                debuglog(\"EventTimelineSet.addLiveEvent: replacing duplicate event \" +\n                    event.getId());\n                const tlEvents = timeline.getEvents();\n                for (let j = 0; j < tlEvents.length; j++) {\n                    if (tlEvents[j].getId() === event.getId()) {\n                        // still need to set the right metadata on this event\n                        if (!roomState) {\n                            roomState = timeline.getState(EventTimeline.FORWARDS);\n                        }\n                        EventTimeline.setEventMetadata(\n                            event,\n                            roomState,\n                            false,\n                        );\n                        tlEvents[j] = event;\n\n                        // XXX: we need to fire an event when this happens.\n                        break;\n                    }\n                }\n            } else {\n                debuglog(\"EventTimelineSet.addLiveEvent: ignoring duplicate event \" +\n                    event.getId());\n            }\n            return;\n        }\n\n        this.addEventToTimeline(event, this.liveTimeline, false, fromCache, roomState);\n    }\n\n    /**\n     * Add event to the given timeline, and emit Room.timeline. Assumes\n     * we have already checked we don't know about this event.\n     *\n     * Will fire \"Room.timeline\" for each event added.\n     *\n     * @param {MatrixEvent} event\n     * @param {EventTimeline} timeline\n     * @param {boolean} toStartOfTimeline\n     * @param {boolean} fromCache whether the sync response came from cache\n     *\n     * @fires module:client~MatrixClient#event:\"Room.timeline\"\n     */\n    public addEventToTimeline(\n        event: MatrixEvent,\n        timeline: EventTimeline,\n        toStartOfTimeline: boolean,\n        fromCache = false,\n        roomState?: RoomState,\n    ) {\n        const eventId = event.getId();\n        timeline.addEvent(event, toStartOfTimeline, roomState);\n        this._eventIdToTimeline[eventId] = timeline;\n\n        this.setRelationsTarget(event);\n        this.aggregateRelations(event);\n\n        const data: IRoomTimelineData = {\n            timeline: timeline,\n            liveEvent: !toStartOfTimeline && timeline == this.liveTimeline && !fromCache,\n        };\n        this.emit(RoomEvent.Timeline, event, this.room, Boolean(toStartOfTimeline), false, data);\n    }\n\n    /**\n     * Replaces event with ID oldEventId with one with newEventId, if oldEventId is\n     * recognised.  Otherwise, add to the live timeline.  Used to handle remote echos.\n     *\n     * @param {MatrixEvent} localEvent     the new event to be added to the timeline\n     * @param {String} oldEventId          the ID of the original event\n     * @param {boolean} newEventId         the ID of the replacement event\n     *\n     * @fires module:client~MatrixClient#event:\"Room.timeline\"\n     */\n    public handleRemoteEcho(\n        localEvent: MatrixEvent,\n        oldEventId: string,\n        newEventId: string,\n    ): void {\n        // XXX: why don't we infer newEventId from localEvent?\n        const existingTimeline = this._eventIdToTimeline[oldEventId];\n        if (existingTimeline) {\n            delete this._eventIdToTimeline[oldEventId];\n            this._eventIdToTimeline[newEventId] = existingTimeline;\n        } else {\n            if (this.filter) {\n                if (this.filter.filterRoomTimeline([localEvent]).length) {\n                    this.addEventToTimeline(localEvent, this.liveTimeline, false);\n                }\n            } else {\n                this.addEventToTimeline(localEvent, this.liveTimeline, false);\n            }\n        }\n    }\n\n    /**\n     * Removes a single event from this room.\n     *\n     * @param {String} eventId  The id of the event to remove\n     *\n     * @return {?MatrixEvent} the removed event, or null if the event was not found\n     * in this room.\n     */\n    public removeEvent(eventId: string): MatrixEvent | null {\n        const timeline = this._eventIdToTimeline[eventId];\n        if (!timeline) {\n            return null;\n        }\n\n        const removed = timeline.removeEvent(eventId);\n        if (removed) {\n            delete this._eventIdToTimeline[eventId];\n            const data = {\n                timeline: timeline,\n            };\n            this.emit(RoomEvent.Timeline, removed, this.room, undefined, true, data);\n        }\n        return removed;\n    }\n\n    /**\n     * Determine where two events appear in the timeline relative to one another\n     *\n     * @param {string} eventId1   The id of the first event\n     * @param {string} eventId2   The id of the second event\n\n     * @return {?number} a number less than zero if eventId1 precedes eventId2, and\n     *    greater than zero if eventId1 succeeds eventId2. zero if they are the\n     *    same event; null if we can't tell (either because we don't know about one\n     *    of the events, or because they are in separate timelines which don't join\n     *    up).\n     */\n    public compareEventOrdering(eventId1: string, eventId2: string): number | null {\n        if (eventId1 == eventId2) {\n            // optimise this case\n            return 0;\n        }\n\n        const timeline1 = this._eventIdToTimeline[eventId1];\n        const timeline2 = this._eventIdToTimeline[eventId2];\n\n        if (timeline1 === undefined) {\n            return null;\n        }\n        if (timeline2 === undefined) {\n            return null;\n        }\n\n        if (timeline1 === timeline2) {\n            // both events are in the same timeline - figure out their\n            // relative indices\n            let idx1;\n            let idx2;\n            const events = timeline1.getEvents();\n            for (let idx = 0; idx < events.length &&\n            (idx1 === undefined || idx2 === undefined); idx++) {\n                const evId = events[idx].getId();\n                if (evId == eventId1) {\n                    idx1 = idx;\n                }\n                if (evId == eventId2) {\n                    idx2 = idx;\n                }\n            }\n            return idx1 - idx2;\n        }\n\n        // the events are in different timelines. Iterate through the\n        // linkedlist to see which comes first.\n\n        // first work forwards from timeline1\n        let tl = timeline1;\n        while (tl) {\n            if (tl === timeline2) {\n                // timeline1 is before timeline2\n                return -1;\n            }\n            tl = tl.getNeighbouringTimeline(EventTimeline.FORWARDS);\n        }\n\n        // now try backwards from timeline1\n        tl = timeline1;\n        while (tl) {\n            if (tl === timeline2) {\n                // timeline2 is before timeline1\n                return 1;\n            }\n            tl = tl.getNeighbouringTimeline(EventTimeline.BACKWARDS);\n        }\n\n        // the timelines are not contiguous.\n        return null;\n    }\n\n    /**\n     * Get a collection of relations to a given event in this timeline set.\n     *\n     * @param {String} eventId\n     * The ID of the event that you'd like to access relation events for.\n     * For example, with annotations, this would be the ID of the event being annotated.\n     * @param {String} relationType\n     * The type of relation involved, such as \"m.annotation\", \"m.reference\", \"m.replace\", etc.\n     * @param {String} eventType\n     * The relation event's type, such as \"m.reaction\", etc.\n     * @throws If <code>eventId</code>, <code>relationType</code> or <code>eventType</code>\n     * are not valid.\n     *\n     * @returns {?Relations}\n     * A container for relation events or undefined if there are no relation events for\n     * the relationType.\n     */\n    public getRelationsForEvent(\n        eventId: string,\n        relationType: RelationType | string,\n        eventType: EventType | string,\n    ): Relations | undefined {\n        if (!this.unstableClientRelationAggregation) {\n            throw new Error(\"Client-side relation aggregation is disabled\");\n        }\n\n        if (!eventId || !relationType || !eventType) {\n            throw new Error(\"Invalid arguments for `getRelationsForEvent`\");\n        }\n\n        // debuglog(\"Getting relations for: \", eventId, relationType, eventType);\n\n        const relationsForEvent = this.relations[eventId] || {};\n        const relationsWithRelType = relationsForEvent[relationType] || {};\n        return relationsWithRelType[eventType];\n    }\n\n    public getAllRelationsEventForEvent(eventId: string): MatrixEvent[] {\n        const relationsForEvent = this.relations?.[eventId] || {};\n        const events = [];\n        for (const relationsRecord of Object.values(relationsForEvent)) {\n            for (const relations of Object.values(relationsRecord)) {\n                events.push(...relations.getRelations());\n            }\n        }\n        return events;\n    }\n\n    /**\n     * Set an event as the target event if any Relations exist for it already\n     *\n     * @param {MatrixEvent} event\n     * The event to check as relation target.\n     */\n    public setRelationsTarget(event: MatrixEvent): void {\n        if (!this.unstableClientRelationAggregation) {\n            return;\n        }\n\n        const relationsForEvent = this.relations[event.getId()];\n        if (!relationsForEvent) {\n            return;\n        }\n\n        for (const relationsWithRelType of Object.values(relationsForEvent)) {\n            for (const relationsWithEventType of Object.values(relationsWithRelType)) {\n                relationsWithEventType.setTargetEvent(event);\n            }\n        }\n    }\n\n    /**\n     * Add relation events to the relevant relation collection.\n     *\n     * @param {MatrixEvent} event\n     * The new relation event to be aggregated.\n     */\n    public aggregateRelations(event: MatrixEvent): void {\n        if (!this.unstableClientRelationAggregation) {\n            return;\n        }\n\n        if (event.isRedacted() || event.status === EventStatus.CANCELLED) {\n            return;\n        }\n\n        // If the event is currently encrypted, wait until it has been decrypted.\n        if (event.isBeingDecrypted() || event.shouldAttemptDecryption()) {\n            event.once(MatrixEventEvent.Decrypted, () => {\n                this.aggregateRelations(event);\n            });\n            return;\n        }\n\n        const relation = event.getRelation();\n        if (!relation) {\n            return;\n        }\n\n        const relatesToEventId = relation.event_id;\n        const relationType = relation.rel_type;\n        const eventType = event.getType();\n\n        // debuglog(\"Aggregating relation: \", event.getId(), eventType, relation);\n\n        let relationsForEvent: Record<string, Partial<Record<string, Relations>>> = this.relations[relatesToEventId];\n        if (!relationsForEvent) {\n            relationsForEvent = this.relations[relatesToEventId] = {};\n        }\n        let relationsWithRelType = relationsForEvent[relationType];\n        if (!relationsWithRelType) {\n            relationsWithRelType = relationsForEvent[relationType] = {};\n        }\n        let relationsWithEventType = relationsWithRelType[eventType];\n\n        let relatesToEvent: MatrixEvent;\n        if (!relationsWithEventType) {\n            relationsWithEventType = relationsWithRelType[eventType] = new Relations(\n                relationType,\n                eventType,\n                this.room,\n            );\n            relatesToEvent = this.findEventById(relatesToEventId) || this.room.getPendingEvent(relatesToEventId);\n            if (relatesToEvent) {\n                relationsWithEventType.setTargetEvent(relatesToEvent);\n            }\n        }\n\n        relationsWithEventType.addEvent(event);\n    }\n}\n\n/**\n * Fires whenever the timeline in a room is updated.\n * @event module:client~MatrixClient#\"Room.timeline\"\n * @param {MatrixEvent} event The matrix event which caused this event to fire.\n * @param {?Room} room The room, if any, whose timeline was updated.\n * @param {boolean} toStartOfTimeline True if this event was added to the start\n * @param {boolean} removed True if this event has just been removed from the timeline\n * (beginning; oldest) of the timeline e.g. due to pagination.\n *\n * @param {object} data  more data about the event\n *\n * @param {module:models/event-timeline.EventTimeline} data.timeline the timeline the\n * event was added to/removed from\n *\n * @param {boolean} data.liveEvent true if the event was a real-time event\n * added to the end of the live timeline\n *\n * @example\n * matrixClient.on(\"Room.timeline\",\n *                 function(event, room, toStartOfTimeline, removed, data) {\n *   if (!toStartOfTimeline && data.liveEvent) {\n *     var messageToAppend = room.timeline.[room.timeline.length - 1];\n *   }\n * });\n */\n\n/**\n * Fires whenever the live timeline in a room is reset.\n *\n * When we get a 'limited' sync (for example, after a network outage), we reset\n * the live timeline to be empty before adding the recent events to the new\n * timeline. This event is fired after the timeline is reset, and before the\n * new events are added.\n *\n * @event module:client~MatrixClient#\"Room.timelineReset\"\n * @param {Room} room The room whose live timeline was reset, if any\n * @param {EventTimelineSet} timelineSet timelineSet room whose live timeline was reset\n * @param {boolean} resetAllTimelines True if all timelines were reset.\n */\n",
    "/*\nCopyright 2016 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * @module models/event-timeline\n */\n\nimport { RoomState } from \"./room-state\";\nimport { EventTimelineSet } from \"./event-timeline-set\";\nimport { MatrixEvent } from \"./event\";\nimport { Filter } from \"../filter\";\nimport { EventType } from \"../@types/event\";\n\nexport enum Direction {\n    Backward = \"b\",\n    Forward = \"f\",\n}\n\nexport class EventTimeline {\n    /**\n     * Symbolic constant for methods which take a 'direction' argument:\n     * refers to the start of the timeline, or backwards in time.\n     */\n    public static readonly BACKWARDS = Direction.Backward;\n\n    /**\n     * Symbolic constant for methods which take a 'direction' argument:\n     * refers to the end of the timeline, or forwards in time.\n     */\n    public static readonly FORWARDS = Direction.Forward;\n\n    /**\n     * Static helper method to set sender and target properties\n     *\n     * @param {MatrixEvent} event   the event whose metadata is to be set\n     * @param {RoomState} stateContext  the room state to be queried\n     * @param {boolean} toStartOfTimeline  if true the event's forwardLooking flag is set false\n     */\n    static setEventMetadata(event: MatrixEvent, stateContext: RoomState, toStartOfTimeline: boolean): void {\n        // When we try to generate a sentinel member before we have that member\n        // in the members object, we still generate a sentinel but it doesn't\n        // have a membership event, so test to see if events.member is set. We\n        // check this to avoid overriding non-sentinel members by sentinel ones\n        // when adding the event to a filtered timeline\n        if (!event.sender?.events?.member) {\n            event.sender = stateContext.getSentinelMember(event.getSender());\n        }\n        if (!event.target?.events?.member && event.getType() === EventType.RoomMember) {\n            event.target = stateContext.getSentinelMember(event.getStateKey());\n        }\n\n        if (event.isState()) {\n            // room state has no concept of 'old' or 'current', but we want the\n            // room state to regress back to previous values if toStartOfTimeline\n            // is set, which means inspecting prev_content if it exists. This\n            // is done by toggling the forwardLooking flag.\n            if (toStartOfTimeline) {\n                event.forwardLooking = false;\n            }\n        }\n    }\n\n    private readonly roomId: string | null;\n    private readonly name: string;\n    private events: MatrixEvent[] = [];\n    private baseIndex = 0;\n    private startState: RoomState;\n    private endState: RoomState;\n    private prevTimeline?: EventTimeline;\n    private nextTimeline?: EventTimeline;\n    public paginationRequests: Record<Direction, Promise<boolean>> = {\n        [Direction.Backward]: null,\n        [Direction.Forward]: null,\n    };\n\n    /**\n     * Construct a new EventTimeline\n     *\n     * <p>An EventTimeline represents a contiguous sequence of events in a room.\n     *\n     * <p>As well as keeping track of the events themselves, it stores the state of\n     * the room at the beginning and end of the timeline, and pagination tokens for\n     * going backwards and forwards in the timeline.\n     *\n     * <p>In order that clients can meaningfully maintain an index into a timeline,\n     * the EventTimeline object tracks a 'baseIndex'. This starts at zero, but is\n     * incremented when events are prepended to the timeline. The index of an event\n     * relative to baseIndex therefore remains constant.\n     *\n     * <p>Once a timeline joins up with its neighbour, they are linked together into a\n     * doubly-linked list.\n     *\n     * @param {EventTimelineSet} eventTimelineSet the set of timelines this is part of\n     * @constructor\n     */\n    constructor(private readonly eventTimelineSet: EventTimelineSet) {\n        this.roomId = eventTimelineSet.room?.roomId ?? null;\n        this.startState = new RoomState(this.roomId);\n        this.startState.paginationToken = null;\n        this.endState = new RoomState(this.roomId);\n        this.endState.paginationToken = null;\n\n        this.prevTimeline = null;\n        this.nextTimeline = null;\n\n        // this is used by client.js\n        this.paginationRequests = { 'b': null, 'f': null };\n\n        this.name = this.roomId + \":\" + new Date().toISOString();\n    }\n\n    /**\n     * Initialise the start and end state with the given events\n     *\n     * <p>This can only be called before any events are added.\n     *\n     * @param {MatrixEvent[]} stateEvents list of state events to initialise the\n     * state with.\n     * @throws {Error} if an attempt is made to call this after addEvent is called.\n     */\n    public initialiseState(stateEvents: MatrixEvent[]): void {\n        if (this.events.length > 0) {\n            throw new Error(\"Cannot initialise state after events are added\");\n        }\n\n        // We previously deep copied events here and used different copies in\n        // the oldState and state events: this decision seems to date back\n        // quite a way and was apparently made to fix a bug where modifications\n        // made to the start state leaked through to the end state.\n        // This really shouldn't be possible though: the events themselves should\n        // not change. Duplicating the events uses a lot of extra memory,\n        // so we now no longer do it. To assert that they really do never change,\n        // freeze them! Note that we can't do this for events in general:\n        // although it looks like the only things preventing us are the\n        // 'status' flag, forwardLooking (which is only set once when adding to the\n        // timeline) and possibly the sender (which seems like it should never be\n        // reset but in practice causes a lot of the tests to break).\n        for (const e of stateEvents) {\n            Object.freeze(e);\n        }\n\n        this.startState.setStateEvents(stateEvents);\n        this.endState.setStateEvents(stateEvents);\n    }\n\n    /**\n     * Forks the (live) timeline, taking ownership of the existing directional state of this timeline.\n     * All attached listeners will keep receiving state updates from the new live timeline state.\n     * The end state of this timeline gets replaced with an independent copy of the current RoomState,\n     * and will need a new pagination token if it ever needs to paginate forwards.\n\n     * @param {string} direction   EventTimeline.BACKWARDS to get the state at the\n     *   start of the timeline; EventTimeline.FORWARDS to get the state at the end\n     *   of the timeline.\n     *\n     * @return {EventTimeline} the new timeline\n     */\n    public forkLive(direction: Direction): EventTimeline {\n        const forkState = this.getState(direction);\n        const timeline = new EventTimeline(this.eventTimelineSet);\n        timeline.startState = forkState.clone();\n        // Now clobber the end state of the new live timeline with that from the\n        // previous live timeline. It will be identical except that we'll keep\n        // using the same RoomMember objects for the 'live' set of members with any\n        // listeners still attached\n        timeline.endState = forkState;\n        // Firstly, we just stole the current timeline's end state, so it needs a new one.\n        // Make an immutable copy of the state so back pagination will get the correct sentinels.\n        this.endState = forkState.clone();\n        return timeline;\n    }\n\n    /**\n     * Creates an independent timeline, inheriting the directional state from this timeline.\n     *\n     * @param {string} direction   EventTimeline.BACKWARDS to get the state at the\n     *   start of the timeline; EventTimeline.FORWARDS to get the state at the end\n     *   of the timeline.\n     *\n     * @return {EventTimeline} the new timeline\n     */\n    public fork(direction: Direction): EventTimeline {\n        const forkState = this.getState(direction);\n        const timeline = new EventTimeline(this.eventTimelineSet);\n        timeline.startState = forkState.clone();\n        timeline.endState = forkState.clone();\n        return timeline;\n    }\n\n    /**\n     * Get the ID of the room for this timeline\n     * @return {string} room ID\n     */\n    public getRoomId(): string {\n        return this.roomId;\n    }\n\n    /**\n     * Get the filter for this timeline's timelineSet (if any)\n     * @return {Filter} filter\n     */\n    public getFilter(): Filter {\n        return this.eventTimelineSet.getFilter();\n    }\n\n    /**\n     * Get the timelineSet for this timeline\n     * @return {EventTimelineSet} timelineSet\n     */\n    public getTimelineSet(): EventTimelineSet {\n        return this.eventTimelineSet;\n    }\n\n    /**\n     * Get the base index.\n     *\n     * <p>This is an index which is incremented when events are prepended to the\n     * timeline. An individual event therefore stays at the same index in the array\n     * relative to the base index (although note that a given event's index may\n     * well be less than the base index, thus giving that event a negative relative\n     * index).\n     *\n     * @return {number}\n     */\n    public getBaseIndex(): number {\n        return this.baseIndex;\n    }\n\n    /**\n     * Get the list of events in this context\n     *\n     * @return {MatrixEvent[]} An array of MatrixEvents\n     */\n    public getEvents(): MatrixEvent[] {\n        return this.events;\n    }\n\n    /**\n     * Get the room state at the start/end of the timeline\n     *\n     * @param {string} direction   EventTimeline.BACKWARDS to get the state at the\n     *   start of the timeline; EventTimeline.FORWARDS to get the state at the end\n     *   of the timeline.\n     *\n     * @return {RoomState} state at the start/end of the timeline\n     */\n    public getState(direction: Direction): RoomState {\n        if (direction == EventTimeline.BACKWARDS) {\n            return this.startState;\n        } else if (direction == EventTimeline.FORWARDS) {\n            return this.endState;\n        } else {\n            throw new Error(\"Invalid direction '\" + direction + \"'\");\n        }\n    }\n\n    /**\n     * Get a pagination token\n     *\n     * @param {string} direction   EventTimeline.BACKWARDS to get the pagination\n     *   token for going backwards in time; EventTimeline.FORWARDS to get the\n     *   pagination token for going forwards in time.\n     *\n     * @return {?string} pagination token\n     */\n    public getPaginationToken(direction: Direction): string | null {\n        return this.getState(direction).paginationToken;\n    }\n\n    /**\n     * Set a pagination token\n     *\n     * @param {?string} token       pagination token\n     *\n     * @param {string} direction    EventTimeline.BACKWARDS to set the pagination\n     *   token for going backwards in time; EventTimeline.FORWARDS to set the\n     *   pagination token for going forwards in time.\n     */\n    public setPaginationToken(token: string, direction: Direction): void {\n        this.getState(direction).paginationToken = token;\n    }\n\n    /**\n     * Get the next timeline in the series\n     *\n     * @param {string} direction EventTimeline.BACKWARDS to get the previous\n     *   timeline; EventTimeline.FORWARDS to get the next timeline.\n     *\n     * @return {?EventTimeline} previous or following timeline, if they have been\n     * joined up.\n     */\n    public getNeighbouringTimeline(direction: Direction): EventTimeline {\n        if (direction == EventTimeline.BACKWARDS) {\n            return this.prevTimeline;\n        } else if (direction == EventTimeline.FORWARDS) {\n            return this.nextTimeline;\n        } else {\n            throw new Error(\"Invalid direction '\" + direction + \"'\");\n        }\n    }\n\n    /**\n     * Set the next timeline in the series\n     *\n     * @param {EventTimeline} neighbour previous/following timeline\n     *\n     * @param {string} direction EventTimeline.BACKWARDS to set the previous\n     *   timeline; EventTimeline.FORWARDS to set the next timeline.\n     *\n     * @throws {Error} if an attempt is made to set the neighbouring timeline when\n     * it is already set.\n     */\n    public setNeighbouringTimeline(neighbour: EventTimeline, direction: Direction): void {\n        if (this.getNeighbouringTimeline(direction)) {\n            throw new Error(\"timeline already has a neighbouring timeline - \" +\n                \"cannot reset neighbour (direction: \" + direction + \")\");\n        }\n\n        if (direction == EventTimeline.BACKWARDS) {\n            this.prevTimeline = neighbour;\n        } else if (direction == EventTimeline.FORWARDS) {\n            this.nextTimeline = neighbour;\n        } else {\n            throw new Error(\"Invalid direction '\" + direction + \"'\");\n        }\n\n        // make sure we don't try to paginate this timeline\n        this.setPaginationToken(null, direction);\n    }\n\n    /**\n     * Add a new event to the timeline, and update the state\n     *\n     * @param {MatrixEvent} event   new event\n     * @param {boolean}  atStart     true to insert new event at the start\n     */\n    public addEvent(event: MatrixEvent, atStart: boolean, stateContext?: RoomState): void {\n        if (!stateContext) {\n            stateContext = atStart ? this.startState : this.endState;\n        }\n\n        const timelineSet = this.getTimelineSet();\n\n        if (timelineSet.room) {\n            EventTimeline.setEventMetadata(event, stateContext, atStart);\n\n            // modify state but only on unfiltered timelineSets\n            if (\n                event.isState() &&\n                timelineSet.room.getUnfilteredTimelineSet() === timelineSet\n            ) {\n                stateContext.setStateEvents([event]);\n                // it is possible that the act of setting the state event means we\n                // can set more metadata (specifically sender/target props), so try\n                // it again if the prop wasn't previously set. It may also mean that\n                // the sender/target is updated (if the event set was a room member event)\n                // so we want to use the *updated* member (new avatar/name) instead.\n                //\n                // However, we do NOT want to do this on member events if we're going\n                // back in time, else we'll set the .sender value for BEFORE the given\n                // member event, whereas we want to set the .sender value for the ACTUAL\n                // member event itself.\n                if (!event.sender || (event.getType() === \"m.room.member\" && !atStart)) {\n                    EventTimeline.setEventMetadata(event, stateContext, atStart);\n                }\n            }\n        }\n\n        let insertIndex;\n\n        if (atStart) {\n            insertIndex = 0;\n        } else {\n            insertIndex = this.events.length;\n        }\n\n        this.events.splice(insertIndex, 0, event); // insert element\n        if (atStart) {\n            this.baseIndex++;\n        }\n    }\n\n    /**\n     * Remove an event from the timeline\n     *\n     * @param {string} eventId  ID of event to be removed\n     * @return {?MatrixEvent} removed event, or null if not found\n     */\n    public removeEvent(eventId: string): MatrixEvent | null {\n        for (let i = this.events.length - 1; i >= 0; i--) {\n            const ev = this.events[i];\n            if (ev.getId() == eventId) {\n                this.events.splice(i, 1);\n                if (i < this.baseIndex) {\n                    this.baseIndex--;\n                }\n                return ev;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Return a string to identify this timeline, for debugging\n     *\n     * @return {string} name for this timeline\n     */\n    public toString(): string {\n        return this.name;\n    }\n}\n",
    "/*\nCopyright 2015 - 2022 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * This is an internal module. See {@link MatrixEvent} and {@link RoomEvent} for\n * the public classes.\n * @module models/event\n */\n\nimport { ExtensibleEvent, ExtensibleEvents, Optional } from \"matrix-events-sdk\";\n\nimport { logger } from '../logger';\nimport { VerificationRequest } from \"../crypto/verification/request/VerificationRequest\";\nimport { EVENT_VISIBILITY_CHANGE_TYPE, EventType, MsgType, RelationType } from \"../@types/event\";\nimport { Crypto, IEventDecryptionResult } from \"../crypto\";\nimport { deepSortedObjectEntries } from \"../utils\";\nimport { RoomMember } from \"./room-member\";\nimport { Thread, ThreadEvent, EventHandlerMap as ThreadEventHandlerMap, THREAD_RELATION_TYPE } from \"./thread\";\nimport { IActionsObject } from '../pushprocessor';\nimport { TypedReEmitter } from '../ReEmitter';\nimport { MatrixError } from \"../http-api\";\nimport { TypedEventEmitter } from \"./typed-event-emitter\";\nimport { EventStatus } from \"./event-status\";\n\nexport { EventStatus } from \"./event-status\";\n\nconst interns: Record<string, string> = {};\nfunction intern(str: string): string {\n    if (!interns[str]) {\n        interns[str] = str;\n    }\n    return interns[str];\n}\n\n/* eslint-disable camelcase */\nexport interface IContent {\n    [key: string]: any;\n    msgtype?: MsgType | string;\n    membership?: string;\n    avatar_url?: string;\n    displayname?: string;\n    \"m.relates_to\"?: IEventRelation;\n}\n\ntype StrippedState = Required<Pick<IEvent, \"content\" | \"state_key\" | \"type\" | \"sender\">>;\n\nexport interface IUnsigned {\n    age?: number;\n    prev_sender?: string;\n    prev_content?: IContent;\n    redacted_because?: IEvent;\n    transaction_id?: string;\n    invite_room_state?: StrippedState[];\n    \"m.relations\"?: Record<RelationType | string, any>; // No common pattern for aggregated relations\n}\n\nexport interface IThreadBundledRelationship {\n    latest_event: IEvent;\n    count: number;\n    current_user_participated?: boolean;\n}\n\nexport interface IEvent {\n    event_id: string;\n    type: string;\n    content: IContent;\n    sender: string;\n    room_id: string;\n    origin_server_ts: number;\n    txn_id?: string;\n    state_key?: string;\n    membership?: string;\n    unsigned: IUnsigned;\n    redacts?: string;\n\n    /**\n     * @deprecated\n     */\n    user_id?: string;\n    /**\n     * @deprecated\n     */\n    prev_content?: IContent;\n    /**\n     * @deprecated\n     */\n    age?: number;\n}\n\nexport interface IAggregatedRelation {\n    origin_server_ts: number;\n    event_id?: string;\n    sender?: string;\n    type?: string;\n    count?: number;\n    key?: string;\n}\n\nexport interface IEventRelation {\n    rel_type?: RelationType | string;\n    event_id?: string;\n    is_falling_back?: boolean;\n    \"m.in_reply_to\"?: {\n        event_id: string;\n    };\n    key?: string;\n}\n\n/**\n * When an event is a visibility change event, as per MSC3531,\n * the visibility change implied by the event.\n */\nexport interface IVisibilityChange {\n    /**\n     * If `true`, the target event should be made visible.\n     * Otherwise, it should be hidden.\n     */\n    visible: boolean;\n\n    /**\n     * The event id affected.\n     */\n    eventId: string;\n\n    /**\n     * Optionally, a human-readable reason explaining why\n     * the event was hidden. Ignored if the event was made\n     * visible.\n     */\n    reason: string | null;\n}\n\nexport interface IClearEvent {\n    room_id?: string;\n    type: string;\n    content: Omit<IContent, \"membership\" | \"avatar_url\" | \"displayname\" | \"m.relates_to\">;\n    unsigned?: IUnsigned;\n}\n/* eslint-enable camelcase */\n\ninterface IKeyRequestRecipient {\n    userId: string;\n    deviceId: \"*\" | string;\n}\n\nexport interface IDecryptOptions {\n    emit?: boolean;\n    isRetry?: boolean;\n}\n\n/**\n * Message hiding, as specified by https://github.com/matrix-org/matrix-doc/pull/3531.\n */\nexport type MessageVisibility = IMessageVisibilityHidden | IMessageVisibilityVisible;\n/**\n * Variant of `MessageVisibility` for the case in which the message should be displayed.\n */\nexport interface IMessageVisibilityVisible {\n    readonly visible: true;\n}\n/**\n * Variant of `MessageVisibility` for the case in which the message should be hidden.\n */\nexport interface IMessageVisibilityHidden {\n    readonly visible: false;\n    /**\n     * Optionally, a human-readable reason to show to the user indicating why the\n     * message has been hidden (e.g. \"Message Pending Moderation\").\n     */\n    readonly reason: string | null;\n}\n// A singleton implementing `IMessageVisibilityVisible`.\nconst MESSAGE_VISIBLE: IMessageVisibilityVisible = Object.freeze({ visible: true });\n\nexport enum MatrixEventEvent {\n    Decrypted = \"Event.decrypted\",\n    BeforeRedaction = \"Event.beforeRedaction\",\n    VisibilityChange = \"Event.visibilityChange\",\n    LocalEventIdReplaced = \"Event.localEventIdReplaced\",\n    Status = \"Event.status\",\n    Replaced = \"Event.replaced\",\n    RelationsCreated = \"Event.relationsCreated\",\n}\n\ntype EmittedEvents = MatrixEventEvent | ThreadEvent.Update;\n\nexport type MatrixEventHandlerMap = {\n    [MatrixEventEvent.Decrypted]: (event: MatrixEvent, err?: Error) => void;\n    [MatrixEventEvent.BeforeRedaction]: (event: MatrixEvent, redactionEvent: MatrixEvent) => void;\n    [MatrixEventEvent.VisibilityChange]: (event: MatrixEvent, visible: boolean) => void;\n    [MatrixEventEvent.LocalEventIdReplaced]: (event: MatrixEvent) => void;\n    [MatrixEventEvent.Status]: (event: MatrixEvent, status: EventStatus) => void;\n    [MatrixEventEvent.Replaced]: (event: MatrixEvent) => void;\n    [MatrixEventEvent.RelationsCreated]: (relationType: string, eventType: string) => void;\n} & ThreadEventHandlerMap;\n\nexport class MatrixEvent extends TypedEventEmitter<EmittedEvents, MatrixEventHandlerMap> {\n    private pushActions: IActionsObject = null;\n    private _replacingEvent: MatrixEvent = null;\n    private _localRedactionEvent: MatrixEvent = null;\n    private _isCancelled = false;\n    private clearEvent?: IClearEvent;\n\n    /* Message hiding, as specified by https://github.com/matrix-org/matrix-doc/pull/3531.\n\n    Note: We're returning this object, so any value stored here MUST be frozen.\n    */\n    private visibility: MessageVisibility = MESSAGE_VISIBLE;\n\n    // Not all events will be extensible-event compatible, so cache a flag in\n    // addition to a falsy cached event value. We check the flag later on in\n    // a public getter to decide if the cache is valid.\n    private _hasCachedExtEv = false;\n    private _cachedExtEv: Optional<ExtensibleEvent> = undefined;\n\n    /* curve25519 key which we believe belongs to the sender of the event. See\n     * getSenderKey()\n     */\n    private senderCurve25519Key: string = null;\n\n    /* ed25519 key which the sender of this event (for olm) or the creator of\n     * the megolm session (for megolm) claims to own. See getClaimedEd25519Key()\n     */\n    private claimedEd25519Key: string = null;\n\n    /* curve25519 keys of devices involved in telling us about the\n     * senderCurve25519Key and claimedEd25519Key.\n     * See getForwardingCurve25519KeyChain().\n     */\n    private forwardingCurve25519KeyChain: string[] = [];\n\n    /* where the decryption key is untrusted\n     */\n    private untrusted: boolean = null;\n\n    /* if we have a process decrypting this event, a Promise which resolves\n     * when it is finished. Normally null.\n     */\n    private _decryptionPromise: Promise<void> = null;\n\n    /* flag to indicate if we should retry decrypting this event after the\n     * first attempt (eg, we have received new data which means that a second\n     * attempt may succeed)\n     */\n    private retryDecryption = false;\n\n    /* The txnId with which this event was sent if it was during this session,\n     * allows for a unique ID which does not change when the event comes back down sync.\n     */\n    private txnId: string = null;\n\n    /**\n     * @experimental\n     * A reference to the thread this event belongs to\n     */\n    private thread: Thread = null;\n    private threadId: string;\n\n    /* Set an approximate timestamp for the event relative the local clock.\n     * This will inherently be approximate because it doesn't take into account\n     * the time between the server putting the 'age' field on the event as it sent\n     * it to us and the time we're now constructing this event, but that's better\n     * than assuming the local clock is in sync with the origin HS's clock.\n     */\n    public localTimestamp: number;\n\n    // XXX: these should be read-only\n    public sender: RoomMember = null;\n    public target: RoomMember = null;\n    public status: EventStatus = null;\n    public error: MatrixError = null;\n    public forwardLooking = true; // only state events may be backwards looking\n\n    /* If the event is a `m.key.verification.request` (or to_device `m.key.verification.start`) event,\n     * `Crypto` will set this the `VerificationRequest` for the event\n     * so it can be easily accessed from the timeline.\n     */\n    public verificationRequest: VerificationRequest = null;\n\n    private readonly reEmitter: TypedReEmitter<EmittedEvents, MatrixEventHandlerMap>;\n\n    /**\n     * Construct a Matrix Event object\n     * @constructor\n     *\n     * @param {Object} event The raw event to be wrapped in this DAO\n     *\n     * @prop {Object} event The raw (possibly encrypted) event. <b>Do not access\n     * this property</b> directly unless you absolutely have to. Prefer the getter\n     * methods defined on this class. Using the getter methods shields your app\n     * from changes to event JSON between Matrix versions.\n     *\n     * @prop {RoomMember} sender The room member who sent this event, or null e.g.\n     * this is a presence event. This is only guaranteed to be set for events that\n     * appear in a timeline, ie. do not guarantee that it will be set on state\n     * events.\n     * @prop {RoomMember} target The room member who is the target of this event, e.g.\n     * the invitee, the person being banned, etc.\n     * @prop {EventStatus} status The sending status of the event.\n     * @prop {Error} error most recent error associated with sending the event, if any\n     * @prop {boolean} forwardLooking True if this event is 'forward looking', meaning\n     * that getDirectionalContent() will return event.content and not event.prev_content.\n     * Default: true. <strong>This property is experimental and may change.</strong>\n     */\n    constructor(public event: Partial<IEvent> = {}) {\n        super();\n\n        // intern the values of matrix events to force share strings and reduce the\n        // amount of needless string duplication. This can save moderate amounts of\n        // memory (~10% on a 350MB heap).\n        // 'membership' at the event level (rather than the content level) is a legacy\n        // field that Element never otherwise looks at, but it will still take up a lot\n        // of space if we don't intern it.\n        [\"state_key\", \"type\", \"sender\", \"room_id\", \"membership\"].forEach((prop) => {\n            if (typeof event[prop] !== \"string\") return;\n            event[prop] = intern(event[prop]);\n        });\n\n        [\"membership\", \"avatar_url\", \"displayname\"].forEach((prop) => {\n            if (typeof event.content?.[prop] !== \"string\") return;\n            event.content[prop] = intern(event.content[prop]);\n        });\n\n        [\"rel_type\"].forEach((prop) => {\n            if (typeof event.content?.[\"m.relates_to\"]?.[prop] !== \"string\") return;\n            event.content[\"m.relates_to\"][prop] = intern(event.content[\"m.relates_to\"][prop]);\n        });\n\n        this.txnId = event.txn_id || null;\n        this.localTimestamp = Date.now() - (this.getAge() ?? 0);\n        this.reEmitter = new TypedReEmitter(this);\n    }\n\n    /**\n     * Unstable getter to try and get an extensible event. Note that this might\n     * return a falsy value if the event could not be parsed as an extensible\n     * event.\n     *\n     * @deprecated Use stable functions where possible.\n     */\n    public get unstableExtensibleEvent(): Optional<ExtensibleEvent> {\n        if (!this._hasCachedExtEv) {\n            this._cachedExtEv = ExtensibleEvents.parse(this.getEffectiveEvent());\n        }\n        return this._cachedExtEv;\n    }\n\n    private invalidateExtensibleEvent() {\n        // just reset the flag - that'll trick the getter into parsing a new event\n        this._hasCachedExtEv = false;\n    }\n\n    /**\n     * Gets the event as though it would appear unencrypted. If the event is already not\n     * encrypted, it is simply returned as-is.\n     * @returns {IEvent} The event in wire format.\n     */\n    public getEffectiveEvent(): IEvent {\n        const content = Object.assign({}, this.getContent()); // clone for mutation\n\n        if (this.getWireType() === EventType.RoomMessageEncrypted) {\n            // Encrypted events sometimes aren't symmetrical on the `content` so we'll copy\n            // that over too, but only for missing properties. We don't copy over mismatches\n            // between the plain and decrypted copies of `content` because we assume that the\n            // app is relying on the decrypted version, so we want to expose that as a source\n            // of truth here too.\n            for (const [key, value] of Object.entries(this.getWireContent())) {\n                // Skip fields from the encrypted event schema though - we don't want to leak\n                // these.\n                if ([\"algorithm\", \"ciphertext\", \"device_id\", \"sender_key\", \"session_id\"].includes(key)) {\n                    continue;\n                }\n\n                if (content[key] === undefined) content[key] = value;\n            }\n        }\n\n        // clearEvent doesn't have all the fields, so we'll copy what we can from this.event.\n        // We also copy over our \"fixed\" content key.\n        return Object.assign({}, this.event, this.clearEvent, { content }) as IEvent;\n    }\n\n    /**\n     * Get the event_id for this event.\n     * @return {string} The event ID, e.g. <code>$143350589368169JsLZx:localhost\n     * </code>\n     */\n    public getId(): string {\n        return this.event.event_id;\n    }\n\n    /**\n     * Get the user_id for this event.\n     * @return {string} The user ID, e.g. <code>@alice:matrix.org</code>\n     */\n    public getSender(): string {\n        return this.event.sender || this.event.user_id; // v2 / v1\n    }\n\n    /**\n     * Get the (decrypted, if necessary) type of event.\n     *\n     * @return {string} The event type, e.g. <code>m.room.message</code>\n     */\n    public getType(): EventType | string {\n        if (this.clearEvent) {\n            return this.clearEvent.type;\n        }\n        return this.event.type;\n    }\n\n    /**\n     * Get the (possibly encrypted) type of the event that will be sent to the\n     * homeserver.\n     *\n     * @return {string} The event type.\n     */\n    public getWireType(): EventType | string {\n        return this.event.type;\n    }\n\n    /**\n     * Get the room_id for this event. This will return <code>undefined</code>\n     * for <code>m.presence</code> events.\n     * @return {string?} The room ID, e.g. <code>!cURbafjkfsMDVwdRDQ:matrix.org\n     * </code>\n     */\n    public getRoomId(): string | undefined {\n        return this.event.room_id;\n    }\n\n    /**\n     * Get the timestamp of this event.\n     * @return {Number} The event timestamp, e.g. <code>1433502692297</code>\n     */\n    public getTs(): number {\n        return this.event.origin_server_ts;\n    }\n\n    /**\n     * Get the timestamp of this event, as a Date object.\n     * @return {Date} The event date, e.g. <code>new Date(1433502692297)</code>\n     */\n    public getDate(): Date | null {\n        return this.event.origin_server_ts ? new Date(this.event.origin_server_ts) : null;\n    }\n\n    /**\n     * Get the (decrypted, if necessary) event content JSON, even if the event\n     * was replaced by another event.\n     *\n     * @return {Object} The event content JSON, or an empty object.\n     */\n    public getOriginalContent<T = IContent>(): T {\n        if (this._localRedactionEvent) {\n            return {} as T;\n        }\n        if (this.clearEvent) {\n            return (this.clearEvent.content || {}) as T;\n        }\n        return (this.event.content || {}) as T;\n    }\n\n    /**\n     * Get the (decrypted, if necessary) event content JSON,\n     * or the content from the replacing event, if any.\n     * See `makeReplaced`.\n     *\n     * @return {Object} The event content JSON, or an empty object.\n     */\n    public getContent<T extends IContent = IContent>(): T {\n        if (this._localRedactionEvent) {\n            return {} as T;\n        } else if (this._replacingEvent) {\n            return this._replacingEvent.getContent()[\"m.new_content\"] || {};\n        } else {\n            return this.getOriginalContent();\n        }\n    }\n\n    /**\n     * Get the (possibly encrypted) event content JSON that will be sent to the\n     * homeserver.\n     *\n     * @return {Object} The event content JSON, or an empty object.\n     */\n    public getWireContent(): IContent {\n        return this.event.content || {};\n    }\n\n    /**\n     * @experimental\n     * Get the event ID of the thread head\n     */\n    public get threadRootId(): string | undefined {\n        const relatesTo = this.getWireContent()?.[\"m.relates_to\"];\n        if (relatesTo?.rel_type === THREAD_RELATION_TYPE.name) {\n            return relatesTo.event_id;\n        } else {\n            return this.getThread()?.id || this.threadId;\n        }\n    }\n\n    /**\n     * @experimental\n     */\n    public get isThreadRelation(): boolean {\n        return !!this.threadRootId && this.threadId !== this.getId();\n    }\n\n    /**\n     * @experimental\n     */\n    public get isThreadRoot(): boolean {\n        const threadDetails = this\n            .getServerAggregatedRelation<IThreadBundledRelationship>(THREAD_RELATION_TYPE.name);\n\n        // Bundled relationships only returned when the sync response is limited\n        // hence us having to check both bundled relation and inspect the thread\n        // model\n        return !!threadDetails || (this.getThread()?.id === this.getId());\n    }\n\n    public get replyEventId(): string {\n        // We're prefer ev.getContent() over ev.getWireContent() to make sure\n        // we grab the latest edit with potentially new relations. But we also\n        // can't just rely on ev.getContent() by itself because historically we\n        // still show the reply from the original message even though the edit\n        // event does not include the relation reply.\n        const mRelatesTo = this.getContent()['m.relates_to'] || this.getWireContent()['m.relates_to'];\n        return mRelatesTo?.['m.in_reply_to']?.event_id;\n    }\n\n    public get relationEventId(): string {\n        return this.getWireContent()\n            ?.[\"m.relates_to\"]\n            ?.event_id;\n    }\n\n    /**\n     * Get the previous event content JSON. This will only return something for\n     * state events which exist in the timeline.\n     * @return {Object} The previous event content JSON, or an empty object.\n     */\n    public getPrevContent(): IContent {\n        // v2 then v1 then default\n        return this.getUnsigned().prev_content || this.event.prev_content || {};\n    }\n\n    /**\n     * Get either 'content' or 'prev_content' depending on if this event is\n     * 'forward-looking' or not. This can be modified via event.forwardLooking.\n     * In practice, this means we get the chronologically earlier content value\n     * for this event (this method should surely be called getEarlierContent)\n     * <strong>This method is experimental and may change.</strong>\n     * @return {Object} event.content if this event is forward-looking, else\n     * event.prev_content.\n     */\n    public getDirectionalContent(): IContent {\n        return this.forwardLooking ? this.getContent() : this.getPrevContent();\n    }\n\n    /**\n     * Get the age of this event. This represents the age of the event when the\n     * event arrived at the device, and not the age of the event when this\n     * function was called.\n     * Can only be returned once the server has echo'ed back\n     * @return {Number|undefined} The age of this event in milliseconds.\n     */\n    public getAge(): number | undefined {\n        return this.getUnsigned().age || this.event.age; // v2 / v1\n    }\n\n    /**\n     * Get the age of the event when this function was called.\n     * This is the 'age' field adjusted according to how long this client has\n     * had the event.\n     * @return {Number} The age of this event in milliseconds.\n     */\n    public getLocalAge(): number {\n        return Date.now() - this.localTimestamp;\n    }\n\n    /**\n     * Get the event state_key if it has one. This will return <code>undefined\n     * </code> for message events.\n     * @return {string} The event's <code>state_key</code>.\n     */\n    public getStateKey(): string | undefined {\n        return this.event.state_key;\n    }\n\n    /**\n     * Check if this event is a state event.\n     * @return {boolean} True if this is a state event.\n     */\n    public isState(): boolean {\n        return this.event.state_key !== undefined;\n    }\n\n    /**\n     * Replace the content of this event with encrypted versions.\n     * (This is used when sending an event; it should not be used by applications).\n     *\n     * @internal\n     *\n     * @param {string} cryptoType type of the encrypted event - typically\n     * <tt>\"m.room.encrypted\"</tt>\n     *\n     * @param {object} cryptoContent raw 'content' for the encrypted event.\n     *\n     * @param {string} senderCurve25519Key curve25519 key to record for the\n     *   sender of this event.\n     *   See {@link module:models/event.MatrixEvent#getSenderKey}.\n     *\n     * @param {string} claimedEd25519Key claimed ed25519 key to record for the\n     *   sender if this event.\n     *   See {@link module:models/event.MatrixEvent#getClaimedEd25519Key}\n     */\n    public makeEncrypted(\n        cryptoType: string,\n        cryptoContent: object,\n        senderCurve25519Key: string,\n        claimedEd25519Key: string,\n    ): void {\n        // keep the plain-text data for 'view source'\n        this.clearEvent = {\n            type: this.event.type,\n            content: this.event.content,\n        };\n        this.event.type = cryptoType;\n        this.event.content = cryptoContent;\n        this.senderCurve25519Key = senderCurve25519Key;\n        this.claimedEd25519Key = claimedEd25519Key;\n    }\n\n    /**\n     * Check if this event is currently being decrypted.\n     *\n     * @return {boolean} True if this event is currently being decrypted, else false.\n     */\n    public isBeingDecrypted(): boolean {\n        return this._decryptionPromise != null;\n    }\n\n    public getDecryptionPromise(): Promise<void> {\n        return this._decryptionPromise;\n    }\n\n    /**\n     * Check if this event is an encrypted event which we failed to decrypt\n     *\n     * (This implies that we might retry decryption at some point in the future)\n     *\n     * @return {boolean} True if this event is an encrypted event which we\n     *     couldn't decrypt.\n     */\n    public isDecryptionFailure(): boolean {\n        return this.clearEvent?.content?.msgtype === \"m.bad.encrypted\";\n    }\n\n    public shouldAttemptDecryption() {\n        if (this.isRedacted()) return false;\n        if (this.isBeingDecrypted()) return false;\n        if (this.clearEvent) return false;\n        if (!this.isEncrypted()) return false;\n\n        return true;\n    }\n\n    /**\n     * Start the process of trying to decrypt this event.\n     *\n     * (This is used within the SDK: it isn't intended for use by applications)\n     *\n     * @internal\n     *\n     * @param {module:crypto} crypto crypto module\n     * @param {object} options\n     * @param {boolean} options.isRetry True if this is a retry (enables more logging)\n     * @param {boolean} options.emit Emits \"event.decrypted\" if set to true\n     *\n     * @returns {Promise} promise which resolves (to undefined) when the decryption\n     * attempt is completed.\n     */\n    public async attemptDecryption(crypto: Crypto, options: IDecryptOptions = {}): Promise<void> {\n        // For backwards compatibility purposes\n        // The function signature used to be attemptDecryption(crypto, isRetry)\n        if (typeof options === \"boolean\") {\n            options = {\n                isRetry: options,\n            };\n        }\n\n        // start with a couple of sanity checks.\n        if (!this.isEncrypted()) {\n            throw new Error(\"Attempt to decrypt event which isn't encrypted\");\n        }\n\n        if (this.clearEvent && !this.isDecryptionFailure()) {\n            // we may want to just ignore this? let's start with rejecting it.\n            throw new Error(\n                \"Attempt to decrypt event which has already been decrypted\",\n            );\n        }\n\n        // if we already have a decryption attempt in progress, then it may\n        // fail because it was using outdated info. We now have reason to\n        // succeed where it failed before, but we don't want to have multiple\n        // attempts going at the same time, so just set a flag that says we have\n        // new info.\n        //\n        if (this._decryptionPromise) {\n            logger.log(\n                `Event ${this.getId()} already being decrypted; queueing a retry`,\n            );\n            this.retryDecryption = true;\n            return this._decryptionPromise;\n        }\n\n        this._decryptionPromise = this.decryptionLoop(crypto, options);\n        return this._decryptionPromise;\n    }\n\n    /**\n     * Cancel any room key request for this event and resend another.\n     *\n     * @param {module:crypto} crypto crypto module\n     * @param {string} userId the user who received this event\n     *\n     * @returns {Promise} a promise that resolves when the request is queued\n     */\n    public cancelAndResendKeyRequest(crypto: Crypto, userId: string): Promise<void> {\n        const wireContent = this.getWireContent();\n        return crypto.requestRoomKey({\n            algorithm: wireContent.algorithm,\n            room_id: this.getRoomId(),\n            session_id: wireContent.session_id,\n            sender_key: wireContent.sender_key,\n        }, this.getKeyRequestRecipients(userId), true);\n    }\n\n    /**\n     * Calculate the recipients for keyshare requests.\n     *\n     * @param {string} userId the user who received this event.\n     *\n     * @returns {Array} array of recipients\n     */\n    public getKeyRequestRecipients(userId: string): IKeyRequestRecipient[] {\n        // send the request to all of our own devices, and the\n        // original sending device if it wasn't us.\n        const wireContent = this.getWireContent();\n        const recipients = [{\n            userId, deviceId: '*',\n        }];\n        const sender = this.getSender();\n        if (sender !== userId) {\n            recipients.push({\n                userId: sender, deviceId: wireContent.device_id,\n            });\n        }\n        return recipients;\n    }\n\n    private async decryptionLoop(crypto: Crypto, options: IDecryptOptions = {}): Promise<void> {\n        // make sure that this method never runs completely synchronously.\n        // (doing so would mean that we would clear _decryptionPromise *before*\n        // it is set in attemptDecryption - and hence end up with a stuck\n        // `_decryptionPromise`).\n        await Promise.resolve();\n\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            this.retryDecryption = false;\n\n            let res: IEventDecryptionResult;\n            let err: Error;\n            try {\n                if (!crypto) {\n                    res = this.badEncryptedMessage(\"Encryption not enabled\");\n                } else {\n                    res = await crypto.decryptEvent(this);\n                    if (options.isRetry === true) {\n                        logger.info(`Decrypted event on retry (id=${this.getId()})`);\n                    }\n                }\n            } catch (e) {\n                if (e.name !== \"DecryptionError\") {\n                    // not a decryption error: log the whole exception as an error\n                    // (and don't bother with a retry)\n                    const re = options.isRetry ? 're' : '';\n                    logger.error(\n                        `Error ${re}decrypting event ` +\n                        `(id=${this.getId()}): ${e.stack || e}`,\n                    );\n                    this._decryptionPromise = null;\n                    this.retryDecryption = false;\n                    return;\n                }\n\n                err = e;\n\n                // see if we have a retry queued.\n                //\n                // NB: make sure to keep this check in the same tick of the\n                //   event loop as `_decryptionPromise = null` below - otherwise we\n                //   risk a race:\n                //\n                //   * A: we check retryDecryption here and see that it is\n                //        false\n                //   * B: we get a second call to attemptDecryption, which sees\n                //        that _decryptionPromise is set so sets\n                //        retryDecryption\n                //   * A: we continue below, clear _decryptionPromise, and\n                //        never do the retry.\n                //\n                if (this.retryDecryption) {\n                    // decryption error, but we have a retry queued.\n                    logger.log(\n                        `Got error decrypting event (id=${this.getId()}: ` +\n                        `${e}), but retrying`,\n                    );\n                    continue;\n                }\n\n                // decryption error, no retries queued. Warn about the error and\n                // set it to m.bad.encrypted.\n                logger.warn(\n                    `Error decrypting event (id=${this.getId()}): ${e.detailedString}`,\n                );\n\n                res = this.badEncryptedMessage(e.message);\n            }\n\n            // at this point, we've either successfully decrypted the event, or have given up\n            // (and set res to a 'badEncryptedMessage'). Either way, we can now set the\n            // cleartext of the event and raise Event.decrypted.\n            //\n            // make sure we clear '_decryptionPromise' before sending the 'Event.decrypted' event,\n            // otherwise the app will be confused to see `isBeingDecrypted` still set when\n            // there isn't an `Event.decrypted` on the way.\n            //\n            // see also notes on retryDecryption above.\n            //\n            this._decryptionPromise = null;\n            this.retryDecryption = false;\n            this.setClearData(res);\n\n            // Before we emit the event, clear the push actions so that they can be recalculated\n            // by relevant code. We do this because the clear event has now changed, making it\n            // so that existing rules can be re-run over the applicable properties. Stuff like\n            // highlighting when the user's name is mentioned rely on this happening. We also want\n            // to set the push actions before emitting so that any notification listeners don't\n            // pick up the wrong contents.\n            this.setPushActions(null);\n\n            if (options.emit !== false) {\n                this.emit(MatrixEventEvent.Decrypted, this, err);\n            }\n\n            return;\n        }\n    }\n\n    private badEncryptedMessage(reason: string): IEventDecryptionResult {\n        return {\n            clearEvent: {\n                type: EventType.RoomMessage,\n                content: {\n                    msgtype: \"m.bad.encrypted\",\n                    body: \"** Unable to decrypt: \" + reason + \" **\",\n                },\n            },\n        };\n    }\n\n    /**\n     * Update the cleartext data on this event.\n     *\n     * (This is used after decrypting an event; it should not be used by applications).\n     *\n     * @internal\n     *\n     * @fires module:models/event.MatrixEvent#\"Event.decrypted\"\n     *\n     * @param {module:crypto~EventDecryptionResult} decryptionResult\n     *     the decryption result, including the plaintext and some key info\n     */\n    private setClearData(decryptionResult: IEventDecryptionResult): void {\n        this.clearEvent = decryptionResult.clearEvent;\n        this.senderCurve25519Key =\n            decryptionResult.senderCurve25519Key || null;\n        this.claimedEd25519Key =\n            decryptionResult.claimedEd25519Key || null;\n        this.forwardingCurve25519KeyChain =\n            decryptionResult.forwardingCurve25519KeyChain || [];\n        this.untrusted = decryptionResult.untrusted || false;\n        this.invalidateExtensibleEvent();\n    }\n\n    /**\n     * Gets the cleartext content for this event. If the event is not encrypted,\n     * or encryption has not been completed, this will return null.\n     *\n     * @returns {Object} The cleartext (decrypted) content for the event\n     */\n    public getClearContent(): IContent | null {\n        return this.clearEvent ? this.clearEvent.content : null;\n    }\n\n    /**\n     * Check if the event is encrypted.\n     * @return {boolean} True if this event is encrypted.\n     */\n    public isEncrypted(): boolean {\n        return !this.isState() && this.event.type === EventType.RoomMessageEncrypted;\n    }\n\n    /**\n     * The curve25519 key for the device that we think sent this event\n     *\n     * For an Olm-encrypted event, this is inferred directly from the DH\n     * exchange at the start of the session: the curve25519 key is involved in\n     * the DH exchange, so only a device which holds the private part of that\n     * key can establish such a session.\n     *\n     * For a megolm-encrypted event, it is inferred from the Olm message which\n     * established the megolm session\n     *\n     * @return {string}\n     */\n    public getSenderKey(): string | null {\n        return this.senderCurve25519Key;\n    }\n\n    /**\n     * The additional keys the sender of this encrypted event claims to possess.\n     *\n     * Just a wrapper for #getClaimedEd25519Key (q.v.)\n     *\n     * @return {Object<string, string>}\n     */\n    public getKeysClaimed(): Record<\"ed25519\", string> {\n        return {\n            ed25519: this.claimedEd25519Key,\n        };\n    }\n\n    /**\n     * Get the ed25519 the sender of this event claims to own.\n     *\n     * For Olm messages, this claim is encoded directly in the plaintext of the\n     * event itself. For megolm messages, it is implied by the m.room_key event\n     * which established the megolm session.\n     *\n     * Until we download the device list of the sender, it's just a claim: the\n     * device list gives a proof that the owner of the curve25519 key used for\n     * this event (and returned by #getSenderKey) also owns the ed25519 key by\n     * signing the public curve25519 key with the ed25519 key.\n     *\n     * In general, applications should not use this method directly, but should\n     * instead use MatrixClient.getEventSenderDeviceInfo.\n     *\n     * @return {string}\n     */\n    public getClaimedEd25519Key(): string | null {\n        return this.claimedEd25519Key;\n    }\n\n    /**\n     * Get the curve25519 keys of the devices which were involved in telling us\n     * about the claimedEd25519Key and sender curve25519 key.\n     *\n     * Normally this will be empty, but in the case of a forwarded megolm\n     * session, the sender keys are sent to us by another device (the forwarding\n     * device), which we need to trust to do this. In that case, the result will\n     * be a list consisting of one entry.\n     *\n     * If the device that sent us the key (A) got it from another device which\n     * it wasn't prepared to vouch for (B), the result will be [A, B]. And so on.\n     *\n     * @return {string[]} base64-encoded curve25519 keys, from oldest to newest.\n     */\n    public getForwardingCurve25519KeyChain(): string[] {\n        return this.forwardingCurve25519KeyChain;\n    }\n\n    /**\n     * Whether the decryption key was obtained from an untrusted source. If so,\n     * we cannot verify the authenticity of the message.\n     *\n     * @return {boolean}\n     */\n    public isKeySourceUntrusted(): boolean {\n        return this.untrusted;\n    }\n\n    public getUnsigned(): IUnsigned {\n        return this.event.unsigned || {};\n    }\n\n    public setUnsigned(unsigned: IUnsigned): void {\n        this.event.unsigned = unsigned;\n    }\n\n    public unmarkLocallyRedacted(): boolean {\n        const value = this._localRedactionEvent;\n        this._localRedactionEvent = null;\n        if (this.event.unsigned) {\n            this.event.unsigned.redacted_because = null;\n        }\n        return !!value;\n    }\n\n    public markLocallyRedacted(redactionEvent: MatrixEvent): void {\n        if (this._localRedactionEvent) return;\n        this.emit(MatrixEventEvent.BeforeRedaction, this, redactionEvent);\n        this._localRedactionEvent = redactionEvent;\n        if (!this.event.unsigned) {\n            this.event.unsigned = {};\n        }\n        this.event.unsigned.redacted_because = redactionEvent.event as IEvent;\n    }\n\n    /**\n     * Change the visibility of an event, as per https://github.com/matrix-org/matrix-doc/pull/3531 .\n     *\n     * @fires module:models/event.MatrixEvent#\"Event.visibilityChange\" if `visibilityEvent`\n     *   caused a change in the actual visibility of this event, either by making it\n     *   visible (if it was hidden), by making it hidden (if it was visible) or by\n     *   changing the reason (if it was hidden).\n     * @param visibilityEvent event holding a hide/unhide payload, or nothing\n     *   if the event is being reset to its original visibility (presumably\n     *   by a visibility event being redacted).\n     */\n    public applyVisibilityEvent(visibilityChange?: IVisibilityChange): void {\n        const visible = visibilityChange ? visibilityChange.visible : true;\n        const reason = visibilityChange ? visibilityChange.reason : null;\n        let change = false;\n        if (this.visibility.visible !== visibilityChange.visible) {\n            change = true;\n        } else if (!this.visibility.visible && this.visibility[\"reason\"] !== reason) {\n            change = true;\n        }\n        if (change) {\n            if (visible) {\n                this.visibility = MESSAGE_VISIBLE;\n            } else {\n                this.visibility = Object.freeze({\n                    visible: false,\n                    reason: reason,\n                });\n            }\n            if (change) {\n                this.emit(MatrixEventEvent.VisibilityChange, this, visible);\n            }\n        }\n    }\n\n    /**\n     * Return instructions to display or hide the message.\n     *\n     * @returns Instructions determining whether the message\n     * should be displayed.\n     */\n    public messageVisibility(): MessageVisibility {\n        // Note: We may return `this.visibility` without fear, as\n        // this is a shallow frozen object.\n        return this.visibility;\n    }\n\n    /**\n     * Update the content of an event in the same way it would be by the server\n     * if it were redacted before it was sent to us\n     *\n     * @param {module:models/event.MatrixEvent} redactionEvent\n     *     event causing the redaction\n     */\n    public makeRedacted(redactionEvent: MatrixEvent): void {\n        // quick sanity-check\n        if (!redactionEvent.event) {\n            throw new Error(\"invalid redactionEvent in makeRedacted\");\n        }\n\n        this._localRedactionEvent = null;\n\n        this.emit(MatrixEventEvent.BeforeRedaction, this, redactionEvent);\n\n        this._replacingEvent = null;\n        // we attempt to replicate what we would see from the server if\n        // the event had been redacted before we saw it.\n        //\n        // The server removes (most of) the content of the event, and adds a\n        // \"redacted_because\" key to the unsigned section containing the\n        // redacted event.\n        if (!this.event.unsigned) {\n            this.event.unsigned = {};\n        }\n        this.event.unsigned.redacted_because = redactionEvent.event as IEvent;\n\n        let key;\n        for (key in this.event) {\n            if (!this.event.hasOwnProperty(key)) {\n                continue;\n            }\n            if (!REDACT_KEEP_KEYS.has(key)) {\n                delete this.event[key];\n            }\n        }\n\n        const keeps = REDACT_KEEP_CONTENT_MAP[this.getType()] || {};\n        const content = this.getContent();\n        for (key in content) {\n            if (!content.hasOwnProperty(key)) {\n                continue;\n            }\n            if (!keeps[key]) {\n                delete content[key];\n            }\n        }\n\n        this.invalidateExtensibleEvent();\n    }\n\n    /**\n     * Check if this event has been redacted\n     *\n     * @return {boolean} True if this event has been redacted\n     */\n    public isRedacted(): boolean {\n        return Boolean(this.getUnsigned().redacted_because);\n    }\n\n    /**\n     * Check if this event is a redaction of another event\n     *\n     * @return {boolean} True if this event is a redaction\n     */\n    public isRedaction(): boolean {\n        return this.getType() === EventType.RoomRedaction;\n    }\n\n    /**\n     * Return the visibility change caused by this event,\n     * as per https://github.com/matrix-org/matrix-doc/pull/3531.\n     *\n     * @returns If the event is a well-formed visibility change event,\n     * an instance of `IVisibilityChange`, otherwise `null`.\n     */\n    public asVisibilityChange(): IVisibilityChange | null {\n        if (!EVENT_VISIBILITY_CHANGE_TYPE.matches(this.getType())) {\n            // Not a visibility change event.\n            return null;\n        }\n        const relation = this.getRelation();\n        if (!relation || relation.rel_type != \"m.reference\") {\n            // Ill-formed, ignore this event.\n            return null;\n        }\n        const eventId = relation.event_id;\n        if (!eventId) {\n            // Ill-formed, ignore this event.\n            return null;\n        }\n        const content = this.getWireContent();\n        const visible = !!content.visible;\n        const reason = content.reason;\n        if (reason && typeof reason != \"string\") {\n            // Ill-formed, ignore this event.\n            return null;\n        }\n        // Well-formed visibility change event.\n        return {\n            visible,\n            reason,\n            eventId,\n        };\n    }\n\n    /**\n     * Check if this event alters the visibility of another event,\n     * as per https://github.com/matrix-org/matrix-doc/pull/3531.\n     *\n     * @returns {boolean} True if this event alters the visibility\n     * of another event.\n     */\n    public isVisibilityEvent(): boolean {\n        return EVENT_VISIBILITY_CHANGE_TYPE.matches(this.getType());\n    }\n\n    /**\n     * Get the (decrypted, if necessary) redaction event JSON\n     * if event was redacted\n     *\n     * @returns {object} The redaction event JSON, or an empty object\n     */\n    public getRedactionEvent(): object | null {\n        if (!this.isRedacted()) return null;\n\n        if (this.clearEvent?.unsigned) {\n            return this.clearEvent?.unsigned.redacted_because;\n        } else if (this.event.unsigned.redacted_because) {\n            return this.event.unsigned.redacted_because;\n        } else {\n            return {};\n        }\n    }\n\n    /**\n     * Get the push actions, if known, for this event\n     *\n     * @return {?Object} push actions\n     */\n    public getPushActions(): IActionsObject | null {\n        return this.pushActions;\n    }\n\n    /**\n     * Set the push actions for this event.\n     *\n     * @param {Object} pushActions push actions\n     */\n    public setPushActions(pushActions: IActionsObject): void {\n        this.pushActions = pushActions;\n    }\n\n    /**\n     * Replace the `event` property and recalculate any properties based on it.\n     * @param {Object} event the object to assign to the `event` property\n     */\n    public handleRemoteEcho(event: object): void {\n        const oldUnsigned = this.getUnsigned();\n        const oldId = this.getId();\n        this.event = event;\n        // if this event was redacted before it was sent, it's locally marked as redacted.\n        // At this point, we've received the remote echo for the event, but not yet for\n        // the redaction that we are sending ourselves. Preserve the locally redacted\n        // state by copying over redacted_because so we don't get a flash of\n        // redacted, not-redacted, redacted as remote echos come in\n        if (oldUnsigned.redacted_because) {\n            if (!this.event.unsigned) {\n                this.event.unsigned = {};\n            }\n            this.event.unsigned.redacted_because = oldUnsigned.redacted_because;\n        }\n        // successfully sent.\n        this.setStatus(null);\n        if (this.getId() !== oldId) {\n            // emit the event if it changed\n            this.emit(MatrixEventEvent.LocalEventIdReplaced, this);\n        }\n\n        this.localTimestamp = Date.now() - this.getAge();\n    }\n\n    /**\n     * Whether the event is in any phase of sending, send failure, waiting for\n     * remote echo, etc.\n     *\n     * @return {boolean}\n     */\n    public isSending(): boolean {\n        return !!this.status;\n    }\n\n    /**\n     * Update the event's sending status and emit an event as well.\n     *\n     * @param {String} status The new status\n     */\n    public setStatus(status: EventStatus): void {\n        this.status = status;\n        this.emit(MatrixEventEvent.Status, this, status);\n    }\n\n    public replaceLocalEventId(eventId: string): void {\n        this.event.event_id = eventId;\n        this.emit(MatrixEventEvent.LocalEventIdReplaced, this);\n    }\n\n    /**\n     * Get whether the event is a relation event, and of a given type if\n     * `relType` is passed in.\n     *\n     * @param {string?} relType if given, checks that the relation is of the\n     * given type\n     * @return {boolean}\n     */\n    public isRelation(relType: string = undefined): boolean {\n        // Relation info is lifted out of the encrypted content when sent to\n        // encrypted rooms, so we have to check `getWireContent` for this.\n        const content = this.getWireContent();\n        const relation = content && content[\"m.relates_to\"];\n        return relation && relation.rel_type && relation.event_id &&\n            ((relType && relation.rel_type === relType) || !relType);\n    }\n\n    /**\n     * Get relation info for the event, if any.\n     *\n     * @return {Object}\n     */\n    public getRelation(): IEventRelation | null {\n        if (!this.isRelation()) {\n            return null;\n        }\n        return this.getWireContent()[\"m.relates_to\"];\n    }\n\n    /**\n     * Set an event that replaces the content of this event, through an m.replace relation.\n     *\n     * @fires module:models/event.MatrixEvent#\"Event.replaced\"\n     *\n     * @param {MatrixEvent?} newEvent the event with the replacing content, if any.\n     */\n    public makeReplaced(newEvent?: MatrixEvent): void {\n        // don't allow redacted events to be replaced.\n        // if newEvent is null we allow to go through though,\n        // as with local redaction, the replacing event might get\n        // cancelled, which should be reflected on the target event.\n        if (this.isRedacted() && newEvent) {\n            return;\n        }\n        if (this._replacingEvent !== newEvent) {\n            this._replacingEvent = newEvent;\n            this.emit(MatrixEventEvent.Replaced, this);\n            this.invalidateExtensibleEvent();\n        }\n    }\n\n    /**\n     * Returns the status of any associated edit or redaction\n     * (not for reactions/annotations as their local echo doesn't affect the original event),\n     * or else the status of the event.\n     *\n     * @return {EventStatus}\n     */\n    public getAssociatedStatus(): EventStatus | undefined {\n        if (this._replacingEvent) {\n            return this._replacingEvent.status;\n        } else if (this._localRedactionEvent) {\n            return this._localRedactionEvent.status;\n        }\n        return this.status;\n    }\n\n    public getServerAggregatedRelation<T>(relType: RelationType | string): T | undefined {\n        return this.getUnsigned()[\"m.relations\"]?.[relType];\n    }\n\n    /**\n     * Returns the event ID of the event replacing the content of this event, if any.\n     *\n     * @return {string?}\n     */\n    public replacingEventId(): string | undefined {\n        const replaceRelation = this.getServerAggregatedRelation<IAggregatedRelation>(RelationType.Replace);\n        if (replaceRelation) {\n            return replaceRelation.event_id;\n        } else if (this._replacingEvent) {\n            return this._replacingEvent.getId();\n        }\n    }\n\n    /**\n     * Returns the event replacing the content of this event, if any.\n     * Replacements are aggregated on the server, so this would only\n     * return an event in case it came down the sync, or for local echo of edits.\n     *\n     * @return {MatrixEvent?}\n     */\n    public replacingEvent(): MatrixEvent | undefined {\n        return this._replacingEvent;\n    }\n\n    /**\n     * Returns the origin_server_ts of the event replacing the content of this event, if any.\n     *\n     * @return {Date?}\n     */\n    public replacingEventDate(): Date | undefined {\n        const replaceRelation = this.getServerAggregatedRelation<IAggregatedRelation>(RelationType.Replace);\n        if (replaceRelation) {\n            const ts = replaceRelation.origin_server_ts;\n            if (Number.isFinite(ts)) {\n                return new Date(ts);\n            }\n        } else if (this._replacingEvent) {\n            return this._replacingEvent.getDate();\n        }\n    }\n\n    /**\n     * Returns the event that wants to redact this event, but hasn't been sent yet.\n     * @return {MatrixEvent} the event\n     */\n    public localRedactionEvent(): MatrixEvent | undefined {\n        return this._localRedactionEvent;\n    }\n\n    /**\n     * For relations and redactions, returns the event_id this event is referring to.\n     *\n     * @return {string?}\n     */\n    public getAssociatedId(): string | undefined {\n        const relation = this.getRelation();\n        if (this.replyEventId) {\n            return this.replyEventId;\n        } else if (relation) {\n            return relation.event_id;\n        } else if (this.isRedaction()) {\n            return this.event.redacts;\n        }\n    }\n\n    /**\n     * Checks if this event is associated with another event. See `getAssociatedId`.\n     *\n     * @return {boolean}\n     */\n    public hasAssocation(): boolean {\n        return !!this.getAssociatedId();\n    }\n\n    /**\n     * Update the related id with a new one.\n     *\n     * Used to replace a local id with remote one before sending\n     * an event with a related id.\n     *\n     * @param {string} eventId the new event id\n     */\n    public updateAssociatedId(eventId: string): void {\n        const relation = this.getRelation();\n        if (relation) {\n            relation.event_id = eventId;\n        } else if (this.isRedaction()) {\n            this.event.redacts = eventId;\n        }\n    }\n\n    /**\n     * Flags an event as cancelled due to future conditions. For example, a verification\n     * request event in the same sync transaction may be flagged as cancelled to warn\n     * listeners that a cancellation event is coming down the same pipe shortly.\n     * @param {boolean} cancelled Whether the event is to be cancelled or not.\n     */\n    public flagCancelled(cancelled = true): void {\n        this._isCancelled = cancelled;\n    }\n\n    /**\n     * Gets whether or not the event is flagged as cancelled. See flagCancelled() for\n     * more information.\n     * @returns {boolean} True if the event is cancelled, false otherwise.\n     */\n    isCancelled(): boolean {\n        return this._isCancelled;\n    }\n\n    /**\n     * Get a copy/snapshot of this event. The returned copy will be loosely linked\n     * back to this instance, though will have \"frozen\" event information. Other\n     * properties of this MatrixEvent instance will be copied verbatim, which can\n     * mean they are in reference to this instance despite being on the copy too.\n     * The reference the snapshot uses does not change, however members aside from\n     * the underlying event will not be deeply cloned, thus may be mutated internally.\n     * For example, the sender profile will be copied over at snapshot time, and\n     * the sender profile internally may mutate without notice to the consumer.\n     *\n     * This is meant to be used to snapshot the event details themselves, not the\n     * features (such as sender) surrounding the event.\n     * @returns {MatrixEvent} A snapshot of this event.\n     */\n    toSnapshot(): MatrixEvent {\n        const ev = new MatrixEvent(JSON.parse(JSON.stringify(this.event)));\n        for (const [p, v] of Object.entries(this)) {\n            if (p !== \"event\") { // exclude the thing we just cloned\n                ev[p] = v;\n            }\n        }\n        return ev;\n    }\n\n    /**\n     * Determines if this event is equivalent to the given event. This only checks\n     * the event object itself, not the other properties of the event. Intended for\n     * use with toSnapshot() to identify events changing.\n     * @param {MatrixEvent} otherEvent The other event to check against.\n     * @returns {boolean} True if the events are the same, false otherwise.\n     */\n    isEquivalentTo(otherEvent: MatrixEvent): boolean {\n        if (!otherEvent) return false;\n        if (otherEvent === this) return true;\n        const myProps = deepSortedObjectEntries(this.event);\n        const theirProps = deepSortedObjectEntries(otherEvent.event);\n        return JSON.stringify(myProps) === JSON.stringify(theirProps);\n    }\n\n    /**\n     * Summarise the event as JSON. This is currently used by React SDK's view\n     * event source feature and Seshat's event indexing, so take care when\n     * adjusting the output here.\n     *\n     * If encrypted, include both the decrypted and encrypted view of the event.\n     *\n     * This is named `toJSON` for use with `JSON.stringify` which checks objects\n     * for functions named `toJSON` and will call them to customise the output\n     * if they are defined.\n     *\n     * @return {Object}\n     */\n    public toJSON(): object {\n        const event = this.getEffectiveEvent();\n\n        if (!this.isEncrypted()) {\n            return event;\n        }\n\n        return {\n            decrypted: event,\n            encrypted: this.event,\n        };\n    }\n\n    public setVerificationRequest(request: VerificationRequest): void {\n        this.verificationRequest = request;\n    }\n\n    public setTxnId(txnId: string): void {\n        this.txnId = txnId;\n    }\n\n    public getTxnId(): string | undefined {\n        return this.txnId;\n    }\n\n    /**\n     * @experimental\n     */\n    public setThread(thread: Thread): void {\n        this.thread = thread;\n        this.setThreadId(thread.id);\n        this.reEmitter.reEmit(thread, [ThreadEvent.Update]);\n    }\n\n    /**\n     * @experimental\n     */\n    public getThread(): Thread | undefined {\n        return this.thread;\n    }\n\n    public setThreadId(threadId: string): void {\n        this.threadId = threadId;\n    }\n}\n\n/* REDACT_KEEP_KEYS gives the keys we keep when an event is redacted\n *\n * This is specified here:\n *  http://matrix.org/speculator/spec/HEAD/client_server/latest.html#redactions\n *\n * Also:\n *  - We keep 'unsigned' since that is created by the local server\n *  - We keep user_id for backwards-compat with v1\n */\nconst REDACT_KEEP_KEYS = new Set([\n    'event_id', 'type', 'room_id', 'user_id', 'sender', 'state_key', 'prev_state',\n    'content', 'unsigned', 'origin_server_ts',\n]);\n\n// a map from event type to the .content keys we keep when an event is redacted\nconst REDACT_KEEP_CONTENT_MAP = {\n    [EventType.RoomMember]: { 'membership': 1 },\n    [EventType.RoomCreate]: { 'creator': 1 },\n    [EventType.RoomJoinRules]: { 'join_rule': 1 },\n    [EventType.RoomPowerLevels]: {\n        'ban': 1, 'events': 1, 'events_default': 1,\n        'kick': 1, 'redact': 1, 'state_default': 1,\n        'users': 1, 'users_default': 1,\n    },\n    [EventType.RoomAliases]: { 'aliases': 1 },\n};\n\n/**\n * Fires when an event is decrypted\n *\n * @event module:models/event.MatrixEvent#\"Event.decrypted\"\n *\n * @param {module:models/event.MatrixEvent} event\n *    The matrix event which has been decrypted\n * @param {module:crypto/algorithms/base.DecryptionError?} err\n *    The error that occurred during decryption, or `undefined` if no\n *    error occurred.\n */\n",
    "/*\nCopyright 2019, 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { EventStatus, IAggregatedRelation, MatrixEvent, MatrixEventEvent } from './event';\nimport { Room } from './room';\nimport { logger } from '../logger';\nimport { RelationType } from \"../@types/event\";\nimport { TypedEventEmitter } from \"./typed-event-emitter\";\n\nexport enum RelationsEvent {\n    Add = \"Relations.add\",\n    Remove = \"Relations.remove\",\n    Redaction = \"Relations.redaction\",\n}\n\nexport type EventHandlerMap = {\n    [RelationsEvent.Add]: (event: MatrixEvent) => void;\n    [RelationsEvent.Remove]: (event: MatrixEvent) => void;\n    [RelationsEvent.Redaction]: (event: MatrixEvent) => void;\n};\n\n/**\n * A container for relation events that supports easy access to common ways of\n * aggregating such events. Each instance holds events that of a single relation\n * type and event type. All of the events also relate to the same original event.\n *\n * The typical way to get one of these containers is via\n * EventTimelineSet#getRelationsForEvent.\n */\nexport class Relations extends TypedEventEmitter<RelationsEvent, EventHandlerMap> {\n    private relationEventIds = new Set<string>();\n    private relations = new Set<MatrixEvent>();\n    private annotationsByKey: Record<string, Set<MatrixEvent>> = {};\n    private annotationsBySender: Record<string, Set<MatrixEvent>> = {};\n    private sortedAnnotationsByKey: [string, Set<MatrixEvent>][] = [];\n    private targetEvent: MatrixEvent = null;\n    private creationEmitted = false;\n\n    /**\n     * @param {RelationType} relationType\n     * The type of relation involved, such as \"m.annotation\", \"m.reference\",\n     * \"m.replace\", etc.\n     * @param {String} eventType\n     * The relation event's type, such as \"m.reaction\", etc.\n     * @param {?Room} room\n     * Room for this container. May be null for non-room cases, such as the\n     * notification timeline.\n     */\n    constructor(\n        public readonly relationType: RelationType | string,\n        public readonly eventType: string,\n        private readonly room: Room,\n    ) {\n        super();\n    }\n\n    /**\n     * Add relation events to this collection.\n     *\n     * @param {MatrixEvent} event\n     * The new relation event to be added.\n     */\n    public async addEvent(event: MatrixEvent) {\n        if (this.relationEventIds.has(event.getId())) {\n            return;\n        }\n\n        const relation = event.getRelation();\n        if (!relation) {\n            logger.error(\"Event must have relation info\");\n            return;\n        }\n\n        const relationType = relation.rel_type;\n        const eventType = event.getType();\n\n        if (this.relationType !== relationType || this.eventType !== eventType) {\n            logger.error(\"Event relation info doesn't match this container\");\n            return;\n        }\n\n        // If the event is in the process of being sent, listen for cancellation\n        // so we can remove the event from the collection.\n        if (event.isSending()) {\n            event.on(MatrixEventEvent.Status, this.onEventStatus);\n        }\n\n        this.relations.add(event);\n        this.relationEventIds.add(event.getId());\n\n        if (this.relationType === RelationType.Annotation) {\n            this.addAnnotationToAggregation(event);\n        } else if (this.relationType === RelationType.Replace && this.targetEvent) {\n            const lastReplacement = await this.getLastReplacement();\n            this.targetEvent.makeReplaced(lastReplacement);\n        }\n\n        event.on(MatrixEventEvent.BeforeRedaction, this.onBeforeRedaction);\n\n        this.emit(RelationsEvent.Add, event);\n\n        this.maybeEmitCreated();\n    }\n\n    /**\n     * Remove relation event from this collection.\n     *\n     * @param {MatrixEvent} event\n     * The relation event to remove.\n     */\n    private async removeEvent(event: MatrixEvent) {\n        if (!this.relations.has(event)) {\n            return;\n        }\n\n        const relation = event.getRelation();\n        if (!relation) {\n            logger.error(\"Event must have relation info\");\n            return;\n        }\n\n        const relationType = relation.rel_type;\n        const eventType = event.getType();\n\n        if (this.relationType !== relationType || this.eventType !== eventType) {\n            logger.error(\"Event relation info doesn't match this container\");\n            return;\n        }\n\n        this.relations.delete(event);\n\n        if (this.relationType === RelationType.Annotation) {\n            this.removeAnnotationFromAggregation(event);\n        } else if (this.relationType === RelationType.Replace && this.targetEvent) {\n            const lastReplacement = await this.getLastReplacement();\n            this.targetEvent.makeReplaced(lastReplacement);\n        }\n\n        this.emit(RelationsEvent.Remove, event);\n    }\n\n    /**\n     * Listens for event status changes to remove cancelled events.\n     *\n     * @param {MatrixEvent} event The event whose status has changed\n     * @param {EventStatus} status The new status\n     */\n    private onEventStatus = (event: MatrixEvent, status: EventStatus) => {\n        if (!event.isSending()) {\n            // Sending is done, so we don't need to listen anymore\n            event.removeListener(MatrixEventEvent.Status, this.onEventStatus);\n            return;\n        }\n        if (status !== EventStatus.CANCELLED) {\n            return;\n        }\n        // Event was cancelled, remove from the collection\n        event.removeListener(MatrixEventEvent.Status, this.onEventStatus);\n        this.removeEvent(event);\n    };\n\n    /**\n     * Get all relation events in this collection.\n     *\n     * These are currently in the order of insertion to this collection, which\n     * won't match timeline order in the case of scrollback.\n     * TODO: Tweak `addEvent` to insert correctly for scrollback.\n     *\n     * @return {Array}\n     * Relation events in insertion order.\n     */\n    public getRelations(): MatrixEvent[] {\n        return [...this.relations];\n    }\n\n    private addAnnotationToAggregation(event: MatrixEvent): void {\n        const { key } = event.getRelation();\n        if (!key) {\n            return;\n        }\n\n        let eventsForKey = this.annotationsByKey[key];\n        if (!eventsForKey) {\n            eventsForKey = this.annotationsByKey[key] = new Set();\n            this.sortedAnnotationsByKey.push([key, eventsForKey]);\n        }\n        // Add the new event to the set for this key\n        eventsForKey.add(event);\n        // Re-sort the [key, events] pairs in descending order of event count\n        this.sortedAnnotationsByKey.sort((a, b) => {\n            const aEvents = a[1];\n            const bEvents = b[1];\n            return bEvents.size - aEvents.size;\n        });\n\n        const sender = event.getSender();\n        let eventsFromSender = this.annotationsBySender[sender];\n        if (!eventsFromSender) {\n            eventsFromSender = this.annotationsBySender[sender] = new Set();\n        }\n        // Add the new event to the set for this sender\n        eventsFromSender.add(event);\n    }\n\n    private removeAnnotationFromAggregation(event: MatrixEvent): void {\n        const { key } = event.getRelation();\n        if (!key) {\n            return;\n        }\n\n        const eventsForKey = this.annotationsByKey[key];\n        if (eventsForKey) {\n            eventsForKey.delete(event);\n\n            // Re-sort the [key, events] pairs in descending order of event count\n            this.sortedAnnotationsByKey.sort((a, b) => {\n                const aEvents = a[1];\n                const bEvents = b[1];\n                return bEvents.size - aEvents.size;\n            });\n        }\n\n        const sender = event.getSender();\n        const eventsFromSender = this.annotationsBySender[sender];\n        if (eventsFromSender) {\n            eventsFromSender.delete(event);\n        }\n    }\n\n    /**\n     * For relations that have been redacted, we want to remove them from\n     * aggregation data sets and emit an update event.\n     *\n     * To do so, we listen for `Event.beforeRedaction`, which happens:\n     *   - after the server accepted the redaction and remote echoed back to us\n     *   - before the original event has been marked redacted in the client\n     *\n     * @param {MatrixEvent} redactedEvent\n     * The original relation event that is about to be redacted.\n     */\n    private onBeforeRedaction = async (redactedEvent: MatrixEvent): Promise<void> => {\n        if (!this.relations.has(redactedEvent)) {\n            return;\n        }\n\n        this.relations.delete(redactedEvent);\n\n        if (this.relationType === RelationType.Annotation) {\n            // Remove the redacted annotation from aggregation by key\n            this.removeAnnotationFromAggregation(redactedEvent);\n        } else if (this.relationType === RelationType.Replace && this.targetEvent) {\n            const lastReplacement = await this.getLastReplacement();\n            this.targetEvent.makeReplaced(lastReplacement);\n        }\n\n        redactedEvent.removeListener(MatrixEventEvent.BeforeRedaction, this.onBeforeRedaction);\n\n        this.emit(RelationsEvent.Redaction, redactedEvent);\n    };\n\n    /**\n     * Get all events in this collection grouped by key and sorted by descending\n     * event count in each group.\n     *\n     * This is currently only supported for the annotation relation type.\n     *\n     * @return {Array}\n     * An array of [key, events] pairs sorted by descending event count.\n     * The events are stored in a Set (which preserves insertion order).\n     */\n    public getSortedAnnotationsByKey() {\n        if (this.relationType !== RelationType.Annotation) {\n            // Other relation types are not grouped currently.\n            return null;\n        }\n\n        return this.sortedAnnotationsByKey;\n    }\n\n    /**\n     * Get all events in this collection grouped by sender.\n     *\n     * This is currently only supported for the annotation relation type.\n     *\n     * @return {Object}\n     * An object with each relation sender as a key and the matching Set of\n     * events for that sender as a value.\n     */\n    public getAnnotationsBySender() {\n        if (this.relationType !== RelationType.Annotation) {\n            // Other relation types are not grouped currently.\n            return null;\n        }\n\n        return this.annotationsBySender;\n    }\n\n    /**\n     * Returns the most recent (and allowed) m.replace relation, if any.\n     *\n     * This is currently only supported for the m.replace relation type,\n     * once the target event is known, see `addEvent`.\n     *\n     * @return {MatrixEvent?}\n     */\n    public async getLastReplacement(): Promise<MatrixEvent | null> {\n        if (this.relationType !== RelationType.Replace) {\n            // Aggregating on last only makes sense for this relation type\n            return null;\n        }\n        if (!this.targetEvent) {\n            // Don't know which replacements to accept yet.\n            // This method shouldn't be called before the original\n            // event is known anyway.\n            return null;\n        }\n\n        // the all-knowning server tells us that the event at some point had\n        // this timestamp for its replacement, so any following replacement should definitely not be less\n        const replaceRelation = this.targetEvent.getServerAggregatedRelation<IAggregatedRelation>(RelationType.Replace);\n        const minTs = replaceRelation?.origin_server_ts;\n\n        const lastReplacement = this.getRelations().reduce((last, event) => {\n            if (event.getSender() !== this.targetEvent.getSender()) {\n                return last;\n            }\n            if (minTs && minTs > event.getTs()) {\n                return last;\n            }\n            if (last && last.getTs() > event.getTs()) {\n                return last;\n            }\n            return event;\n        }, null);\n\n        if (lastReplacement?.shouldAttemptDecryption()) {\n            await lastReplacement.attemptDecryption(this.room.client.crypto);\n        } else if (lastReplacement?.isBeingDecrypted()) {\n            await lastReplacement.getDecryptionPromise();\n        }\n\n        return lastReplacement;\n    }\n\n    /*\n     * @param {MatrixEvent} targetEvent the event the relations are related to.\n     */\n    public async setTargetEvent(event: MatrixEvent) {\n        if (this.targetEvent) {\n            return;\n        }\n        this.targetEvent = event;\n\n        if (this.relationType === RelationType.Replace) {\n            const replacement = await this.getLastReplacement();\n            // this is the initial update, so only call it if we already have something\n            // to not emit Event.replaced needlessly\n            if (replacement) {\n                this.targetEvent.makeReplaced(replacement);\n            }\n        }\n\n        this.maybeEmitCreated();\n    }\n\n    private maybeEmitCreated() {\n        if (this.creationEmitted) {\n            return;\n        }\n        // Only emit we're \"created\" once we have a target event instance _and_\n        // at least one related event.\n        if (!this.targetEvent || !this.relations.size) {\n            return;\n        }\n        this.creationEmitted = true;\n        this.targetEvent.emit(MatrixEventEvent.RelationsCreated, this.relationType, this.eventType);\n    }\n}\n",
    "/*\nCopyright 2015 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * @module models/room-member\n */\n\nimport { getHttpUriForMxc } from \"../content-repo\";\nimport * as utils from \"../utils\";\nimport { User } from \"./user\";\nimport { MatrixEvent } from \"./event\";\nimport { RoomState } from \"./room-state\";\nimport { logger } from \"../logger\";\nimport { TypedEventEmitter } from \"./typed-event-emitter\";\nimport { EventType } from \"../@types/event\";\n\nexport enum RoomMemberEvent {\n    Membership = \"RoomMember.membership\",\n    Name = \"RoomMember.name\",\n    PowerLevel = \"RoomMember.powerLevel\",\n    Typing = \"RoomMember.typing\",\n}\n\nexport type RoomMemberEventHandlerMap = {\n    [RoomMemberEvent.Membership]: (event: MatrixEvent, member: RoomMember, oldMembership: string | null) => void;\n    [RoomMemberEvent.Name]: (event: MatrixEvent, member: RoomMember, oldName: string | null) => void;\n    [RoomMemberEvent.PowerLevel]: (event: MatrixEvent, member: RoomMember) => void;\n    [RoomMemberEvent.Typing]: (event: MatrixEvent, member: RoomMember) => void;\n};\n\nexport class RoomMember extends TypedEventEmitter<RoomMemberEvent, RoomMemberEventHandlerMap> {\n    private _isOutOfBand = false;\n    private _modified: number;\n    public _requestedProfileInfo: boolean; // used by sync.ts\n\n    // XXX these should be read-only\n    public typing = false;\n    public name: string;\n    public rawDisplayName: string;\n    public powerLevel = 0;\n    public powerLevelNorm = 0;\n    public user?: User = null;\n    public membership: string = null;\n    public disambiguate = false;\n    public events: {\n        member?: MatrixEvent;\n    } = {\n            member: null,\n        };\n\n    /**\n     * Construct a new room member.\n     *\n     * @constructor\n     * @alias module:models/room-member\n     *\n     * @param {string} roomId The room ID of the member.\n     * @param {string} userId The user ID of the member.\n     * @prop {string} roomId The room ID for this member.\n     * @prop {string} userId The user ID of this member.\n     * @prop {boolean} typing True if the room member is currently typing.\n     * @prop {string} name The human-readable name for this room member. This will be\n     * disambiguated with a suffix of \" (@user_id:matrix.org)\" if another member shares the\n     * same displayname.\n     * @prop {string} rawDisplayName The ambiguous displayname of this room member.\n     * @prop {Number} powerLevel The power level for this room member.\n     * @prop {Number} powerLevelNorm The normalised power level (0-100) for this\n     * room member.\n     * @prop {User} user The User object for this room member, if one exists.\n     * @prop {string} membership The membership state for this room member e.g. 'join'.\n     * @prop {Object} events The events describing this RoomMember.\n     * @prop {MatrixEvent} events.member The m.room.member event for this RoomMember.\n     * @prop {boolean} disambiguate True if the member's name is disambiguated.\n     */\n    constructor(public readonly roomId: string, public readonly userId: string) {\n        super();\n\n        this.name = userId;\n        this.rawDisplayName = userId;\n        this.updateModifiedTime();\n    }\n\n    /**\n     * Mark the member as coming from a channel that is not sync\n     */\n    public markOutOfBand(): void {\n        this._isOutOfBand = true;\n    }\n\n    /**\n     * @return {boolean} does the member come from a channel that is not sync?\n     * This is used to store the member seperately\n     * from the sync state so it available across browser sessions.\n     */\n    public isOutOfBand(): boolean {\n        return this._isOutOfBand;\n    }\n\n    /**\n     * Update this room member's membership event. May fire \"RoomMember.name\" if\n     * this event updates this member's name.\n     * @param {MatrixEvent} event The <code>m.room.member</code> event\n     * @param {RoomState} roomState Optional. The room state to take into account\n     * when calculating (e.g. for disambiguating users with the same name).\n     * @fires module:client~MatrixClient#event:\"RoomMember.name\"\n     * @fires module:client~MatrixClient#event:\"RoomMember.membership\"\n     */\n    public setMembershipEvent(event: MatrixEvent, roomState?: RoomState): void {\n        const displayName = event.getDirectionalContent().displayname;\n\n        if (event.getType() !== EventType.RoomMember) {\n            return;\n        }\n\n        this._isOutOfBand = false;\n\n        this.events.member = event;\n\n        const oldMembership = this.membership;\n        this.membership = event.getDirectionalContent().membership;\n        if (this.membership === undefined) {\n            // logging to diagnose https://github.com/vector-im/element-web/issues/20962\n            // (logs event content, although only of membership events)\n            logger.trace(\n                `membership event with membership undefined (forwardLooking: ${event.forwardLooking})!`,\n                event.getContent(),\n                `prevcontent is `, event.getPrevContent(),\n            );\n        }\n\n        this.disambiguate = shouldDisambiguate(\n            this.userId,\n            displayName,\n            roomState,\n        );\n\n        const oldName = this.name;\n        this.name = calculateDisplayName(\n            this.userId,\n            displayName,\n            roomState,\n            this.disambiguate,\n        );\n\n        // not quite raw: we strip direction override chars so it can safely be inserted into\n        // blocks of text without breaking the text direction\n        this.rawDisplayName = utils.removeDirectionOverrideChars(event.getDirectionalContent().displayname);\n        if (!this.rawDisplayName || !utils.removeHiddenChars(this.rawDisplayName)) {\n            this.rawDisplayName = this.userId;\n        }\n\n        if (oldMembership !== this.membership) {\n            this.updateModifiedTime();\n            this.emit(RoomMemberEvent.Membership, event, this, oldMembership);\n        }\n        if (oldName !== this.name) {\n            this.updateModifiedTime();\n            this.emit(RoomMemberEvent.Name, event, this, oldName);\n        }\n    }\n\n    /**\n     * Update this room member's power level event. May fire\n     * \"RoomMember.powerLevel\" if this event updates this member's power levels.\n     * @param {MatrixEvent} powerLevelEvent The <code>m.room.power_levels</code>\n     * event\n     * @fires module:client~MatrixClient#event:\"RoomMember.powerLevel\"\n     */\n    public setPowerLevelEvent(powerLevelEvent: MatrixEvent): void {\n        if (powerLevelEvent.getType() !== \"m.room.power_levels\") {\n            return;\n        }\n\n        const evContent = powerLevelEvent.getDirectionalContent();\n\n        let maxLevel = evContent.users_default || 0;\n        const users = evContent.users || {};\n        Object.values(users).forEach(function(lvl: number) {\n            maxLevel = Math.max(maxLevel, lvl);\n        });\n        const oldPowerLevel = this.powerLevel;\n        const oldPowerLevelNorm = this.powerLevelNorm;\n\n        if (users[this.userId] !== undefined && Number.isInteger(users[this.userId])) {\n            this.powerLevel = users[this.userId];\n        } else if (evContent.users_default !== undefined) {\n            this.powerLevel = evContent.users_default;\n        } else {\n            this.powerLevel = 0;\n        }\n        this.powerLevelNorm = 0;\n        if (maxLevel > 0) {\n            this.powerLevelNorm = (this.powerLevel * 100) / maxLevel;\n        }\n\n        // emit for changes in powerLevelNorm as well (since the app will need to\n        // redraw everyone's level if the max has changed)\n        if (oldPowerLevel !== this.powerLevel || oldPowerLevelNorm !== this.powerLevelNorm) {\n            this.updateModifiedTime();\n            this.emit(RoomMemberEvent.PowerLevel, powerLevelEvent, this);\n        }\n    }\n\n    /**\n     * Update this room member's typing event. May fire \"RoomMember.typing\" if\n     * this event changes this member's typing state.\n     * @param {MatrixEvent} event The typing event\n     * @fires module:client~MatrixClient#event:\"RoomMember.typing\"\n     */\n    public setTypingEvent(event: MatrixEvent): void {\n        if (event.getType() !== \"m.typing\") {\n            return;\n        }\n        const oldTyping = this.typing;\n        this.typing = false;\n        const typingList = event.getContent().user_ids;\n        if (!Array.isArray(typingList)) {\n            // malformed event :/ bail early. TODO: whine?\n            return;\n        }\n        if (typingList.indexOf(this.userId) !== -1) {\n            this.typing = true;\n        }\n        if (oldTyping !== this.typing) {\n            this.updateModifiedTime();\n            this.emit(RoomMemberEvent.Typing, event, this);\n        }\n    }\n\n    /**\n     * Update the last modified time to the current time.\n     */\n    private updateModifiedTime() {\n        this._modified = Date.now();\n    }\n\n    /**\n     * Get the timestamp when this RoomMember was last updated. This timestamp is\n     * updated when properties on this RoomMember are updated.\n     * It is updated <i>before</i> firing events.\n     * @return {number} The timestamp\n     */\n    public getLastModifiedTime(): number {\n        return this._modified;\n    }\n\n    public isKicked(): boolean {\n        return this.membership === \"leave\" &&\n            this.events.member.getSender() !== this.events.member.getStateKey();\n    }\n\n    /**\n     * If this member was invited with the is_direct flag set, return\n     * the user that invited this member\n     * @return {string} user id of the inviter\n     */\n    public getDMInviter(): string {\n        // when not available because that room state hasn't been loaded in,\n        // we don't really know, but more likely to not be a direct chat\n        if (this.events.member) {\n            // TODO: persist the is_direct flag on the member as more member events\n            //       come in caused by displayName changes.\n\n            // the is_direct flag is set on the invite member event.\n            // This is copied on the prev_content section of the join member event\n            // when the invite is accepted.\n\n            const memberEvent = this.events.member;\n            let memberContent = memberEvent.getContent();\n            let inviteSender = memberEvent.getSender();\n\n            if (memberContent.membership === \"join\") {\n                memberContent = memberEvent.getPrevContent();\n                inviteSender = memberEvent.getUnsigned().prev_sender;\n            }\n\n            if (memberContent.membership === \"invite\" && memberContent.is_direct) {\n                return inviteSender;\n            }\n        }\n    }\n\n    /**\n     * Get the avatar URL for a room member.\n     * @param {string} baseUrl The base homeserver URL See\n     * {@link module:client~MatrixClient#getHomeserverUrl}.\n     * @param {Number} width The desired width of the thumbnail.\n     * @param {Number} height The desired height of the thumbnail.\n     * @param {string} resizeMethod The thumbnail resize method to use, either\n     * \"crop\" or \"scale\".\n     * @param {Boolean} allowDefault (optional) Passing false causes this method to\n     * return null if the user has no avatar image. Otherwise, a default image URL\n     * will be returned. Default: true. (Deprecated)\n     * @param {Boolean} allowDirectLinks (optional) If true, the avatar URL will be\n     * returned even if it is a direct hyperlink rather than a matrix content URL.\n     * If false, any non-matrix content URLs will be ignored. Setting this option to\n     * true will expose URLs that, if fetched, will leak information about the user\n     * to anyone who they share a room with.\n     * @return {?string} the avatar URL or null.\n     */\n    public getAvatarUrl(\n        baseUrl: string,\n        width: number,\n        height: number,\n        resizeMethod: string,\n        allowDefault = true,\n        allowDirectLinks: boolean,\n    ): string | null {\n        const rawUrl = this.getMxcAvatarUrl();\n\n        if (!rawUrl && !allowDefault) {\n            return null;\n        }\n        const httpUrl = getHttpUriForMxc(baseUrl, rawUrl, width, height, resizeMethod, allowDirectLinks);\n        if (httpUrl) {\n            return httpUrl;\n        }\n        return null;\n    }\n\n    /**\n     * get the mxc avatar url, either from a state event, or from a lazily loaded member\n     * @return {string} the mxc avatar url\n     */\n    public getMxcAvatarUrl(): string | null {\n        if (this.events.member) {\n            return this.events.member.getDirectionalContent().avatar_url;\n        } else if (this.user) {\n            return this.user.avatarUrl;\n        }\n        return null;\n    }\n}\n\nconst MXID_PATTERN = /@.+:.+/;\nconst LTR_RTL_PATTERN = /[\\u200E\\u200F\\u202A-\\u202F]/;\n\nfunction shouldDisambiguate(selfUserId: string, displayName: string, roomState?: RoomState): boolean {\n    if (!displayName || displayName === selfUserId) return false;\n\n    // First check if the displayname is something we consider truthy\n    // after stripping it of zero width characters and padding spaces\n    if (!utils.removeHiddenChars(displayName)) return false;\n\n    if (!roomState) return false;\n\n    // Next check if the name contains something that look like a mxid\n    // If it does, it may be someone trying to impersonate someone else\n    // Show full mxid in this case\n    if (MXID_PATTERN.test(displayName)) return true;\n\n    // Also show mxid if the display name contains any LTR/RTL characters as these\n    // make it very difficult for us to find similar *looking* display names\n    // E.g \"Mark\" could be cloned by writing \"kraM\" but in RTL.\n    if (LTR_RTL_PATTERN.test(displayName)) return true;\n\n    // Also show mxid if there are other people with the same or similar\n    // displayname, after hidden character removal.\n    const userIds = roomState.getUserIdsWithDisplayName(displayName);\n    if (userIds.some((u) => u !== selfUserId)) return true;\n\n    return false;\n}\n\nfunction calculateDisplayName(\n    selfUserId: string,\n    displayName: string,\n    roomState: RoomState,\n    disambiguate: boolean,\n): string {\n    if (disambiguate) return utils.removeDirectionOverrideChars(displayName) + \" (\" + selfUserId + \")\";\n\n    if (!displayName || displayName === selfUserId) return selfUserId;\n\n    // First check if the displayname is something we consider truthy\n    // after stripping it of zero width characters and padding spaces\n    if (!utils.removeHiddenChars(displayName)) return selfUserId;\n\n    // We always strip the direction override characters (LRO and RLO).\n    // These override the text direction for all subsequent characters\n    // in the paragraph so if display names contained these, they'd\n    // need to be wrapped in something to prevent this from leaking out\n    // (which we can do in HTML but not text) or we'd need to add\n    // control characters to the string to reset any overrides (eg.\n    // adding PDF characters at the end). As far as we can see,\n    // there should be no reason these would be necessary - rtl display\n    // names should flip into the correct direction automatically based on\n    // the characters, and you can still embed rtl in ltr or vice versa\n    // with the embed chars or marker chars.\n    return utils.removeDirectionOverrideChars(displayName);\n}\n\n/**\n * Fires whenever any room member's name changes.\n * @event module:client~MatrixClient#\"RoomMember.name\"\n * @param {MatrixEvent} event The matrix event which caused this event to fire.\n * @param {RoomMember} member The member whose RoomMember.name changed.\n * @param {string?} oldName The previous name. Null if the member didn't have a\n *    name previously.\n * @example\n * matrixClient.on(\"RoomMember.name\", function(event, member){\n *   var newName = member.name;\n * });\n */\n\n/**\n * Fires whenever any room member's membership state changes.\n * @event module:client~MatrixClient#\"RoomMember.membership\"\n * @param {MatrixEvent} event The matrix event which caused this event to fire.\n * @param {RoomMember} member The member whose RoomMember.membership changed.\n * @param {string?} oldMembership The previous membership state. Null if it's a\n *    new member.\n * @example\n * matrixClient.on(\"RoomMember.membership\", function(event, member, oldMembership){\n *   var newState = member.membership;\n * });\n */\n\n/**\n * Fires whenever any room member's typing state changes.\n * @event module:client~MatrixClient#\"RoomMember.typing\"\n * @param {MatrixEvent} event The matrix event which caused this event to fire.\n * @param {RoomMember} member The member whose RoomMember.typing changed.\n * @example\n * matrixClient.on(\"RoomMember.typing\", function(event, member){\n *   var isTyping = member.typing;\n * });\n */\n\n/**\n * Fires whenever any room member's power level changes.\n * @event module:client~MatrixClient#\"RoomMember.powerLevel\"\n * @param {MatrixEvent} event The matrix event which caused this event to fire.\n * @param {RoomMember} member The member whose RoomMember.powerLevel changed.\n * @example\n * matrixClient.on(\"RoomMember.powerLevel\", function(event, member){\n *   var newPowerLevel = member.powerLevel;\n *   var newNormPowerLevel = member.powerLevelNorm;\n * });\n */\n",
    "/*\nCopyright 2015 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * @module models/room-state\n */\n\nimport { RoomMember } from \"./room-member\";\nimport { logger } from '../logger';\nimport * as utils from \"../utils\";\nimport { EventType } from \"../@types/event\";\nimport { MatrixEvent } from \"./event\";\nimport { MatrixClient } from \"../client\";\nimport { GuestAccess, HistoryVisibility, IJoinRuleEventContent, JoinRule } from \"../@types/partials\";\nimport { TypedEventEmitter } from \"./typed-event-emitter\";\nimport { Beacon, BeaconEvent, BeaconEventHandlerMap } from \"./beacon\";\nimport { TypedReEmitter } from \"../ReEmitter\";\nimport { M_BEACON_INFO } from \"../@types/beacon\";\nimport { getBeaconInfoIdentifier } from \"./beacon\";\nimport { BeaconIdentifier } from \"..\";\n\n// possible statuses for out-of-band member loading\nenum OobStatus {\n    NotStarted,\n    InProgress,\n    Finished,\n}\n\nexport enum RoomStateEvent {\n    Events = \"RoomState.events\",\n    Members = \"RoomState.members\",\n    NewMember = \"RoomState.newMember\",\n    Update = \"RoomState.update\", // signals batches of updates without specificity\n    BeaconLiveness = \"RoomState.BeaconLiveness\",\n}\n\nexport type RoomStateEventHandlerMap = {\n    [RoomStateEvent.Events]: (event: MatrixEvent, state: RoomState, lastStateEvent: MatrixEvent | null) => void;\n    [RoomStateEvent.Members]: (event: MatrixEvent, state: RoomState, member: RoomMember) => void;\n    [RoomStateEvent.NewMember]: (event: MatrixEvent, state: RoomState, member: RoomMember) => void;\n    [RoomStateEvent.Update]: (state: RoomState) => void;\n    [RoomStateEvent.BeaconLiveness]: (state: RoomState, hasLiveBeacons: boolean) => void;\n    [BeaconEvent.New]: (event: MatrixEvent, beacon: Beacon) => void;\n};\n\ntype EmittedEvents = RoomStateEvent | BeaconEvent;\ntype EventHandlerMap = RoomStateEventHandlerMap & BeaconEventHandlerMap;\n\nexport class RoomState extends TypedEventEmitter<EmittedEvents, EventHandlerMap> {\n    public readonly reEmitter = new TypedReEmitter<EmittedEvents, EventHandlerMap>(this);\n    private sentinels: Record<string, RoomMember> = {}; // userId: RoomMember\n    // stores fuzzy matches to a list of userIDs (applies utils.removeHiddenChars to keys)\n    private displayNameToUserIds: Record<string, string[]> = {};\n    private userIdsToDisplayNames: Record<string, string> = {};\n    private tokenToInvite: Record<string, MatrixEvent> = {}; // 3pid invite state_key to m.room.member invite\n    private joinedMemberCount: number = null; // cache of the number of joined members\n    // joined members count from summary api\n    // once set, we know the server supports the summary api\n    // and we should only trust that\n    // we could also only trust that before OOB members\n    // are loaded but doesn't seem worth the hassle atm\n    private summaryJoinedMemberCount: number = null;\n    // same for invited member count\n    private invitedMemberCount: number = null;\n    private summaryInvitedMemberCount: number = null;\n    private modified: number;\n\n    // XXX: Should be read-only\n    public members: Record<string, RoomMember> = {}; // userId: RoomMember\n    public events = new Map<string, Map<string, MatrixEvent>>(); // Map<eventType, Map<stateKey, MatrixEvent>>\n    public paginationToken: string = null;\n\n    public readonly beacons = new Map<BeaconIdentifier, Beacon>();\n    private _liveBeaconIds: BeaconIdentifier[] = [];\n\n    /**\n     * Construct room state.\n     *\n     * Room State represents the state of the room at a given point.\n     * It can be mutated by adding state events to it.\n     * There are two types of room member associated with a state event:\n     * normal member objects (accessed via getMember/getMembers) which mutate\n     * with the state to represent the current state of that room/user, eg.\n     * the object returned by getMember('@bob:example.com') will mutate to\n     * get a different display name if Bob later changes his display name\n     * in the room.\n     * There are also 'sentinel' members (accessed via getSentinelMember).\n     * These also represent the state of room members at the point in time\n     * represented by the RoomState object, but unlike objects from getMember,\n     * sentinel objects will always represent the room state as at the time\n     * getSentinelMember was called, so if Bob subsequently changes his display\n     * name, a room member object previously acquired with getSentinelMember\n     * will still have his old display name. Calling getSentinelMember again\n     * after the display name change will return a new RoomMember object\n     * with Bob's new display name.\n     *\n     * @constructor\n     * @param {?string} roomId Optional. The ID of the room which has this state.\n     * If none is specified it just tracks paginationTokens, useful for notifTimelineSet\n     * @param {?object} oobMemberFlags Optional. The state of loading out of bound members.\n     * As the timeline might get reset while they are loading, this state needs to be inherited\n     * and shared when the room state is cloned for the new timeline.\n     * This should only be passed from clone.\n     * @prop {Object.<string, RoomMember>} members The room member dictionary, keyed\n     * on the user's ID.\n     * @prop {Object.<string, Object.<string, MatrixEvent>>} events The state\n     * events dictionary, keyed on the event type and then the state_key value.\n     * @prop {string} paginationToken The pagination token for this state.\n     */\n    constructor(public readonly roomId: string, private oobMemberFlags = { status: OobStatus.NotStarted }) {\n        super();\n        this.updateModifiedTime();\n    }\n\n    /**\n     * Returns the number of joined members in this room\n     * This method caches the result.\n     * @return {number} The number of members in this room whose membership is 'join'\n     */\n    public getJoinedMemberCount(): number {\n        if (this.summaryJoinedMemberCount !== null) {\n            return this.summaryJoinedMemberCount;\n        }\n        if (this.joinedMemberCount === null) {\n            this.joinedMemberCount = this.getMembers().reduce((count, m) => {\n                return m.membership === 'join' ? count + 1 : count;\n            }, 0);\n        }\n        return this.joinedMemberCount;\n    }\n\n    /**\n     * Set the joined member count explicitly (like from summary part of the sync response)\n     * @param {number} count the amount of joined members\n     */\n    public setJoinedMemberCount(count: number): void {\n        this.summaryJoinedMemberCount = count;\n    }\n\n    /**\n     * Returns the number of invited members in this room\n     * @return {number} The number of members in this room whose membership is 'invite'\n     */\n    public getInvitedMemberCount(): number {\n        if (this.summaryInvitedMemberCount !== null) {\n            return this.summaryInvitedMemberCount;\n        }\n        if (this.invitedMemberCount === null) {\n            this.invitedMemberCount = this.getMembers().reduce((count, m) => {\n                return m.membership === 'invite' ? count + 1 : count;\n            }, 0);\n        }\n        return this.invitedMemberCount;\n    }\n\n    /**\n     * Set the amount of invited members in this room\n     * @param {number} count the amount of invited members\n     */\n    public setInvitedMemberCount(count: number): void {\n        this.summaryInvitedMemberCount = count;\n    }\n\n    /**\n     * Get all RoomMembers in this room.\n     * @return {Array<RoomMember>} A list of RoomMembers.\n     */\n    public getMembers(): RoomMember[] {\n        return Object.values(this.members);\n    }\n\n    /**\n     * Get all RoomMembers in this room, excluding the user IDs provided.\n     * @param {Array<string>} excludedIds The user IDs to exclude.\n     * @return {Array<RoomMember>} A list of RoomMembers.\n     */\n    public getMembersExcept(excludedIds: string[]): RoomMember[] {\n        return this.getMembers().filter((m) => !excludedIds.includes(m.userId));\n    }\n\n    /**\n     * Get a room member by their user ID.\n     * @param {string} userId The room member's user ID.\n     * @return {RoomMember} The member or null if they do not exist.\n     */\n    public getMember(userId: string): RoomMember | null {\n        return this.members[userId] || null;\n    }\n\n    /**\n     * Get a room member whose properties will not change with this room state. You\n     * typically want this if you want to attach a RoomMember to a MatrixEvent which\n     * may no longer be represented correctly by Room.currentState or Room.oldState.\n     * The term 'sentinel' refers to the fact that this RoomMember is an unchanging\n     * guardian for state at this particular point in time.\n     * @param {string} userId The room member's user ID.\n     * @return {RoomMember} The member or null if they do not exist.\n     */\n    public getSentinelMember(userId: string): RoomMember | null {\n        if (!userId) return null;\n        let sentinel = this.sentinels[userId];\n\n        if (sentinel === undefined) {\n            sentinel = new RoomMember(this.roomId, userId);\n            const member = this.members[userId];\n            if (member) {\n                sentinel.setMembershipEvent(member.events.member, this);\n            }\n            this.sentinels[userId] = sentinel;\n        }\n        return sentinel;\n    }\n\n    /**\n     * Get state events from the state of the room.\n     * @param {string} eventType The event type of the state event.\n     * @param {string} stateKey Optional. The state_key of the state event. If\n     * this is <code>undefined</code> then all matching state events will be\n     * returned.\n     * @return {MatrixEvent[]|MatrixEvent} A list of events if state_key was\n     * <code>undefined</code>, else a single event (or null if no match found).\n     */\n    public getStateEvents(eventType: EventType | string): MatrixEvent[];\n    public getStateEvents(eventType: EventType | string, stateKey: string): MatrixEvent;\n    public getStateEvents(eventType: EventType | string, stateKey?: string) {\n        if (!this.events.has(eventType)) {\n            // no match\n            return stateKey === undefined ? [] : null;\n        }\n        if (stateKey === undefined) { // return all values\n            return Array.from(this.events.get(eventType).values());\n        }\n        const event = this.events.get(eventType).get(stateKey);\n        return event ? event : null;\n    }\n\n    public get hasLiveBeacons(): boolean {\n        return !!this.liveBeaconIds?.length;\n    }\n\n    public get liveBeaconIds(): BeaconIdentifier[] {\n        return this._liveBeaconIds;\n    }\n\n    /**\n     * Creates a copy of this room state so that mutations to either won't affect the other.\n     * @return {RoomState} the copy of the room state\n     */\n    public clone(): RoomState {\n        const copy = new RoomState(this.roomId, this.oobMemberFlags);\n\n        // Ugly hack: because setStateEvents will mark\n        // members as susperseding future out of bound members\n        // if loading is in progress (through oobMemberFlags)\n        // since these are not new members, we're merely copying them\n        // set the status to not started\n        // after copying, we set back the status\n        const status = this.oobMemberFlags.status;\n        this.oobMemberFlags.status = OobStatus.NotStarted;\n\n        Array.from(this.events.values()).forEach((eventsByStateKey) => {\n            copy.setStateEvents(Array.from(eventsByStateKey.values()));\n        });\n\n        // Ugly hack: see above\n        this.oobMemberFlags.status = status;\n\n        if (this.summaryInvitedMemberCount !== null) {\n            copy.setInvitedMemberCount(this.getInvitedMemberCount());\n        }\n        if (this.summaryJoinedMemberCount !== null) {\n            copy.setJoinedMemberCount(this.getJoinedMemberCount());\n        }\n\n        // copy out of band flags if needed\n        if (this.oobMemberFlags.status == OobStatus.Finished) {\n            // copy markOutOfBand flags\n            this.getMembers().forEach((member) => {\n                if (member.isOutOfBand()) {\n                    const copyMember = copy.getMember(member.userId);\n                    copyMember.markOutOfBand();\n                }\n            });\n        }\n\n        return copy;\n    }\n\n    /**\n     * Add previously unknown state events.\n     * When lazy loading members while back-paginating,\n     * the relevant room state for the timeline chunk at the end\n     * of the chunk can be set with this method.\n     * @param {MatrixEvent[]} events state events to prepend\n     */\n    public setUnknownStateEvents(events: MatrixEvent[]): void {\n        const unknownStateEvents = events.filter((event) => {\n            return !this.events.has(event.getType()) ||\n                !this.events.get(event.getType()).has(event.getStateKey());\n        });\n\n        this.setStateEvents(unknownStateEvents);\n    }\n\n    /**\n     * Add an array of one or more state MatrixEvents, overwriting\n     * any existing state with the same {type, stateKey} tuple. Will fire\n     * \"RoomState.events\" for every event added. May fire \"RoomState.members\"\n     * if there are <code>m.room.member</code> events.\n     * @param {MatrixEvent[]} stateEvents a list of state events for this room.\n     * @fires module:client~MatrixClient#event:\"RoomState.members\"\n     * @fires module:client~MatrixClient#event:\"RoomState.newMember\"\n     * @fires module:client~MatrixClient#event:\"RoomState.events\"\n     */\n    public setStateEvents(stateEvents: MatrixEvent[]) {\n        this.updateModifiedTime();\n\n        // update the core event dict\n        stateEvents.forEach((event) => {\n            if (event.getRoomId() !== this.roomId) {\n                return;\n            }\n            if (!event.isState()) {\n                return;\n            }\n\n            if (M_BEACON_INFO.matches(event.getType())) {\n                this.setBeacon(event);\n            }\n\n            const lastStateEvent = this.getStateEventMatching(event);\n            this.setStateEvent(event);\n            if (event.getType() === EventType.RoomMember) {\n                this.updateDisplayNameCache(event.getStateKey(), event.getContent().displayname);\n                this.updateThirdPartyTokenCache(event);\n            }\n            this.emit(RoomStateEvent.Events, event, this, lastStateEvent);\n        });\n\n        this.onBeaconLivenessChange();\n\n        // update higher level data structures. This needs to be done AFTER the\n        // core event dict as these structures may depend on other state events in\n        // the given array (e.g. disambiguating display names in one go to do both\n        // clashing names rather than progressively which only catches 1 of them).\n        stateEvents.forEach((event) => {\n            if (event.getRoomId() !== this.roomId) {\n                return;\n            }\n            if (!event.isState()) {\n                return;\n            }\n\n            if (event.getType() === EventType.RoomMember) {\n                const userId = event.getStateKey();\n\n                // leave events apparently elide the displayname or avatar_url,\n                // so let's fake one up so that we don't leak user ids\n                // into the timeline\n                if (event.getContent().membership === \"leave\" ||\n                    event.getContent().membership === \"ban\") {\n                    event.getContent().avatar_url =\n                        event.getContent().avatar_url ||\n                        event.getPrevContent().avatar_url;\n                    event.getContent().displayname =\n                        event.getContent().displayname ||\n                        event.getPrevContent().displayname;\n                }\n\n                const member = this.getOrCreateMember(userId, event);\n                member.setMembershipEvent(event, this);\n\n                this.updateMember(member);\n                this.emit(RoomStateEvent.Members, event, this, member);\n            } else if (event.getType() === EventType.RoomPowerLevels) {\n                // events with unknown state keys should be ignored\n                // and should not aggregate onto members power levels\n                if (event.getStateKey() !== \"\") {\n                    return;\n                }\n                const members = Object.values(this.members);\n                members.forEach((member) => {\n                    // We only propagate `RoomState.members` event if the\n                    // power levels has been changed\n                    // large room suffer from large re-rendering especially when not needed\n                    const oldLastModified = member.getLastModifiedTime();\n                    member.setPowerLevelEvent(event);\n                    if (oldLastModified !== member.getLastModifiedTime()) {\n                        this.emit(RoomStateEvent.Members, event, this, member);\n                    }\n                });\n\n                // assume all our sentinels are now out-of-date\n                this.sentinels = {};\n            }\n        });\n\n        this.emit(RoomStateEvent.Update, this);\n    }\n\n    public processBeaconEvents(events: MatrixEvent[]): void {\n        if (\n            !events.length ||\n            // discard locations if we have no beacons\n            !this.beacons.size\n        ) {\n            return;\n        }\n\n        // names are confusing here\n        // a Beacon is the parent event, but event type is 'm.beacon_info'\n        // a location is the 'child' related to the Beacon, but the event type is 'm.beacon'\n        // group locations by beaconInfo event id\n        const locationEventsByBeaconEventId = events.reduce<Record<string, MatrixEvent[]>>((acc, event) => {\n            const beaconInfoEventId = event.getRelation()?.event_id;\n            if (!acc[beaconInfoEventId]) {\n                acc[beaconInfoEventId] = [];\n            }\n            acc[beaconInfoEventId].push(event);\n            return acc;\n        }, {});\n\n        Object.entries(locationEventsByBeaconEventId).forEach(([beaconInfoEventId, events]) => {\n            const beacon = [...this.beacons.values()].find(beacon => beacon.beaconInfoId === beaconInfoEventId);\n\n            if (beacon) {\n                beacon.addLocations(events);\n            }\n        });\n    }\n\n    /**\n     * Looks up a member by the given userId, and if it doesn't exist,\n     * create it and emit the `RoomState.newMember` event.\n     * This method makes sure the member is added to the members dictionary\n     * before emitting, as this is done from setStateEvents and setOutOfBandMember.\n     * @param {string} userId the id of the user to look up\n     * @param {MatrixEvent} event the membership event for the (new) member. Used to emit.\n     * @fires module:client~MatrixClient#event:\"RoomState.newMember\"\n     * @returns {RoomMember} the member, existing or newly created.\n     */\n    private getOrCreateMember(userId: string, event: MatrixEvent): RoomMember {\n        let member = this.members[userId];\n        if (!member) {\n            member = new RoomMember(this.roomId, userId);\n            // add member to members before emitting any events,\n            // as event handlers often lookup the member\n            this.members[userId] = member;\n            this.emit(RoomStateEvent.NewMember, event, this, member);\n        }\n        return member;\n    }\n\n    private setStateEvent(event: MatrixEvent): void {\n        if (!this.events.has(event.getType())) {\n            this.events.set(event.getType(), new Map());\n        }\n        this.events.get(event.getType()).set(event.getStateKey(), event);\n    }\n\n    /**\n     * @experimental\n     */\n    private setBeacon(event: MatrixEvent): void {\n        const beaconIdentifier = getBeaconInfoIdentifier(event);\n\n        if (this.beacons.has(beaconIdentifier)) {\n            const beacon = this.beacons.get(beaconIdentifier);\n\n            if (event.isRedacted()) {\n                if (beacon.beaconInfoId === event.getRedactionEvent()?.['redacts']) {\n                    beacon.destroy();\n                    this.beacons.delete(beaconIdentifier);\n                }\n                return;\n            }\n\n            return beacon.update(event);\n        }\n\n        if (event.isRedacted()) {\n            return;\n        }\n\n        const beacon = new Beacon(event);\n\n        this.reEmitter.reEmit<BeaconEvent, BeaconEvent>(beacon, [\n            BeaconEvent.New,\n            BeaconEvent.Update,\n            BeaconEvent.Destroy,\n            BeaconEvent.LivenessChange,\n        ]);\n\n        this.emit(BeaconEvent.New, event, beacon);\n        beacon.on(BeaconEvent.LivenessChange, this.onBeaconLivenessChange.bind(this));\n        beacon.on(BeaconEvent.Destroy, this.onBeaconLivenessChange.bind(this));\n\n        this.beacons.set(beacon.identifier, beacon);\n    }\n\n    /**\n     * @experimental\n     * Check liveness of room beacons\n     * emit RoomStateEvent.BeaconLiveness event\n     */\n    private onBeaconLivenessChange(): void {\n        this._liveBeaconIds = Array.from(this.beacons.values())\n            .filter(beacon => beacon.isLive)\n            .map(beacon => beacon.identifier);\n\n        this.emit(RoomStateEvent.BeaconLiveness, this, this.hasLiveBeacons);\n    }\n\n    private getStateEventMatching(event: MatrixEvent): MatrixEvent | null {\n        return this.events.get(event.getType())?.get(event.getStateKey()) ?? null;\n    }\n\n    private updateMember(member: RoomMember): void {\n        // this member may have a power level already, so set it.\n        const pwrLvlEvent = this.getStateEvents(EventType.RoomPowerLevels, \"\");\n        if (pwrLvlEvent) {\n            member.setPowerLevelEvent(pwrLvlEvent);\n        }\n\n        // blow away the sentinel which is now outdated\n        delete this.sentinels[member.userId];\n\n        this.members[member.userId] = member;\n        this.joinedMemberCount = null;\n        this.invitedMemberCount = null;\n    }\n\n    /**\n     * Get the out-of-band members loading state, whether loading is needed or not.\n     * Note that loading might be in progress and hence isn't needed.\n     * @return {boolean} whether or not the members of this room need to be loaded\n     */\n    public needsOutOfBandMembers(): boolean {\n        return this.oobMemberFlags.status === OobStatus.NotStarted;\n    }\n\n    /**\n     * Mark this room state as waiting for out-of-band members,\n     * ensuring it doesn't ask for them to be requested again\n     * through needsOutOfBandMembers\n     */\n    public markOutOfBandMembersStarted(): void {\n        if (this.oobMemberFlags.status !== OobStatus.NotStarted) {\n            return;\n        }\n        this.oobMemberFlags.status = OobStatus.InProgress;\n    }\n\n    /**\n     * Mark this room state as having failed to fetch out-of-band members\n     */\n    public markOutOfBandMembersFailed(): void {\n        if (this.oobMemberFlags.status !== OobStatus.InProgress) {\n            return;\n        }\n        this.oobMemberFlags.status = OobStatus.NotStarted;\n    }\n\n    /**\n     * Clears the loaded out-of-band members\n     */\n    public clearOutOfBandMembers(): void {\n        let count = 0;\n        Object.keys(this.members).forEach((userId) => {\n            const member = this.members[userId];\n            if (member.isOutOfBand()) {\n                ++count;\n                delete this.members[userId];\n            }\n        });\n        logger.log(`LL: RoomState removed ${count} members...`);\n        this.oobMemberFlags.status = OobStatus.NotStarted;\n    }\n\n    /**\n     * Sets the loaded out-of-band members.\n     * @param {MatrixEvent[]} stateEvents array of membership state events\n     */\n    public setOutOfBandMembers(stateEvents: MatrixEvent[]): void {\n        logger.log(`LL: RoomState about to set ${stateEvents.length} OOB members ...`);\n        if (this.oobMemberFlags.status !== OobStatus.InProgress) {\n            return;\n        }\n        logger.log(`LL: RoomState put in finished state ...`);\n        this.oobMemberFlags.status = OobStatus.Finished;\n        stateEvents.forEach((e) => this.setOutOfBandMember(e));\n        this.emit(RoomStateEvent.Update, this);\n    }\n\n    /**\n     * Sets a single out of band member, used by both setOutOfBandMembers and clone\n     * @param {MatrixEvent} stateEvent membership state event\n     */\n    private setOutOfBandMember(stateEvent: MatrixEvent): void {\n        if (stateEvent.getType() !== EventType.RoomMember) {\n            return;\n        }\n        const userId = stateEvent.getStateKey();\n        const existingMember = this.getMember(userId);\n        // never replace members received as part of the sync\n        if (existingMember && !existingMember.isOutOfBand()) {\n            return;\n        }\n\n        const member = this.getOrCreateMember(userId, stateEvent);\n        member.setMembershipEvent(stateEvent, this);\n        // needed to know which members need to be stored seperately\n        // as they are not part of the sync accumulator\n        // this is cleared by setMembershipEvent so when it's updated through /sync\n        member.markOutOfBand();\n\n        this.updateDisplayNameCache(member.userId, member.name);\n\n        this.setStateEvent(stateEvent);\n        this.updateMember(member);\n        this.emit(RoomStateEvent.Members, stateEvent, this, member);\n    }\n\n    /**\n     * Set the current typing event for this room.\n     * @param {MatrixEvent} event The typing event\n     */\n    public setTypingEvent(event: MatrixEvent): void {\n        Object.values(this.members).forEach(function(member) {\n            member.setTypingEvent(event);\n        });\n    }\n\n    /**\n     * Get the m.room.member event which has the given third party invite token.\n     *\n     * @param {string} token The token\n     * @return {?MatrixEvent} The m.room.member event or null\n     */\n    public getInviteForThreePidToken(token: string): MatrixEvent | null {\n        return this.tokenToInvite[token] || null;\n    }\n\n    /**\n     * Update the last modified time to the current time.\n     */\n    private updateModifiedTime(): void {\n        this.modified = Date.now();\n    }\n\n    /**\n     * Get the timestamp when this room state was last updated. This timestamp is\n     * updated when this object has received new state events.\n     * @return {number} The timestamp\n     */\n    public getLastModifiedTime(): number {\n        return this.modified;\n    }\n\n    /**\n     * Get user IDs with the specified or similar display names.\n     * @param {string} displayName The display name to get user IDs from.\n     * @return {string[]} An array of user IDs or an empty array.\n     */\n    public getUserIdsWithDisplayName(displayName: string): string[] {\n        return this.displayNameToUserIds[utils.removeHiddenChars(displayName)] || [];\n    }\n\n    /**\n     * Returns true if userId is in room, event is not redacted and either sender of\n     * mxEvent or has power level sufficient to redact events other than their own.\n     * @param {MatrixEvent} mxEvent The event to test permission for\n     * @param {string} userId The user ID of the user to test permission for\n     * @return {boolean} true if the given used ID can redact given event\n     */\n    public maySendRedactionForEvent(mxEvent: MatrixEvent, userId: string): boolean {\n        const member = this.getMember(userId);\n        if (!member || member.membership === 'leave') return false;\n\n        if (mxEvent.status || mxEvent.isRedacted()) return false;\n\n        // The user may have been the sender, but they can't redact their own message\n        // if redactions are blocked.\n        const canRedact = this.maySendEvent(EventType.RoomRedaction, userId);\n        if (mxEvent.getSender() === userId) return canRedact;\n\n        return this.hasSufficientPowerLevelFor('redact', member.powerLevel);\n    }\n\n    /**\n     * Returns true if the given power level is sufficient for action\n     * @param {string} action The type of power level to check\n     * @param {number} powerLevel The power level of the member\n     * @return {boolean} true if the given power level is sufficient\n     */\n    public hasSufficientPowerLevelFor(action: string, powerLevel: number): boolean {\n        const powerLevelsEvent = this.getStateEvents(EventType.RoomPowerLevels, \"\");\n\n        let powerLevels = {};\n        if (powerLevelsEvent) {\n            powerLevels = powerLevelsEvent.getContent();\n        }\n\n        let requiredLevel = 50;\n        if (utils.isNumber(powerLevels[action])) {\n            requiredLevel = powerLevels[action];\n        }\n\n        return powerLevel >= requiredLevel;\n    }\n\n    /**\n     * Short-form for maySendEvent('m.room.message', userId)\n     * @param {string} userId The user ID of the user to test permission for\n     * @return {boolean} true if the given user ID should be permitted to send\n     *                   message events into the given room.\n     */\n    public maySendMessage(userId: string): boolean {\n        return this.maySendEventOfType(EventType.RoomMessage, userId, false);\n    }\n\n    /**\n     * Returns true if the given user ID has permission to send a normal\n     * event of type `eventType` into this room.\n     * @param {string} eventType The type of event to test\n     * @param {string} userId The user ID of the user to test permission for\n     * @return {boolean} true if the given user ID should be permitted to send\n     *                        the given type of event into this room,\n     *                        according to the room's state.\n     */\n    public maySendEvent(eventType: EventType | string, userId: string): boolean {\n        return this.maySendEventOfType(eventType, userId, false);\n    }\n\n    /**\n      * Returns true if the given MatrixClient has permission to send a state\n      * event of type `stateEventType` into this room.\n      * @param {string} stateEventType The type of state events to test\n      * @param {MatrixClient} cli The client to test permission for\n      * @return {boolean} true if the given client should be permitted to send\n      *                        the given type of state event into this room,\n      *                        according to the room's state.\n      */\n    public mayClientSendStateEvent(stateEventType: EventType | string, cli: MatrixClient): boolean {\n        if (cli.isGuest()) {\n            return false;\n        }\n        return this.maySendStateEvent(stateEventType, cli.credentials.userId);\n    }\n\n    /**\n     * Returns true if the given user ID has permission to send a state\n     * event of type `stateEventType` into this room.\n     * @param {string} stateEventType The type of state events to test\n     * @param {string} userId The user ID of the user to test permission for\n     * @return {boolean} true if the given user ID should be permitted to send\n     *                        the given type of state event into this room,\n     *                        according to the room's state.\n     */\n    public maySendStateEvent(stateEventType: EventType | string, userId: string): boolean {\n        return this.maySendEventOfType(stateEventType, userId, true);\n    }\n\n    /**\n     * Returns true if the given user ID has permission to send a normal or state\n     * event of type `eventType` into this room.\n     * @param {string} eventType The type of event to test\n     * @param {string} userId The user ID of the user to test permission for\n     * @param {boolean} state If true, tests if the user may send a state\n     event of this type. Otherwise tests whether\n     they may send a regular event.\n     * @return {boolean} true if the given user ID should be permitted to send\n     *                        the given type of event into this room,\n     *                        according to the room's state.\n     */\n    private maySendEventOfType(eventType: EventType | string, userId: string, state: boolean): boolean {\n        const powerLevelsEvent = this.getStateEvents(EventType.RoomPowerLevels, '');\n\n        let powerLevels;\n        let eventsLevels = {};\n\n        let stateDefault = 0;\n        let eventsDefault = 0;\n        let powerLevel = 0;\n        if (powerLevelsEvent) {\n            powerLevels = powerLevelsEvent.getContent();\n            eventsLevels = powerLevels.events || {};\n\n            if (Number.isSafeInteger(powerLevels.state_default)) {\n                stateDefault = powerLevels.state_default;\n            } else {\n                stateDefault = 50;\n            }\n\n            const userPowerLevel = powerLevels.users && powerLevels.users[userId];\n            if (Number.isSafeInteger(userPowerLevel)) {\n                powerLevel = userPowerLevel;\n            } else if (Number.isSafeInteger(powerLevels.users_default)) {\n                powerLevel = powerLevels.users_default;\n            }\n\n            if (Number.isSafeInteger(powerLevels.events_default)) {\n                eventsDefault = powerLevels.events_default;\n            }\n        }\n\n        let requiredLevel = state ? stateDefault : eventsDefault;\n        if (Number.isSafeInteger(eventsLevels[eventType])) {\n            requiredLevel = eventsLevels[eventType];\n        }\n        return powerLevel >= requiredLevel;\n    }\n\n    /**\n     * Returns true if the given user ID has permission to trigger notification\n     * of type `notifLevelKey`\n     * @param {string} notifLevelKey The level of notification to test (eg. 'room')\n     * @param {string} userId The user ID of the user to test permission for\n     * @return {boolean} true if the given user ID has permission to trigger a\n     *                        notification of this type.\n     */\n    public mayTriggerNotifOfType(notifLevelKey: string, userId: string): boolean {\n        const member = this.getMember(userId);\n        if (!member) {\n            return false;\n        }\n\n        const powerLevelsEvent = this.getStateEvents(EventType.RoomPowerLevels, '');\n\n        let notifLevel = 50;\n        if (\n            powerLevelsEvent &&\n            powerLevelsEvent.getContent() &&\n            powerLevelsEvent.getContent().notifications &&\n            utils.isNumber(powerLevelsEvent.getContent().notifications[notifLevelKey])\n        ) {\n            notifLevel = powerLevelsEvent.getContent().notifications[notifLevelKey];\n        }\n\n        return member.powerLevel >= notifLevel;\n    }\n\n    /**\n     * Returns the join rule based on the m.room.join_rule state event, defaulting to `invite`.\n     * @returns {string} the join_rule applied to this room\n     */\n    public getJoinRule(): JoinRule {\n        const joinRuleEvent = this.getStateEvents(EventType.RoomJoinRules, \"\");\n        const joinRuleContent = joinRuleEvent?.getContent<IJoinRuleEventContent>() ?? {};\n        return joinRuleContent[\"join_rule\"] || JoinRule.Invite;\n    }\n\n    /**\n     * Returns the history visibility based on the m.room.history_visibility state event, defaulting to `shared`.\n     * @returns {HistoryVisibility} the history_visibility applied to this room\n     */\n    public getHistoryVisibility(): HistoryVisibility {\n        const historyVisibilityEvent = this.getStateEvents(EventType.RoomHistoryVisibility, \"\");\n        const historyVisibilityContent = historyVisibilityEvent?.getContent() ?? {};\n        return historyVisibilityContent[\"history_visibility\"] || HistoryVisibility.Shared;\n    }\n\n    /**\n     * Returns the guest access based on the m.room.guest_access state event, defaulting to `shared`.\n     * @returns {GuestAccess} the guest_access applied to this room\n     */\n    public getGuestAccess(): GuestAccess {\n        const guestAccessEvent = this.getStateEvents(EventType.RoomGuestAccess, \"\");\n        const guestAccessContent = guestAccessEvent?.getContent() ?? {};\n        return guestAccessContent[\"guest_access\"] || GuestAccess.Forbidden;\n    }\n\n    private updateThirdPartyTokenCache(memberEvent: MatrixEvent): void {\n        if (!memberEvent.getContent().third_party_invite) {\n            return;\n        }\n        const token = (memberEvent.getContent().third_party_invite.signed || {}).token;\n        if (!token) {\n            return;\n        }\n        const threePidInvite = this.getStateEvents(EventType.RoomThirdPartyInvite, token);\n        if (!threePidInvite) {\n            return;\n        }\n        this.tokenToInvite[token] = memberEvent;\n    }\n\n    private updateDisplayNameCache(userId: string, displayName: string): void {\n        const oldName = this.userIdsToDisplayNames[userId];\n        delete this.userIdsToDisplayNames[userId];\n        if (oldName) {\n            // Remove the old name from the cache.\n            // We clobber the user_id > name lookup but the name -> [user_id] lookup\n            // means we need to remove that user ID from that array rather than nuking\n            // the lot.\n            const strippedOldName = utils.removeHiddenChars(oldName);\n\n            const existingUserIds = this.displayNameToUserIds[strippedOldName];\n            if (existingUserIds) {\n                // remove this user ID from this array\n                const filteredUserIDs = existingUserIds.filter((id) => id !== userId);\n                this.displayNameToUserIds[strippedOldName] = filteredUserIDs;\n            }\n        }\n\n        this.userIdsToDisplayNames[userId] = displayName;\n\n        const strippedDisplayname = displayName && utils.removeHiddenChars(displayName);\n        // an empty stripped displayname (undefined/'') will be set to MXID in room-member.js\n        if (strippedDisplayname) {\n            if (!this.displayNameToUserIds[strippedDisplayname]) {\n                this.displayNameToUserIds[strippedDisplayname] = [];\n            }\n            this.displayNameToUserIds[strippedDisplayname].push(userId);\n        }\n    }\n}\n\n/**\n * Fires whenever the event dictionary in room state is updated.\n * @event module:client~MatrixClient#\"RoomState.events\"\n * @param {MatrixEvent} event The matrix event which caused this event to fire.\n * @param {RoomState} state The room state whose RoomState.events dictionary\n * was updated.\n * @param {MatrixEvent} prevEvent The event being replaced by the new state, if\n * known. Note that this can differ from `getPrevContent()` on the new state event\n * as this is the store's view of the last state, not the previous state provided\n * by the server.\n * @example\n * matrixClient.on(\"RoomState.events\", function(event, state, prevEvent){\n *   var newStateEvent = event;\n * });\n */\n\n/**\n * Fires whenever a member in the members dictionary is updated in any way.\n * @event module:client~MatrixClient#\"RoomState.members\"\n * @param {MatrixEvent} event The matrix event which caused this event to fire.\n * @param {RoomState} state The room state whose RoomState.members dictionary\n * was updated.\n * @param {RoomMember} member The room member that was updated.\n * @example\n * matrixClient.on(\"RoomState.members\", function(event, state, member){\n *   var newMembershipState = member.membership;\n * });\n */\n\n/**\n * Fires whenever a member is added to the members dictionary. The RoomMember\n * will not be fully populated yet (e.g. no membership state) but will already\n * be available in the members dictionary.\n * @event module:client~MatrixClient#\"RoomState.newMember\"\n * @param {MatrixEvent} event The matrix event which caused this event to fire.\n * @param {RoomState} state The room state whose RoomState.members dictionary\n * was updated with a new entry.\n * @param {RoomMember} member The room member that was added.\n * @example\n * matrixClient.on(\"RoomState.newMember\", function(event, state, member){\n *   // add event listeners on 'member'\n * });\n */\n",
    "/*\nCopyright 2015 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * @module models/room-summary\n */\n\nexport interface IRoomSummary {\n    \"m.heroes\": string[];\n    \"m.joined_member_count\": number;\n    \"m.invited_member_count\": number;\n}\n\ninterface IInfo {\n    title: string;\n    desc?: string;\n    numMembers?: number;\n    aliases?: string[];\n    timestamp?: number;\n}\n\n/**\n * Construct a new Room Summary. A summary can be used for display on a recent\n * list, without having to load the entire room list into memory.\n * @constructor\n * @param {string} roomId Required. The ID of this room.\n * @param {Object} info Optional. The summary info. Additional keys are supported.\n * @param {string} info.title The title of the room (e.g. <code>m.room.name</code>)\n * @param {string} info.desc The description of the room (e.g.\n * <code>m.room.topic</code>)\n * @param {Number} info.numMembers The number of joined users.\n * @param {string[]} info.aliases The list of aliases for this room.\n * @param {Number} info.timestamp The timestamp for this room.\n */\nexport class RoomSummary {\n    constructor(public readonly roomId: string, info?: IInfo) {}\n}\n\n",
    "/*\nCopyright 2015 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * @module models/room\n */\n\nimport { EventTimelineSet, DuplicateStrategy } from \"./event-timeline-set\";\nimport { Direction, EventTimeline } from \"./event-timeline\";\nimport { getHttpUriForMxc } from \"../content-repo\";\nimport * as utils from \"../utils\";\nimport { defer, normalize } from \"../utils\";\nimport { IEvent, IThreadBundledRelationship, MatrixEvent, MatrixEventEvent, MatrixEventHandlerMap } from \"./event\";\nimport { EventStatus } from \"./event-status\";\nimport { RoomMember } from \"./room-member\";\nimport { IRoomSummary, RoomSummary } from \"./room-summary\";\nimport { logger } from '../logger';\nimport { TypedReEmitter } from '../ReEmitter';\nimport {\n    EventType, RoomCreateTypeField, RoomType, UNSTABLE_ELEMENT_FUNCTIONAL_USERS,\n    EVENT_VISIBILITY_CHANGE_TYPE,\n    RelationType,\n} from \"../@types/event\";\nimport { IRoomVersionsCapability, MatrixClient, PendingEventOrdering, RoomVersionStability } from \"../client\";\nimport { GuestAccess, HistoryVisibility, JoinRule, ResizeMethod } from \"../@types/partials\";\nimport { Filter, IFilterDefinition } from \"../filter\";\nimport { RoomState } from \"./room-state\";\nimport {\n    Thread,\n    ThreadEvent,\n    EventHandlerMap as ThreadHandlerMap,\n    FILTER_RELATED_BY_REL_TYPES, THREAD_RELATION_TYPE,\n    FILTER_RELATED_BY_SENDERS,\n    ThreadFilterType,\n} from \"./thread\";\nimport { Method } from \"../http-api\";\nimport { TypedEventEmitter } from \"./typed-event-emitter\";\n\n// These constants are used as sane defaults when the homeserver doesn't support\n// the m.room_versions capability. In practice, KNOWN_SAFE_ROOM_VERSION should be\n// the same as the common default room version whereas SAFE_ROOM_VERSIONS are the\n// room versions which are considered okay for people to run without being asked\n// to upgrade (ie: \"stable\"). Eventually, we should remove these when all homeservers\n// return an m.room_versions capability.\nconst KNOWN_SAFE_ROOM_VERSION = '6';\nconst SAFE_ROOM_VERSIONS = ['1', '2', '3', '4', '5', '6'];\n\nfunction synthesizeReceipt(userId: string, event: MatrixEvent, receiptType: string): MatrixEvent {\n    // console.log(\"synthesizing receipt for \"+event.getId());\n    return new MatrixEvent({\n        content: {\n            [event.getId()]: {\n                [receiptType]: {\n                    [userId]: {\n                        ts: event.getTs(),\n                    },\n                },\n            },\n        },\n        type: \"m.receipt\",\n        room_id: event.getRoomId(),\n    });\n}\n\ninterface IOpts {\n    storageToken?: string;\n    pendingEventOrdering?: PendingEventOrdering;\n    timelineSupport?: boolean;\n    unstableClientRelationAggregation?: boolean;\n    lazyLoadMembers?: boolean;\n}\n\nexport interface IRecommendedVersion {\n    version: string;\n    needsUpgrade: boolean;\n    urgent: boolean;\n}\n\ninterface IReceipt {\n    ts: number;\n}\n\ninterface IWrappedReceipt {\n    eventId: string;\n    data: IReceipt;\n}\n\ninterface ICachedReceipt {\n    type: string;\n    userId: string;\n    data: IReceipt;\n}\n\ntype ReceiptCache = {[eventId: string]: ICachedReceipt[]};\n\ninterface IReceiptContent {\n    [eventId: string]: {\n        [type: string]: {\n            [userId: string]: IReceipt;\n        };\n    };\n}\n\nconst ReceiptPairRealIndex = 0;\nconst ReceiptPairSyntheticIndex = 1;\n// We will only hold a synthetic receipt if we do not have a real receipt or the synthetic is newer.\ntype Receipts = {\n    [receiptType: string]: {\n        [userId: string]: [IWrappedReceipt, IWrappedReceipt]; // Pair<real receipt, synthetic receipt> (both nullable)\n    };\n};\n\n// When inserting a visibility event affecting event `eventId`, we\n// need to scan through existing visibility events for `eventId`.\n// In theory, this could take an unlimited amount of time if:\n//\n// - the visibility event was sent by a moderator; and\n// - `eventId` already has many visibility changes (usually, it should\n//   be 2 or less); and\n// - for some reason, the visibility changes are received out of order\n//   (usually, this shouldn't happen at all).\n//\n// For this reason, we limit the number of events to scan through,\n// expecting that a broken visibility change for a single event in\n// an extremely uncommon case (possibly a DoS) is a small\n// price to pay to keep matrix-js-sdk responsive.\nconst MAX_NUMBER_OF_VISIBILITY_EVENTS_TO_SCAN_THROUGH = 30;\n\nexport enum NotificationCountType {\n    Highlight = \"highlight\",\n    Total = \"total\",\n}\n\nexport interface ICreateFilterOpts {\n    // Populate the filtered timeline with already loaded events in the room\n    // timeline. Useful to disable for some filters that can't be achieved by the\n    // client in an efficient manner\n    prepopulateTimeline?: boolean;\n    useSyncEvents?: boolean;\n    pendingEvents?: boolean;\n}\n\nexport enum RoomEvent {\n    MyMembership = \"Room.myMembership\",\n    Tags = \"Room.tags\",\n    AccountData = \"Room.accountData\",\n    Receipt = \"Room.receipt\",\n    Name = \"Room.name\",\n    Redaction = \"Room.redaction\",\n    RedactionCancelled = \"Room.redactionCancelled\",\n    LocalEchoUpdated = \"Room.localEchoUpdated\",\n    Timeline = \"Room.timeline\",\n    TimelineReset = \"Room.timelineReset\",\n}\n\ntype EmittedEvents = RoomEvent\n    | ThreadEvent.New\n    | ThreadEvent.Update\n    | ThreadEvent.NewReply\n    | RoomEvent.Timeline\n    | RoomEvent.TimelineReset\n    | MatrixEventEvent.BeforeRedaction;\n\nexport type RoomEventHandlerMap = {\n    [RoomEvent.MyMembership]: (room: Room, membership: string, prevMembership?: string) => void;\n    [RoomEvent.Tags]: (event: MatrixEvent, room: Room) => void;\n    [RoomEvent.AccountData]: (event: MatrixEvent, room: Room, lastEvent?: MatrixEvent) => void;\n    [RoomEvent.Receipt]: (event: MatrixEvent, room: Room) => void;\n    [RoomEvent.Name]: (room: Room) => void;\n    [RoomEvent.Redaction]: (event: MatrixEvent, room: Room) => void;\n    [RoomEvent.RedactionCancelled]: (event: MatrixEvent, room: Room) => void;\n    [RoomEvent.LocalEchoUpdated]: (\n        event: MatrixEvent,\n        room: Room,\n        oldEventId?: string,\n        oldStatus?: EventStatus,\n    ) => void;\n    [ThreadEvent.New]: (thread: Thread, toStartOfTimeline: boolean) => void;\n} & ThreadHandlerMap & MatrixEventHandlerMap;\n\nexport class Room extends TypedEventEmitter<EmittedEvents, RoomEventHandlerMap> {\n    public readonly reEmitter: TypedReEmitter<EmittedEvents, RoomEventHandlerMap>;\n    private txnToEvent: Record<string, MatrixEvent> = {}; // Pending in-flight requests { string: MatrixEvent }\n    // receipts should clobber based on receipt_type and user_id pairs hence\n    // the form of this structure. This is sub-optimal for the exposed APIs\n    // which pass in an event ID and get back some receipts, so we also store\n    // a pre-cached list for this purpose.\n    private receipts: Receipts = {}; // { receipt_type: { user_id: IReceipt } }\n    private receiptCacheByEventId: ReceiptCache = {}; // { event_id: ICachedReceipt[] }\n    private notificationCounts: Partial<Record<NotificationCountType, number>> = {};\n    private readonly timelineSets: EventTimelineSet[];\n    public readonly threadsTimelineSets: EventTimelineSet[] = [];\n    // any filtered timeline sets we're maintaining for this room\n    private readonly filteredTimelineSets: Record<string, EventTimelineSet> = {}; // filter_id: timelineSet\n    private readonly pendingEventList?: MatrixEvent[];\n    // read by megolm via getter; boolean value - null indicates \"use global value\"\n    private blacklistUnverifiedDevices: boolean = null;\n    private selfMembership: string = null;\n    private summaryHeroes: string[] = null;\n    // flags to stop logspam about missing m.room.create events\n    private getTypeWarning = false;\n    private getVersionWarning = false;\n    private membersPromise?: Promise<boolean>;\n    // Map from threadId to pending Thread instance created by createThreadFetchRoot\n    private threadPromises = new Map<string, Promise<Thread>>();\n\n    // XXX: These should be read-only\n    /**\n     * The human-readable display name for this room.\n     */\n    public name: string;\n    /**\n     * The un-homoglyphed name for this room.\n     */\n    public normalizedName: string;\n    /**\n     * Dict of room tags; the keys are the tag name and the values\n     * are any metadata associated with the tag - e.g. { \"fav\" : { order: 1 } }\n     */\n    public tags: Record<string, Record<string, any>> = {}; // $tagName: { $metadata: $value }\n    /**\n     * accountData Dict of per-room account_data events; the keys are the\n     * event type and the values are the events.\n     */\n    public accountData: Record<string, MatrixEvent> = {}; // $eventType: $event\n    /**\n     * The room summary.\n     */\n    public summary: RoomSummary = null;\n    /**\n     * A token which a data store can use to remember the state of the room.\n     */\n    public readonly storageToken?: string;\n    // legacy fields\n    /**\n     * The live event timeline for this room, with the oldest event at index 0.\n     * Present for backwards compatibility - prefer getLiveTimeline().getEvents()\n     */\n    public timeline: MatrixEvent[];\n    /**\n     * oldState The state of the room at the time of the oldest\n     * event in the live timeline. Present for backwards compatibility -\n     * prefer getLiveTimeline().getState(EventTimeline.BACKWARDS).\n     */\n    public oldState: RoomState;\n    /**\n     * currentState The state of the room at the time of the\n     * newest event in the timeline. Present for backwards compatibility -\n     * prefer getLiveTimeline().getState(EventTimeline.FORWARDS).\n     */\n    public currentState: RoomState;\n\n    /**\n     * @experimental\n     */\n    public threads = new Map<string, Thread>();\n    public lastThread: Thread;\n\n    /**\n     * A mapping of eventId to all visibility changes to apply\n     * to the event, by chronological order, as per\n     * https://github.com/matrix-org/matrix-doc/pull/3531\n     *\n     * # Invariants\n     *\n     * - within each list, all events are classed by\n     *   chronological order;\n     * - all events are events such that\n     *  `asVisibilityEvent()` returns a non-null `IVisibilityChange`;\n     * - within each list with key `eventId`, all events\n     *   are in relation to `eventId`.\n     *\n     * @experimental\n     */\n    private visibilityEvents = new Map<string, MatrixEvent[]>();\n\n    /**\n     * Construct a new Room.\n     *\n     * <p>For a room, we store an ordered sequence of timelines, which may or may not\n     * be continuous. Each timeline lists a series of events, as well as tracking\n     * the room state at the start and the end of the timeline. It also tracks\n     * forward and backward pagination tokens, as well as containing links to the\n     * next timeline in the sequence.\n     *\n     * <p>There is one special timeline - the 'live' timeline, which represents the\n     * timeline to which events are being added in real-time as they are received\n     * from the /sync API. Note that you should not retain references to this\n     * timeline - even if it is the current timeline right now, it may not remain\n     * so if the server gives us a timeline gap in /sync.\n     *\n     * <p>In order that we can find events from their ids later, we also maintain a\n     * map from event_id to timeline and index.\n     *\n     * @constructor\n     * @alias module:models/room\n     * @param {string} roomId Required. The ID of this room.\n     * @param {MatrixClient} client Required. The client, used to lazy load members.\n     * @param {string} myUserId Required. The ID of the syncing user.\n     * @param {Object=} opts Configuration options\n     * @param {*} opts.storageToken Optional. The token which a data store can use\n     * to remember the state of the room. What this means is dependent on the store\n     * implementation.\n     *\n     * @param {String=} opts.pendingEventOrdering Controls where pending messages\n     * appear in a room's timeline. If \"<b>chronological</b>\", messages will appear\n     * in the timeline when the call to <code>sendEvent</code> was made. If\n     * \"<b>detached</b>\", pending messages will appear in a separate list,\n     * accessible via {@link module:models/room#getPendingEvents}. Default:\n     * \"chronological\".\n     * @param {boolean} [opts.timelineSupport = false] Set to true to enable improved\n     * timeline support.\n     * @param {boolean} [opts.unstableClientRelationAggregation = false]\n     * Optional. Set to true to enable client-side aggregation of event relations\n     * via `EventTimelineSet#getRelationsForEvent`.\n     * This feature is currently unstable and the API may change without notice.\n     */\n    constructor(\n        public readonly roomId: string,\n        public readonly client: MatrixClient,\n        public readonly myUserId: string,\n        private readonly opts: IOpts = {},\n    ) {\n        super();\n        // In some cases, we add listeners for every displayed Matrix event, so it's\n        // common to have quite a few more than the default limit.\n        this.setMaxListeners(100);\n        this.reEmitter = new TypedReEmitter(this);\n\n        opts.pendingEventOrdering = opts.pendingEventOrdering || PendingEventOrdering.Chronological;\n\n        this.name = roomId;\n\n        // all our per-room timeline sets. the first one is the unfiltered ones;\n        // the subsequent ones are the filtered ones in no particular order.\n        this.timelineSets = [new EventTimelineSet(this, opts)];\n        this.reEmitter.reEmit(this.getUnfilteredTimelineSet(), [\n            RoomEvent.Timeline,\n            RoomEvent.TimelineReset,\n        ]);\n\n        this.fixUpLegacyTimelineFields();\n\n        if (this.opts.pendingEventOrdering === PendingEventOrdering.Detached) {\n            this.pendingEventList = [];\n            const serializedPendingEventList = client.sessionStore.store.getItem(pendingEventsKey(this.roomId));\n            if (serializedPendingEventList) {\n                JSON.parse(serializedPendingEventList)\n                    .forEach(async (serializedEvent: Partial<IEvent>) => {\n                        const event = new MatrixEvent(serializedEvent);\n                        if (event.getType() === EventType.RoomMessageEncrypted) {\n                            await event.attemptDecryption(this.client.crypto);\n                        }\n                        event.setStatus(EventStatus.NOT_SENT);\n                        this.addPendingEvent(event, event.getTxnId());\n                    });\n            }\n        }\n\n        // awaited by getEncryptionTargetMembers while room members are loading\n        if (!this.opts.lazyLoadMembers) {\n            this.membersPromise = Promise.resolve(false);\n        } else {\n            this.membersPromise = null;\n        }\n    }\n\n    private threadTimelineSetsPromise: Promise<[EventTimelineSet, EventTimelineSet]> | null = null;\n    public async createThreadsTimelineSets(): Promise<[EventTimelineSet, EventTimelineSet]> {\n        if (this.threadTimelineSetsPromise) {\n            return this.threadTimelineSetsPromise;\n        }\n\n        if (this.client?.supportsExperimentalThreads()) {\n            try {\n                this.threadTimelineSetsPromise = Promise.all([\n                    this.createThreadTimelineSet(),\n                    this.createThreadTimelineSet(ThreadFilterType.My),\n                ]);\n                const timelineSets = await this.threadTimelineSetsPromise;\n                this.threadsTimelineSets.push(...timelineSets);\n            } catch (e) {\n                this.threadTimelineSetsPromise = null;\n            }\n        }\n    }\n\n    /**\n     * Bulk decrypt critical events in a room\n     *\n     * Critical events represents the minimal set of events to decrypt\n     * for a typical UI to function properly\n     *\n     * - Last event of every room (to generate likely message preview)\n     * - All events up to the read receipt (to calculate an accurate notification count)\n     *\n     * @returns {Promise} Signals when all events have been decrypted\n     */\n    public decryptCriticalEvents(): Promise<void> {\n        const readReceiptEventId = this.getEventReadUpTo(this.client.getUserId(), true);\n        const events = this.getLiveTimeline().getEvents();\n        const readReceiptTimelineIndex = events.findIndex(matrixEvent => {\n            return matrixEvent.event.event_id === readReceiptEventId;\n        });\n\n        const decryptionPromises = events\n            .slice(readReceiptTimelineIndex)\n            .filter(event => event.shouldAttemptDecryption())\n            .reverse()\n            .map(event => event.attemptDecryption(this.client.crypto, { isRetry: true }));\n\n        return Promise.allSettled(decryptionPromises) as unknown as Promise<void>;\n    }\n\n    /**\n     * Bulk decrypt events in a room\n     *\n     * @returns {Promise} Signals when all events have been decrypted\n     */\n    public decryptAllEvents(): Promise<void> {\n        const decryptionPromises = this\n            .getUnfilteredTimelineSet()\n            .getLiveTimeline()\n            .getEvents()\n            .filter(event => event.shouldAttemptDecryption())\n            .reverse()\n            .map(event => event.attemptDecryption(this.client.crypto, { isRetry: true }));\n\n        return Promise.allSettled(decryptionPromises) as unknown as Promise<void>;\n    }\n\n    /**\n     * Gets the version of the room\n     * @returns {string} The version of the room, or null if it could not be determined\n     */\n    public getVersion(): string | null {\n        const createEvent = this.currentState.getStateEvents(EventType.RoomCreate, \"\");\n        if (!createEvent) {\n            if (!this.getVersionWarning) {\n                logger.warn(\"[getVersion] Room \" + this.roomId + \" does not have an m.room.create event\");\n                this.getVersionWarning = true;\n            }\n            return '1';\n        }\n        const ver = createEvent.getContent()['room_version'];\n        if (ver === undefined) return '1';\n        return ver;\n    }\n\n    /**\n     * Determines whether this room needs to be upgraded to a new version\n     * @returns {string?} What version the room should be upgraded to, or null if\n     *     the room does not require upgrading at this time.\n     * @deprecated Use #getRecommendedVersion() instead\n     */\n    public shouldUpgradeToVersion(): string | null {\n        // TODO: Remove this function.\n        // This makes assumptions about which versions are safe, and can easily\n        // be wrong. Instead, people are encouraged to use getRecommendedVersion\n        // which determines a safer value. This function doesn't use that function\n        // because this is not async-capable, and to avoid breaking the contract\n        // we're deprecating this.\n\n        if (!SAFE_ROOM_VERSIONS.includes(this.getVersion())) {\n            return KNOWN_SAFE_ROOM_VERSION;\n        }\n\n        return null;\n    }\n\n    /**\n     * Determines the recommended room version for the room. This returns an\n     * object with 3 properties: <code>version</code> as the new version the\n     * room should be upgraded to (may be the same as the current version);\n     * <code>needsUpgrade</code> to indicate if the room actually can be\n     * upgraded (ie: does the current version not match?); and <code>urgent</code>\n     * to indicate if the new version patches a vulnerability in a previous\n     * version.\n     * @returns {Promise<{version: string, needsUpgrade: boolean, urgent: boolean}>}\n     * Resolves to the version the room should be upgraded to.\n     */\n    public async getRecommendedVersion(): Promise<IRecommendedVersion> {\n        const capabilities = await this.client.getCapabilities();\n        let versionCap = capabilities[\"m.room_versions\"];\n        if (!versionCap) {\n            versionCap = {\n                default: KNOWN_SAFE_ROOM_VERSION,\n                available: {},\n            };\n            for (const safeVer of SAFE_ROOM_VERSIONS) {\n                versionCap.available[safeVer] = RoomVersionStability.Stable;\n            }\n        }\n\n        let result = this.checkVersionAgainstCapability(versionCap);\n        if (result.urgent && result.needsUpgrade) {\n            // Something doesn't feel right: we shouldn't need to update\n            // because the version we're on should be in the protocol's\n            // namespace. This usually means that the server was updated\n            // before the client was, making us think the newest possible\n            // room version is not stable. As a solution, we'll refresh\n            // the capability we're using to determine this.\n            logger.warn(\n                \"Refreshing room version capability because the server looks \" +\n                \"to be supporting a newer room version we don't know about.\",\n            );\n\n            const caps = await this.client.getCapabilities(true);\n            versionCap = caps[\"m.room_versions\"];\n            if (!versionCap) {\n                logger.warn(\"No room version capability - assuming upgrade required.\");\n                return result;\n            } else {\n                result = this.checkVersionAgainstCapability(versionCap);\n            }\n        }\n\n        return result;\n    }\n\n    private checkVersionAgainstCapability(versionCap: IRoomVersionsCapability): IRecommendedVersion {\n        const currentVersion = this.getVersion();\n        logger.log(`[${this.roomId}] Current version: ${currentVersion}`);\n        logger.log(`[${this.roomId}] Version capability: `, versionCap);\n\n        const result = {\n            version: currentVersion,\n            needsUpgrade: false,\n            urgent: false,\n        };\n\n        // If the room is on the default version then nothing needs to change\n        if (currentVersion === versionCap.default) return result;\n\n        const stableVersions = Object.keys(versionCap.available)\n            .filter((v) => versionCap.available[v] === 'stable');\n\n        // Check if the room is on an unstable version. We determine urgency based\n        // off the version being in the Matrix spec namespace or not (if the version\n        // is in the current namespace and unstable, the room is probably vulnerable).\n        if (!stableVersions.includes(currentVersion)) {\n            result.version = versionCap.default;\n            result.needsUpgrade = true;\n            result.urgent = !!this.getVersion().match(/^[0-9]+[0-9.]*$/g);\n            if (result.urgent) {\n                logger.warn(`URGENT upgrade required on ${this.roomId}`);\n            } else {\n                logger.warn(`Non-urgent upgrade required on ${this.roomId}`);\n            }\n            return result;\n        }\n\n        // The room is on a stable, but non-default, version by this point.\n        // No upgrade needed.\n        return result;\n    }\n\n    /**\n     * Determines whether the given user is permitted to perform a room upgrade\n     * @param {String} userId The ID of the user to test against\n     * @returns {boolean} True if the given user is permitted to upgrade the room\n     */\n    public userMayUpgradeRoom(userId: string): boolean {\n        return this.currentState.maySendStateEvent(EventType.RoomTombstone, userId);\n    }\n\n    /**\n     * Get the list of pending sent events for this room\n     *\n     * @return {module:models/event.MatrixEvent[]} A list of the sent events\n     * waiting for remote echo.\n     *\n     * @throws If <code>opts.pendingEventOrdering</code> was not 'detached'\n     */\n    public getPendingEvents(): MatrixEvent[] {\n        if (this.opts.pendingEventOrdering !== PendingEventOrdering.Detached) {\n            throw new Error(\n                \"Cannot call getPendingEvents with pendingEventOrdering == \" +\n                this.opts.pendingEventOrdering);\n        }\n\n        return this.pendingEventList;\n    }\n\n    /**\n     * Removes a pending event for this room\n     *\n     * @param {string} eventId\n     * @return {boolean} True if an element was removed.\n     */\n    public removePendingEvent(eventId: string): boolean {\n        if (this.opts.pendingEventOrdering !== PendingEventOrdering.Detached) {\n            throw new Error(\n                \"Cannot call removePendingEvent with pendingEventOrdering == \" +\n                this.opts.pendingEventOrdering);\n        }\n\n        const removed = utils.removeElement(\n            this.pendingEventList,\n            function(ev) {\n                return ev.getId() == eventId;\n            }, false,\n        );\n\n        this.savePendingEvents();\n\n        return removed;\n    }\n\n    /**\n     * Check whether the pending event list contains a given event by ID.\n     * If pending event ordering is not \"detached\" then this returns false.\n     *\n     * @param {string} eventId The event ID to check for.\n     * @return {boolean}\n     */\n    public hasPendingEvent(eventId: string): boolean {\n        if (this.opts.pendingEventOrdering !== PendingEventOrdering.Detached) {\n            return false;\n        }\n\n        return this.pendingEventList.some(event => event.getId() === eventId);\n    }\n\n    /**\n     * Get a specific event from the pending event list, if configured, null otherwise.\n     *\n     * @param {string} eventId The event ID to check for.\n     * @return {MatrixEvent}\n     */\n    public getPendingEvent(eventId: string): MatrixEvent | null {\n        if (this.opts.pendingEventOrdering !== PendingEventOrdering.Detached) {\n            return null;\n        }\n\n        return this.pendingEventList.find(event => event.getId() === eventId);\n    }\n\n    /**\n     * Get the live unfiltered timeline for this room.\n     *\n     * @return {module:models/event-timeline~EventTimeline} live timeline\n     */\n    public getLiveTimeline(): EventTimeline {\n        return this.getUnfilteredTimelineSet().getLiveTimeline();\n    }\n\n    /**\n     * Get the timestamp of the last message in the room\n     *\n     * @return {number} the timestamp of the last message in the room\n     */\n    public getLastActiveTimestamp(): number {\n        const timeline = this.getLiveTimeline();\n        const events = timeline.getEvents();\n        if (events.length) {\n            const lastEvent = events[events.length - 1];\n            return lastEvent.getTs();\n        } else {\n            return Number.MIN_SAFE_INTEGER;\n        }\n    }\n\n    /**\n     * @return {string} the membership type (join | leave | invite) for the logged in user\n     */\n    public getMyMembership(): string {\n        return this.selfMembership;\n    }\n\n    /**\n     * If this room is a DM we're invited to,\n     * try to find out who invited us\n     * @return {string} user id of the inviter\n     */\n    public getDMInviter(): string {\n        if (this.myUserId) {\n            const me = this.getMember(this.myUserId);\n            if (me) {\n                return me.getDMInviter();\n            }\n        }\n        if (this.selfMembership === \"invite\") {\n            // fall back to summary information\n            const memberCount = this.getInvitedAndJoinedMemberCount();\n            if (memberCount == 2 && this.summaryHeroes.length) {\n                return this.summaryHeroes[0];\n            }\n        }\n    }\n\n    /**\n     * Assuming this room is a DM room, tries to guess with which user.\n     * @return {string} user id of the other member (could be syncing user)\n     */\n    public guessDMUserId(): string {\n        const me = this.getMember(this.myUserId);\n        if (me) {\n            const inviterId = me.getDMInviter();\n            if (inviterId) {\n                return inviterId;\n            }\n        }\n        // remember, we're assuming this room is a DM,\n        // so returning the first member we find should be fine\n        const hasHeroes = Array.isArray(this.summaryHeroes) &&\n            this.summaryHeroes.length;\n        if (hasHeroes) {\n            return this.summaryHeroes[0];\n        }\n        const members = this.currentState.getMembers();\n        const anyMember = members.find((m) => m.userId !== this.myUserId);\n        if (anyMember) {\n            return anyMember.userId;\n        }\n        // it really seems like I'm the only user in the room\n        // so I probably created a room with just me in it\n        // and marked it as a DM. Ok then\n        return this.myUserId;\n    }\n\n    public getAvatarFallbackMember(): RoomMember {\n        const memberCount = this.getInvitedAndJoinedMemberCount();\n        if (memberCount > 2) {\n            return;\n        }\n        const hasHeroes = Array.isArray(this.summaryHeroes) &&\n            this.summaryHeroes.length;\n        if (hasHeroes) {\n            const availableMember = this.summaryHeroes.map((userId) => {\n                return this.getMember(userId);\n            }).find((member) => !!member);\n            if (availableMember) {\n                return availableMember;\n            }\n        }\n        const members = this.currentState.getMembers();\n        // could be different than memberCount\n        // as this includes left members\n        if (members.length <= 2) {\n            const availableMember = members.find((m) => {\n                return m.userId !== this.myUserId;\n            });\n            if (availableMember) {\n                return availableMember;\n            }\n        }\n        // if all else fails, try falling back to a user,\n        // and create a one-off member for it\n        if (hasHeroes) {\n            const availableUser = this.summaryHeroes.map((userId) => {\n                return this.client.getUser(userId);\n            }).find((user) => !!user);\n            if (availableUser) {\n                const member = new RoomMember(\n                    this.roomId, availableUser.userId);\n                member.user = availableUser;\n                return member;\n            }\n        }\n    }\n\n    /**\n     * Sets the membership this room was received as during sync\n     * @param {string} membership join | leave | invite\n     */\n    public updateMyMembership(membership: string): void {\n        const prevMembership = this.selfMembership;\n        this.selfMembership = membership;\n        if (prevMembership !== membership) {\n            if (membership === \"leave\") {\n                this.cleanupAfterLeaving();\n            }\n            this.emit(RoomEvent.MyMembership, this, membership, prevMembership);\n        }\n    }\n\n    private async loadMembersFromServer(): Promise<IEvent[]> {\n        const lastSyncToken = this.client.store.getSyncToken();\n        const queryString = utils.encodeParams({\n            not_membership: \"leave\",\n            at: lastSyncToken,\n        });\n        const path = utils.encodeUri(\"/rooms/$roomId/members?\" + queryString,\n            { $roomId: this.roomId });\n        const http = this.client.http;\n        const response = await http.authedRequest<{ chunk: IEvent[] }>(undefined, Method.Get, path);\n        return response.chunk;\n    }\n\n    private async loadMembers(): Promise<{ memberEvents: MatrixEvent[], fromServer: boolean }> {\n        // were the members loaded from the server?\n        let fromServer = false;\n        let rawMembersEvents = await this.client.store.getOutOfBandMembers(this.roomId);\n        // If the room is encrypted, we always fetch members from the server at\n        // least once, in case the latest state wasn't persisted properly.  Note\n        // that this function is only called once (unless loading the members\n        // fails), since loadMembersIfNeeded always returns this.membersPromise\n        // if set, which will be the result of the first (successful) call.\n        if (rawMembersEvents === null ||\n            (this.client.isCryptoEnabled() && this.client.isRoomEncrypted(this.roomId))) {\n            fromServer = true;\n            rawMembersEvents = await this.loadMembersFromServer();\n            logger.log(`LL: got ${rawMembersEvents.length} ` +\n                `members from server for room ${this.roomId}`);\n        }\n        const memberEvents = rawMembersEvents.map(this.client.getEventMapper());\n        return { memberEvents, fromServer };\n    }\n\n    /**\n     * Preloads the member list in case lazy loading\n     * of memberships is in use. Can be called multiple times,\n     * it will only preload once.\n     * @return {Promise} when preloading is done and\n     * accessing the members on the room will take\n     * all members in the room into account\n     */\n    public loadMembersIfNeeded(): Promise<boolean> {\n        if (this.membersPromise) {\n            return this.membersPromise;\n        }\n\n        // mark the state so that incoming messages while\n        // the request is in flight get marked as superseding\n        // the OOB members\n        this.currentState.markOutOfBandMembersStarted();\n\n        const inMemoryUpdate = this.loadMembers().then((result) => {\n            this.currentState.setOutOfBandMembers(result.memberEvents);\n            // now the members are loaded, start to track the e2e devices if needed\n            if (this.client.isCryptoEnabled() && this.client.isRoomEncrypted(this.roomId)) {\n                this.client.crypto.trackRoomDevices(this.roomId);\n            }\n            return result.fromServer;\n        }).catch((err) => {\n            // allow retries on fail\n            this.membersPromise = null;\n            this.currentState.markOutOfBandMembersFailed();\n            throw err;\n        });\n        // update members in storage, but don't wait for it\n        inMemoryUpdate.then((fromServer) => {\n            if (fromServer) {\n                const oobMembers = this.currentState.getMembers()\n                    .filter((m) => m.isOutOfBand())\n                    .map((m) => m.events.member.event as IEvent);\n                logger.log(`LL: telling store to write ${oobMembers.length}`\n                    + ` members for room ${this.roomId}`);\n                const store = this.client.store;\n                return store.setOutOfBandMembers(this.roomId, oobMembers)\n                    // swallow any IDB error as we don't want to fail\n                    // because of this\n                    .catch((err) => {\n                        logger.log(\"LL: storing OOB room members failed, oh well\",\n                            err);\n                    });\n            }\n        }).catch((err) => {\n            // as this is not awaited anywhere,\n            // at least show the error in the console\n            logger.error(err);\n        });\n\n        this.membersPromise = inMemoryUpdate;\n\n        return this.membersPromise;\n    }\n\n    /**\n     * Removes the lazily loaded members from storage if needed\n     */\n    public async clearLoadedMembersIfNeeded(): Promise<void> {\n        if (this.opts.lazyLoadMembers && this.membersPromise) {\n            await this.loadMembersIfNeeded();\n            await this.client.store.clearOutOfBandMembers(this.roomId);\n            this.currentState.clearOutOfBandMembers();\n            this.membersPromise = null;\n        }\n    }\n\n    /**\n     * called when sync receives this room in the leave section\n     * to do cleanup after leaving a room. Possibly called multiple times.\n     */\n    private cleanupAfterLeaving(): void {\n        this.clearLoadedMembersIfNeeded().catch((err) => {\n            logger.error(`error after clearing loaded members from ` +\n                `room ${this.roomId} after leaving`);\n            logger.log(err);\n        });\n    }\n\n    /**\n     * Reset the live timeline of all timelineSets, and start new ones.\n     *\n     * <p>This is used when /sync returns a 'limited' timeline.\n     *\n     * @param {string=} backPaginationToken   token for back-paginating the new timeline\n     * @param {string=} forwardPaginationToken token for forward-paginating the old live timeline,\n     * if absent or null, all timelines are reset, removing old ones (including the previous live\n     * timeline which would otherwise be unable to paginate forwards without this token).\n     * Removing just the old live timeline whilst preserving previous ones is not supported.\n     */\n    public resetLiveTimeline(backPaginationToken: string | null, forwardPaginationToken: string | null): void {\n        for (let i = 0; i < this.timelineSets.length; i++) {\n            this.timelineSets[i].resetLiveTimeline(\n                backPaginationToken, forwardPaginationToken,\n            );\n        }\n\n        this.fixUpLegacyTimelineFields();\n    }\n\n    /**\n     * Fix up this.timeline, this.oldState and this.currentState\n     *\n     * @private\n     */\n    private fixUpLegacyTimelineFields(): void {\n        // maintain this.timeline as a reference to the live timeline,\n        // and this.oldState and this.currentState as references to the\n        // state at the start and end of that timeline. These are more\n        // for backwards-compatibility than anything else.\n        this.timeline = this.getLiveTimeline().getEvents();\n        this.oldState = this.getLiveTimeline()\n            .getState(EventTimeline.BACKWARDS);\n        this.currentState = this.getLiveTimeline()\n            .getState(EventTimeline.FORWARDS);\n    }\n\n    /**\n     * Returns whether there are any devices in the room that are unverified\n     *\n     * Note: Callers should first check if crypto is enabled on this device. If it is\n     * disabled, then we aren't tracking room devices at all, so we can't answer this, and an\n     * error will be thrown.\n     *\n     * @return {boolean} the result\n     */\n    public async hasUnverifiedDevices(): Promise<boolean> {\n        if (!this.client.isRoomEncrypted(this.roomId)) {\n            return false;\n        }\n        const e2eMembers = await this.getEncryptionTargetMembers();\n        for (const member of e2eMembers) {\n            const devices = this.client.getStoredDevicesForUser(member.userId);\n            if (devices.some((device) => device.isUnverified())) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Return the timeline sets for this room.\n     * @return {EventTimelineSet[]} array of timeline sets for this room\n     */\n    public getTimelineSets(): EventTimelineSet[] {\n        return this.timelineSets;\n    }\n\n    /**\n     * Helper to return the main unfiltered timeline set for this room\n     * @return {EventTimelineSet} room's unfiltered timeline set\n     */\n    public getUnfilteredTimelineSet(): EventTimelineSet {\n        return this.timelineSets[0];\n    }\n\n    /**\n     * Get the timeline which contains the given event from the unfiltered set, if any\n     *\n     * @param {string} eventId  event ID to look for\n     * @return {?module:models/event-timeline~EventTimeline} timeline containing\n     * the given event, or null if unknown\n     */\n    public getTimelineForEvent(eventId: string): EventTimeline {\n        const event = this.findEventById(eventId);\n        const thread = this.findThreadForEvent(event);\n        if (thread) {\n            return thread.timelineSet.getLiveTimeline();\n        } else {\n            return this.getUnfilteredTimelineSet().getTimelineForEvent(eventId);\n        }\n    }\n\n    /**\n     * Add a new timeline to this room's unfiltered timeline set\n     *\n     * @return {module:models/event-timeline~EventTimeline} newly-created timeline\n     */\n    public addTimeline(): EventTimeline {\n        return this.getUnfilteredTimelineSet().addTimeline();\n    }\n\n    /**\n     * Get an event which is stored in our unfiltered timeline set, or in a thread\n     *\n     * @param {string} eventId event ID to look for\n     * @return {?module:models/event.MatrixEvent} the given event, or undefined if unknown\n     */\n    public findEventById(eventId: string): MatrixEvent | undefined {\n        let event = this.getUnfilteredTimelineSet().findEventById(eventId);\n\n        if (!event) {\n            const threads = this.getThreads();\n            for (let i = 0; i < threads.length; i++) {\n                const thread = threads[i];\n                event = thread.findEventById(eventId);\n                if (event) {\n                    return event;\n                }\n            }\n        }\n\n        return event;\n    }\n\n    /**\n     * Get one of the notification counts for this room\n     * @param {String} type The type of notification count to get. default: 'total'\n     * @return {Number} The notification count, or undefined if there is no count\n     *                  for this type.\n     */\n    public getUnreadNotificationCount(type = NotificationCountType.Total): number | undefined {\n        return this.notificationCounts[type];\n    }\n\n    /**\n     * Set one of the notification counts for this room\n     * @param {String} type The type of notification count to set.\n     * @param {Number} count The new count\n     */\n    public setUnreadNotificationCount(type: NotificationCountType, count: number): void {\n        this.notificationCounts[type] = count;\n    }\n\n    public setSummary(summary: IRoomSummary): void {\n        const heroes = summary[\"m.heroes\"];\n        const joinedCount = summary[\"m.joined_member_count\"];\n        const invitedCount = summary[\"m.invited_member_count\"];\n        if (Number.isInteger(joinedCount)) {\n            this.currentState.setJoinedMemberCount(joinedCount);\n        }\n        if (Number.isInteger(invitedCount)) {\n            this.currentState.setInvitedMemberCount(invitedCount);\n        }\n        if (Array.isArray(heroes)) {\n            // be cautious about trusting server values,\n            // and make sure heroes doesn't contain our own id\n            // just to be sure\n            this.summaryHeroes = heroes.filter((userId) => {\n                return userId !== this.myUserId;\n            });\n        }\n    }\n\n    /**\n     * Whether to send encrypted messages to devices within this room.\n     * @param {Boolean} value true to blacklist unverified devices, null\n     * to use the global value for this room.\n     */\n    public setBlacklistUnverifiedDevices(value: boolean): void {\n        this.blacklistUnverifiedDevices = value;\n    }\n\n    /**\n     * Whether to send encrypted messages to devices within this room.\n     * @return {Boolean} true if blacklisting unverified devices, null\n     * if the global value should be used for this room.\n     */\n    public getBlacklistUnverifiedDevices(): boolean {\n        return this.blacklistUnverifiedDevices;\n    }\n\n    /**\n     * Get the avatar URL for a room if one was set.\n     * @param {String} baseUrl The homeserver base URL. See\n     * {@link module:client~MatrixClient#getHomeserverUrl}.\n     * @param {Number} width The desired width of the thumbnail.\n     * @param {Number} height The desired height of the thumbnail.\n     * @param {string} resizeMethod The thumbnail resize method to use, either\n     * \"crop\" or \"scale\".\n     * @param {boolean} allowDefault True to allow an identicon for this room if an\n     * avatar URL wasn't explicitly set. Default: true. (Deprecated)\n     * @return {?string} the avatar URL or null.\n     */\n    public getAvatarUrl(\n        baseUrl: string,\n        width: number,\n        height: number,\n        resizeMethod: ResizeMethod,\n        allowDefault = true,\n    ): string | null {\n        const roomAvatarEvent = this.currentState.getStateEvents(EventType.RoomAvatar, \"\");\n        if (!roomAvatarEvent && !allowDefault) {\n            return null;\n        }\n\n        const mainUrl = roomAvatarEvent ? roomAvatarEvent.getContent().url : null;\n        if (mainUrl) {\n            return getHttpUriForMxc(baseUrl, mainUrl, width, height, resizeMethod);\n        }\n\n        return null;\n    }\n\n    /**\n     * Get the mxc avatar url for the room, if one was set.\n     * @return {string} the mxc avatar url or falsy\n     */\n    public getMxcAvatarUrl(): string | null {\n        return this.currentState.getStateEvents(EventType.RoomAvatar, \"\")?.getContent()?.url || null;\n    }\n\n    /**\n     * Get the aliases this room has according to the room's state\n     * The aliases returned by this function may not necessarily\n     * still point to this room.\n     * @return {array} The room's alias as an array of strings\n     */\n    public getAliases(): string[] {\n        const aliasStrings: string[] = [];\n\n        const aliasEvents = this.currentState.getStateEvents(EventType.RoomAliases);\n        if (aliasEvents) {\n            for (let i = 0; i < aliasEvents.length; ++i) {\n                const aliasEvent = aliasEvents[i];\n                if (Array.isArray(aliasEvent.getContent().aliases)) {\n                    const filteredAliases = aliasEvent.getContent<{ aliases: string[] }>().aliases.filter(a => {\n                        if (typeof(a) !== \"string\") return false;\n                        if (a[0] !== '#') return false;\n                        if (!a.endsWith(`:${aliasEvent.getStateKey()}`)) return false;\n\n                        // It's probably valid by here.\n                        return true;\n                    });\n                    Array.prototype.push.apply(aliasStrings, filteredAliases);\n                }\n            }\n        }\n        return aliasStrings;\n    }\n\n    /**\n     * Get this room's canonical alias\n     * The alias returned by this function may not necessarily\n     * still point to this room.\n     * @return {?string} The room's canonical alias, or null if there is none\n     */\n    public getCanonicalAlias(): string | null {\n        const canonicalAlias = this.currentState.getStateEvents(EventType.RoomCanonicalAlias, \"\");\n        if (canonicalAlias) {\n            return canonicalAlias.getContent().alias || null;\n        }\n        return null;\n    }\n\n    /**\n     * Get this room's alternative aliases\n     * @return {array} The room's alternative aliases, or an empty array\n     */\n    public getAltAliases(): string[] {\n        const canonicalAlias = this.currentState.getStateEvents(EventType.RoomCanonicalAlias, \"\");\n        if (canonicalAlias) {\n            return canonicalAlias.getContent().alt_aliases || [];\n        }\n        return [];\n    }\n\n    /**\n     * Add events to a timeline\n     *\n     * <p>Will fire \"Room.timeline\" for each event added.\n     *\n     * @param {MatrixEvent[]} events A list of events to add.\n     *\n     * @param {boolean} toStartOfTimeline   True to add these events to the start\n     * (oldest) instead of the end (newest) of the timeline. If true, the oldest\n     * event will be the <b>last</b> element of 'events'.\n     *\n     * @param {module:models/event-timeline~EventTimeline} timeline   timeline to\n     *    add events to.\n     *\n     * @param {string=} paginationToken   token for the next batch of events\n     *\n     * @fires module:client~MatrixClient#event:\"Room.timeline\"\n     *\n     */\n    public addEventsToTimeline(\n        events: MatrixEvent[],\n        toStartOfTimeline: boolean,\n        timeline: EventTimeline,\n        paginationToken?: string,\n    ): void {\n        timeline.getTimelineSet().addEventsToTimeline(events, toStartOfTimeline, timeline, paginationToken);\n    }\n\n    /**\n     * @experimental\n     */\n    public getThread(eventId: string): Thread {\n        return this.getThreads().find(thread => {\n            return thread.id === eventId;\n        });\n    }\n\n    /**\n     * @experimental\n     */\n    public getThreads(): Thread[] {\n        return Array.from(this.threads.values());\n    }\n\n    /**\n     * Get a member from the current room state.\n     * @param {string} userId The user ID of the member.\n     * @return {RoomMember} The member or <code>null</code>.\n     */\n    public getMember(userId: string): RoomMember | null {\n        return this.currentState.getMember(userId);\n    }\n\n    /**\n     * Get all currently loaded members from the current\n     * room state.\n     * @returns {RoomMember[]} Room members\n     */\n    public getMembers(): RoomMember[] {\n        return this.currentState.getMembers();\n    }\n\n    /**\n     * Get a list of members whose membership state is \"join\".\n     * @return {RoomMember[]} A list of currently joined members.\n     */\n    public getJoinedMembers(): RoomMember[] {\n        return this.getMembersWithMembership(\"join\");\n    }\n\n    /**\n     * Returns the number of joined members in this room\n     * This method caches the result.\n     * This is a wrapper around the method of the same name in roomState, returning\n     * its result for the room's current state.\n     * @return {number} The number of members in this room whose membership is 'join'\n     */\n    public getJoinedMemberCount(): number {\n        return this.currentState.getJoinedMemberCount();\n    }\n\n    /**\n     * Returns the number of invited members in this room\n     * @return {number} The number of members in this room whose membership is 'invite'\n     */\n    public getInvitedMemberCount(): number {\n        return this.currentState.getInvitedMemberCount();\n    }\n\n    /**\n     * Returns the number of invited + joined members in this room\n     * @return {number} The number of members in this room whose membership is 'invite' or 'join'\n     */\n    public getInvitedAndJoinedMemberCount(): number {\n        return this.getInvitedMemberCount() + this.getJoinedMemberCount();\n    }\n\n    /**\n     * Get a list of members with given membership state.\n     * @param {string} membership The membership state.\n     * @return {RoomMember[]} A list of members with the given membership state.\n     */\n    public getMembersWithMembership(membership: string): RoomMember[] {\n        return this.currentState.getMembers().filter(function(m) {\n            return m.membership === membership;\n        });\n    }\n\n    /**\n     * Get a list of members we should be encrypting for in this room\n     * @return {Promise<RoomMember[]>} A list of members who\n     * we should encrypt messages for in this room.\n     */\n    public async getEncryptionTargetMembers(): Promise<RoomMember[]> {\n        await this.loadMembersIfNeeded();\n        let members = this.getMembersWithMembership(\"join\");\n        if (this.shouldEncryptForInvitedMembers()) {\n            members = members.concat(this.getMembersWithMembership(\"invite\"));\n        }\n        return members;\n    }\n\n    /**\n     * Determine whether we should encrypt messages for invited users in this room\n     * @return {boolean} if we should encrypt messages for invited users\n     */\n    public shouldEncryptForInvitedMembers(): boolean {\n        const ev = this.currentState.getStateEvents(EventType.RoomHistoryVisibility, \"\");\n        return ev?.getContent()?.history_visibility !== \"joined\";\n    }\n\n    /**\n     * Get the default room name (i.e. what a given user would see if the\n     * room had no m.room.name)\n     * @param {string} userId The userId from whose perspective we want\n     * to calculate the default name\n     * @return {string} The default room name\n     */\n    public getDefaultRoomName(userId: string): string {\n        return this.calculateRoomName(userId, true);\n    }\n\n    /**\n     * Check if the given user_id has the given membership state.\n     * @param {string} userId The user ID to check.\n     * @param {string} membership The membership e.g. <code>'join'</code>\n     * @return {boolean} True if this user_id has the given membership state.\n     */\n    public hasMembershipState(userId: string, membership: string): boolean {\n        const member = this.getMember(userId);\n        if (!member) {\n            return false;\n        }\n        return member.membership === membership;\n    }\n\n    /**\n     * Add a timelineSet for this room with the given filter\n     * @param {Filter} filter The filter to be applied to this timelineSet\n     * @param {Object=} opts Configuration options\n     * @param {*} opts.storageToken Optional.\n     * @return {EventTimelineSet} The timelineSet\n     */\n    public getOrCreateFilteredTimelineSet(\n        filter: Filter,\n        {\n            prepopulateTimeline = true,\n            useSyncEvents = true,\n            pendingEvents = true,\n        }: ICreateFilterOpts = {},\n    ): EventTimelineSet {\n        if (this.filteredTimelineSets[filter.filterId]) {\n            return this.filteredTimelineSets[filter.filterId];\n        }\n        const opts = Object.assign({ filter, pendingEvents }, this.opts);\n        const timelineSet = new EventTimelineSet(this, opts);\n        this.reEmitter.reEmit(timelineSet, [\n            RoomEvent.Timeline,\n            RoomEvent.TimelineReset,\n        ]);\n        if (useSyncEvents) {\n            this.filteredTimelineSets[filter.filterId] = timelineSet;\n            this.timelineSets.push(timelineSet);\n        }\n\n        const unfilteredLiveTimeline = this.getLiveTimeline();\n        // Not all filter are possible to replicate client-side only\n        // When that's the case we do not want to prepopulate from the live timeline\n        // as we would get incorrect results compared to what the server would send back\n        if (prepopulateTimeline) {\n            // populate up the new timelineSet with filtered events from our live\n            // unfiltered timeline.\n            //\n            // XXX: This is risky as our timeline\n            // may have grown huge and so take a long time to filter.\n            // see https://github.com/vector-im/vector-web/issues/2109\n\n            unfilteredLiveTimeline.getEvents().forEach(function(event) {\n                timelineSet.addLiveEvent(event);\n            });\n\n            // find the earliest unfiltered timeline\n            let timeline = unfilteredLiveTimeline;\n            while (timeline.getNeighbouringTimeline(EventTimeline.BACKWARDS)) {\n                timeline = timeline.getNeighbouringTimeline(EventTimeline.BACKWARDS);\n            }\n\n            timelineSet.getLiveTimeline().setPaginationToken(\n                timeline.getPaginationToken(EventTimeline.BACKWARDS),\n                EventTimeline.BACKWARDS,\n            );\n        } else if (useSyncEvents) {\n            const livePaginationToken = unfilteredLiveTimeline.getPaginationToken(Direction.Forward);\n            timelineSet\n                .getLiveTimeline()\n                .setPaginationToken(livePaginationToken, Direction.Backward);\n        }\n\n        // alternatively, we could try to do something like this to try and re-paginate\n        // in the filtered events from nothing, but Mark says it's an abuse of the API\n        // to do so:\n        //\n        // timelineSet.resetLiveTimeline(\n        //      unfilteredLiveTimeline.getPaginationToken(EventTimeline.FORWARDS)\n        // );\n\n        return timelineSet;\n    }\n\n    private async getThreadListFilter(filterType = ThreadFilterType.All): Promise<Filter> {\n        const myUserId = this.client.getUserId();\n        const filter = new Filter(myUserId);\n\n        const definition: IFilterDefinition = {\n            \"room\": {\n                \"timeline\": {\n                    [FILTER_RELATED_BY_REL_TYPES.name]: [THREAD_RELATION_TYPE.name],\n                },\n            },\n        };\n\n        if (filterType === ThreadFilterType.My) {\n            definition.room.timeline[FILTER_RELATED_BY_SENDERS.name] = [myUserId];\n        }\n\n        filter.setDefinition(definition);\n        const filterId = await this.client.getOrCreateFilter(\n            `THREAD_PANEL_${this.roomId}_${filterType}`,\n            filter,\n        );\n\n        filter.filterId = filterId;\n\n        return filter;\n    }\n\n    private async createThreadTimelineSet(filterType?: ThreadFilterType): Promise<EventTimelineSet> {\n        let timelineSet: EventTimelineSet;\n        if (Thread.hasServerSideSupport) {\n            const filter = await this.getThreadListFilter(filterType);\n\n            timelineSet = this.getOrCreateFilteredTimelineSet(\n                filter,\n                {\n                    prepopulateTimeline: false,\n                    useSyncEvents: false,\n                    pendingEvents: false,\n                },\n            );\n        } else {\n            timelineSet = new EventTimelineSet(this, {\n                pendingEvents: false,\n            });\n\n            Array.from(this.threads)\n                .forEach(([, thread]) => {\n                    if (thread.length === 0) return;\n                    const currentUserParticipated = thread.events.some(event => {\n                        return event.getSender() === this.client.getUserId();\n                    });\n                    if (filterType !== ThreadFilterType.My || currentUserParticipated) {\n                        timelineSet.getLiveTimeline().addEvent(thread.rootEvent, false);\n                    }\n                });\n        }\n\n        return timelineSet;\n    }\n\n    public threadsReady = false;\n\n    public async fetchRoomThreads(): Promise<void> {\n        if (this.threadsReady || !this.client.supportsExperimentalThreads()) {\n            return;\n        }\n\n        const allThreadsFilter = await this.getThreadListFilter();\n\n        const { chunk: events } = await this.client.createMessagesRequest(\n            this.roomId,\n            \"\",\n            Number.MAX_SAFE_INTEGER,\n            Direction.Backward,\n            allThreadsFilter,\n        );\n\n        if (!events.length) return;\n\n        // Sorted by last_reply origin_server_ts\n        const threadRoots = events\n            .map(this.client.getEventMapper())\n            .sort((eventA, eventB) => {\n                /**\n                 * `origin_server_ts` in a decentralised world is far from ideal\n                 * but for lack of any better, we will have to use this\n                 * Long term the sorting should be handled by homeservers and this\n                 * is only meant as a short term patch\n                 */\n                const threadAMetadata = eventA\n                    .getServerAggregatedRelation<IThreadBundledRelationship>(RelationType.Thread);\n                const threadBMetadata = eventB\n                    .getServerAggregatedRelation<IThreadBundledRelationship>(RelationType.Thread);\n                return threadAMetadata.latest_event.origin_server_ts - threadBMetadata.latest_event.origin_server_ts;\n            });\n\n        let latestMyThreadsRootEvent: MatrixEvent;\n        const roomState = this.getLiveTimeline().getState(EventTimeline.FORWARDS);\n        for (const rootEvent of threadRoots) {\n            this.threadsTimelineSets[0].addLiveEvent(\n                rootEvent,\n                DuplicateStrategy.Ignore,\n                false,\n                roomState,\n            );\n\n            const threadRelationship = rootEvent\n                .getServerAggregatedRelation<IThreadBundledRelationship>(RelationType.Thread);\n            if (threadRelationship.current_user_participated) {\n                this.threadsTimelineSets[1].addLiveEvent(\n                    rootEvent,\n                    DuplicateStrategy.Ignore,\n                    false,\n                    roomState,\n                );\n                latestMyThreadsRootEvent = rootEvent;\n            }\n\n            if (!this.getThread(rootEvent.getId())) {\n                this.createThread(rootEvent, [], true);\n            }\n        }\n\n        this.client.decryptEventIfNeeded(threadRoots[threadRoots.length -1]);\n        if (latestMyThreadsRootEvent) {\n            this.client.decryptEventIfNeeded(latestMyThreadsRootEvent);\n        }\n\n        this.threadsReady = true;\n\n        this.on(ThreadEvent.NewReply, this.onThreadNewReply);\n    }\n\n    private onThreadNewReply(thread: Thread): void {\n        for (const timelineSet of this.threadsTimelineSets) {\n            timelineSet.removeEvent(thread.id);\n            timelineSet.addLiveEvent(thread.rootEvent);\n        }\n    }\n\n    /**\n     * Forget the timelineSet for this room with the given filter\n     *\n     * @param {Filter} filter the filter whose timelineSet is to be forgotten\n     */\n    public removeFilteredTimelineSet(filter: Filter): void {\n        const timelineSet = this.filteredTimelineSets[filter.filterId];\n        delete this.filteredTimelineSets[filter.filterId];\n        const i = this.timelineSets.indexOf(timelineSet);\n        if (i > -1) {\n            this.timelineSets.splice(i, 1);\n        }\n    }\n\n    public eventShouldLiveIn(event: MatrixEvent, events?: MatrixEvent[], roots?: Set<string>): {\n        shouldLiveInRoom: boolean;\n        shouldLiveInThread: boolean;\n        threadId?: string;\n    } {\n        if (!this.client.supportsExperimentalThreads()) {\n            return {\n                shouldLiveInRoom: true,\n                shouldLiveInThread: false,\n            };\n        }\n\n        // A thread root is always shown in both timelines\n        if (event.isThreadRoot || roots?.has(event.getId())) {\n            return {\n                shouldLiveInRoom: true,\n                shouldLiveInThread: true,\n                threadId: event.getId(),\n            };\n        }\n\n        // A thread relation is always only shown in a thread\n        if (event.isThreadRelation) {\n            return {\n                shouldLiveInRoom: false,\n                shouldLiveInThread: true,\n                threadId: event.threadRootId,\n            };\n        }\n\n        const parentEventId = event.getAssociatedId();\n        const parentEvent = this.findEventById(parentEventId) ?? events?.find(e => e.getId() === parentEventId);\n\n        // Treat relations and redactions as extensions of their parents so evaluate parentEvent instead\n        if (parentEvent && (event.isRelation() || event.isRedaction())) {\n            return this.eventShouldLiveIn(parentEvent, events, roots);\n        }\n\n        // Edge case where we know the event is a relation but don't have the parentEvent\n        if (roots?.has(event.relationEventId)) {\n            return {\n                shouldLiveInRoom: true,\n                shouldLiveInThread: true,\n                threadId: event.relationEventId,\n            };\n        }\n\n        // A reply directly to a thread response is shown as part of the thread only, this is to provide a better\n        // experience when communicating with users using clients without full threads support\n        if (parentEvent?.isThreadRelation) {\n            return {\n                shouldLiveInRoom: false,\n                shouldLiveInThread: true,\n                threadId: parentEvent.threadRootId,\n            };\n        }\n\n        // We've exhausted all scenarios, can safely assume that this event should live in the room timeline only\n        return {\n            shouldLiveInRoom: true,\n            shouldLiveInThread: false,\n        };\n    }\n\n    public findThreadForEvent(event?: MatrixEvent): Thread | null {\n        if (!event) return null;\n\n        const { threadId } = this.eventShouldLiveIn(event);\n        return threadId ? this.getThread(threadId) : null;\n    }\n\n    public async createThreadFetchRoot(\n        threadId: string,\n        events?: MatrixEvent[],\n        toStartOfTimeline?: boolean,\n    ): Promise<Thread | null> {\n        let thread = this.getThread(threadId);\n\n        if (!thread) {\n            const deferred = defer<Thread | null>();\n            this.threadPromises.set(threadId, deferred.promise);\n\n            let rootEvent = this.findEventById(threadId);\n            // If the rootEvent does not exist in the local stores, then fetch it from the server.\n            try {\n                const eventData = await this.client.fetchRoomEvent(this.roomId, threadId);\n                const mapper = this.client.getEventMapper();\n                rootEvent = mapper(eventData); // will merge with existing event object if such is known\n            } catch (e) {\n                logger.error(\"Failed to fetch thread root to construct thread with\", e);\n            } finally {\n                this.threadPromises.delete(threadId);\n                // The root event might be not be visible to the person requesting it.\n                // If it wasn't fetched successfully the thread will work in \"limited\" mode and won't\n                // benefit from all the APIs a homeserver can provide to enhance the thread experience\n                thread = this.createThread(rootEvent, events, toStartOfTimeline);\n                if (thread) {\n                    rootEvent?.setThread(thread);\n                }\n                deferred.resolve(thread);\n            }\n        }\n\n        return thread;\n    }\n\n    private async addThreadedEvents(events: MatrixEvent[], threadId: string, toStartOfTimeline = false): Promise<void> {\n        let thread = this.getThread(threadId);\n        if (this.threadPromises.has(threadId)) {\n            thread = await this.threadPromises.get(threadId);\n        }\n\n        events = events.filter(e => e.getId() !== threadId); // filter out any root events\n\n        if (thread) {\n            for (const event of events) {\n                await thread.addEvent(event, toStartOfTimeline);\n            }\n        } else {\n            thread = await this.createThreadFetchRoot(threadId, events, toStartOfTimeline);\n        }\n\n        if (thread) {\n            this.emit(ThreadEvent.Update, thread);\n        }\n    }\n\n    /**\n     * Adds events to a thread's timeline. Will fire \"Thread.update\"\n     * @experimental\n     */\n    public async processThreadedEvents(events: MatrixEvent[], toStartOfTimeline: boolean): Promise<unknown> {\n        events.forEach(this.applyRedaction);\n\n        const eventsByThread: { [threadId: string]: MatrixEvent[] } = {};\n        for (const event of events) {\n            const { threadId } = this.eventShouldLiveIn(event);\n            if (!eventsByThread[threadId]) {\n                eventsByThread[threadId] = [];\n            }\n            eventsByThread[threadId].push(event);\n        }\n\n        return Promise.all(Object.entries(eventsByThread).map(([threadId, events]) => (\n            this.addThreadedEvents(events, threadId, toStartOfTimeline)\n        )));\n    }\n\n    public createThread(\n        rootEvent: MatrixEvent | undefined,\n        events: MatrixEvent[] = [],\n        toStartOfTimeline: boolean,\n    ): Thread | undefined {\n        if (rootEvent) {\n            const tl = this.getTimelineForEvent(rootEvent.getId());\n            const relatedEvents = tl?.getTimelineSet().getAllRelationsEventForEvent(rootEvent.getId());\n            if (relatedEvents) {\n                events = events.concat(relatedEvents);\n            }\n        }\n\n        const thread = new Thread(rootEvent, {\n            initialEvents: events,\n            room: this,\n            client: this.client,\n        });\n        // If we managed to create a thread and figure out its `id` then we can use it\n        if (thread.id) {\n            this.threads.set(thread.id, thread);\n            this.reEmitter.reEmit(thread, [\n                ThreadEvent.Update,\n                ThreadEvent.NewReply,\n                RoomEvent.Timeline,\n                RoomEvent.TimelineReset,\n            ]);\n\n            if (!this.lastThread || this.lastThread.rootEvent?.localTimestamp < rootEvent?.localTimestamp) {\n                this.lastThread = thread;\n            }\n\n            this.emit(ThreadEvent.New, thread, toStartOfTimeline);\n\n            if (this.threadsReady) {\n                this.threadsTimelineSets.forEach(timelineSet => {\n                    if (thread.rootEvent) {\n                        if (Thread.hasServerSideSupport) {\n                            timelineSet.addLiveEvent(thread.rootEvent);\n                        } else {\n                            timelineSet.addEventToTimeline(\n                                thread.rootEvent,\n                                timelineSet.getLiveTimeline(),\n                                toStartOfTimeline,\n                            );\n                        }\n                    }\n                });\n            }\n\n            return thread;\n        }\n    }\n\n    private applyRedaction = (event: MatrixEvent): void => {\n        if (event.isRedaction()) {\n            const redactId = event.event.redacts;\n\n            // if we know about this event, redact its contents now.\n            const redactedEvent = this.findEventById(redactId);\n            if (redactedEvent) {\n                redactedEvent.makeRedacted(event);\n\n                // If this is in the current state, replace it with the redacted version\n                if (redactedEvent.isState()) {\n                    const currentStateEvent = this.currentState.getStateEvents(\n                        redactedEvent.getType(),\n                        redactedEvent.getStateKey(),\n                    );\n                    if (currentStateEvent.getId() === redactedEvent.getId()) {\n                        this.currentState.setStateEvents([redactedEvent]);\n                    }\n                }\n\n                this.emit(RoomEvent.Redaction, event, this);\n\n                // TODO: we stash user displaynames (among other things) in\n                // RoomMember objects which are then attached to other events\n                // (in the sender and target fields). We should get those\n                // RoomMember objects to update themselves when the events that\n                // they are based on are changed.\n\n                // Remove any visibility change on this event.\n                this.visibilityEvents.delete(redactId);\n\n                // If this event is a visibility change event, remove it from the\n                // list of visibility changes and update any event affected by it.\n                if (redactedEvent.isVisibilityEvent()) {\n                    this.redactVisibilityChangeEvent(event);\n                }\n            }\n\n            // FIXME: apply redactions to notification list\n\n            // NB: We continue to add the redaction event to the timeline so\n            // clients can say \"so and so redacted an event\" if they wish to. Also\n            // this may be needed to trigger an update.\n        }\n    };\n\n    private processLiveEvent(event: MatrixEvent): void {\n        this.applyRedaction(event);\n\n        // Implement MSC3531: hiding messages.\n        if (event.isVisibilityEvent()) {\n            // This event changes the visibility of another event, record\n            // the visibility change, inform clients if necessary.\n            this.applyNewVisibilityEvent(event);\n        }\n        // If any pending visibility change is waiting for this (older) event,\n        this.applyPendingVisibilityEvents(event);\n\n        if (event.getUnsigned().transaction_id) {\n            const existingEvent = this.txnToEvent[event.getUnsigned().transaction_id];\n            if (existingEvent) {\n                // remote echo of an event we sent earlier\n                this.handleRemoteEcho(event, existingEvent);\n            }\n        }\n    }\n\n    /**\n     * Add an event to the end of this room's live timelines. Will fire\n     * \"Room.timeline\".\n     *\n     * @param {MatrixEvent} event Event to be added\n     * @param {string?} duplicateStrategy 'ignore' or 'replace'\n     * @param {boolean} fromCache whether the sync response came from cache\n     * @fires module:client~MatrixClient#event:\"Room.timeline\"\n     * @private\n     */\n    private addLiveEvent(event: MatrixEvent, duplicateStrategy: DuplicateStrategy, fromCache = false): void {\n        // add to our timeline sets\n        for (let i = 0; i < this.timelineSets.length; i++) {\n            this.timelineSets[i].addLiveEvent(event, duplicateStrategy, fromCache);\n        }\n\n        // synthesize and inject implicit read receipts\n        // Done after adding the event because otherwise the app would get a read receipt\n        // pointing to an event that wasn't yet in the timeline\n        // Don't synthesize RR for m.room.redaction as this causes the RR to go missing.\n        if (event.sender && event.getType() !== EventType.RoomRedaction) {\n            this.addReceipt(synthesizeReceipt(\n                event.sender.userId, event, \"m.read\",\n            ), true);\n\n            // Any live events from a user could be taken as implicit\n            // presence information: evidence that they are currently active.\n            // ...except in a world where we use 'user.currentlyActive' to reduce\n            // presence spam, this isn't very useful - we'll get a transition when\n            // they are no longer currently active anyway. So don't bother to\n            // reset the lastActiveAgo and lastPresenceTs from the RoomState's user.\n        }\n    }\n\n    /**\n     * Add a pending outgoing event to this room.\n     *\n     * <p>The event is added to either the pendingEventList, or the live timeline,\n     * depending on the setting of opts.pendingEventOrdering.\n     *\n     * <p>This is an internal method, intended for use by MatrixClient.\n     *\n     * @param {module:models/event.MatrixEvent} event The event to add.\n     *\n     * @param {string} txnId Transaction id for this outgoing event\n     *\n     * @fires module:client~MatrixClient#event:\"Room.localEchoUpdated\"\n     *\n     * @throws if the event doesn't have status SENDING, or we aren't given a\n     * unique transaction id.\n     */\n    public addPendingEvent(event: MatrixEvent, txnId: string): void {\n        if (event.status !== EventStatus.SENDING && event.status !== EventStatus.NOT_SENT) {\n            throw new Error(\"addPendingEvent called on an event with status \" +\n                event.status);\n        }\n\n        if (this.txnToEvent[txnId]) {\n            throw new Error(\"addPendingEvent called on an event with known txnId \" +\n                txnId);\n        }\n\n        // call setEventMetadata to set up event.sender etc\n        // as event is shared over all timelineSets, we set up its metadata based\n        // on the unfiltered timelineSet.\n        EventTimeline.setEventMetadata(event, this.getLiveTimeline().getState(EventTimeline.FORWARDS), false);\n\n        this.txnToEvent[txnId] = event;\n        if (this.opts.pendingEventOrdering === PendingEventOrdering.Detached) {\n            if (this.pendingEventList.some((e) => e.status === EventStatus.NOT_SENT)) {\n                logger.warn(\"Setting event as NOT_SENT due to messages in the same state\");\n                event.setStatus(EventStatus.NOT_SENT);\n            }\n            this.pendingEventList.push(event);\n            this.savePendingEvents();\n            if (event.isRelation()) {\n                // For pending events, add them to the relations collection immediately.\n                // (The alternate case below already covers this as part of adding to\n                // the timeline set.)\n                this.aggregateNonLiveRelation(event);\n            }\n\n            if (event.isRedaction()) {\n                const redactId = event.event.redacts;\n                let redactedEvent = this.pendingEventList?.find(e => e.getId() === redactId);\n                if (!redactedEvent) {\n                    redactedEvent = this.findEventById(redactId);\n                }\n                if (redactedEvent) {\n                    redactedEvent.markLocallyRedacted(event);\n                    this.emit(RoomEvent.Redaction, event, this);\n                }\n            }\n        } else {\n            for (let i = 0; i < this.timelineSets.length; i++) {\n                const timelineSet = this.timelineSets[i];\n                if (timelineSet.getFilter()) {\n                    if (timelineSet.getFilter().filterRoomTimeline([event]).length) {\n                        timelineSet.addEventToTimeline(event,\n                            timelineSet.getLiveTimeline(), false);\n                    }\n                } else {\n                    timelineSet.addEventToTimeline(event,\n                        timelineSet.getLiveTimeline(), false);\n                }\n            }\n        }\n\n        this.emit(RoomEvent.LocalEchoUpdated, event, this, null, null);\n    }\n\n    /**\n     * Persists all pending events to local storage\n     *\n     * If the current room is encrypted only encrypted events will be persisted\n     * all messages that are not yet encrypted will be discarded\n     *\n     * This is because the flow of EVENT_STATUS transition is\n     * queued => sending => encrypting => sending => sent\n     *\n     * Steps 3 and 4 are skipped for unencrypted room.\n     * It is better to discard an unencrypted message rather than persisting\n     * it locally for everyone to read\n     */\n    private savePendingEvents(): void {\n        if (this.pendingEventList) {\n            const pendingEvents = this.pendingEventList.map(event => {\n                return {\n                    ...event.event,\n                    txn_id: event.getTxnId(),\n                };\n            }).filter(event => {\n                // Filter out the unencrypted messages if the room is encrypted\n                const isEventEncrypted = event.type === EventType.RoomMessageEncrypted;\n                const isRoomEncrypted = this.client.isRoomEncrypted(this.roomId);\n                return isEventEncrypted || !isRoomEncrypted;\n            });\n\n            const { store } = this.client.sessionStore;\n            if (this.pendingEventList.length > 0) {\n                store.setItem(\n                    pendingEventsKey(this.roomId),\n                    JSON.stringify(pendingEvents),\n                );\n            } else {\n                store.removeItem(pendingEventsKey(this.roomId));\n            }\n        }\n    }\n\n    /**\n     * Used to aggregate the local echo for a relation, and also\n     * for re-applying a relation after it's redaction has been cancelled,\n     * as the local echo for the redaction of the relation would have\n     * un-aggregated the relation. Note that this is different from regular messages,\n     * which are just kept detached for their local echo.\n     *\n     * Also note that live events are aggregated in the live EventTimelineSet.\n     * @param {module:models/event.MatrixEvent} event the relation event that needs to be aggregated.\n     */\n    private aggregateNonLiveRelation(event: MatrixEvent): void {\n        const { shouldLiveInRoom, threadId } = this.eventShouldLiveIn(event);\n        const thread = this.getThread(threadId);\n        thread?.timelineSet.aggregateRelations(event);\n\n        if (shouldLiveInRoom) {\n            // TODO: We should consider whether this means it would be a better\n            // design to lift the relations handling up to the room instead.\n            for (let i = 0; i < this.timelineSets.length; i++) {\n                const timelineSet = this.timelineSets[i];\n                if (timelineSet.getFilter()) {\n                    if (timelineSet.getFilter().filterRoomTimeline([event]).length) {\n                        timelineSet.aggregateRelations(event);\n                    }\n                } else {\n                    timelineSet.aggregateRelations(event);\n                }\n            }\n        }\n    }\n\n    public getEventForTxnId(txnId: string): MatrixEvent {\n        return this.txnToEvent[txnId];\n    }\n\n    /**\n     * Deal with the echo of a message we sent.\n     *\n     * <p>We move the event to the live timeline if it isn't there already, and\n     * update it.\n     *\n     * @param {module:models/event.MatrixEvent} remoteEvent   The event received from\n     *    /sync\n     * @param {module:models/event.MatrixEvent} localEvent    The local echo, which\n     *    should be either in the pendingEventList or the timeline.\n     *\n     * @fires module:client~MatrixClient#event:\"Room.localEchoUpdated\"\n     * @private\n     */\n    public handleRemoteEcho(remoteEvent: MatrixEvent, localEvent: MatrixEvent): void {\n        const oldEventId = localEvent.getId();\n        const newEventId = remoteEvent.getId();\n        const oldStatus = localEvent.status;\n\n        logger.debug(`Got remote echo for event ${oldEventId} -> ${newEventId} old status ${oldStatus}`);\n\n        // no longer pending\n        delete this.txnToEvent[remoteEvent.getUnsigned().transaction_id];\n\n        // if it's in the pending list, remove it\n        if (this.pendingEventList) {\n            this.removePendingEvent(oldEventId);\n        }\n\n        // replace the event source (this will preserve the plaintext payload if\n        // any, which is good, because we don't want to try decoding it again).\n        localEvent.handleRemoteEcho(remoteEvent.event);\n\n        const { shouldLiveInRoom, threadId } = this.eventShouldLiveIn(remoteEvent);\n        const thread = this.getThread(threadId);\n        thread?.timelineSet.handleRemoteEcho(localEvent, oldEventId, newEventId);\n\n        if (shouldLiveInRoom) {\n            for (let i = 0; i < this.timelineSets.length; i++) {\n                const timelineSet = this.timelineSets[i];\n\n                // if it's already in the timeline, update the timeline map. If it's not, add it.\n                timelineSet.handleRemoteEcho(localEvent, oldEventId, newEventId);\n            }\n        }\n\n        this.emit(RoomEvent.LocalEchoUpdated, localEvent, this, oldEventId, oldStatus);\n    }\n\n    /**\n     * Update the status / event id on a pending event, to reflect its transmission\n     * progress.\n     *\n     * <p>This is an internal method.\n     *\n     * @param {MatrixEvent} event      local echo event\n     * @param {EventStatus} newStatus  status to assign\n     * @param {string} newEventId      new event id to assign. Ignored unless\n     *    newStatus == EventStatus.SENT.\n     * @fires module:client~MatrixClient#event:\"Room.localEchoUpdated\"\n     */\n    public updatePendingEvent(event: MatrixEvent, newStatus: EventStatus, newEventId?: string): void {\n        logger.log(\n            `setting pendingEvent status to ${newStatus} in ${event.getRoomId()} ` +\n            `event ID ${event.getId()} -> ${newEventId}`,\n        );\n\n        // if the message was sent, we expect an event id\n        if (newStatus == EventStatus.SENT && !newEventId) {\n            throw new Error(\"updatePendingEvent called with status=SENT, \" +\n                \"but no new event id\");\n        }\n\n        // SENT races against /sync, so we have to special-case it.\n        if (newStatus == EventStatus.SENT) {\n            const timeline = this.getTimelineForEvent(newEventId);\n            if (timeline) {\n                // we've already received the event via the event stream.\n                // nothing more to do here.\n                return;\n            }\n        }\n\n        const oldStatus = event.status;\n        const oldEventId = event.getId();\n\n        if (!oldStatus) {\n            throw new Error(\"updatePendingEventStatus called on an event which is \" +\n                \"not a local echo.\");\n        }\n\n        const allowed = ALLOWED_TRANSITIONS[oldStatus];\n        if (!allowed || allowed.indexOf(newStatus) < 0) {\n            throw new Error(\"Invalid EventStatus transition \" + oldStatus + \"->\" +\n                newStatus);\n        }\n\n        event.setStatus(newStatus);\n\n        if (newStatus == EventStatus.SENT) {\n            // update the event id\n            event.replaceLocalEventId(newEventId);\n\n            const { shouldLiveInRoom, threadId } = this.eventShouldLiveIn(event);\n            const thread = this.getThread(threadId);\n            thread?.timelineSet.replaceEventId(oldEventId, newEventId);\n\n            if (shouldLiveInRoom) {\n                // if the event was already in the timeline (which will be the case if\n                // opts.pendingEventOrdering==chronological), we need to update the\n                // timeline map.\n                for (let i = 0; i < this.timelineSets.length; i++) {\n                    this.timelineSets[i].replaceEventId(oldEventId, newEventId);\n                }\n            }\n        } else if (newStatus == EventStatus.CANCELLED) {\n            // remove it from the pending event list, or the timeline.\n            if (this.pendingEventList) {\n                const removedEvent = this.getPendingEvent(oldEventId);\n                this.removePendingEvent(oldEventId);\n                if (removedEvent.isRedaction()) {\n                    this.revertRedactionLocalEcho(removedEvent);\n                }\n            }\n            this.removeEvent(oldEventId);\n        }\n        this.savePendingEvents();\n\n        this.emit(RoomEvent.LocalEchoUpdated, event, this, oldEventId, oldStatus);\n    }\n\n    private revertRedactionLocalEcho(redactionEvent: MatrixEvent): void {\n        const redactId = redactionEvent.event.redacts;\n        if (!redactId) {\n            return;\n        }\n        const redactedEvent = this.getUnfilteredTimelineSet()\n            .findEventById(redactId);\n        if (redactedEvent) {\n            redactedEvent.unmarkLocallyRedacted();\n            // re-render after undoing redaction\n            this.emit(RoomEvent.RedactionCancelled, redactionEvent, this);\n            // reapply relation now redaction failed\n            if (redactedEvent.isRelation()) {\n                this.aggregateNonLiveRelation(redactedEvent);\n            }\n        }\n    }\n\n    /**\n     * Add some events to this room. This can include state events, message\n     * events and typing notifications. These events are treated as \"live\" so\n     * they will go to the end of the timeline.\n     *\n     * @param {MatrixEvent[]} events A list of events to add.\n     *\n     * @param {string} duplicateStrategy Optional. Applies to events in the\n     * timeline only. If this is 'replace' then if a duplicate is encountered, the\n     * event passed to this function will replace the existing event in the\n     * timeline. If this is not specified, or is 'ignore', then the event passed to\n     * this function will be ignored entirely, preserving the existing event in the\n     * timeline. Events are identical based on their event ID <b>only</b>.\n     *\n     * @param {boolean} fromCache whether the sync response came from cache\n     * @throws If <code>duplicateStrategy</code> is not falsey, 'replace' or 'ignore'.\n     */\n    public addLiveEvents(events: MatrixEvent[], duplicateStrategy?: DuplicateStrategy, fromCache = false): void {\n        if (duplicateStrategy && [\"replace\", \"ignore\"].indexOf(duplicateStrategy) === -1) {\n            throw new Error(\"duplicateStrategy MUST be either 'replace' or 'ignore'\");\n        }\n\n        // sanity check that the live timeline is still live\n        for (let i = 0; i < this.timelineSets.length; i++) {\n            const liveTimeline = this.timelineSets[i].getLiveTimeline();\n            if (liveTimeline.getPaginationToken(EventTimeline.FORWARDS)) {\n                throw new Error(\n                    \"live timeline \" + i + \" is no longer live - it has a pagination token \" +\n                    \"(\" + liveTimeline.getPaginationToken(EventTimeline.FORWARDS) + \")\",\n                );\n            }\n            if (liveTimeline.getNeighbouringTimeline(EventTimeline.FORWARDS)) {\n                throw new Error(`live timeline ${i} is no longer live - it has a neighbouring timeline`);\n            }\n        }\n\n        const threadRoots = this.findThreadRoots(events);\n        const threadInfos = events.map(e => this.eventShouldLiveIn(e, events, threadRoots));\n        const eventsByThread: { [threadId: string]: MatrixEvent[] } = {};\n\n        for (let i = 0; i < events.length; i++) {\n            // TODO: We should have a filter to say \"only add state event types X Y Z to the timeline\".\n            this.processLiveEvent(events[i]);\n\n            const {\n                shouldLiveInRoom,\n                shouldLiveInThread,\n                threadId,\n            } = threadInfos[i];\n\n            if (shouldLiveInThread) {\n                if (!eventsByThread[threadId]) {\n                    eventsByThread[threadId] = [];\n                }\n                eventsByThread[threadId].push(events[i]);\n            }\n\n            if (shouldLiveInRoom) {\n                this.addLiveEvent(events[i], duplicateStrategy, fromCache);\n            }\n        }\n\n        Object.entries(eventsByThread).forEach(([threadId, threadEvents]) => {\n            this.addThreadedEvents(threadEvents, threadId, false);\n        });\n    }\n\n    public partitionThreadedEvents(events: MatrixEvent[]): [\n        timelineEvents: MatrixEvent[],\n        threadedEvents: MatrixEvent[],\n    ] {\n        // Indices to the events array, for readability\n        const ROOM = 0;\n        const THREAD = 1;\n        if (this.client.supportsExperimentalThreads()) {\n            const threadRoots = this.findThreadRoots(events);\n            return events.reduce((memo, event: MatrixEvent) => {\n                const {\n                    shouldLiveInRoom,\n                    shouldLiveInThread,\n                    threadId,\n                } = this.eventShouldLiveIn(event, events, threadRoots);\n\n                if (shouldLiveInRoom) {\n                    memo[ROOM].push(event);\n                }\n\n                if (shouldLiveInThread) {\n                    event.setThreadId(threadId);\n                    memo[THREAD].push(event);\n                }\n\n                return memo;\n            }, [[], []]);\n        } else {\n            // When `experimentalThreadSupport` is disabled treat all events as timelineEvents\n            return [\n                events,\n                [],\n            ];\n        }\n    }\n\n    /**\n     * Given some events, find the IDs of all the thread roots that are referred to by them.\n     */\n    private findThreadRoots(events: MatrixEvent[]): Set<string> {\n        const threadRoots = new Set<string>();\n        for (const event of events) {\n            if (event.isThreadRelation) {\n                threadRoots.add(event.relationEventId);\n            }\n        }\n        return threadRoots;\n    }\n\n    /**\n     * Adds/handles ephemeral events such as typing notifications and read receipts.\n     * @param {MatrixEvent[]} events A list of events to process\n     */\n    public addEphemeralEvents(events: MatrixEvent[]): void {\n        for (const event of events) {\n            if (event.getType() === 'm.typing') {\n                this.currentState.setTypingEvent(event);\n            } else if (event.getType() === 'm.receipt') {\n                this.addReceipt(event);\n            } // else ignore - life is too short for us to care about these events\n        }\n    }\n\n    /**\n     * Removes events from this room.\n     * @param {String[]} eventIds A list of eventIds to remove.\n     */\n    public removeEvents(eventIds: string[]): void {\n        for (let i = 0; i < eventIds.length; ++i) {\n            this.removeEvent(eventIds[i]);\n        }\n    }\n\n    /**\n     * Removes a single event from this room.\n     *\n     * @param {String} eventId  The id of the event to remove\n     *\n     * @return {boolean} true if the event was removed from any of the room's timeline sets\n     */\n    public removeEvent(eventId: string): boolean {\n        let removedAny = false;\n        for (let i = 0; i < this.timelineSets.length; i++) {\n            const removed = this.timelineSets[i].removeEvent(eventId);\n            if (removed) {\n                if (removed.isRedaction()) {\n                    this.revertRedactionLocalEcho(removed);\n                }\n                removedAny = true;\n            }\n        }\n        return removedAny;\n    }\n\n    /**\n     * Recalculate various aspects of the room, including the room name and\n     * room summary. Call this any time the room's current state is modified.\n     * May fire \"Room.name\" if the room name is updated.\n     * @fires module:client~MatrixClient#event:\"Room.name\"\n     */\n    public recalculate(): void {\n        // set fake stripped state events if this is an invite room so logic remains\n        // consistent elsewhere.\n        const membershipEvent = this.currentState.getStateEvents(EventType.RoomMember, this.myUserId);\n        if (membershipEvent) {\n            const membership = membershipEvent.getContent().membership;\n            this.updateMyMembership(membership);\n\n            if (membership === \"invite\") {\n                const strippedStateEvents = membershipEvent.getUnsigned().invite_room_state || [];\n                strippedStateEvents.forEach((strippedEvent) => {\n                    const existingEvent = this.currentState.getStateEvents(strippedEvent.type, strippedEvent.state_key);\n                    if (!existingEvent) {\n                        // set the fake stripped event instead\n                        this.currentState.setStateEvents([new MatrixEvent({\n                            type: strippedEvent.type,\n                            state_key: strippedEvent.state_key,\n                            content: strippedEvent.content,\n                            event_id: \"$fake\" + Date.now(),\n                            room_id: this.roomId,\n                            user_id: this.myUserId, // technically a lie\n                        })]);\n                    }\n                });\n            }\n        }\n\n        const oldName = this.name;\n        this.name = this.calculateRoomName(this.myUserId);\n        this.normalizedName = normalize(this.name);\n        this.summary = new RoomSummary(this.roomId, {\n            title: this.name,\n        });\n\n        if (oldName !== this.name) {\n            this.emit(RoomEvent.Name, this);\n        }\n    }\n\n    /**\n     * Get a list of user IDs who have <b>read up to</b> the given event.\n     * @param {MatrixEvent} event the event to get read receipts for.\n     * @return {String[]} A list of user IDs.\n     */\n    public getUsersReadUpTo(event: MatrixEvent): string[] {\n        return this.getReceiptsForEvent(event).filter(function(receipt) {\n            return receipt.type === \"m.read\";\n        }).map(function(receipt) {\n            return receipt.userId;\n        });\n    }\n\n    public getReadReceiptForUserId(userId: string, ignoreSynthesized = false): IWrappedReceipt | null {\n        const [realReceipt, syntheticReceipt] = this.receipts[\"m.read\"]?.[userId] ?? [];\n        if (ignoreSynthesized) {\n            return realReceipt;\n        }\n\n        return syntheticReceipt ?? realReceipt;\n    }\n\n    /**\n     * Get the ID of the event that a given user has read up to, or null if we\n     * have received no read receipts from them.\n     * @param {String} userId The user ID to get read receipt event ID for\n     * @param {Boolean} ignoreSynthesized If true, return only receipts that have been\n     *                                    sent by the server, not implicit ones generated\n     *                                    by the JS SDK.\n     * @return {String} ID of the latest event that the given user has read, or null.\n     */\n    public getEventReadUpTo(userId: string, ignoreSynthesized = false): string | null {\n        const readReceipt = this.getReadReceiptForUserId(userId, ignoreSynthesized);\n        return readReceipt?.eventId ?? null;\n    }\n\n    /**\n     * Determines if the given user has read a particular event ID with the known\n     * history of the room. This is not a definitive check as it relies only on\n     * what is available to the room at the time of execution.\n     * @param {String} userId The user ID to check the read state of.\n     * @param {String} eventId The event ID to check if the user read.\n     * @returns {Boolean} True if the user has read the event, false otherwise.\n     */\n    public hasUserReadEvent(userId: string, eventId: string): boolean {\n        const readUpToId = this.getEventReadUpTo(userId, false);\n        if (readUpToId === eventId) return true;\n\n        if (this.timeline.length\n            && this.timeline[this.timeline.length - 1].getSender()\n            && this.timeline[this.timeline.length - 1].getSender() === userId) {\n            // It doesn't matter where the event is in the timeline, the user has read\n            // it because they've sent the latest event.\n            return true;\n        }\n\n        for (let i = this.timeline.length - 1; i >= 0; --i) {\n            const ev = this.timeline[i];\n\n            // If we encounter the target event first, the user hasn't read it\n            // however if we encounter the readUpToId first then the user has read\n            // it. These rules apply because we're iterating bottom-up.\n            if (ev.getId() === eventId) return false;\n            if (ev.getId() === readUpToId) return true;\n        }\n\n        // We don't know if the user has read it, so assume not.\n        return false;\n    }\n\n    /**\n     * Get a list of receipts for the given event.\n     * @param {MatrixEvent} event the event to get receipts for\n     * @return {Object[]} A list of receipts with a userId, type and data keys or\n     * an empty list.\n     */\n    public getReceiptsForEvent(event: MatrixEvent): ICachedReceipt[] {\n        return this.receiptCacheByEventId[event.getId()] || [];\n    }\n\n    /**\n     * Add a receipt event to the room.\n     * @param {MatrixEvent} event The m.receipt event.\n     * @param {Boolean} synthetic True if this event is implicit.\n     */\n    public addReceipt(event: MatrixEvent, synthetic = false): void {\n        this.addReceiptsToStructure(event, synthetic);\n        // send events after we've regenerated the structure & cache, otherwise things that\n        // listened for the event would read stale data.\n        this.emit(RoomEvent.Receipt, event, this);\n    }\n\n    /**\n     * Add a receipt event to the room.\n     * @param {MatrixEvent} event The m.receipt event.\n     * @param {Boolean} synthetic True if this event is implicit.\n     */\n    private addReceiptsToStructure(event: MatrixEvent, synthetic: boolean): void {\n        const content = event.getContent<IReceiptContent>();\n        Object.keys(content).forEach((eventId) => {\n            Object.keys(content[eventId]).forEach((receiptType) => {\n                Object.keys(content[eventId][receiptType]).forEach((userId) => {\n                    const receipt = content[eventId][receiptType][userId];\n\n                    if (!this.receipts[receiptType]) {\n                        this.receipts[receiptType] = {};\n                    }\n                    if (!this.receipts[receiptType][userId]) {\n                        this.receipts[receiptType][userId] = [null, null];\n                    }\n\n                    const pair = this.receipts[receiptType][userId];\n\n                    let existingReceipt = pair[ReceiptPairRealIndex];\n                    if (synthetic) {\n                        existingReceipt = pair[ReceiptPairSyntheticIndex] ?? pair[ReceiptPairRealIndex];\n                    }\n\n                    if (existingReceipt) {\n                        // we only want to add this receipt if we think it is later than the one we already have.\n                        // This is managed server-side, but because we synthesize RRs locally we have to do it here too.\n                        const ordering = this.getUnfilteredTimelineSet().compareEventOrdering(\n                            existingReceipt.eventId,\n                            eventId,\n                        );\n                        if (ordering !== null && ordering >= 0) {\n                            return;\n                        }\n                    }\n\n                    const wrappedReceipt: IWrappedReceipt = {\n                        eventId,\n                        data: receipt,\n                    };\n\n                    const realReceipt = synthetic ? pair[ReceiptPairRealIndex] : wrappedReceipt;\n                    const syntheticReceipt = synthetic ? wrappedReceipt : pair[ReceiptPairSyntheticIndex];\n\n                    let ordering: number | null = null;\n                    if (realReceipt && syntheticReceipt) {\n                        ordering = this.getUnfilteredTimelineSet().compareEventOrdering(\n                            realReceipt.eventId,\n                            syntheticReceipt.eventId,\n                        );\n                    }\n\n                    const preferSynthetic = ordering === null || ordering < 0;\n\n                    // we don't bother caching just real receipts by event ID as there's nothing that would read it.\n                    // Take the current cached receipt before we overwrite the pair elements.\n                    const cachedReceipt = pair[ReceiptPairSyntheticIndex] ?? pair[ReceiptPairRealIndex];\n\n                    if (synthetic && preferSynthetic) {\n                        pair[ReceiptPairSyntheticIndex] = wrappedReceipt;\n                    } else if (!synthetic) {\n                        pair[ReceiptPairRealIndex] = wrappedReceipt;\n\n                        if (!preferSynthetic) {\n                            pair[ReceiptPairSyntheticIndex] = null;\n                        }\n                    }\n\n                    const newCachedReceipt = pair[ReceiptPairSyntheticIndex] ?? pair[ReceiptPairRealIndex];\n                    if (cachedReceipt === newCachedReceipt) return;\n\n                    // clean up any previous cache entry\n                    if (cachedReceipt && this.receiptCacheByEventId[cachedReceipt.eventId]) {\n                        const previousEventId = cachedReceipt.eventId;\n                        // Remove the receipt we're about to clobber out of existence from the cache\n                        this.receiptCacheByEventId[previousEventId] = (\n                            this.receiptCacheByEventId[previousEventId].filter(r => {\n                                return r.type !== receiptType || r.userId !== userId;\n                            })\n                        );\n\n                        if (this.receiptCacheByEventId[previousEventId].length < 1) {\n                            delete this.receiptCacheByEventId[previousEventId]; // clean up the cache keys\n                        }\n                    }\n\n                    // cache the new one\n                    if (!this.receiptCacheByEventId[eventId]) {\n                        this.receiptCacheByEventId[eventId] = [];\n                    }\n                    this.receiptCacheByEventId[eventId].push({\n                        userId: userId,\n                        type: receiptType,\n                        data: receipt,\n                    });\n                });\n            });\n        });\n    }\n\n    /**\n     * Add a temporary local-echo receipt to the room to reflect in the\n     * client the fact that we've sent one.\n     * @param {string} userId The user ID if the receipt sender\n     * @param {MatrixEvent} e The event that is to be acknowledged\n     * @param {string} receiptType The type of receipt\n     */\n    public addLocalEchoReceipt(userId: string, e: MatrixEvent, receiptType: string): void {\n        this.addReceipt(synthesizeReceipt(userId, e, receiptType), true);\n    }\n\n    /**\n     * Update the room-tag event for the room.  The previous one is overwritten.\n     * @param {MatrixEvent} event the m.tag event\n     */\n    public addTags(event: MatrixEvent): void {\n        // event content looks like:\n        // content: {\n        //    tags: {\n        //       $tagName: { $metadata: $value },\n        //       $tagName: { $metadata: $value },\n        //    }\n        // }\n\n        // XXX: do we need to deep copy here?\n        this.tags = event.getContent().tags || {};\n\n        // XXX: we could do a deep-comparison to see if the tags have really\n        // changed - but do we want to bother?\n        this.emit(RoomEvent.Tags, event, this);\n    }\n\n    /**\n     * Update the account_data events for this room, overwriting events of the same type.\n     * @param {Array<MatrixEvent>} events an array of account_data events to add\n     */\n    public addAccountData(events: MatrixEvent[]): void {\n        for (let i = 0; i < events.length; i++) {\n            const event = events[i];\n            if (event.getType() === \"m.tag\") {\n                this.addTags(event);\n            }\n            const lastEvent = this.accountData[event.getType()];\n            this.accountData[event.getType()] = event;\n            this.emit(RoomEvent.AccountData, event, this, lastEvent);\n        }\n    }\n\n    /**\n     * Access account_data event of given event type for this room\n     * @param {string} type the type of account_data event to be accessed\n     * @return {?MatrixEvent} the account_data event in question\n     */\n    public getAccountData(type: EventType | string): MatrixEvent | undefined {\n        return this.accountData[type];\n    }\n\n    /**\n     * Returns whether the syncing user has permission to send a message in the room\n     * @return {boolean} true if the user should be permitted to send\n     *                   message events into the room.\n     */\n    public maySendMessage(): boolean {\n        return this.getMyMembership() === 'join' && (this.client.isRoomEncrypted(this.roomId)\n            ? this.currentState.maySendEvent(EventType.RoomMessageEncrypted, this.myUserId)\n            : this.currentState.maySendEvent(EventType.RoomMessage, this.myUserId));\n    }\n\n    /**\n     * Returns whether the given user has permissions to issue an invite for this room.\n     * @param {string} userId the ID of the Matrix user to check permissions for\n     * @returns {boolean} true if the user should be permitted to issue invites for this room.\n     */\n    public canInvite(userId: string): boolean {\n        let canInvite = this.getMyMembership() === \"join\";\n        const powerLevelsEvent = this.currentState.getStateEvents(EventType.RoomPowerLevels, \"\");\n        const powerLevels = powerLevelsEvent && powerLevelsEvent.getContent();\n        const me = this.getMember(userId);\n        if (powerLevels && me && powerLevels.invite > me.powerLevel) {\n            canInvite = false;\n        }\n        return canInvite;\n    }\n\n    /**\n     * Returns the join rule based on the m.room.join_rule state event, defaulting to `invite`.\n     * @returns {string} the join_rule applied to this room\n     */\n    public getJoinRule(): JoinRule {\n        return this.currentState.getJoinRule();\n    }\n\n    /**\n     * Returns the history visibility based on the m.room.history_visibility state event, defaulting to `shared`.\n     * @returns {HistoryVisibility} the history_visibility applied to this room\n     */\n    public getHistoryVisibility(): HistoryVisibility {\n        return this.currentState.getHistoryVisibility();\n    }\n\n    /**\n     * Returns the history visibility based on the m.room.history_visibility state event, defaulting to `shared`.\n     * @returns {HistoryVisibility} the history_visibility applied to this room\n     */\n    public getGuestAccess(): GuestAccess {\n        return this.currentState.getGuestAccess();\n    }\n\n    /**\n     * Returns the type of the room from the `m.room.create` event content or undefined if none is set\n     * @returns {?string} the type of the room.\n     */\n    public getType(): RoomType | string | undefined {\n        const createEvent = this.currentState.getStateEvents(EventType.RoomCreate, \"\");\n        if (!createEvent) {\n            if (!this.getTypeWarning) {\n                logger.warn(\"[getType] Room \" + this.roomId + \" does not have an m.room.create event\");\n                this.getTypeWarning = true;\n            }\n            return undefined;\n        }\n        return createEvent.getContent()[RoomCreateTypeField];\n    }\n\n    /**\n     * Returns whether the room is a space-room as defined by MSC1772.\n     * @returns {boolean} true if the room's type is RoomType.Space\n     */\n    public isSpaceRoom(): boolean {\n        return this.getType() === RoomType.Space;\n    }\n\n    /**\n     * Returns whether the room is a call-room as defined by MSC3417.\n     * @returns {boolean} true if the room's type is RoomType.UnstableCall\n     */\n    public isCallRoom(): boolean {\n        return this.getType() === RoomType.UnstableCall;\n    }\n\n    /**\n     * Returns whether the room is a video room.\n     * @returns {boolean} true if the room's type is RoomType.ElementVideo\n     */\n    public isElementVideoRoom(): boolean {\n        return this.getType() === RoomType.ElementVideo;\n    }\n\n    /**\n     * This is an internal method. Calculates the name of the room from the current\n     * room state.\n     * @param {string} userId The client's user ID. Used to filter room members\n     * correctly.\n     * @param {boolean} ignoreRoomNameEvent Return the implicit room name that we'd see if there\n     * was no m.room.name event.\n     * @return {string} The calculated room name.\n     */\n    private calculateRoomName(userId: string, ignoreRoomNameEvent = false): string {\n        if (!ignoreRoomNameEvent) {\n            // check for an alias, if any. for now, assume first alias is the\n            // official one.\n            const mRoomName = this.currentState.getStateEvents(EventType.RoomName, \"\");\n            if (mRoomName && mRoomName.getContent() && mRoomName.getContent().name) {\n                return mRoomName.getContent().name;\n            }\n        }\n\n        const alias = this.getCanonicalAlias();\n        if (alias) {\n            return alias;\n        }\n\n        const joinedMemberCount = this.currentState.getJoinedMemberCount();\n        const invitedMemberCount = this.currentState.getInvitedMemberCount();\n        // -1 because these numbers include the syncing user\n        let inviteJoinCount = joinedMemberCount + invitedMemberCount - 1;\n\n        // get service members (e.g. helper bots) for exclusion\n        let excludedUserIds: string[] = [];\n        const mFunctionalMembers = this.currentState.getStateEvents(UNSTABLE_ELEMENT_FUNCTIONAL_USERS.name, \"\");\n        if (Array.isArray(mFunctionalMembers?.getContent().service_members)) {\n            excludedUserIds = mFunctionalMembers.getContent().service_members;\n        }\n\n        // get members that are NOT ourselves and are actually in the room.\n        let otherNames: string[] = null;\n        if (this.summaryHeroes) {\n            // if we have a summary, the member state events\n            // should be in the room state\n            otherNames = [];\n            this.summaryHeroes.forEach((userId) => {\n                // filter service members\n                if (excludedUserIds.includes(userId)) {\n                    inviteJoinCount--;\n                    return;\n                }\n                const member = this.getMember(userId);\n                otherNames.push(member ? member.name : userId);\n            });\n        } else {\n            let otherMembers = this.currentState.getMembers().filter((m) => {\n                return m.userId !== userId &&\n                    (m.membership === \"invite\" || m.membership === \"join\");\n            });\n            otherMembers = otherMembers.filter(({ userId }) => {\n                // filter service members\n                if (excludedUserIds.includes(userId)) {\n                    inviteJoinCount--;\n                    return false;\n                }\n                return true;\n            });\n            // make sure members have stable order\n            otherMembers.sort((a, b) => utils.compare(a.userId, b.userId));\n            // only 5 first members, immitate summaryHeroes\n            otherMembers = otherMembers.slice(0, 5);\n            otherNames = otherMembers.map((m) => m.name);\n        }\n\n        if (inviteJoinCount) {\n            return memberNamesToRoomName(otherNames, inviteJoinCount);\n        }\n\n        const myMembership = this.getMyMembership();\n        // if I have created a room and invited people through\n        // 3rd party invites\n        if (myMembership == 'join') {\n            const thirdPartyInvites =\n                this.currentState.getStateEvents(EventType.RoomThirdPartyInvite);\n\n            if (thirdPartyInvites && thirdPartyInvites.length) {\n                const thirdPartyNames = thirdPartyInvites.map((i) => {\n                    return i.getContent().display_name;\n                });\n\n                return `Inviting ${memberNamesToRoomName(thirdPartyNames)}`;\n            }\n        }\n        // let's try to figure out who was here before\n        let leftNames = otherNames;\n        // if we didn't have heroes, try finding them in the room state\n        if (!leftNames.length) {\n            leftNames = this.currentState.getMembers().filter((m) => {\n                return m.userId !== userId &&\n                    m.membership !== \"invite\" &&\n                    m.membership !== \"join\";\n            }).map((m) => m.name);\n        }\n        if (leftNames.length) {\n            return `Empty room (was ${memberNamesToRoomName(leftNames)})`;\n        } else {\n            return \"Empty room\";\n        }\n    }\n\n    /**\n     * When we receive a new visibility change event:\n     *\n     * - store this visibility change alongside the timeline, in case we\n     *   later need to apply it to an event that we haven't received yet;\n     * - if we have already received the event whose visibility has changed,\n     *   patch it to reflect the visibility change and inform listeners.\n     */\n    private applyNewVisibilityEvent(event: MatrixEvent): void {\n        const visibilityChange = event.asVisibilityChange();\n        if (!visibilityChange) {\n            // The event is ill-formed.\n            return;\n        }\n\n        // Ignore visibility change events that are not emitted by moderators.\n        const userId = event.getSender();\n        if (!userId) {\n            return;\n        }\n        const isPowerSufficient =\n            (\n                EVENT_VISIBILITY_CHANGE_TYPE.name\n                && this.currentState.maySendStateEvent(EVENT_VISIBILITY_CHANGE_TYPE.name, userId)\n            )\n            || (\n                EVENT_VISIBILITY_CHANGE_TYPE.altName\n                && this.currentState.maySendStateEvent(EVENT_VISIBILITY_CHANGE_TYPE.altName, userId)\n            );\n        if (!isPowerSufficient) {\n            // Powerlevel is insufficient.\n            return;\n        }\n\n        // Record this change in visibility.\n        // If the event is not in our timeline and we only receive it later,\n        // we may need to apply the visibility change at a later date.\n\n        const visibilityEventsOnOriginalEvent = this.visibilityEvents.get(visibilityChange.eventId);\n        if (visibilityEventsOnOriginalEvent) {\n            // It would be tempting to simply erase the latest visibility change\n            // but we need to record all of the changes in case the latest change\n            // is ever redacted.\n            //\n            // In practice, linear scans through `visibilityEvents` should be fast.\n            // However, to protect against a potential DoS attack, we limit the\n            // number of iterations in this loop.\n            let index = visibilityEventsOnOriginalEvent.length - 1;\n            const min = Math.max(0,\n                visibilityEventsOnOriginalEvent.length - MAX_NUMBER_OF_VISIBILITY_EVENTS_TO_SCAN_THROUGH);\n            for (; index >= min; --index) {\n                const target = visibilityEventsOnOriginalEvent[index];\n                if (target.getTs() < event.getTs()) {\n                    break;\n                }\n            }\n            if (index === -1) {\n                visibilityEventsOnOriginalEvent.unshift(event);\n            } else {\n                visibilityEventsOnOriginalEvent.splice(index + 1, 0, event);\n            }\n        } else {\n            this.visibilityEvents.set(visibilityChange.eventId, [event]);\n        }\n\n        // Finally, let's check if the event is already in our timeline.\n        // If so, we need to patch it and inform listeners.\n\n        const originalEvent = this.findEventById(visibilityChange.eventId);\n        if (!originalEvent) {\n            return;\n        }\n        originalEvent.applyVisibilityEvent(visibilityChange);\n    }\n\n    private redactVisibilityChangeEvent(event: MatrixEvent) {\n        // Sanity checks.\n        if (!event.isVisibilityEvent) {\n            throw new Error(\"expected a visibility change event\");\n        }\n        const relation = event.getRelation();\n        const originalEventId = relation.event_id;\n        const visibilityEventsOnOriginalEvent = this.visibilityEvents.get(originalEventId);\n        if (!visibilityEventsOnOriginalEvent) {\n            // No visibility changes on the original event.\n            // In particular, this change event was not recorded,\n            // most likely because it was ill-formed.\n            return;\n        }\n        const index = visibilityEventsOnOriginalEvent.findIndex(change => change.getId() === event.getId());\n        if (index === -1) {\n            // This change event was not recorded, most likely because\n            // it was ill-formed.\n            return;\n        }\n        // Remove visibility change.\n        visibilityEventsOnOriginalEvent.splice(index, 1);\n\n        // If we removed the latest visibility change event, propagate changes.\n        if (index === visibilityEventsOnOriginalEvent.length) {\n            const originalEvent = this.findEventById(originalEventId);\n            if (!originalEvent) {\n                return;\n            }\n            if (index === 0) {\n                // We have just removed the only visibility change event.\n                this.visibilityEvents.delete(originalEventId);\n                originalEvent.applyVisibilityEvent();\n            } else {\n                const newEvent = visibilityEventsOnOriginalEvent[visibilityEventsOnOriginalEvent.length - 1];\n                const newVisibility = newEvent.asVisibilityChange();\n                if (!newVisibility) {\n                    // Event is ill-formed.\n                    // This breaks our invariant.\n                    throw new Error(\"at this stage, visibility changes should be well-formed\");\n                }\n                originalEvent.applyVisibilityEvent(newVisibility);\n            }\n        }\n    }\n\n    /**\n     * When we receive an event whose visibility has been altered by\n     * a (more recent) visibility change event, patch the event in\n     * place so that clients now not to display it.\n     *\n     * @param event Any matrix event. If this event has at least one a\n     * pending visibility change event, apply the latest visibility\n     * change event.\n     */\n    private applyPendingVisibilityEvents(event: MatrixEvent): void {\n        const visibilityEvents = this.visibilityEvents.get(event.getId());\n        if (!visibilityEvents || visibilityEvents.length == 0) {\n            // No pending visibility change in store.\n            return;\n        }\n        const visibilityEvent = visibilityEvents[visibilityEvents.length - 1];\n        const visibilityChange = visibilityEvent.asVisibilityChange();\n        if (!visibilityChange) {\n            return;\n        }\n        if (visibilityChange.visible) {\n            // Events are visible by default, no need to apply a visibility change.\n            // Note that we need to keep the visibility changes in `visibilityEvents`,\n            // in case we later fetch an older visibility change event that is superseded\n            // by `visibilityChange`.\n        }\n        if (visibilityEvent.getTs() < event.getTs()) {\n            // Something is wrong, the visibility change cannot happen before the\n            // event. Presumably an ill-formed event.\n            return;\n        }\n        event.applyVisibilityEvent(visibilityChange);\n    }\n}\n\n/**\n * @param {string} roomId ID of the current room\n * @returns {string} Storage key to retrieve pending events\n */\nfunction pendingEventsKey(roomId: string): string {\n    return `mx_pending_events_${roomId}`;\n}\n\n// a map from current event status to a list of allowed next statuses\nconst ALLOWED_TRANSITIONS: Record<EventStatus, EventStatus[]> = {\n    [EventStatus.ENCRYPTING]: [\n        EventStatus.SENDING,\n        EventStatus.NOT_SENT,\n        EventStatus.CANCELLED,\n    ],\n    [EventStatus.SENDING]: [\n        EventStatus.ENCRYPTING,\n        EventStatus.QUEUED,\n        EventStatus.NOT_SENT,\n        EventStatus.SENT,\n    ],\n    [EventStatus.QUEUED]: [\n        EventStatus.SENDING,\n        EventStatus.CANCELLED,\n    ],\n    [EventStatus.SENT]: [],\n    [EventStatus.NOT_SENT]: [\n        EventStatus.SENDING,\n        EventStatus.QUEUED,\n        EventStatus.CANCELLED,\n    ],\n    [EventStatus.CANCELLED]: [],\n};\n\n// TODO i18n\nfunction memberNamesToRoomName(names: string[], count = (names.length + 1)) {\n    const countWithoutMe = count - 1;\n    if (!names.length) {\n        return \"Empty room\";\n    } else if (names.length === 1 && countWithoutMe <= 1) {\n        return names[0];\n    } else if (names.length === 2 && countWithoutMe <= 2) {\n        return `${names[0]} and ${names[1]}`;\n    } else {\n        const plural = countWithoutMe > 1;\n        if (plural) {\n            return `${names[0]} and ${countWithoutMe} others`;\n        } else {\n            return `${names[0]} and 1 other`;\n        }\n    }\n}\n\n/**\n * Fires when an event we had previously received is redacted.\n *\n * (Note this is *not* fired when the redaction happens before we receive the\n * event).\n *\n * @event module:client~MatrixClient#\"Room.redaction\"\n * @param {MatrixEvent} event The matrix redaction event\n * @param {Room} room The room containing the redacted event\n */\n\n/**\n * Fires when an event that was previously redacted isn't anymore.\n * This happens when the redaction couldn't be sent and\n * was subsequently cancelled by the user. Redactions have a local echo\n * which is undone in this scenario.\n *\n * @event module:client~MatrixClient#\"Room.redactionCancelled\"\n * @param {MatrixEvent} event The matrix redaction event that was cancelled.\n * @param {Room} room The room containing the unredacted event\n */\n\n/**\n * Fires whenever the name of a room is updated.\n * @event module:client~MatrixClient#\"Room.name\"\n * @param {Room} room The room whose Room.name was updated.\n * @example\n * matrixClient.on(\"Room.name\", function(room){\n *   var newName = room.name;\n * });\n */\n\n/**\n * Fires whenever a receipt is received for a room\n * @event module:client~MatrixClient#\"Room.receipt\"\n * @param {event} event The receipt event\n * @param {Room} room The room whose receipts was updated.\n * @example\n * matrixClient.on(\"Room.receipt\", function(event, room){\n *   var receiptContent = event.getContent();\n * });\n */\n\n/**\n * Fires whenever a room's tags are updated.\n * @event module:client~MatrixClient#\"Room.tags\"\n * @param {event} event The tags event\n * @param {Room} room The room whose Room.tags was updated.\n * @example\n * matrixClient.on(\"Room.tags\", function(event, room){\n *   var newTags = event.getContent().tags;\n *   if (newTags[\"favourite\"]) showStar(room);\n * });\n */\n\n/**\n * Fires whenever a room's account_data is updated.\n * @event module:client~MatrixClient#\"Room.accountData\"\n * @param {event} event The account_data event\n * @param {Room} room The room whose account_data was updated.\n * @param {MatrixEvent} prevEvent The event being replaced by\n * the new account data, if known.\n * @example\n * matrixClient.on(\"Room.accountData\", function(event, room, oldEvent){\n *   if (event.getType() === \"m.room.colorscheme\") {\n *       applyColorScheme(event.getContents());\n *   }\n * });\n */\n\n/**\n * Fires when the status of a transmitted event is updated.\n *\n * <p>When an event is first transmitted, a temporary copy of the event is\n * inserted into the timeline, with a temporary event id, and a status of\n * 'SENDING'.\n *\n * <p>Once the echo comes back from the server, the content of the event\n * (MatrixEvent.event) is replaced by the complete event from the homeserver,\n * thus updating its event id, as well as server-generated fields such as the\n * timestamp. Its status is set to null.\n *\n * <p>Once the /send request completes, if the remote echo has not already\n * arrived, the event is updated with a new event id and the status is set to\n * 'SENT'. The server-generated fields are of course not updated yet.\n *\n * <p>If the /send fails, In this case, the event's status is set to\n * 'NOT_SENT'. If it is later resent, the process starts again, setting the\n * status to 'SENDING'. Alternatively, the message may be cancelled, which\n * removes the event from the room, and sets the status to 'CANCELLED'.\n *\n * <p>This event is raised to reflect each of the transitions above.\n *\n * @event module:client~MatrixClient#\"Room.localEchoUpdated\"\n *\n * @param {MatrixEvent} event The matrix event which has been updated\n *\n * @param {Room} room The room containing the redacted event\n *\n * @param {string} oldEventId The previous event id (the temporary event id,\n *    except when updating a successfully-sent event when its echo arrives)\n *\n * @param {EventStatus} oldStatus The previous event status.\n */\n\n/**\n * Fires when the logged in user's membership in the room is updated.\n *\n * @event module:models/room~Room#\"Room.myMembership\"\n * @param {Room} room The room in which the membership has been updated\n * @param {string} membership The new membership value\n * @param {string} prevMembership The previous membership value\n */\n\n",
    "/*\nCopyright 2015 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * @module models/search-result\n */\n\nimport { EventContext } from \"./event-context\";\nimport { EventMapper } from \"../event-mapper\";\nimport { IResultContext, ISearchResult } from \"../@types/search\";\n\nexport class SearchResult {\n    /**\n     * Create a SearchResponse from the response to /search\n     * @static\n     * @param {Object} jsonObj\n     * @param {function} eventMapper\n     * @return {SearchResult}\n     */\n\n    public static fromJson(jsonObj: ISearchResult, eventMapper: EventMapper): SearchResult {\n        const jsonContext = jsonObj.context || {} as IResultContext;\n        let eventsBefore = (jsonContext.events_before || []).map(eventMapper);\n        let eventsAfter = (jsonContext.events_after || []).map(eventMapper);\n\n        const context = new EventContext(eventMapper(jsonObj.result));\n\n        // Filter out any contextual events which do not correspond to the same timeline (thread or room)\n        const threadRootId = context.ourEvent.threadRootId;\n        eventsBefore = eventsBefore.filter(e => e.threadRootId === threadRootId);\n        eventsAfter = eventsAfter.filter(e => e.threadRootId === threadRootId);\n\n        context.setPaginateToken(jsonContext.start, true);\n        context.addEvents(eventsBefore, true);\n        context.addEvents(eventsAfter, false);\n        context.setPaginateToken(jsonContext.end, false);\n\n        return new SearchResult(jsonObj.rank, context);\n    }\n\n    /**\n     * Construct a new SearchResult\n     *\n     * @param {number} rank   where this SearchResult ranks in the results\n     * @param {event-context.EventContext} context  the matching event and its\n     *    context\n     *\n     * @constructor\n     */\n    constructor(public readonly rank: number, public readonly context: EventContext) {}\n}\n",
    "/*\nCopyright 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { MatrixClient, MatrixEventEvent, RelationType, RoomEvent } from \"../matrix\";\nimport { TypedReEmitter } from \"../ReEmitter\";\nimport { IRelationsRequestOpts } from \"../@types/requests\";\nimport { IThreadBundledRelationship, MatrixEvent } from \"./event\";\nimport { Direction, EventTimeline } from \"./event-timeline\";\nimport { EventTimelineSet, EventTimelineSetHandlerMap } from './event-timeline-set';\nimport { Room } from './room';\nimport { TypedEventEmitter } from \"./typed-event-emitter\";\nimport { RoomState } from \"./room-state\";\nimport { ServerControlledNamespacedValue } from \"../NamespacedValue\";\nimport { logger } from \"../logger\";\n\nexport enum ThreadEvent {\n    New = \"Thread.new\",\n    Update = \"Thread.update\",\n    NewReply = \"Thread.newReply\",\n    ViewThread = \"Thread.viewThread\",\n}\n\ntype EmittedEvents = Exclude<ThreadEvent, ThreadEvent.New>\n    | RoomEvent.Timeline\n    | RoomEvent.TimelineReset;\n\nexport type EventHandlerMap = {\n    [ThreadEvent.Update]: (thread: Thread) => void;\n    [ThreadEvent.NewReply]: (thread: Thread, event: MatrixEvent) => void;\n    [ThreadEvent.ViewThread]: () => void;\n} & EventTimelineSetHandlerMap;\n\ninterface IThreadOpts {\n    initialEvents?: MatrixEvent[];\n    room: Room;\n    client: MatrixClient;\n}\n\n/**\n * @experimental\n */\nexport class Thread extends TypedEventEmitter<EmittedEvents, EventHandlerMap> {\n    public static hasServerSideSupport: boolean;\n\n    /**\n     * A reference to all the events ID at the bottom of the threads\n     */\n    public readonly timelineSet: EventTimelineSet;\n\n    private _currentUserParticipated = false;\n\n    private reEmitter: TypedReEmitter<EmittedEvents, EventHandlerMap>;\n\n    private lastEvent: MatrixEvent;\n    private replyCount = 0;\n\n    public readonly room: Room;\n    public readonly client: MatrixClient;\n\n    public initialEventsFetched = false;\n\n    public readonly id: string;\n\n    constructor(\n        public readonly rootEvent: MatrixEvent | undefined,\n        opts: IThreadOpts,\n    ) {\n        super();\n\n        this.room = opts.room;\n        this.client = opts.client;\n        this.timelineSet = new EventTimelineSet(this.room, {\n            unstableClientRelationAggregation: true,\n            timelineSupport: true,\n            pendingEvents: true,\n        });\n        this.reEmitter = new TypedReEmitter(this);\n\n        this.reEmitter.reEmit(this.timelineSet, [\n            RoomEvent.Timeline,\n            RoomEvent.TimelineReset,\n        ]);\n\n        this.room.on(MatrixEventEvent.BeforeRedaction, this.onBeforeRedaction);\n        this.room.on(RoomEvent.Redaction, this.onRedaction);\n        this.room.on(RoomEvent.LocalEchoUpdated, this.onEcho);\n        this.timelineSet.on(RoomEvent.Timeline, this.onEcho);\n\n        // If we weren't able to find the root event, it's probably missing,\n        // and we define the thread ID from one of the thread relation\n        this.id = rootEvent?.getId() ?? opts?.initialEvents?.find(event => event.isThreadRelation)?.relationEventId;\n        this.initialiseThread(this.rootEvent);\n\n        opts?.initialEvents?.forEach(event => this.addEvent(event, false));\n    }\n\n    public static setServerSideSupport(hasServerSideSupport: boolean, useStable: boolean): void {\n        Thread.hasServerSideSupport = hasServerSideSupport;\n        if (!useStable) {\n            FILTER_RELATED_BY_SENDERS.setPreferUnstable(true);\n            FILTER_RELATED_BY_REL_TYPES.setPreferUnstable(true);\n            THREAD_RELATION_TYPE.setPreferUnstable(true);\n        }\n    }\n\n    private onBeforeRedaction = (event: MatrixEvent, redaction: MatrixEvent) => {\n        if (event?.isRelation(THREAD_RELATION_TYPE.name) &&\n            this.room.eventShouldLiveIn(event).threadId === this.id &&\n            !redaction.status // only respect it when it succeeds\n        ) {\n            this.replyCount--;\n            this.emit(ThreadEvent.Update, this);\n        }\n    };\n\n    private onRedaction = (event: MatrixEvent) => {\n        if (event.threadRootId !== this.id) return; // ignore redactions for other timelines\n        const events = [...this.timelineSet.getLiveTimeline().getEvents()].reverse();\n        this.lastEvent = events.find(e => (\n            !e.isRedacted() &&\n            e.isRelation(THREAD_RELATION_TYPE.name)\n        )) ?? this.rootEvent;\n        this.emit(ThreadEvent.Update, this);\n    };\n\n    private onEcho = (event: MatrixEvent) => {\n        if (event.threadRootId !== this.id) return; // ignore echoes for other timelines\n        if (this.lastEvent === event) return;\n\n        // There is a risk that the `localTimestamp` approximation will not be accurate\n        // when threads are used over federation. That could result in the reply\n        // count value drifting away from the value returned by the server\n        const isThreadReply = event.isRelation(THREAD_RELATION_TYPE.name);\n        if (!this.lastEvent || this.lastEvent.isRedacted() || (isThreadReply\n            && (event.getId() !== this.lastEvent.getId())\n            && (event.localTimestamp > this.lastEvent.localTimestamp))\n        ) {\n            this.lastEvent = event;\n            if (this.lastEvent.getId() !== this.id) {\n                // This counting only works when server side support is enabled as we started the counting\n                // from the value returned within the bundled relationship\n                if (Thread.hasServerSideSupport) {\n                    this.replyCount++;\n                }\n\n                this.emit(ThreadEvent.NewReply, this, event);\n            }\n        }\n\n        this.emit(ThreadEvent.Update, this);\n    };\n\n    public get roomState(): RoomState {\n        return this.room.getLiveTimeline().getState(EventTimeline.FORWARDS);\n    }\n\n    private addEventToTimeline(event: MatrixEvent, toStartOfTimeline: boolean): void {\n        if (!this.findEventById(event.getId())) {\n            this.timelineSet.addEventToTimeline(\n                event,\n                this.liveTimeline,\n                toStartOfTimeline,\n                false,\n                this.roomState,\n            );\n        }\n    }\n\n    /**\n     * Add an event to the thread and updates\n     * the tail/root references if needed\n     * Will fire \"Thread.update\"\n     * @param event The event to add\n     * @param {boolean} toStartOfTimeline whether the event is being added\n     * to the start (and not the end) of the timeline.\n     */\n    public async addEvent(event: MatrixEvent, toStartOfTimeline: boolean): Promise<void> {\n        // Add all incoming events to the thread's timeline set when there's  no server support\n        if (!Thread.hasServerSideSupport) {\n            // all the relevant membership info to hydrate events with a sender\n            // is held in the main room timeline\n            // We want to fetch the room state from there and pass it down to this thread\n            // timeline set to let it reconcile an event with its relevant RoomMember\n\n            event.setThread(this);\n            this.addEventToTimeline(event, toStartOfTimeline);\n\n            await this.client.decryptEventIfNeeded(event, {});\n        } else if (!toStartOfTimeline &&\n            this.initialEventsFetched &&\n            event.localTimestamp > this.lastReply().localTimestamp\n        ) {\n            await this.fetchEditsWhereNeeded(event);\n            this.addEventToTimeline(event, false);\n        }\n\n        if (!this._currentUserParticipated && event.getSender() === this.client.getUserId()) {\n            this._currentUserParticipated = true;\n        }\n\n        // If no thread support exists we want to count all thread relation\n        // added as a reply. We can't rely on the bundled relationships count\n        if (!Thread.hasServerSideSupport && event.isRelation(THREAD_RELATION_TYPE.name)) {\n            this.replyCount++;\n        }\n\n        this.emit(ThreadEvent.Update, this);\n    }\n\n    private initialiseThread(rootEvent: MatrixEvent | undefined): void {\n        const bundledRelationship = rootEvent\n            ?.getServerAggregatedRelation<IThreadBundledRelationship>(THREAD_RELATION_TYPE.name);\n\n        if (Thread.hasServerSideSupport && bundledRelationship) {\n            this.replyCount = bundledRelationship.count;\n            this._currentUserParticipated = bundledRelationship.current_user_participated;\n\n            const event = new MatrixEvent(bundledRelationship.latest_event);\n            this.setEventMetadata(event);\n            event.setThread(this);\n            this.lastEvent = event;\n\n            this.fetchEditsWhereNeeded(event);\n        }\n    }\n\n    // XXX: Workaround for https://github.com/matrix-org/matrix-spec-proposals/pull/2676/files#r827240084\n    private async fetchEditsWhereNeeded(...events: MatrixEvent[]): Promise<unknown> {\n        return Promise.all(events.filter(e => e.isEncrypted()).map((event: MatrixEvent) => {\n            return this.client.relations(this.roomId, event.getId(), RelationType.Replace, event.getType(), {\n                limit: 1,\n            }).then(relations => {\n                if (relations.events.length) {\n                    event.makeReplaced(relations.events[0]);\n                }\n            }).catch(e => {\n                logger.error(\"Failed to load edits for encrypted thread event\", e);\n            });\n        }));\n    }\n\n    public async fetchInitialEvents(): Promise<{\n        originalEvent: MatrixEvent;\n        events: MatrixEvent[];\n        nextBatch?: string;\n        prevBatch?: string;\n    } | null> {\n        if (!Thread.hasServerSideSupport) {\n            this.initialEventsFetched = true;\n            return null;\n        }\n\n        try {\n            const response = await this.fetchEvents();\n            this.initialEventsFetched = true;\n            return response;\n        } catch (e) {\n            return null;\n        }\n    }\n\n    private setEventMetadata(event: MatrixEvent): void {\n        EventTimeline.setEventMetadata(event, this.roomState, false);\n        event.setThread(this);\n    }\n\n    /**\n     * Finds an event by ID in the current thread\n     */\n    public findEventById(eventId: string) {\n        // Check the lastEvent as it may have been created based on a bundled relationship and not in a timeline\n        if (this.lastEvent?.getId() === eventId) {\n            return this.lastEvent;\n        }\n\n        return this.timelineSet.findEventById(eventId);\n    }\n\n    /**\n     * Return last reply to the thread\n     */\n    public lastReply(matches: (ev: MatrixEvent) => boolean = () => true): MatrixEvent {\n        for (let i = this.events.length - 1; i >= 0; i--) {\n            const event = this.events[i];\n            if (matches(event)) {\n                return event;\n            }\n        }\n    }\n\n    public get roomId(): string {\n        return this.room.roomId;\n    }\n\n    /**\n     * The number of messages in the thread\n     * Only count rel_type=m.thread as we want to\n     * exclude annotations from that number\n     */\n    public get length(): number {\n        return this.replyCount;\n    }\n\n    /**\n     * A getter for the last event added to the thread\n     */\n    public get replyToEvent(): MatrixEvent {\n        return this.lastEvent;\n    }\n\n    public get events(): MatrixEvent[] {\n        return this.liveTimeline.getEvents();\n    }\n\n    public has(eventId: string): boolean {\n        return this.timelineSet.findEventById(eventId) instanceof MatrixEvent;\n    }\n\n    public get hasCurrentUserParticipated(): boolean {\n        return this._currentUserParticipated;\n    }\n\n    public get liveTimeline(): EventTimeline {\n        return this.timelineSet.getLiveTimeline();\n    }\n\n    public async fetchEvents(opts: IRelationsRequestOpts = { limit: 20 }): Promise<{\n        originalEvent: MatrixEvent;\n        events: MatrixEvent[];\n        nextBatch?: string;\n        prevBatch?: string;\n    }> {\n        let {\n            originalEvent,\n            events,\n            prevBatch,\n            nextBatch,\n        } = await this.client.relations(\n            this.room.roomId,\n            this.id,\n            THREAD_RELATION_TYPE.name,\n            null,\n            opts,\n        );\n\n        // When there's no nextBatch returned with a `from` request we have reached\n        // the end of the thread, and therefore want to return an empty one\n        if (!opts.to && !nextBatch) {\n            events = [...events, originalEvent];\n        }\n\n        await this.fetchEditsWhereNeeded(...events);\n\n        await Promise.all(events.map(event => {\n            this.setEventMetadata(event);\n            return this.client.decryptEventIfNeeded(event);\n        }));\n\n        const prependEvents = !opts.direction || opts.direction === Direction.Backward;\n\n        this.timelineSet.addEventsToTimeline(\n            events,\n            prependEvents,\n            this.liveTimeline,\n            prependEvents ? nextBatch : prevBatch,\n        );\n\n        return {\n            originalEvent,\n            events,\n            prevBatch,\n            nextBatch,\n        };\n    }\n}\n\nexport const FILTER_RELATED_BY_SENDERS = new ServerControlledNamespacedValue(\n    \"related_by_senders\",\n    \"io.element.relation_senders\",\n);\nexport const FILTER_RELATED_BY_REL_TYPES = new ServerControlledNamespacedValue(\n    \"related_by_rel_types\",\n    \"io.element.relation_types\",\n);\nexport const THREAD_RELATION_TYPE = new ServerControlledNamespacedValue(\n    \"m.thread\",\n    \"io.element.thread\",\n);\n\nexport enum ThreadFilterType {\n    \"My\",\n    \"All\"\n}\n",
    "/*\nCopyright 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n// eslint-disable-next-line no-restricted-imports\nimport { EventEmitter } from \"events\";\n\nexport enum EventEmitterEvents {\n    NewListener = \"newListener\",\n    RemoveListener = \"removeListener\",\n    Error = \"error\",\n}\n\ntype AnyListener = (...args: any) => any;\nexport type ListenerMap<E extends string> = { [eventName in E]: AnyListener };\ntype EventEmitterEventListener = (eventName: string, listener: AnyListener) => void;\ntype EventEmitterErrorListener = (error: Error) => void;\n\nexport type Listener<\n    E extends string,\n    A extends ListenerMap<E>,\n    T extends E | EventEmitterEvents,\n> = T extends E ? A[T]\n    : T extends EventEmitterEvents ? EventEmitterErrorListener\n    : EventEmitterEventListener;\n\n/**\n * Typed Event Emitter class which can act as a Base Model for all our model\n * and communication events.\n * This makes it much easier for us to distinguish between events, as we now need\n * to properly type this, so that our events are not stringly-based and prone\n * to silly typos.\n */\nexport class TypedEventEmitter<\n    Events extends string,\n    Arguments extends ListenerMap<Events>,\n    SuperclassArguments extends ListenerMap<any> = Arguments,\n> extends EventEmitter {\n    public addListener<T extends Events | EventEmitterEvents>(\n        event: T,\n        listener: Listener<Events, Arguments, T>,\n    ): this {\n        return super.addListener(event, listener);\n    }\n\n    public emit<T extends Events>(event: T, ...args: Parameters<SuperclassArguments[T]>): boolean;\n    public emit<T extends Events>(event: T, ...args: Parameters<Arguments[T]>): boolean;\n    public emit<T extends Events>(event: T, ...args: any[]): boolean {\n        return super.emit(event, ...args);\n    }\n\n    public eventNames(): (Events | EventEmitterEvents)[] {\n        return super.eventNames() as Array<Events | EventEmitterEvents>;\n    }\n\n    public listenerCount(event: Events | EventEmitterEvents): number {\n        return super.listenerCount(event);\n    }\n\n    public listeners(event: Events | EventEmitterEvents): Function[] {\n        return super.listeners(event);\n    }\n\n    public off<T extends Events | EventEmitterEvents>(\n        event: T,\n        listener: Listener<Events, Arguments, T>,\n    ): this {\n        return super.off(event, listener);\n    }\n\n    public on<T extends Events | EventEmitterEvents>(\n        event: T,\n        listener: Listener<Events, Arguments, T>,\n    ): this {\n        return super.on(event, listener);\n    }\n\n    public once<T extends Events | EventEmitterEvents>(\n        event: T,\n        listener: Listener<Events, Arguments, T>,\n    ): this {\n        return super.once(event, listener);\n    }\n\n    public prependListener<T extends Events | EventEmitterEvents>(\n        event: T,\n        listener: Listener<Events, Arguments, T>,\n    ): this {\n        return super.prependListener(event, listener);\n    }\n\n    public prependOnceListener<T extends Events | EventEmitterEvents>(\n        event: T,\n        listener: Listener<Events, Arguments, T>,\n    ): this {\n        return super.prependOnceListener(event, listener);\n    }\n\n    public removeAllListeners(event?: Events | EventEmitterEvents): this {\n        return super.removeAllListeners(event);\n    }\n\n    public removeListener<T extends Events | EventEmitterEvents>(\n        event: T,\n        listener: Listener<Events, Arguments, T>,\n    ): this {\n        return super.removeListener(event, listener);\n    }\n\n    public rawListeners(event: Events | EventEmitterEvents): Function[] {\n        return super.rawListeners(event);\n    }\n}\n",
    "/*\nCopyright 2015 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * @module models/user\n */\n\nimport { MatrixEvent } from \"./event\";\nimport { TypedEventEmitter } from \"./typed-event-emitter\";\n\nexport enum UserEvent {\n    DisplayName = \"User.displayName\",\n    AvatarUrl = \"User.avatarUrl\",\n    Presence = \"User.presence\",\n    CurrentlyActive = \"User.currentlyActive\",\n    LastPresenceTs = \"User.lastPresenceTs\",\n    /* @deprecated */\n    _UnstableStatusMessage = \"User.unstable_statusMessage\",\n}\n\nexport type UserEventHandlerMap = {\n    [UserEvent.DisplayName]: (event: MatrixEvent | undefined, user: User) => void;\n    [UserEvent.AvatarUrl]: (event: MatrixEvent | undefined, user: User) => void;\n    [UserEvent.Presence]: (event: MatrixEvent | undefined, user: User) => void;\n    [UserEvent.CurrentlyActive]: (event: MatrixEvent | undefined, user: User) => void;\n    [UserEvent.LastPresenceTs]: (event: MatrixEvent | undefined, user: User) => void;\n    [UserEvent._UnstableStatusMessage]: (user: User) => void;\n};\n\nexport class User extends TypedEventEmitter<UserEvent, UserEventHandlerMap> {\n    private modified: number;\n\n    // XXX these should be read-only\n    public displayName: string;\n    public rawDisplayName: string;\n    public avatarUrl: string;\n    public presenceStatusMsg: string = null;\n    public presence = \"offline\";\n    public lastActiveAgo = 0;\n    public lastPresenceTs = 0;\n    public currentlyActive = false;\n    public events: {\n        presence?: MatrixEvent;\n        profile?: MatrixEvent;\n    } = {\n            presence: null,\n            profile: null,\n        };\n    // eslint-disable-next-line camelcase\n    public unstable_statusMessage = \"\";\n\n    /**\n     * Construct a new User. A User must have an ID and can optionally have extra\n     * information associated with it.\n     * @constructor\n     * @param {string} userId Required. The ID of this user.\n     * @prop {string} userId The ID of the user.\n     * @prop {Object} info The info object supplied in the constructor.\n     * @prop {string} displayName The 'displayname' of the user if known.\n     * @prop {string} avatarUrl The 'avatar_url' of the user if known.\n     * @prop {string} presence The presence enum if known.\n     * @prop {string} presenceStatusMsg The presence status message if known.\n     * @prop {Number} lastActiveAgo The time elapsed in ms since the user interacted\n     *                proactively with the server, or we saw a message from the user\n     * @prop {Number} lastPresenceTs Timestamp (ms since the epoch) for when we last\n     *                received presence data for this user.  We can subtract\n     *                lastActiveAgo from this to approximate an absolute value for\n     *                when a user was last active.\n     * @prop {Boolean} currentlyActive Whether we should consider lastActiveAgo to be\n     *               an approximation and that the user should be seen as active 'now'\n     * @prop {string} unstable_statusMessage The status message for the user, if known. This is\n     *                different from the presenceStatusMsg in that this is not tied to\n     *                the user's presence, and should be represented differently.\n     * @prop {Object} events The events describing this user.\n     * @prop {MatrixEvent} events.presence The m.presence event for this user.\n     */\n    constructor(public readonly userId: string) {\n        super();\n        this.displayName = userId;\n        this.rawDisplayName = userId;\n        this.avatarUrl = null;\n        this.updateModifiedTime();\n    }\n\n    /**\n     * Update this User with the given presence event. May fire \"User.presence\",\n     * \"User.avatarUrl\" and/or \"User.displayName\" if this event updates this user's\n     * properties.\n     * @param {MatrixEvent} event The <code>m.presence</code> event.\n     * @fires module:client~MatrixClient#event:\"User.presence\"\n     * @fires module:client~MatrixClient#event:\"User.displayName\"\n     * @fires module:client~MatrixClient#event:\"User.avatarUrl\"\n     */\n    public setPresenceEvent(event: MatrixEvent): void {\n        if (event.getType() !== \"m.presence\") {\n            return;\n        }\n        const firstFire = this.events.presence === null;\n        this.events.presence = event;\n\n        const eventsToFire: UserEvent[] = [];\n        if (event.getContent().presence !== this.presence || firstFire) {\n            eventsToFire.push(UserEvent.Presence);\n        }\n        if (event.getContent().avatar_url &&\n            event.getContent().avatar_url !== this.avatarUrl) {\n            eventsToFire.push(UserEvent.AvatarUrl);\n        }\n        if (event.getContent().displayname &&\n            event.getContent().displayname !== this.displayName) {\n            eventsToFire.push(UserEvent.DisplayName);\n        }\n        if (event.getContent().currently_active !== undefined &&\n            event.getContent().currently_active !== this.currentlyActive) {\n            eventsToFire.push(UserEvent.CurrentlyActive);\n        }\n\n        this.presence = event.getContent().presence;\n        eventsToFire.push(UserEvent.LastPresenceTs);\n\n        if (event.getContent().status_msg) {\n            this.presenceStatusMsg = event.getContent().status_msg;\n        }\n        if (event.getContent().displayname) {\n            this.displayName = event.getContent().displayname;\n        }\n        if (event.getContent().avatar_url) {\n            this.avatarUrl = event.getContent().avatar_url;\n        }\n        this.lastActiveAgo = event.getContent().last_active_ago;\n        this.lastPresenceTs = Date.now();\n        this.currentlyActive = event.getContent().currently_active;\n\n        this.updateModifiedTime();\n\n        for (let i = 0; i < eventsToFire.length; i++) {\n            this.emit(eventsToFire[i], event, this);\n        }\n    }\n\n    /**\n     * Manually set this user's display name. No event is emitted in response to this\n     * as there is no underlying MatrixEvent to emit with.\n     * @param {string} name The new display name.\n     */\n    public setDisplayName(name: string): void {\n        const oldName = this.displayName;\n        if (typeof name === \"string\") {\n            this.displayName = name;\n        } else {\n            this.displayName = undefined;\n        }\n        if (name !== oldName) {\n            this.updateModifiedTime();\n        }\n    }\n\n    /**\n     * Manually set this user's non-disambiguated display name. No event is emitted\n     * in response to this as there is no underlying MatrixEvent to emit with.\n     * @param {string} name The new display name.\n     */\n    public setRawDisplayName(name: string): void {\n        if (typeof name === \"string\") {\n            this.rawDisplayName = name;\n        } else {\n            this.rawDisplayName = undefined;\n        }\n    }\n\n    /**\n     * Manually set this user's avatar URL. No event is emitted in response to this\n     * as there is no underlying MatrixEvent to emit with.\n     * @param {string} url The new avatar URL.\n     */\n    public setAvatarUrl(url: string): void {\n        const oldUrl = this.avatarUrl;\n        this.avatarUrl = url;\n        if (url !== oldUrl) {\n            this.updateModifiedTime();\n        }\n    }\n\n    /**\n     * Update the last modified time to the current time.\n     */\n    private updateModifiedTime(): void {\n        this.modified = Date.now();\n    }\n\n    /**\n     * Get the timestamp when this User was last updated. This timestamp is\n     * updated when this User receives a new Presence event which has updated a\n     * property on this object. It is updated <i>before</i> firing events.\n     * @return {number} The timestamp\n     */\n    public getLastModifiedTime(): number {\n        return this.modified;\n    }\n\n    /**\n     * Get the absolute timestamp when this User was last known active on the server.\n     * It is *NOT* accurate if this.currentlyActive is true.\n     * @return {number} The timestamp\n     */\n    public getLastActiveTs(): number {\n        return this.lastPresenceTs - this.lastActiveAgo;\n    }\n\n    /**\n     * Manually set the user's status message.\n     * @param {MatrixEvent} event The <code>im.vector.user_status</code> event.\n     * @fires module:client~MatrixClient#event:\"User.unstable_statusMessage\"\n     */\n    // eslint-disable-next-line\n    public unstable_updateStatusMessage(event: MatrixEvent): void {\n        if (!event.getContent()) this.unstable_statusMessage = \"\";\n        else this.unstable_statusMessage = event.getContent()[\"status\"];\n        this.updateModifiedTime();\n        this.emit(UserEvent._UnstableStatusMessage, this);\n    }\n}\n\n/**\n * Fires whenever any user's lastPresenceTs changes,\n * ie. whenever any presence event is received for a user.\n * @event module:client~MatrixClient#\"User.lastPresenceTs\"\n * @param {MatrixEvent} event The matrix event which caused this event to fire.\n * @param {User} user The user whose User.lastPresenceTs changed.\n * @example\n * matrixClient.on(\"User.lastPresenceTs\", function(event, user){\n *   var newlastPresenceTs = user.lastPresenceTs;\n * });\n */\n\n/**\n * Fires whenever any user's presence changes.\n * @event module:client~MatrixClient#\"User.presence\"\n * @param {MatrixEvent} event The matrix event which caused this event to fire.\n * @param {User} user The user whose User.presence changed.\n * @example\n * matrixClient.on(\"User.presence\", function(event, user){\n *   var newPresence = user.presence;\n * });\n */\n\n/**\n * Fires whenever any user's currentlyActive changes.\n * @event module:client~MatrixClient#\"User.currentlyActive\"\n * @param {MatrixEvent} event The matrix event which caused this event to fire.\n * @param {User} user The user whose User.currentlyActive changed.\n * @example\n * matrixClient.on(\"User.currentlyActive\", function(event, user){\n *   var newCurrentlyActive = user.currentlyActive;\n * });\n */\n\n/**\n * Fires whenever any user's display name changes.\n * @event module:client~MatrixClient#\"User.displayName\"\n * @param {MatrixEvent} event The matrix event which caused this event to fire.\n * @param {User} user The user whose User.displayName changed.\n * @example\n * matrixClient.on(\"User.displayName\", function(event, user){\n *   var newName = user.displayName;\n * });\n */\n\n/**\n * Fires whenever any user's avatar URL changes.\n * @event module:client~MatrixClient#\"User.avatarUrl\"\n * @param {MatrixEvent} event The matrix event which caused this event to fire.\n * @param {User} user The user whose User.avatarUrl changed.\n * @example\n * matrixClient.on(\"User.avatarUrl\", function(event, user){\n *   var newUrl = user.avatarUrl;\n * });\n */\n",
    "/*\nCopyright 2015 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { escapeRegExp, globToRegexp, isNullOrUndefined } from \"./utils\";\nimport { logger } from './logger';\nimport { MatrixClient } from \"./client\";\nimport { MatrixEvent } from \"./models/event\";\nimport {\n    ConditionKind,\n    IAnnotatedPushRule,\n    IContainsDisplayNameCondition,\n    IEventMatchCondition,\n    IPushRule,\n    IPushRules,\n    IRoomMemberCountCondition,\n    ISenderNotificationPermissionCondition,\n    PushRuleAction,\n    PushRuleActionName,\n    PushRuleCondition,\n    PushRuleKind,\n    PushRuleSet,\n    TweakName,\n} from \"./@types/PushRules\";\n\n/**\n * @module pushprocessor\n */\n\nconst RULEKINDS_IN_ORDER = [\n    PushRuleKind.Override,\n    PushRuleKind.ContentSpecific,\n    PushRuleKind.RoomSpecific,\n    PushRuleKind.SenderSpecific,\n    PushRuleKind.Underride,\n];\n\n// The default override rules to apply to the push rules that arrive from the server.\n// We do this for two reasons:\n//   1. Synapse is unlikely to send us the push rule in an incremental sync - see\n//      https://github.com/matrix-org/synapse/pull/4867#issuecomment-481446072 for\n//      more details.\n//   2. We often want to start using push rules ahead of the server supporting them,\n//      and so we can put them here.\nconst DEFAULT_OVERRIDE_RULES: IPushRule[] = [\n    {\n        // For homeservers which don't support MSC1930 yet\n        rule_id: \".m.rule.tombstone\",\n        default: true,\n        enabled: true,\n        conditions: [\n            {\n                kind: ConditionKind.EventMatch,\n                key: \"type\",\n                pattern: \"m.room.tombstone\",\n            },\n            {\n                kind: ConditionKind.EventMatch,\n                key: \"state_key\",\n                pattern: \"\",\n            },\n        ],\n        actions: [\n            PushRuleActionName.Notify,\n            {\n                set_tweak: TweakName.Highlight,\n                value: true,\n            },\n        ],\n    },\n    {\n        // For homeservers which don't support MSC2153 yet\n        rule_id: \".m.rule.reaction\",\n        default: true,\n        enabled: true,\n        conditions: [\n            {\n                kind: ConditionKind.EventMatch,\n                key: \"type\",\n                pattern: \"m.reaction\",\n            },\n        ],\n        actions: [\n            PushRuleActionName.DontNotify,\n        ],\n    },\n];\n\nexport interface IActionsObject {\n    notify: boolean;\n    tweaks: Partial<Record<TweakName, any>>;\n}\n\nexport class PushProcessor {\n    /**\n     * Construct a Push Processor.\n     * @constructor\n     * @param {Object} client The Matrix client object to use\n     */\n    constructor(private readonly client: MatrixClient) {}\n\n    /**\n     * Convert a list of actions into a object with the actions as keys and their values\n     * eg. [ 'notify', { set_tweak: 'sound', value: 'default' } ]\n     *     becomes { notify: true, tweaks: { sound: 'default' } }\n     * @param {array} actionList The actions list\n     *\n     * @return {object} A object with key 'notify' (true or false) and an object of actions\n     */\n    public static actionListToActionsObject(actionList: PushRuleAction[]): IActionsObject {\n        const actionObj: IActionsObject = { notify: false, tweaks: {} };\n        for (let i = 0; i < actionList.length; ++i) {\n            const action = actionList[i];\n            if (action === PushRuleActionName.Notify) {\n                actionObj.notify = true;\n            } else if (typeof action === 'object') {\n                if (action.value === undefined) {\n                    action.value = true;\n                }\n                actionObj.tweaks[action.set_tweak] = action.value;\n            }\n        }\n        return actionObj;\n    }\n\n    /**\n     * Rewrites conditions on a client's push rules to match the defaults\n     * where applicable. Useful for upgrading push rules to more strict\n     * conditions when the server is falling behind on defaults.\n     * @param {object} incomingRules The client's existing push rules\n     * @returns {object} The rewritten rules\n     */\n    public static rewriteDefaultRules(incomingRules: IPushRules): IPushRules {\n        let newRules: IPushRules = JSON.parse(JSON.stringify(incomingRules)); // deep clone\n\n        // These lines are mostly to make the tests happy. We shouldn't run into these\n        // properties missing in practice.\n        if (!newRules) newRules = {} as IPushRules;\n        if (!newRules.global) newRules.global = {} as PushRuleSet;\n        if (!newRules.global.override) newRules.global.override = [];\n\n        // Merge the client-level defaults with the ones from the server\n        const globalOverrides = newRules.global.override;\n        for (const override of DEFAULT_OVERRIDE_RULES) {\n            const existingRule = globalOverrides\n                .find((r) => r.rule_id === override.rule_id);\n\n            if (existingRule) {\n                // Copy over the actions, default, and conditions. Don't touch the user's preference.\n                existingRule.default = override.default;\n                existingRule.conditions = override.conditions;\n                existingRule.actions = override.actions;\n            } else {\n                // Add the rule\n                const ruleId = override.rule_id;\n                logger.warn(`Adding default global override for ${ruleId}`);\n                globalOverrides.push(override);\n            }\n        }\n\n        return newRules;\n    }\n\n    private static cachedGlobToRegex: Record<string, RegExp> = {}; // $glob: RegExp\n\n    private matchingRuleFromKindSet(ev: MatrixEvent, kindset: PushRuleSet): IAnnotatedPushRule {\n        for (let ruleKindIndex = 0; ruleKindIndex < RULEKINDS_IN_ORDER.length; ++ruleKindIndex) {\n            const kind = RULEKINDS_IN_ORDER[ruleKindIndex];\n            const ruleset = kindset[kind];\n            if (!ruleset) {\n                continue;\n            }\n\n            for (let ruleIndex = 0; ruleIndex < ruleset.length; ++ruleIndex) {\n                const rule = ruleset[ruleIndex];\n                if (!rule.enabled) {\n                    continue;\n                }\n\n                const rawrule = this.templateRuleToRaw(kind, rule);\n                if (!rawrule) {\n                    continue;\n                }\n\n                if (this.ruleMatchesEvent(rawrule, ev)) {\n                    return {\n                        ...rule,\n                        kind,\n                    };\n                }\n            }\n        }\n        return null;\n    }\n\n    private templateRuleToRaw(kind: PushRuleKind, tprule: any): any {\n        const rawrule = {\n            'rule_id': tprule.rule_id,\n            'actions': tprule.actions,\n            'conditions': [],\n        };\n        switch (kind) {\n            case PushRuleKind.Underride:\n            case PushRuleKind.Override:\n                rawrule.conditions = tprule.conditions;\n                break;\n            case PushRuleKind.RoomSpecific:\n                if (!tprule.rule_id) {\n                    return null;\n                }\n                rawrule.conditions.push({\n                    'kind': ConditionKind.EventMatch,\n                    'key': 'room_id',\n                    'value': tprule.rule_id,\n                });\n                break;\n            case PushRuleKind.SenderSpecific:\n                if (!tprule.rule_id) {\n                    return null;\n                }\n                rawrule.conditions.push({\n                    'kind': ConditionKind.EventMatch,\n                    'key': 'user_id',\n                    'value': tprule.rule_id,\n                });\n                break;\n            case PushRuleKind.ContentSpecific:\n                if (!tprule.pattern) {\n                    return null;\n                }\n                rawrule.conditions.push({\n                    'kind': ConditionKind.EventMatch,\n                    'key': 'content.body',\n                    'pattern': tprule.pattern,\n                });\n                break;\n        }\n        return rawrule;\n    }\n\n    private eventFulfillsCondition(cond: PushRuleCondition, ev: MatrixEvent): boolean {\n        switch (cond.kind) {\n            case ConditionKind.EventMatch:\n                return this.eventFulfillsEventMatchCondition(cond, ev);\n            case ConditionKind.ContainsDisplayName:\n                return this.eventFulfillsDisplayNameCondition(cond, ev);\n            case ConditionKind.RoomMemberCount:\n                return this.eventFulfillsRoomMemberCountCondition(cond, ev);\n            case ConditionKind.SenderNotificationPermission:\n                return this.eventFulfillsSenderNotifPermCondition(cond, ev);\n        }\n\n        // unknown conditions: we previously matched all unknown conditions,\n        // but given that rules can be added to the base rules on a server,\n        // it's probably better to not match unknown conditions.\n        return false;\n    }\n\n    private eventFulfillsSenderNotifPermCondition(\n        cond: ISenderNotificationPermissionCondition,\n        ev: MatrixEvent,\n    ): boolean {\n        const notifLevelKey = cond['key'];\n        if (!notifLevelKey) {\n            return false;\n        }\n\n        const room = this.client.getRoom(ev.getRoomId());\n        if (!room?.currentState) {\n            return false;\n        }\n\n        // Note that this should not be the current state of the room but the state at\n        // the point the event is in the DAG. Unfortunately the js-sdk does not store\n        // this.\n        return room.currentState.mayTriggerNotifOfType(notifLevelKey, ev.getSender());\n    }\n\n    private eventFulfillsRoomMemberCountCondition(cond: IRoomMemberCountCondition, ev: MatrixEvent): boolean {\n        if (!cond.is) {\n            return false;\n        }\n\n        const room = this.client.getRoom(ev.getRoomId());\n        if (!room || !room.currentState || !room.currentState.members) {\n            return false;\n        }\n\n        const memberCount = room.currentState.getJoinedMemberCount();\n\n        const m = cond.is.match(/^([=<>]*)([0-9]*)$/);\n        if (!m) {\n            return false;\n        }\n        const ineq = m[1];\n        const rhs = parseInt(m[2]);\n        if (isNaN(rhs)) {\n            return false;\n        }\n        switch (ineq) {\n            case '':\n            case '==':\n                return memberCount == rhs;\n            case '<':\n                return memberCount < rhs;\n            case '>':\n                return memberCount > rhs;\n            case '<=':\n                return memberCount <= rhs;\n            case '>=':\n                return memberCount >= rhs;\n            default:\n                return false;\n        }\n    }\n\n    private eventFulfillsDisplayNameCondition(cond: IContainsDisplayNameCondition, ev: MatrixEvent): boolean {\n        let content = ev.getContent();\n        if (ev.isEncrypted() && ev.getClearContent()) {\n            content = ev.getClearContent();\n        }\n        if (!content || !content.body || typeof content.body != 'string') {\n            return false;\n        }\n\n        const room = this.client.getRoom(ev.getRoomId());\n        if (!room || !room.currentState || !room.currentState.members ||\n            !room.currentState.getMember(this.client.credentials.userId)) {\n            return false;\n        }\n\n        const displayName = room.currentState.getMember(this.client.credentials.userId).name;\n\n        // N.B. we can't use \\b as it chokes on unicode. however \\W seems to be okay\n        // as shorthand for [^0-9A-Za-z_].\n        const pat = new RegExp(\"(^|\\\\W)\" + escapeRegExp(displayName) + \"(\\\\W|$)\", 'i');\n        return content.body.search(pat) > -1;\n    }\n\n    private eventFulfillsEventMatchCondition(cond: IEventMatchCondition, ev: MatrixEvent): boolean {\n        if (!cond.key) {\n            return false;\n        }\n\n        const val = this.valueForDottedKey(cond.key, ev);\n        if (typeof val !== 'string') {\n            return false;\n        }\n\n        if (cond.value) {\n            return cond.value === val;\n        }\n\n        if (typeof cond.pattern !== 'string') {\n            return false;\n        }\n\n        let regex;\n\n        if (cond.key == 'content.body') {\n            regex = this.createCachedRegex('(^|\\\\W)', cond.pattern, '(\\\\W|$)');\n        } else {\n            regex = this.createCachedRegex('^', cond.pattern, '$');\n        }\n\n        return !!val.match(regex);\n    }\n\n    private createCachedRegex(prefix: string, glob: string, suffix: string): RegExp {\n        if (PushProcessor.cachedGlobToRegex[glob]) {\n            return PushProcessor.cachedGlobToRegex[glob];\n        }\n        PushProcessor.cachedGlobToRegex[glob] = new RegExp(\n            prefix + globToRegexp(glob) + suffix,\n            'i', // Case insensitive\n        );\n        return PushProcessor.cachedGlobToRegex[glob];\n    }\n\n    private valueForDottedKey(key: string, ev: MatrixEvent): any {\n        const parts = key.split('.');\n        let val;\n\n        // special-case the first component to deal with encrypted messages\n        const firstPart = parts[0];\n        if (firstPart === 'content') {\n            val = ev.getContent();\n            parts.shift();\n        } else if (firstPart === 'type') {\n            val = ev.getType();\n            parts.shift();\n        } else {\n            // use the raw event for any other fields\n            val = ev.event;\n        }\n\n        while (parts.length > 0) {\n            const thisPart = parts.shift();\n            if (isNullOrUndefined(val[thisPart])) {\n                return null;\n            }\n            val = val[thisPart];\n        }\n        return val;\n    }\n\n    private matchingRuleForEventWithRulesets(ev: MatrixEvent, rulesets): IAnnotatedPushRule {\n        if (!rulesets) {\n            return null;\n        }\n        if (ev.getSender() === this.client.credentials.userId) {\n            return null;\n        }\n\n        return this.matchingRuleFromKindSet(ev, rulesets.global);\n    }\n\n    private pushActionsForEventAndRulesets(ev: MatrixEvent, rulesets): IActionsObject {\n        const rule = this.matchingRuleForEventWithRulesets(ev, rulesets);\n        if (!rule) {\n            return {} as IActionsObject;\n        }\n\n        const actionObj = PushProcessor.actionListToActionsObject(rule.actions);\n\n        // Some actions are implicit in some situations: we add those here\n        if (actionObj.tweaks.highlight === undefined) {\n            // if it isn't specified, highlight if it's a content\n            // rule but otherwise not\n            actionObj.tweaks.highlight = (rule.kind == PushRuleKind.ContentSpecific);\n        }\n\n        return actionObj;\n    }\n\n    public ruleMatchesEvent(rule: IPushRule, ev: MatrixEvent): boolean {\n        if (!rule.conditions?.length) return true;\n\n        let ret = true;\n        for (let i = 0; i < rule.conditions.length; ++i) {\n            const cond = rule.conditions[i];\n            // @ts-ignore\n            ret &= this.eventFulfillsCondition(cond, ev);\n        }\n        //console.log(\"Rule \"+rule.rule_id+(ret ? \" matches\" : \" doesn't match\"));\n        return ret;\n    }\n\n    /**\n     * Get the user's push actions for the given event\n     *\n     * @param {module:models/event.MatrixEvent} ev\n     *\n     * @return {PushAction}\n     */\n    public actionsForEvent(ev: MatrixEvent): IActionsObject {\n        return this.pushActionsForEventAndRulesets(ev, this.client.pushRules);\n    }\n\n    /**\n     * Get one of the users push rules by its ID\n     *\n     * @param {string} ruleId The ID of the rule to search for\n     * @return {object} The push rule, or null if no such rule was found\n     */\n    public getPushRuleById(ruleId: string): IPushRule {\n        for (const scope of ['global']) {\n            if (this.client.pushRules[scope] === undefined) continue;\n\n            for (const kind of RULEKINDS_IN_ORDER) {\n                if (this.client.pushRules[scope][kind] === undefined) continue;\n\n                for (const rule of this.client.pushRules[scope][kind]) {\n                    if (rule.rule_id === ruleId) return rule;\n                }\n            }\n        }\n        return null;\n    }\n}\n\n/**\n * @typedef {Object} PushAction\n * @type {Object}\n * @property {boolean} notify Whether this event should notify the user or not.\n * @property {Object} tweaks How this event should be notified.\n * @property {boolean} tweaks.highlight Whether this event should be highlighted\n * on the UI.\n * @property {boolean} tweaks.sound Whether this notification should produce a\n * noise.\n */\n\n",
    "/*\nCopyright 2018 New Vector Ltd\nCopyright 2019 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nconst LOWERCASE = \"abcdefghijklmnopqrstuvwxyz\";\nconst UPPERCASE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nconst DIGITS = \"0123456789\";\n\nexport function randomString(len: number): string {\n    return randomStringFrom(len, UPPERCASE + LOWERCASE + DIGITS);\n}\n\nexport function randomLowercaseString(len: number): string {\n    return randomStringFrom(len, LOWERCASE);\n}\n\nexport function randomUppercaseString(len: number): string {\n    return randomStringFrom(len, UPPERCASE);\n}\n\nfunction randomStringFrom(len: number, chars: string): string {\n    let ret = \"\";\n\n    for (let i = 0; i < len; ++i) {\n        ret += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n\n    return ret;\n}\n",
    "/*\nCopyright 2016 OpenMarket Ltd\nCopyright 2019 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/* A re-implementation of the javascript callback functions (setTimeout,\n * clearTimeout; setInterval and clearInterval are not yet implemented) which\n * try to improve handling of large clock jumps (as seen when\n * suspending/resuming the system).\n *\n * In particular, if a timeout would have fired while the system was suspended,\n * it will instead fire as soon as possible after resume.\n */\n\nimport { logger } from './logger';\n\n// we schedule a callback at least this often, to check if we've missed out on\n// some wall-clock time due to being suspended.\nconst TIMER_CHECK_PERIOD_MS = 1000;\n\n// counter, for making up ids to return from setTimeout\nlet count = 0;\n\n// the key for our callback with the real global.setTimeout\nlet realCallbackKey: NodeJS.Timeout | number;\n\n// a sorted list of the callbacks to be run.\n// each is an object with keys [runAt, func, params, key].\nconst callbackList: {\n    runAt: number;\n    func: (...params: any[]) => void;\n    params: any[];\n    key: number;\n}[] = [];\n\n// var debuglog = logger.log.bind(logger);\nconst debuglog = function(...params: any[]) {};\n\n/**\n * Replace the function used by this module to get the current time.\n *\n * Intended for use by the unit tests.\n *\n * @param {function} [f] function which should return a millisecond counter\n *\n * @internal\n */\nexport function setNow(f: () => number): void {\n    now = f || Date.now;\n}\nlet now = Date.now;\n\n/**\n * reimplementation of window.setTimeout, which will call the callback if\n * the wallclock time goes past the deadline.\n *\n * @param {function} func   callback to be called after a delay\n * @param {Number} delayMs  number of milliseconds to delay by\n *\n * @return {Number} an identifier for this callback, which may be passed into\n *                   clearTimeout later.\n */\nexport function setTimeout(func: (...params: any[]) => void, delayMs: number, ...params: any[]): number {\n    delayMs = delayMs || 0;\n    if (delayMs < 0) {\n        delayMs = 0;\n    }\n\n    const runAt = now() + delayMs;\n    const key = count++;\n    debuglog(\"setTimeout: scheduling cb\", key, \"at\", runAt,\n        \"(delay\", delayMs, \")\");\n    const data = {\n        runAt: runAt,\n        func: func,\n        params: params,\n        key: key,\n    };\n\n    // figure out where it goes in the list\n    const idx = binarySearch(\n        callbackList, function(el) {\n            return el.runAt - runAt;\n        },\n    );\n\n    callbackList.splice(idx, 0, data);\n    scheduleRealCallback();\n\n    return key;\n}\n\n/**\n * reimplementation of window.clearTimeout, which mirrors setTimeout\n *\n * @param {Number} key   result from an earlier setTimeout call\n */\nexport function clearTimeout(key: number): void {\n    if (callbackList.length === 0) {\n        return;\n    }\n\n    // remove the element from the list\n    let i;\n    for (i = 0; i < callbackList.length; i++) {\n        const cb = callbackList[i];\n        if (cb.key == key) {\n            callbackList.splice(i, 1);\n            break;\n        }\n    }\n\n    // iff it was the first one in the list, reschedule our callback.\n    if (i === 0) {\n        scheduleRealCallback();\n    }\n}\n\n// use the real global.setTimeout to schedule a callback to runCallbacks.\nfunction scheduleRealCallback(): void {\n    if (realCallbackKey) {\n        global.clearTimeout(realCallbackKey as NodeJS.Timeout);\n    }\n\n    const first = callbackList[0];\n\n    if (!first) {\n        debuglog(\"scheduleRealCallback: no more callbacks, not rescheduling\");\n        return;\n    }\n\n    const timestamp = now();\n    const delayMs = Math.min(first.runAt - timestamp, TIMER_CHECK_PERIOD_MS);\n\n    debuglog(\"scheduleRealCallback: now:\", timestamp, \"delay:\", delayMs);\n    realCallbackKey = global.setTimeout(runCallbacks, delayMs);\n}\n\nfunction runCallbacks(): void {\n    let cb;\n    const timestamp = now();\n    debuglog(\"runCallbacks: now:\", timestamp);\n\n    // get the list of things to call\n    const callbacksToRun = [];\n    // eslint-disable-next-line\n    while (true) {\n        const first = callbackList[0];\n        if (!first || first.runAt > timestamp) {\n            break;\n        }\n        cb = callbackList.shift();\n        debuglog(\"runCallbacks: popping\", cb.key);\n        callbacksToRun.push(cb);\n    }\n\n    // reschedule the real callback before running our functions, to\n    // keep the codepaths the same whether or not our functions\n    // register their own setTimeouts.\n    scheduleRealCallback();\n\n    for (let i = 0; i < callbacksToRun.length; i++) {\n        cb = callbacksToRun[i];\n        try {\n            cb.func.apply(global, cb.params);\n        } catch (e) {\n            logger.error(\"Uncaught exception in callback function\",\n                e.stack || e);\n        }\n    }\n}\n\n/* search in a sorted array.\n *\n * returns the index of the last element for which func returns\n * greater than zero, or array.length if no such element exists.\n */\nfunction binarySearch<T>(array: T[], func: (v: T) => number): number {\n    // min is inclusive, max exclusive.\n    let min = 0;\n    let max = array.length;\n\n    while (min < max) {\n        const mid = (min + max) >> 1;\n        const res = func(array[mid]);\n        if (res > 0) {\n            // the element at 'mid' is too big; set it as the new max.\n            max = mid;\n        } else {\n            // the element at 'mid' is too small. 'min' is inclusive, so +1.\n            min = mid + 1;\n        }\n    }\n    // presumably, min==max now.\n    return min;\n}\n",
    "/*\nCopyright 2015 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * This is an internal module which manages queuing, scheduling and retrying\n * of requests.\n * @module scheduler\n */\nimport * as utils from \"./utils\";\nimport { logger } from './logger';\nimport { MatrixEvent } from \"./models/event\";\nimport { EventType } from \"./@types/event\";\nimport { IDeferred } from \"./utils\";\nimport { MatrixError } from \"./http-api\";\nimport { ISendEventResponse } from \"./@types/requests\";\n\nconst DEBUG = false;  // set true to enable console logging.\n\ninterface IQueueEntry<T> {\n    event: MatrixEvent;\n    defer: IDeferred<T>;\n    attempts: number;\n}\n\ntype ProcessFunction<T> = (event: MatrixEvent) => Promise<T>;\n\n/**\n * Construct a scheduler for Matrix. Requires\n * {@link module:scheduler~MatrixScheduler#setProcessFunction} to be provided\n * with a way of processing events.\n * @constructor\n * @param {module:scheduler~retryAlgorithm} retryAlgorithm Optional. The retry\n * algorithm to apply when determining when to try to send an event again.\n * Defaults to {@link module:scheduler~MatrixScheduler.RETRY_BACKOFF_RATELIMIT}.\n * @param {module:scheduler~queueAlgorithm} queueAlgorithm Optional. The queuing\n * algorithm to apply when determining which events should be sent before the\n * given event. Defaults to {@link module:scheduler~MatrixScheduler.QUEUE_MESSAGES}.\n */\n// eslint-disable-next-line camelcase\nexport class MatrixScheduler<T = ISendEventResponse> {\n    /**\n     * Retries events up to 4 times using exponential backoff. This produces wait\n     * times of 2, 4, 8, and 16 seconds (30s total) after which we give up. If the\n     * failure was due to a rate limited request, the time specified in the error is\n     * waited before being retried.\n     * @param {MatrixEvent} event\n     * @param {Number} attempts\n     * @param {MatrixError} err\n     * @return {Number}\n     * @see module:scheduler~retryAlgorithm\n     */\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    public static RETRY_BACKOFF_RATELIMIT(event: MatrixEvent, attempts: number, err: MatrixError): number {\n        if (err.httpStatus === 400 || err.httpStatus === 403 || err.httpStatus === 401) {\n            // client error; no amount of retrying with save you now.\n            return -1;\n        }\n        // we ship with browser-request which returns { cors: rejected } when trying\n        // with no connection, so if we match that, give up since they have no conn.\n        if (err[\"cors\"] === \"rejected\") {\n            return -1;\n        }\n\n        // if event that we are trying to send is too large in any way then retrying won't help\n        if (err.name === \"M_TOO_LARGE\") {\n            return -1;\n        }\n\n        if (err.name === \"M_LIMIT_EXCEEDED\") {\n            const waitTime = err.data.retry_after_ms;\n            if (waitTime > 0) {\n                return waitTime;\n            }\n        }\n        if (attempts > 4) {\n            return -1; // give up\n        }\n        return (1000 * Math.pow(2, attempts));\n    }\n\n    /**\n     * Queues <code>m.room.message</code> events and lets other events continue\n     * concurrently.\n     * @param {MatrixEvent} event\n     * @return {string}\n     * @see module:scheduler~queueAlgorithm\n     */\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    public static QUEUE_MESSAGES(event: MatrixEvent) {\n        // enqueue messages or events that associate with another event (redactions and relations)\n        if (event.getType() === EventType.RoomMessage || event.hasAssocation()) {\n            // put these events in the 'message' queue.\n            return \"message\";\n        }\n        // allow all other events continue concurrently.\n        return null;\n    }\n\n    // queueName: [{\n    //  event: MatrixEvent,  // event to send\n    //  defer: Deferred,  // defer to resolve/reject at the END of the retries\n    //  attempts: Number  // number of times we've called processFn\n    // }, ...]\n    private readonly queues: Record<string, IQueueEntry<T>[]> = {};\n    private activeQueues: string[] = [];\n    private procFn: ProcessFunction<T> = null;\n\n    constructor(\n        public readonly retryAlgorithm = MatrixScheduler.RETRY_BACKOFF_RATELIMIT,\n        public readonly queueAlgorithm = MatrixScheduler.QUEUE_MESSAGES,\n    ) {}\n\n    /**\n     * Retrieve a queue based on an event. The event provided does not need to be in\n     * the queue.\n     * @param {MatrixEvent} event An event to get the queue for.\n     * @return {?Array<MatrixEvent>} A shallow copy of events in the queue or null.\n     * Modifying this array will not modify the list itself. Modifying events in\n     * this array <i>will</i> modify the underlying event in the queue.\n     * @see MatrixScheduler.removeEventFromQueue To remove an event from the queue.\n     */\n    public getQueueForEvent(event: MatrixEvent): MatrixEvent[] {\n        const name = this.queueAlgorithm(event);\n        if (!name || !this.queues[name]) {\n            return null;\n        }\n        return this.queues[name].map(function(obj) {\n            return obj.event;\n        });\n    }\n\n    /**\n     * Remove this event from the queue. The event is equal to another event if they\n     * have the same ID returned from event.getId().\n     * @param {MatrixEvent} event The event to remove.\n     * @return {boolean} True if this event was removed.\n     */\n    public removeEventFromQueue(event: MatrixEvent): boolean {\n        const name = this.queueAlgorithm(event);\n        if (!name || !this.queues[name]) {\n            return false;\n        }\n        let removed = false;\n        utils.removeElement(this.queues[name], (element) => {\n            if (element.event.getId() === event.getId()) {\n                // XXX we should probably reject the promise?\n                // https://github.com/matrix-org/matrix-js-sdk/issues/496\n                removed = true;\n                return true;\n            }\n        });\n        return removed;\n    }\n\n    /**\n     * Set the process function. Required for events in the queue to be processed.\n     * If set after events have been added to the queue, this will immediately start\n     * processing them.\n     * @param {module:scheduler~processFn} fn The function that can process events\n     * in the queue.\n     */\n    public setProcessFunction(fn: ProcessFunction<T>): void {\n        this.procFn = fn;\n        this.startProcessingQueues();\n    }\n\n    /**\n     * Queue an event if it is required and start processing queues.\n     * @param {MatrixEvent} event The event that may be queued.\n     * @return {?Promise} A promise if the event was queued, which will be\n     * resolved or rejected in due time, else null.\n     */\n    public queueEvent(event: MatrixEvent): Promise<T> | null {\n        const queueName = this.queueAlgorithm(event);\n        if (!queueName) {\n            return null;\n        }\n        // add the event to the queue and make a deferred for it.\n        if (!this.queues[queueName]) {\n            this.queues[queueName] = [];\n        }\n        const defer = utils.defer<T>();\n        this.queues[queueName].push({\n            event: event,\n            defer: defer,\n            attempts: 0,\n        });\n        debuglog(\"Queue algorithm dumped event %s into queue '%s'\", event.getId(), queueName);\n        this.startProcessingQueues();\n        return defer.promise;\n    }\n\n    private startProcessingQueues(): void {\n        if (!this.procFn) return;\n        // for each inactive queue with events in them\n        Object.keys(this.queues)\n            .filter((queueName) => {\n                return this.activeQueues.indexOf(queueName) === -1 &&\n                    this.queues[queueName].length > 0;\n            })\n            .forEach((queueName) => {\n                // mark the queue as active\n                this.activeQueues.push(queueName);\n                // begin processing the head of the queue\n                debuglog(\"Spinning up queue: '%s'\", queueName);\n                this.processQueue(queueName);\n            });\n    }\n\n    private processQueue = (queueName: string): void => {\n        // get head of queue\n        const obj = this.peekNextEvent(queueName);\n        if (!obj) {\n            // queue is empty. Mark as inactive and stop recursing.\n            const index = this.activeQueues.indexOf(queueName);\n            if (index >= 0) {\n                this.activeQueues.splice(index, 1);\n            }\n            debuglog(\"Stopping queue '%s' as it is now empty\", queueName);\n            return;\n        }\n        debuglog(\"Queue '%s' has %s pending events\", queueName, this.queues[queueName].length);\n        // fire the process function and if it resolves, resolve the deferred. Else\n        // invoke the retry algorithm.\n\n        // First wait for a resolved promise, so the resolve handlers for\n        // the deferred of the previously sent event can run.\n        // This way enqueued relations/redactions to enqueued events can receive\n        // the remove id of their target before being sent.\n        Promise.resolve().then(() => {\n            return this.procFn(obj.event);\n        }).then((res) => {\n            // remove this from the queue\n            this.removeNextEvent(queueName);\n            debuglog(\"Queue '%s' sent event %s\", queueName, obj.event.getId());\n            obj.defer.resolve(res);\n            // keep processing\n            this.processQueue(queueName);\n        }, (err) => {\n            obj.attempts += 1;\n            // ask the retry algorithm when/if we should try again\n            const waitTimeMs = this.retryAlgorithm(obj.event, obj.attempts, err);\n            debuglog(\"retry(%s) err=%s event_id=%s waitTime=%s\", obj.attempts, err, obj.event.getId(), waitTimeMs);\n            if (waitTimeMs === -1) {  // give up (you quitter!)\n                debuglog(\"Queue '%s' giving up on event %s\", queueName, obj.event.getId());\n                // remove this from the queue\n                this.removeNextEvent(queueName);\n                obj.defer.reject(err);\n                // process next event\n                this.processQueue(queueName);\n            } else {\n                setTimeout(this.processQueue, waitTimeMs, queueName);\n            }\n        });\n    };\n\n    private peekNextEvent(queueName: string): IQueueEntry<T> {\n        const queue = this.queues[queueName];\n        if (!Array.isArray(queue)) {\n            return null;\n        }\n        return queue[0];\n    }\n\n    private removeNextEvent(queueName: string): IQueueEntry<T> {\n        const queue = this.queues[queueName];\n        if (!Array.isArray(queue)) {\n            return null;\n        }\n        return queue.shift();\n    }\n}\n\nfunction debuglog(...args: any[]) {\n    if (DEBUG) {\n        logger.log(...args);\n    }\n}\n\n/**\n * The retry algorithm to apply when retrying events. To stop retrying, return\n * <code>-1</code>. If this event was part of a queue, it will be removed from\n * the queue.\n * @callback retryAlgorithm\n * @param {MatrixEvent} event The event being retried.\n * @param {Number} attempts The number of failed attempts. This will always be\n * >= 1.\n * @param {MatrixError} err The most recent error message received when trying\n * to send this event.\n * @return {Number} The number of milliseconds to wait before trying again. If\n * this is 0, the request will be immediately retried. If this is\n * <code>-1</code>, the event will be marked as\n * {@link module:models/event.EventStatus.NOT_SENT} and will not be retried.\n */\n\n/**\n * The queuing algorithm to apply to events. This function must be idempotent as\n * it may be called multiple times with the same event. All queues created are\n * serviced in a FIFO manner. To send the event ASAP, return <code>null</code>\n * which will not put this event in a queue. Events that fail to send that form\n * part of a queue will be removed from the queue and the next event in the\n * queue will be sent.\n * @callback queueAlgorithm\n * @param {MatrixEvent} event The event to be sent.\n * @return {string} The name of the queue to put the event into. If a queue with\n * this name does not exist, it will be created. If this is <code>null</code>,\n * the event is not put into a queue and will be sent concurrently.\n */\n\n/**\n * The function to invoke to process (send) events in the queue.\n * @callback processFn\n * @param {MatrixEvent} event The event to send.\n * @return {Promise} Resolved/rejected depending on the outcome of the request.\n */\n\n",
    "/*\nCopyright 2019 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nexport enum SERVICE_TYPES {\n    IS = 'SERVICE_TYPE_IS', // An identity server\n    IM = 'SERVICE_TYPE_IM', // An integration manager\n}\n",
    "/*\nCopyright 2017 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { IMinimalEvent, ISyncData, ISyncResponse, SyncAccumulator } from \"../sync-accumulator\";\nimport * as utils from \"../utils\";\nimport * as IndexedDBHelpers from \"../indexeddb-helpers\";\nimport { logger } from '../logger';\nimport { IEvent, IStartClientOpts } from \"..\";\nimport { ISavedSync } from \"./index\";\nimport { IIndexedDBBackend, UserTuple } from \"./indexeddb-backend\";\n\nconst VERSION = 3;\n\nfunction createDatabase(db: IDBDatabase): void {\n    // Make user store, clobber based on user ID. (userId property of User objects)\n    db.createObjectStore(\"users\", { keyPath: [\"userId\"] });\n\n    // Make account data store, clobber based on event type.\n    // (event.type property of MatrixEvent objects)\n    db.createObjectStore(\"accountData\", { keyPath: [\"type\"] });\n\n    // Make /sync store (sync tokens, room data, etc), always clobber (const key).\n    db.createObjectStore(\"sync\", { keyPath: [\"clobber\"] });\n}\n\nfunction upgradeSchemaV2(db: IDBDatabase): void {\n    const oobMembersStore = db.createObjectStore(\n        \"oob_membership_events\", {\n            keyPath: [\"room_id\", \"state_key\"],\n        });\n    oobMembersStore.createIndex(\"room\", \"room_id\");\n}\n\nfunction upgradeSchemaV3(db: IDBDatabase): void {\n    db.createObjectStore(\"client_options\",\n        { keyPath: [\"clobber\"] });\n}\n\n/**\n * Helper method to collect results from a Cursor and promiseify it.\n * @param {ObjectStore|Index} store The store to perform openCursor on.\n * @param {IDBKeyRange=} keyRange Optional key range to apply on the cursor.\n * @param {Function} resultMapper A function which is repeatedly called with a\n * Cursor.\n * Return the data you want to keep.\n * @return {Promise<T[]>} Resolves to an array of whatever you returned from\n * resultMapper.\n */\nfunction selectQuery<T>(\n    store: IDBObjectStore,\n    keyRange: IDBKeyRange | IDBValidKey | undefined,\n    resultMapper: (cursor: IDBCursorWithValue) => T,\n): Promise<T[]> {\n    const query = store.openCursor(keyRange);\n    return new Promise((resolve, reject) => {\n        const results: T[] = [];\n        query.onerror = () => {\n            reject(new Error(\"Query failed: \" + query.error));\n        };\n        // collect results\n        query.onsuccess = () => {\n            const cursor = query.result;\n            if (!cursor) {\n                resolve(results);\n                return; // end of results\n            }\n            results.push(resultMapper(cursor));\n            cursor.continue();\n        };\n    });\n}\n\nfunction txnAsPromise(txn: IDBTransaction): Promise<Event> {\n    return new Promise((resolve, reject) => {\n        txn.oncomplete = function(event) {\n            resolve(event);\n        };\n        txn.onerror = function() {\n            reject(txn.error);\n        };\n    });\n}\n\nfunction reqAsEventPromise(req: IDBRequest): Promise<Event> {\n    return new Promise((resolve, reject) => {\n        req.onsuccess = function(event) {\n            resolve(event);\n        };\n        req.onerror = function() {\n            reject(req.error);\n        };\n    });\n}\n\nfunction reqAsPromise(req: IDBRequest): Promise<IDBRequest> {\n    return new Promise((resolve, reject) => {\n        req.onsuccess = () => resolve(req);\n        req.onerror = (err) => reject(err);\n    });\n}\n\nfunction reqAsCursorPromise(req: IDBRequest<IDBCursor | null>): Promise<IDBCursor> {\n    return reqAsEventPromise(req).then((event) => req.result);\n}\n\nexport class LocalIndexedDBStoreBackend implements IIndexedDBBackend {\n    public static exists(indexedDB: IDBFactory, dbName: string): Promise<boolean> {\n        dbName = \"matrix-js-sdk:\" + (dbName || \"default\");\n        return IndexedDBHelpers.exists(indexedDB, dbName);\n    }\n\n    private readonly dbName: string;\n    private readonly syncAccumulator: SyncAccumulator;\n    private db: IDBDatabase = null;\n    private disconnected = true;\n    private _isNewlyCreated = false;\n\n    /**\n     * Does the actual reading from and writing to the indexeddb\n     *\n     * Construct a new Indexed Database store backend. This requires a call to\n     * <code>connect()</code> before this store can be used.\n     * @constructor\n     * @param {Object} indexedDB The Indexed DB interface e.g\n     * <code>window.indexedDB</code>\n     * @param {string=} dbName Optional database name. The same name must be used\n     * to open the same database.\n     */\n    constructor(private readonly indexedDB: IDBFactory, dbName: string) {\n        this.dbName = \"matrix-js-sdk:\" + (dbName || \"default\");\n        this.syncAccumulator = new SyncAccumulator();\n    }\n\n    /**\n     * Attempt to connect to the database. This can fail if the user does not\n     * grant permission.\n     * @return {Promise} Resolves if successfully connected.\n     */\n    public connect(): Promise<void> {\n        if (!this.disconnected) {\n            logger.log(`LocalIndexedDBStoreBackend.connect: already connected or connecting`);\n            return Promise.resolve();\n        }\n\n        this.disconnected = false;\n\n        logger.log(`LocalIndexedDBStoreBackend.connect: connecting...`);\n        const req = this.indexedDB.open(this.dbName, VERSION);\n        req.onupgradeneeded = (ev) => {\n            const db = req.result;\n            const oldVersion = ev.oldVersion;\n            logger.log(\n                `LocalIndexedDBStoreBackend.connect: upgrading from ${oldVersion}`,\n            );\n            if (oldVersion < 1) { // The database did not previously exist.\n                this._isNewlyCreated = true;\n                createDatabase(db);\n            }\n            if (oldVersion < 2) {\n                upgradeSchemaV2(db);\n            }\n            if (oldVersion < 3) {\n                upgradeSchemaV3(db);\n            }\n            // Expand as needed.\n        };\n\n        req.onblocked = () => {\n            logger.log(`can't yet open LocalIndexedDBStoreBackend because it is open elsewhere`);\n        };\n\n        logger.log(`LocalIndexedDBStoreBackend.connect: awaiting connection...`);\n        return reqAsEventPromise(req).then(() => {\n            logger.log(`LocalIndexedDBStoreBackend.connect: connected`);\n            this.db = req.result;\n\n            // add a poorly-named listener for when deleteDatabase is called\n            // so we can close our db connections.\n            this.db.onversionchange = () => {\n                this.db.close();\n            };\n\n            return this.init();\n        });\n    }\n\n    /** @return {boolean} whether or not the database was newly created in this session. */\n    public isNewlyCreated(): Promise<boolean> {\n        return Promise.resolve(this._isNewlyCreated);\n    }\n\n    /**\n     * Having connected, load initial data from the database and prepare for use\n     * @return {Promise} Resolves on success\n     */\n    private init() {\n        return Promise.all([\n            this.loadAccountData(),\n            this.loadSyncData(),\n        ]).then(([accountData, syncData]) => {\n            logger.log(`LocalIndexedDBStoreBackend: loaded initial data`);\n            this.syncAccumulator.accumulate({\n                next_batch: syncData.nextBatch,\n                rooms: syncData.roomsData,\n                account_data: {\n                    events: accountData,\n                },\n            }, true);\n        });\n    }\n\n    /**\n     * Returns the out-of-band membership events for this room that\n     * were previously loaded.\n     * @param {string} roomId\n     * @returns {Promise<event[]>} the events, potentially an empty array if OOB loading didn't yield any new members\n     * @returns {null} in case the members for this room haven't been stored yet\n     */\n    public getOutOfBandMembers(roomId: string): Promise<IEvent[] | null> {\n        return new Promise<IEvent[] | null>((resolve, reject) => {\n            const tx = this.db.transaction([\"oob_membership_events\"], \"readonly\");\n            const store = tx.objectStore(\"oob_membership_events\");\n            const roomIndex = store.index(\"room\");\n            const range = IDBKeyRange.only(roomId);\n            const request = roomIndex.openCursor(range);\n\n            const membershipEvents: IEvent[] = [];\n            // did we encounter the oob_written marker object\n            // amongst the results? That means OOB member\n            // loading already happened for this room\n            // but there were no members to persist as they\n            // were all known already\n            let oobWritten = false;\n\n            request.onsuccess = () => {\n                const cursor = request.result;\n                if (!cursor) {\n                    // Unknown room\n                    if (!membershipEvents.length && !oobWritten) {\n                        return resolve(null);\n                    }\n                    return resolve(membershipEvents);\n                }\n                const record = cursor.value;\n                if (record.oob_written) {\n                    oobWritten = true;\n                } else {\n                    membershipEvents.push(record);\n                }\n                cursor.continue();\n            };\n            request.onerror = (err) => {\n                reject(err);\n            };\n        }).then((events) => {\n            logger.log(`LL: got ${events && events.length} membershipEvents from storage for room ${roomId} ...`);\n            return events;\n        });\n    }\n\n    /**\n     * Stores the out-of-band membership events for this room. Note that\n     * it still makes sense to store an empty array as the OOB status for the room is\n     * marked as fetched, and getOutOfBandMembers will return an empty array instead of null\n     * @param {string} roomId\n     * @param {event[]} membershipEvents the membership events to store\n     */\n    public async setOutOfBandMembers(roomId: string, membershipEvents: IEvent[]): Promise<void> {\n        logger.log(`LL: backend about to store ${membershipEvents.length}` +\n            ` members for ${roomId}`);\n        const tx = this.db.transaction([\"oob_membership_events\"], \"readwrite\");\n        const store = tx.objectStore(\"oob_membership_events\");\n        membershipEvents.forEach((e) => {\n            store.put(e);\n        });\n        // aside from all the events, we also write a marker object to the store\n        // to mark the fact that OOB members have been written for this room.\n        // It's possible that 0 members need to be written as all where previously know\n        // but we still need to know whether to return null or [] from getOutOfBandMembers\n        // where null means out of band members haven't been stored yet for this room\n        const markerObject = {\n            room_id: roomId,\n            oob_written: true,\n            state_key: 0,\n        };\n        store.put(markerObject);\n        await txnAsPromise(tx);\n        logger.log(`LL: backend done storing for ${roomId}!`);\n    }\n\n    public async clearOutOfBandMembers(roomId: string): Promise<void> {\n        // the approach to delete all members for a room\n        // is to get the min and max state key from the index\n        // for that room, and then delete between those\n        // keys in the store.\n        // this should be way faster than deleting every member\n        // individually for a large room.\n        const readTx = this.db.transaction(\n            [\"oob_membership_events\"],\n            \"readonly\");\n        const store = readTx.objectStore(\"oob_membership_events\");\n        const roomIndex = store.index(\"room\");\n        const roomRange = IDBKeyRange.only(roomId);\n\n        const minStateKeyProm = reqAsCursorPromise(\n            roomIndex.openKeyCursor(roomRange, \"next\"),\n        ).then((cursor) => cursor && cursor.primaryKey[1]);\n        const maxStateKeyProm = reqAsCursorPromise(\n            roomIndex.openKeyCursor(roomRange, \"prev\"),\n        ).then((cursor) => cursor && cursor.primaryKey[1]);\n        const [minStateKey, maxStateKey] = await Promise.all(\n            [minStateKeyProm, maxStateKeyProm]);\n\n        const writeTx = this.db.transaction(\n            [\"oob_membership_events\"],\n            \"readwrite\");\n        const writeStore = writeTx.objectStore(\"oob_membership_events\");\n        const membersKeyRange = IDBKeyRange.bound(\n            [roomId, minStateKey],\n            [roomId, maxStateKey],\n        );\n\n        logger.log(`LL: Deleting all users + marker in storage for room ${roomId}, with key range:`,\n            [roomId, minStateKey], [roomId, maxStateKey]);\n        await reqAsPromise(writeStore.delete(membersKeyRange));\n    }\n\n    /**\n     * Clear the entire database. This should be used when logging out of a client\n     * to prevent mixing data between accounts.\n     * @return {Promise} Resolved when the database is cleared.\n     */\n    public clearDatabase(): Promise<void> {\n        return new Promise((resolve) => {\n            logger.log(`Removing indexeddb instance: ${this.dbName}`);\n            const req = this.indexedDB.deleteDatabase(this.dbName);\n\n            req.onblocked = () => {\n                logger.log(`can't yet delete indexeddb ${this.dbName} because it is open elsewhere`);\n            };\n\n            req.onerror = () => {\n                // in firefox, with indexedDB disabled, this fails with a\n                // DOMError. We treat this as non-fatal, so that we can still\n                // use the app.\n                logger.warn(`unable to delete js-sdk store indexeddb: ${req.error}`);\n                resolve();\n            };\n\n            req.onsuccess = () => {\n                logger.log(`Removed indexeddb instance: ${this.dbName}`);\n                resolve();\n            };\n        });\n    }\n\n    /**\n     * @param {boolean=} copy If false, the data returned is from internal\n     * buffers and must not be mutated. Otherwise, a copy is made before\n     * returning such that the data can be safely mutated. Default: true.\n     *\n     * @return {Promise} Resolves with a sync response to restore the\n     * client state to where it was at the last save, or null if there\n     * is no saved sync data.\n     */\n    public getSavedSync(copy = true): Promise<ISavedSync> {\n        const data = this.syncAccumulator.getJSON();\n        if (!data.nextBatch) return Promise.resolve(null);\n        if (copy) {\n            // We must deep copy the stored data so that the /sync processing code doesn't\n            // corrupt the internal state of the sync accumulator (it adds non-clonable keys)\n            return Promise.resolve(utils.deepCopy(data));\n        } else {\n            return Promise.resolve(data);\n        }\n    }\n\n    public getNextBatchToken(): Promise<string> {\n        return Promise.resolve(this.syncAccumulator.getNextBatchToken());\n    }\n\n    public setSyncData(syncData: ISyncResponse): Promise<void> {\n        return Promise.resolve().then(() => {\n            this.syncAccumulator.accumulate(syncData);\n        });\n    }\n\n    public async syncToDatabase(userTuples: UserTuple[]): Promise<void> {\n        const syncData = this.syncAccumulator.getJSON(true);\n\n        await Promise.all([\n            this.persistUserPresenceEvents(userTuples),\n            this.persistAccountData(syncData.accountData),\n            this.persistSyncData(syncData.nextBatch, syncData.roomsData),\n        ]);\n    }\n\n    /**\n     * Persist rooms /sync data along with the next batch token.\n     * @param {string} nextBatch The next_batch /sync value.\n     * @param {Object} roomsData The 'rooms' /sync data from a SyncAccumulator\n     * @return {Promise} Resolves if the data was persisted.\n     */\n    private persistSyncData(\n        nextBatch: string,\n        roomsData: ISyncResponse[\"rooms\"],\n    ): Promise<void> {\n        logger.log(\"Persisting sync data up to\", nextBatch);\n        return utils.promiseTry<void>(() => {\n            const txn = this.db.transaction([\"sync\"], \"readwrite\");\n            const store = txn.objectStore(\"sync\");\n            store.put({\n                clobber: \"-\", // constant key so will always clobber\n                nextBatch,\n                roomsData,\n            }); // put == UPSERT\n            return txnAsPromise(txn).then();\n        });\n    }\n\n    /**\n     * Persist a list of account data events. Events with the same 'type' will\n     * be replaced.\n     * @param {Object[]} accountData An array of raw user-scoped account data events\n     * @return {Promise} Resolves if the events were persisted.\n     */\n    private persistAccountData(accountData: IMinimalEvent[]): Promise<void> {\n        return utils.promiseTry<void>(() => {\n            const txn = this.db.transaction([\"accountData\"], \"readwrite\");\n            const store = txn.objectStore(\"accountData\");\n            for (let i = 0; i < accountData.length; i++) {\n                store.put(accountData[i]); // put == UPSERT\n            }\n            return txnAsPromise(txn).then();\n        });\n    }\n\n    /**\n     * Persist a list of [user id, presence event] they are for.\n     * Users with the same 'userId' will be replaced.\n     * Presence events should be the event in its raw form (not the Event\n     * object)\n     * @param {Object[]} tuples An array of [userid, event] tuples\n     * @return {Promise} Resolves if the users were persisted.\n     */\n    private persistUserPresenceEvents(tuples: UserTuple[]): Promise<void> {\n        return utils.promiseTry<void>(() => {\n            const txn = this.db.transaction([\"users\"], \"readwrite\");\n            const store = txn.objectStore(\"users\");\n            for (const tuple of tuples) {\n                store.put({\n                    userId: tuple[0],\n                    event: tuple[1],\n                }); // put == UPSERT\n            }\n            return txnAsPromise(txn).then();\n        });\n    }\n\n    /**\n     * Load all user presence events from the database. This is not cached.\n     * FIXME: It would probably be more sensible to store the events in the\n     * sync.\n     * @return {Promise<Object[]>} A list of presence events in their raw form.\n     */\n    public getUserPresenceEvents(): Promise<UserTuple[]> {\n        return utils.promiseTry<UserTuple[]>(() => {\n            const txn = this.db.transaction([\"users\"], \"readonly\");\n            const store = txn.objectStore(\"users\");\n            return selectQuery(store, undefined, (cursor) => {\n                return [cursor.value.userId, cursor.value.event];\n            });\n        });\n    }\n\n    /**\n     * Load all the account data events from the database. This is not cached.\n     * @return {Promise<Object[]>} A list of raw global account events.\n     */\n    private loadAccountData(): Promise<IMinimalEvent[]> {\n        logger.log(`LocalIndexedDBStoreBackend: loading account data...`);\n        return utils.promiseTry<IMinimalEvent[]>(() => {\n            const txn = this.db.transaction([\"accountData\"], \"readonly\");\n            const store = txn.objectStore(\"accountData\");\n            return selectQuery(store, undefined, (cursor) => {\n                return cursor.value;\n            }).then((result: IMinimalEvent[]) => {\n                logger.log(`LocalIndexedDBStoreBackend: loaded account data`);\n                return result;\n            });\n        });\n    }\n\n    /**\n     * Load the sync data from the database.\n     * @return {Promise<Object>} An object with \"roomsData\" and \"nextBatch\" keys.\n     */\n    private loadSyncData(): Promise<ISyncData> {\n        logger.log(`LocalIndexedDBStoreBackend: loading sync data...`);\n        return utils.promiseTry<ISyncData>(() => {\n            const txn = this.db.transaction([\"sync\"], \"readonly\");\n            const store = txn.objectStore(\"sync\");\n            return selectQuery(store, undefined, (cursor) => {\n                return cursor.value;\n            }).then((results: ISyncData[]) => {\n                logger.log(`LocalIndexedDBStoreBackend: loaded sync data`);\n                if (results.length > 1) {\n                    logger.warn(\"loadSyncData: More than 1 sync row found.\");\n                }\n                return results.length > 0 ? results[0] : {} as ISyncData;\n            });\n        });\n    }\n\n    public getClientOptions(): Promise<IStartClientOpts> {\n        return Promise.resolve().then(() => {\n            const txn = this.db.transaction([\"client_options\"], \"readonly\");\n            const store = txn.objectStore(\"client_options\");\n            return selectQuery(store, undefined, (cursor) => {\n                if (cursor.value && cursor.value && cursor.value.options) {\n                    return cursor.value.options;\n                }\n            }).then((results) => results[0]);\n        });\n    }\n\n    public async storeClientOptions(options: IStartClientOpts): Promise<void> {\n        const txn = this.db.transaction([\"client_options\"], \"readwrite\");\n        const store = txn.objectStore(\"client_options\");\n        store.put({\n            clobber: \"-\", // constant key so will always clobber\n            options: options,\n        }); // put == UPSERT\n        await txnAsPromise(txn);\n    }\n}\n",
    "/*\nCopyright 2017 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { logger } from \"../logger\";\nimport { defer, IDeferred } from \"../utils\";\nimport { ISavedSync } from \"./index\";\nimport { IStartClientOpts } from \"../client\";\nimport { IEvent, ISyncResponse } from \"..\";\nimport { IIndexedDBBackend, UserTuple } from \"./indexeddb-backend\";\n\nexport class RemoteIndexedDBStoreBackend implements IIndexedDBBackend {\n    private worker: Worker;\n    private nextSeq = 0;\n    // The currently in-flight requests to the actual backend\n    private inFlight: Record<number, IDeferred<any>> = {}; // seq: promise\n    // Once we start connecting, we keep the promise and re-use it\n    // if we try to connect again\n    private startPromise: Promise<void> = null;\n\n    /**\n     * An IndexedDB store backend where the actual backend sits in a web\n     * worker.\n     *\n     * Construct a new Indexed Database store backend. This requires a call to\n     * <code>connect()</code> before this store can be used.\n     * @constructor\n     * @param {Function} workerFactory Factory which produces a Worker\n     * @param {string=} dbName Optional database name. The same name must be used\n     * to open the same database.\n     */\n    constructor(\n        private readonly workerFactory: () => Worker,\n        private readonly dbName: string,\n    ) {}\n\n    /**\n     * Attempt to connect to the database. This can fail if the user does not\n     * grant permission.\n     * @return {Promise} Resolves if successfully connected.\n     */\n    public connect(): Promise<void> {\n        return this.ensureStarted().then(() => this.doCmd('connect'));\n    }\n\n    /**\n     * Clear the entire database. This should be used when logging out of a client\n     * to prevent mixing data between accounts.\n     * @return {Promise} Resolved when the database is cleared.\n     */\n    public clearDatabase(): Promise<void> {\n        return this.ensureStarted().then(() => this.doCmd('clearDatabase'));\n    }\n\n    /** @return {Promise<boolean>} whether or not the database was newly created in this session. */\n    public isNewlyCreated(): Promise<boolean> {\n        return this.doCmd('isNewlyCreated');\n    }\n\n    /**\n     * @return {Promise} Resolves with a sync response to restore the\n     * client state to where it was at the last save, or null if there\n     * is no saved sync data.\n     */\n    public getSavedSync(): Promise<ISavedSync> {\n        return this.doCmd('getSavedSync');\n    }\n\n    public getNextBatchToken(): Promise<string> {\n        return this.doCmd('getNextBatchToken');\n    }\n\n    public setSyncData(syncData: ISyncResponse): Promise<void> {\n        return this.doCmd('setSyncData', [syncData]);\n    }\n\n    public syncToDatabase(userTuples: UserTuple[]): Promise<void> {\n        return this.doCmd('syncToDatabase', [userTuples]);\n    }\n\n    /**\n     * Returns the out-of-band membership events for this room that\n     * were previously loaded.\n     * @param {string} roomId\n     * @returns {event[]} the events, potentially an empty array if OOB loading didn't yield any new members\n     * @returns {null} in case the members for this room haven't been stored yet\n     */\n    public getOutOfBandMembers(roomId: string): Promise<IEvent[] | null> {\n        return this.doCmd('getOutOfBandMembers', [roomId]);\n    }\n\n    /**\n     * Stores the out-of-band membership events for this room. Note that\n     * it still makes sense to store an empty array as the OOB status for the room is\n     * marked as fetched, and getOutOfBandMembers will return an empty array instead of null\n     * @param {string} roomId\n     * @param {event[]} membershipEvents the membership events to store\n     * @returns {Promise} when all members have been stored\n     */\n    public setOutOfBandMembers(roomId: string, membershipEvents: IEvent[]): Promise<void> {\n        return this.doCmd('setOutOfBandMembers', [roomId, membershipEvents]);\n    }\n\n    public clearOutOfBandMembers(roomId: string): Promise<void> {\n        return this.doCmd('clearOutOfBandMembers', [roomId]);\n    }\n\n    public getClientOptions(): Promise<IStartClientOpts> {\n        return this.doCmd('getClientOptions');\n    }\n\n    public storeClientOptions(options: IStartClientOpts): Promise<void> {\n        return this.doCmd('storeClientOptions', [options]);\n    }\n\n    /**\n     * Load all user presence events from the database. This is not cached.\n     * @return {Promise<Object[]>} A list of presence events in their raw form.\n     */\n    public getUserPresenceEvents(): Promise<UserTuple[]> {\n        return this.doCmd('getUserPresenceEvents');\n    }\n\n    private ensureStarted(): Promise<void> {\n        if (this.startPromise === null) {\n            this.worker = this.workerFactory();\n            this.worker.onmessage = this.onWorkerMessage;\n\n            // tell the worker the db name.\n            this.startPromise = this.doCmd('_setupWorker', [this.dbName]).then(() => {\n                logger.log(\"IndexedDB worker is ready\");\n            });\n        }\n        return this.startPromise;\n    }\n\n    private doCmd<T>(command: string, args?: any): Promise<T> {\n        // wrap in a q so if the postMessage throws,\n        // the promise automatically gets rejected\n        return Promise.resolve().then(() => {\n            const seq = this.nextSeq++;\n            const def = defer<T>();\n\n            this.inFlight[seq] = def;\n\n            this.worker.postMessage({ command, seq, args });\n\n            return def.promise;\n        });\n    }\n\n    private onWorkerMessage = (ev: MessageEvent): void => {\n        const msg = ev.data;\n\n        if (msg.command == 'cmd_success' || msg.command == 'cmd_fail') {\n            if (msg.seq === undefined) {\n                logger.error(\"Got reply from worker with no seq\");\n                return;\n            }\n\n            const def = this.inFlight[msg.seq];\n            if (def === undefined) {\n                logger.error(\"Got reply for unknown seq \" + msg.seq);\n                return;\n            }\n            delete this.inFlight[msg.seq];\n\n            if (msg.command == 'cmd_success') {\n                def.resolve(msg.result);\n            } else {\n                const error = new Error(msg.error.message);\n                error.name = msg.error.name;\n                def.reject(error);\n            }\n        } else {\n            logger.warn(\"Unrecognised message from worker: \", msg);\n        }\n    };\n}\n\n",
    "/*\nCopyright 2017 - 2021 Vector Creations Ltd\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/* eslint-disable @babel/no-invalid-this */\n\nimport { MemoryStore, IOpts as IBaseOpts } from \"./memory\";\nimport { LocalIndexedDBStoreBackend } from \"./indexeddb-local-backend\";\nimport { RemoteIndexedDBStoreBackend } from \"./indexeddb-remote-backend\";\nimport { User } from \"../models/user\";\nimport { IEvent, MatrixEvent } from \"../models/event\";\nimport { logger } from '../logger';\nimport { ISavedSync } from \"./index\";\nimport { IIndexedDBBackend } from \"./indexeddb-backend\";\nimport { ISyncResponse } from \"../sync-accumulator\";\nimport { TypedEventEmitter } from \"../models/typed-event-emitter\";\n\n/**\n * This is an internal module. See {@link IndexedDBStore} for the public class.\n * @module store/indexeddb\n */\n\n// If this value is too small we'll be writing very often which will cause\n// noticeable stop-the-world pauses. If this value is too big we'll be writing\n// so infrequently that the /sync size gets bigger on reload. Writing more\n// often does not affect the length of the pause since the entire /sync\n// response is persisted each time.\nconst WRITE_DELAY_MS = 1000 * 60 * 5; // once every 5 minutes\n\ninterface IOpts extends IBaseOpts {\n    indexedDB: IDBFactory;\n    dbName?: string;\n    workerFactory?: () => Worker;\n}\n\ntype EventHandlerMap = {\n    \"degraded\": (e: Error) => void;\n};\n\nexport class IndexedDBStore extends MemoryStore {\n    static exists(indexedDB: IDBFactory, dbName: string): Promise<boolean> {\n        return LocalIndexedDBStoreBackend.exists(indexedDB, dbName);\n    }\n\n    public readonly backend: IIndexedDBBackend;\n\n    private startedUp = false;\n    private syncTs = 0;\n    // Records the last-modified-time of each user at the last point we saved\n    // the database, such that we can derive the set if users that have been\n    // modified since we last saved.\n    private userModifiedMap: Record<string, number> = {}; // user_id : timestamp\n    private emitter = new TypedEventEmitter<keyof EventHandlerMap, EventHandlerMap>();\n\n    /**\n     * Construct a new Indexed Database store, which extends MemoryStore.\n     *\n     * This store functions like a MemoryStore except it periodically persists\n     * the contents of the store to an IndexedDB backend.\n     *\n     * All data is still kept in-memory but can be loaded from disk by calling\n     * <code>startup()</code>. This can make startup times quicker as a complete\n     * sync from the server is not required. This does not reduce memory usage as all\n     * the data is eagerly fetched when <code>startup()</code> is called.\n     * <pre>\n     * let opts = { indexedDB: window.indexedDB, localStorage: window.localStorage };\n     * let store = new IndexedDBStore(opts);\n     * await store.startup(); // load from indexed db\n     * let client = sdk.createClient({\n     *     store: store,\n     * });\n     * client.startClient();\n     * client.on(\"sync\", function(state, prevState, data) {\n     *     if (state === \"PREPARED\") {\n     *         console.log(\"Started up, now with go faster stripes!\");\n     *     }\n     * });\n     * </pre>\n     *\n     * @constructor\n     * @extends MemoryStore\n     * @param {Object} opts Options object.\n     * @param {Object} opts.indexedDB The Indexed DB interface e.g.\n     * <code>window.indexedDB</code>\n     * @param {string=} opts.dbName Optional database name. The same name must be used\n     * to open the same database.\n     * @param {string=} opts.workerScript Optional URL to a script to invoke a web\n     * worker with to run IndexedDB queries on the web worker. The IndexedDbStoreWorker\n     * class is provided for this purpose and requires the application to provide a\n     * trivial wrapper script around it.\n     * @param {Object=} opts.workerApi The webWorker API object. If omitted, the global Worker\n     * object will be used if it exists.\n     * @prop {IndexedDBStoreBackend} backend The backend instance. Call through to\n     * this API if you need to perform specific indexeddb actions like deleting the\n     * database.\n     */\n    constructor(opts: IOpts) {\n        super(opts);\n\n        if (!opts.indexedDB) {\n            throw new Error('Missing required option: indexedDB');\n        }\n\n        if (opts.workerFactory) {\n            this.backend = new RemoteIndexedDBStoreBackend(opts.workerFactory, opts.dbName);\n        } else {\n            this.backend = new LocalIndexedDBStoreBackend(opts.indexedDB, opts.dbName);\n        }\n    }\n\n    public on = this.emitter.on.bind(this.emitter);\n\n    /**\n     * @return {Promise} Resolved when loaded from indexed db.\n     */\n    public startup(): Promise<void> {\n        if (this.startedUp) {\n            logger.log(`IndexedDBStore.startup: already started`);\n            return Promise.resolve();\n        }\n\n        logger.log(`IndexedDBStore.startup: connecting to backend`);\n        return this.backend.connect().then(() => {\n            logger.log(`IndexedDBStore.startup: loading presence events`);\n            return this.backend.getUserPresenceEvents();\n        }).then((userPresenceEvents) => {\n            logger.log(`IndexedDBStore.startup: processing presence events`);\n            userPresenceEvents.forEach(([userId, rawEvent]) => {\n                const u = new User(userId);\n                if (rawEvent) {\n                    u.setPresenceEvent(new MatrixEvent(rawEvent));\n                }\n                this.userModifiedMap[u.userId] = u.getLastModifiedTime();\n                this.storeUser(u);\n            });\n        });\n    }\n\n    /**\n     * @return {Promise} Resolves with a sync response to restore the\n     * client state to where it was at the last save, or null if there\n     * is no saved sync data.\n     */\n    public getSavedSync = this.degradable((): Promise<ISavedSync> => {\n        return this.backend.getSavedSync();\n    }, \"getSavedSync\");\n\n    /** @return {Promise<boolean>} whether or not the database was newly created in this session. */\n    public isNewlyCreated = this.degradable((): Promise<boolean> => {\n        return this.backend.isNewlyCreated();\n    }, \"isNewlyCreated\");\n\n    /**\n     * @return {Promise} If there is a saved sync, the nextBatch token\n     * for this sync, otherwise null.\n     */\n    public getSavedSyncToken = this.degradable((): Promise<string | null> => {\n        return this.backend.getNextBatchToken();\n    }, \"getSavedSyncToken\");\n\n    /**\n     * Delete all data from this store.\n     * @return {Promise} Resolves if the data was deleted from the database.\n     */\n    public deleteAllData = this.degradable((): Promise<void> => {\n        super.deleteAllData();\n        return this.backend.clearDatabase().then(() => {\n            logger.log(\"Deleted indexeddb data.\");\n        }, (err) => {\n            logger.error(`Failed to delete indexeddb data: ${err}`);\n            throw err;\n        });\n    });\n\n    /**\n     * Whether this store would like to save its data\n     * Note that obviously whether the store wants to save or\n     * not could change between calling this function and calling\n     * save().\n     *\n     * @return {boolean} True if calling save() will actually save\n     *     (at the time this function is called).\n     */\n    public wantsSave(): boolean {\n        const now = Date.now();\n        return now - this.syncTs > WRITE_DELAY_MS;\n    }\n\n    /**\n     * Possibly write data to the database.\n     *\n     * @param {boolean} force True to force a save to happen\n     * @return {Promise} Promise resolves after the write completes\n     *     (or immediately if no write is performed)\n     */\n    public save(force = false): Promise<void> {\n        if (force || this.wantsSave()) {\n            return this.reallySave();\n        }\n        return Promise.resolve();\n    }\n\n    private reallySave = this.degradable((): Promise<void> => {\n        this.syncTs = Date.now(); // set now to guard against multi-writes\n\n        // work out changed users (this doesn't handle deletions but you\n        // can't 'delete' users as they are just presence events).\n        const userTuples: [userId: string, presenceEvent: Partial<IEvent>][] = [];\n        for (const u of this.getUsers()) {\n            if (this.userModifiedMap[u.userId] === u.getLastModifiedTime()) continue;\n            if (!u.events.presence) continue;\n\n            userTuples.push([u.userId, u.events.presence.event]);\n\n            // note that we've saved this version of the user\n            this.userModifiedMap[u.userId] = u.getLastModifiedTime();\n        }\n\n        return this.backend.syncToDatabase(userTuples);\n    });\n\n    public setSyncData = this.degradable((syncData: ISyncResponse): Promise<void> => {\n        return this.backend.setSyncData(syncData);\n    }, \"setSyncData\");\n\n    /**\n     * Returns the out-of-band membership events for this room that\n     * were previously loaded.\n     * @param {string} roomId\n     * @returns {event[]} the events, potentially an empty array if OOB loading didn't yield any new members\n     * @returns {null} in case the members for this room haven't been stored yet\n     */\n    public getOutOfBandMembers = this.degradable((roomId: string): Promise<IEvent[]> => {\n        return this.backend.getOutOfBandMembers(roomId);\n    }, \"getOutOfBandMembers\");\n\n    /**\n     * Stores the out-of-band membership events for this room. Note that\n     * it still makes sense to store an empty array as the OOB status for the room is\n     * marked as fetched, and getOutOfBandMembers will return an empty array instead of null\n     * @param {string} roomId\n     * @param {event[]} membershipEvents the membership events to store\n     * @returns {Promise} when all members have been stored\n     */\n    public setOutOfBandMembers = this.degradable((roomId: string, membershipEvents: IEvent[]): Promise<void> => {\n        super.setOutOfBandMembers(roomId, membershipEvents);\n        return this.backend.setOutOfBandMembers(roomId, membershipEvents);\n    }, \"setOutOfBandMembers\");\n\n    public clearOutOfBandMembers = this.degradable((roomId: string) => {\n        super.clearOutOfBandMembers(roomId);\n        return this.backend.clearOutOfBandMembers(roomId);\n    }, \"clearOutOfBandMembers\");\n\n    public getClientOptions = this.degradable((): Promise<object> => {\n        return this.backend.getClientOptions();\n    }, \"getClientOptions\");\n\n    public storeClientOptions = this.degradable((options: object): Promise<void> => {\n        super.storeClientOptions(options);\n        return this.backend.storeClientOptions(options);\n    }, \"storeClientOptions\");\n\n    /**\n     * All member functions of `IndexedDBStore` that access the backend use this wrapper to\n     * watch for failures after initial store startup, including `QuotaExceededError` as\n     * free disk space changes, etc.\n     *\n     * When IndexedDB fails via any of these paths, we degrade this back to a `MemoryStore`\n     * in place so that the current operation and all future ones are in-memory only.\n     *\n     * @param {Function} func The degradable work to do.\n     * @param {String} fallback The method name for fallback.\n     * @returns {Function} A wrapped member function.\n     */\n    private degradable<A extends Array<any>, R = void>(\n        func: DegradableFn<A, R>,\n        fallback?: string,\n    ): DegradableFn<A, R> {\n        const fallbackFn = super[fallback];\n\n        return async (...args) => {\n            try {\n                return func.call(this, ...args);\n            } catch (e) {\n                logger.error(\"IndexedDBStore failure, degrading to MemoryStore\", e);\n                this.emitter.emit(\"degraded\", e);\n                try {\n                    // We try to delete IndexedDB after degrading since this store is only a\n                    // cache (the app will still function correctly without the data).\n                    // It's possible that deleting repair IndexedDB for the next app load,\n                    // potentially by making a little more space available.\n                    logger.log(\"IndexedDBStore trying to delete degraded data\");\n                    await this.backend.clearDatabase();\n                    logger.log(\"IndexedDBStore delete after degrading succeeded\");\n                } catch (e) {\n                    logger.warn(\"IndexedDBStore delete after degrading failed\", e);\n                }\n                // Degrade the store from being an instance of `IndexedDBStore` to instead be\n                // an instance of `MemoryStore` so that future API calls use the memory path\n                // directly and skip IndexedDB entirely. This should be safe as\n                // `IndexedDBStore` already extends from `MemoryStore`, so we are making the\n                // store become its parent type in a way. The mutator methods of\n                // `IndexedDBStore` also maintain the state that `MemoryStore` uses (many are\n                // not overridden at all).\n                if (fallbackFn) {\n                    return fallbackFn(...args);\n                }\n            }\n        };\n    }\n}\n\ntype DegradableFn<A extends Array<any>, T> = (...args: A) => Promise<T>;\n",
    "/*\nCopyright 2015 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * This is an internal module. See {@link MemoryStore} for the public class.\n * @module store/memory\n */\n\nimport { EventType } from \"../@types/event\";\nimport { Room } from \"../models/room\";\nimport { User } from \"../models/user\";\nimport { IEvent, MatrixEvent } from \"../models/event\";\nimport { RoomState, RoomStateEvent } from \"../models/room-state\";\nimport { RoomMember } from \"../models/room-member\";\nimport { Filter } from \"../filter\";\nimport { ISavedSync, IStore } from \"./index\";\nimport { RoomSummary } from \"../models/room-summary\";\nimport { ISyncResponse } from \"../sync-accumulator\";\n\nfunction isValidFilterId(filterId: string): boolean {\n    const isValidStr = typeof filterId === \"string\" &&\n        !!filterId &&\n        filterId !== \"undefined\" && // exclude these as we've serialized undefined in localStorage before\n        filterId !== \"null\";\n\n    return isValidStr || typeof filterId === \"number\";\n}\n\nexport interface IOpts {\n    localStorage?: Storage;\n}\n\n/**\n * Construct a new in-memory data store for the Matrix Client.\n * @constructor\n * @param {Object=} opts Config options\n * @param {LocalStorage} opts.localStorage The local storage instance to persist\n * some forms of data such as tokens. Rooms will NOT be stored.\n */\nexport class MemoryStore implements IStore {\n    private rooms: Record<string, Room> = {}; // roomId: Room\n    private users: Record<string, User> = {}; // userId: User\n    private syncToken: string = null;\n    // userId: {\n    //    filterId: Filter\n    // }\n    private filters: Record<string, Record<string, Filter>> = {};\n    public accountData: Record<string, MatrixEvent> = {}; // type : content\n    private readonly localStorage: Storage;\n    private oobMembers: Record<string, IEvent[]> = {}; // roomId: [member events]\n    private clientOptions = {};\n\n    constructor(opts: IOpts = {}) {\n        this.localStorage = opts.localStorage;\n    }\n\n    /**\n     * Retrieve the token to stream from.\n     * @return {string} The token or null.\n     */\n    public getSyncToken(): string | null {\n        return this.syncToken;\n    }\n\n    /** @return {Promise<boolean>} whether or not the database was newly created in this session. */\n    public isNewlyCreated(): Promise<boolean> {\n        return Promise.resolve(true);\n    }\n\n    /**\n     * Set the token to stream from.\n     * @param {string} token The token to stream from.\n     */\n    public setSyncToken(token: string) {\n        this.syncToken = token;\n    }\n\n    /**\n     * Store the given room.\n     * @param {Room} room The room to be stored. All properties must be stored.\n     */\n    public storeRoom(room: Room) {\n        this.rooms[room.roomId] = room;\n        // add listeners for room member changes so we can keep the room member\n        // map up-to-date.\n        room.currentState.on(RoomStateEvent.Members, this.onRoomMember);\n        // add existing members\n        room.currentState.getMembers().forEach((m) => {\n            this.onRoomMember(null, room.currentState, m);\n        });\n    }\n\n    /**\n     * Called when a room member in a room being tracked by this store has been\n     * updated.\n     * @param {MatrixEvent} event\n     * @param {RoomState} state\n     * @param {RoomMember} member\n     */\n    private onRoomMember = (event: MatrixEvent, state: RoomState, member: RoomMember) => {\n        if (member.membership === \"invite\") {\n            // We do NOT add invited members because people love to typo user IDs\n            // which would then show up in these lists (!)\n            return;\n        }\n\n        const user = this.users[member.userId] || new User(member.userId);\n        if (member.name) {\n            user.setDisplayName(member.name);\n            if (member.events.member) {\n                user.setRawDisplayName(\n                    member.events.member.getDirectionalContent().displayname,\n                );\n            }\n        }\n        if (member.events.member && member.events.member.getContent().avatar_url) {\n            user.setAvatarUrl(member.events.member.getContent().avatar_url);\n        }\n        this.users[user.userId] = user;\n    };\n\n    /**\n     * Retrieve a room by its' room ID.\n     * @param {string} roomId The room ID.\n     * @return {Room} The room or null.\n     */\n    public getRoom(roomId: string): Room | null {\n        return this.rooms[roomId] || null;\n    }\n\n    /**\n     * Retrieve all known rooms.\n     * @return {Room[]} A list of rooms, which may be empty.\n     */\n    public getRooms(): Room[] {\n        return Object.values(this.rooms);\n    }\n\n    /**\n     * Permanently delete a room.\n     * @param {string} roomId\n     */\n    public removeRoom(roomId: string): void {\n        if (this.rooms[roomId]) {\n            this.rooms[roomId].currentState.removeListener(RoomStateEvent.Members, this.onRoomMember);\n        }\n        delete this.rooms[roomId];\n    }\n\n    /**\n     * Retrieve a summary of all the rooms.\n     * @return {RoomSummary[]} A summary of each room.\n     */\n    public getRoomSummaries(): RoomSummary[] {\n        return Object.values(this.rooms).map(function(room) {\n            return room.summary;\n        });\n    }\n\n    /**\n     * Store a User.\n     * @param {User} user The user to store.\n     */\n    public storeUser(user: User): void {\n        this.users[user.userId] = user;\n    }\n\n    /**\n     * Retrieve a User by its' user ID.\n     * @param {string} userId The user ID.\n     * @return {User} The user or null.\n     */\n    public getUser(userId: string): User | null {\n        return this.users[userId] || null;\n    }\n\n    /**\n     * Retrieve all known users.\n     * @return {User[]} A list of users, which may be empty.\n     */\n    public getUsers(): User[] {\n        return Object.values(this.users);\n    }\n\n    /**\n     * Retrieve scrollback for this room.\n     * @param {Room} room The matrix room\n     * @param {integer} limit The max number of old events to retrieve.\n     * @return {Array<Object>} An array of objects which will be at most 'limit'\n     * length and at least 0. The objects are the raw event JSON.\n     */\n    public scrollback(room: Room, limit: number): MatrixEvent[] {\n        return [];\n    }\n\n    /**\n     * Store events for a room. The events have already been added to the timeline\n     * @param {Room} room The room to store events for.\n     * @param {Array<MatrixEvent>} events The events to store.\n     * @param {string} token The token associated with these events.\n     * @param {boolean} toStart True if these are paginated results.\n     */\n    public storeEvents(room: Room, events: MatrixEvent[], token: string, toStart: boolean) {\n        // no-op because they've already been added to the room instance.\n    }\n\n    /**\n     * Store a filter.\n     * @param {Filter} filter\n     */\n    public storeFilter(filter: Filter): void {\n        if (!filter) {\n            return;\n        }\n        if (!this.filters[filter.userId]) {\n            this.filters[filter.userId] = {};\n        }\n        this.filters[filter.userId][filter.filterId] = filter;\n    }\n\n    /**\n     * Retrieve a filter.\n     * @param {string} userId\n     * @param {string} filterId\n     * @return {?Filter} A filter or null.\n     */\n    public getFilter(userId: string, filterId: string): Filter | null {\n        if (!this.filters[userId] || !this.filters[userId][filterId]) {\n            return null;\n        }\n        return this.filters[userId][filterId];\n    }\n\n    /**\n     * Retrieve a filter ID with the given name.\n     * @param {string} filterName The filter name.\n     * @return {?string} The filter ID or null.\n     */\n    public getFilterIdByName(filterName: string): string | null {\n        if (!this.localStorage) {\n            return null;\n        }\n        const key = \"mxjssdk_memory_filter_\" + filterName;\n        // XXX Storage.getItem doesn't throw ...\n        // or are we using something different\n        // than window.localStorage in some cases\n        // that does throw?\n        // that would be very naughty\n        try {\n            const value = this.localStorage.getItem(key);\n            if (isValidFilterId(value)) {\n                return value;\n            }\n        } catch (e) {}\n        return null;\n    }\n\n    /**\n     * Set a filter name to ID mapping.\n     * @param {string} filterName\n     * @param {string} filterId\n     */\n    public setFilterIdByName(filterName: string, filterId: string) {\n        if (!this.localStorage) {\n            return;\n        }\n        const key = \"mxjssdk_memory_filter_\" + filterName;\n        try {\n            if (isValidFilterId(filterId)) {\n                this.localStorage.setItem(key, filterId);\n            } else {\n                this.localStorage.removeItem(key);\n            }\n        } catch (e) {}\n    }\n\n    /**\n     * Store user-scoped account data events.\n     * N.B. that account data only allows a single event per type, so multiple\n     * events with the same type will replace each other.\n     * @param {Array<MatrixEvent>} events The events to store.\n     */\n    public storeAccountDataEvents(events: MatrixEvent[]): void {\n        events.forEach((event) => {\n            this.accountData[event.getType()] = event;\n        });\n    }\n\n    /**\n     * Get account data event by event type\n     * @param {string} eventType The event type being queried\n     * @return {?MatrixEvent} the user account_data event of given type, if any\n     */\n    public getAccountData(eventType: EventType | string): MatrixEvent | undefined {\n        return this.accountData[eventType];\n    }\n\n    /**\n     * setSyncData does nothing as there is no backing data store.\n     *\n     * @param {Object} syncData The sync data\n     * @return {Promise} An immediately resolved promise.\n     */\n    public setSyncData(syncData: ISyncResponse): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * We never want to save becase we have nothing to save to.\n     *\n     * @return {boolean} If the store wants to save\n     */\n    public wantsSave(): boolean {\n        return false;\n    }\n\n    /**\n     * Save does nothing as there is no backing data store.\n     * @param {bool} force True to force a save (but the memory\n     *     store still can't save anything)\n     */\n    public save(force: boolean): void {}\n\n    /**\n     * Startup does nothing as this store doesn't require starting up.\n     * @return {Promise} An immediately resolved promise.\n     */\n    public startup(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * @return {Promise} Resolves with a sync response to restore the\n     * client state to where it was at the last save, or null if there\n     * is no saved sync data.\n     */\n    public getSavedSync(): Promise<ISavedSync> {\n        return Promise.resolve(null);\n    }\n\n    /**\n     * @return {Promise} If there is a saved sync, the nextBatch token\n     * for this sync, otherwise null.\n     */\n    public getSavedSyncToken(): Promise<string | null> {\n        return Promise.resolve(null);\n    }\n\n    /**\n     * Delete all data from this store.\n     * @return {Promise} An immediately resolved promise.\n     */\n    public deleteAllData(): Promise<void> {\n        this.rooms = {\n            // roomId: Room\n        };\n        this.users = {\n            // userId: User\n        };\n        this.syncToken = null;\n        this.filters = {\n            // userId: {\n            //    filterId: Filter\n            // }\n        };\n        this.accountData = {\n            // type : content\n        };\n        return Promise.resolve();\n    }\n\n    /**\n     * Returns the out-of-band membership events for this room that\n     * were previously loaded.\n     * @param {string} roomId\n     * @returns {event[]} the events, potentially an empty array if OOB loading didn't yield any new members\n     * @returns {null} in case the members for this room haven't been stored yet\n     */\n    public getOutOfBandMembers(roomId: string): Promise<IEvent[] | null> {\n        return Promise.resolve(this.oobMembers[roomId] || null);\n    }\n\n    /**\n     * Stores the out-of-band membership events for this room. Note that\n     * it still makes sense to store an empty array as the OOB status for the room is\n     * marked as fetched, and getOutOfBandMembers will return an empty array instead of null\n     * @param {string} roomId\n     * @param {event[]} membershipEvents the membership events to store\n     * @returns {Promise} when all members have been stored\n     */\n    public setOutOfBandMembers(roomId: string, membershipEvents: IEvent[]): Promise<void> {\n        this.oobMembers[roomId] = membershipEvents;\n        return Promise.resolve();\n    }\n\n    public clearOutOfBandMembers(roomId: string): Promise<void> {\n        this.oobMembers = {};\n        return Promise.resolve();\n    }\n\n    public getClientOptions(): Promise<object> {\n        return Promise.resolve(this.clientOptions);\n    }\n\n    public storeClientOptions(options: object): Promise<void> {\n        this.clientOptions = Object.assign({}, options);\n        return Promise.resolve();\n    }\n}\n",
    "/*\nCopyright 2015, 2016 OpenMarket Ltd\nCopyright 2017 New Vector Ltd\nCopyright 2018 New Vector Ltd\nCopyright 2019 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * @module store/session/webstorage\n */\n\nimport * as utils from \"../../utils\";\nimport { logger } from '../../logger';\n\nconst DEBUG = false;  // set true to enable console logging.\nconst E2E_PREFIX = \"session.e2e.\";\n\n/**\n * Construct a web storage session store, capable of storing account keys,\n * session keys and access tokens.\n * @constructor\n * @param {WebStorage} webStore A web storage implementation, e.g.\n * 'window.localStorage' or 'window.sessionStorage' or a custom implementation.\n * @throws if the supplied 'store' does not meet the Storage interface of the\n * WebStorage API.\n */\nexport function WebStorageSessionStore(webStore) {\n    this.store = webStore;\n    if (!utils.isFunction(webStore.getItem) ||\n        !utils.isFunction(webStore.setItem) ||\n        !utils.isFunction(webStore.removeItem) ||\n        !utils.isFunction(webStore.key) ||\n        typeof(webStore.length) !== 'number'\n       ) {\n        throw new Error(\n            \"Supplied webStore does not meet the WebStorage API interface\",\n        );\n    }\n}\n\nWebStorageSessionStore.prototype = {\n    /**\n     * Remove the stored end to end account for the logged-in user.\n     */\n    removeEndToEndAccount: function() {\n        this.store.removeItem(KEY_END_TO_END_ACCOUNT);\n    },\n\n    /**\n     * Load the end to end account for the logged-in user.\n     * Note that the end-to-end account is now stored in the\n     * crypto store rather than here: this remains here so\n     * old sessions can be migrated out of the session store.\n     * @return {?string} Base64 encoded account.\n     */\n    getEndToEndAccount: function() {\n        return this.store.getItem(KEY_END_TO_END_ACCOUNT);\n    },\n\n    /**\n     * Retrieves the known devices for all users.\n     * @return {object} A map from user ID to map of device ID to keys for the device.\n     */\n    getAllEndToEndDevices: function() {\n        const prefix = keyEndToEndDevicesForUser('');\n        const devices = {};\n        for (let i = 0; i < this.store.length; ++i) {\n            const key = this.store.key(i);\n            const userId = key.slice(prefix.length);\n            if (key.startsWith(prefix)) devices[userId] = getJsonItem(this.store, key);\n        }\n        return devices;\n    },\n\n    getEndToEndDeviceTrackingStatus: function() {\n        return getJsonItem(this.store, KEY_END_TO_END_DEVICE_LIST_TRACKING_STATUS);\n    },\n\n    /**\n     * Get the sync token corresponding to the device list.\n     *\n     * @return {String?} token\n     */\n    getEndToEndDeviceSyncToken: function() {\n        return getJsonItem(this.store, KEY_END_TO_END_DEVICE_SYNC_TOKEN);\n    },\n\n    /**\n     * Removes all end to end device data from the store\n     */\n    removeEndToEndDeviceData: function() {\n        removeByPrefix(this.store, keyEndToEndDevicesForUser(''));\n        removeByPrefix(this.store, KEY_END_TO_END_DEVICE_LIST_TRACKING_STATUS);\n        removeByPrefix(this.store, KEY_END_TO_END_DEVICE_SYNC_TOKEN);\n    },\n\n    /**\n     * Retrieve the end-to-end sessions between the logged-in user and another\n     * device.\n     * @param {string} deviceKey The public key of the other device.\n     * @return {object} A map from sessionId to Base64 end-to-end session.\n     */\n    getEndToEndSessions: function(deviceKey) {\n        return getJsonItem(this.store, keyEndToEndSessions(deviceKey));\n    },\n\n    /**\n     * Retrieve all end-to-end sessions between the logged-in user and other\n     * devices.\n     * @return {object} A map of {deviceKey -> {sessionId -> session pickle}}\n     */\n    getAllEndToEndSessions: function() {\n        const deviceKeys = getKeysWithPrefix(this.store, keyEndToEndSessions(''));\n        const results = {};\n        for (const k of deviceKeys) {\n            const unprefixedKey = k.slice(keyEndToEndSessions('').length);\n            results[unprefixedKey] = getJsonItem(this.store, k);\n        }\n        return results;\n    },\n\n    /**\n     * Remove all end-to-end sessions from the store\n     * This is used after migrating sessions awat from the sessions store.\n     */\n    removeAllEndToEndSessions: function() {\n        removeByPrefix(this.store, keyEndToEndSessions(''));\n    },\n\n    /**\n     * Retrieve a list of all known inbound group sessions\n     *\n     * @return {{senderKey: string, sessionId: string}}\n     */\n    getAllEndToEndInboundGroupSessionKeys: function() {\n        const prefix = E2E_PREFIX + 'inboundgroupsessions/';\n        const result = [];\n        for (let i = 0; i < this.store.length; i++) {\n            const key = this.store.key(i);\n            if (!key.startsWith(prefix)) {\n                continue;\n            }\n            // we can't use split, as the components we are trying to split out\n            // might themselves contain '/' characters. We rely on the\n            // senderKey being a (32-byte) curve25519 key, base64-encoded\n            // (hence 43 characters long).\n\n            result.push({\n                senderKey: key.slice(prefix.length, prefix.length + 43),\n                sessionId: key.slice(prefix.length + 44),\n            });\n        }\n        return result;\n    },\n\n    getEndToEndInboundGroupSession: function(senderKey, sessionId) {\n        const key = keyEndToEndInboundGroupSession(senderKey, sessionId);\n        return this.store.getItem(key);\n    },\n\n    removeAllEndToEndInboundGroupSessions: function() {\n        removeByPrefix(this.store, E2E_PREFIX + 'inboundgroupsessions/');\n    },\n\n    /**\n     * Get the end-to-end state for all rooms\n     * @return {object} roomId -> object with the end-to-end info for the room.\n     */\n    getAllEndToEndRooms: function() {\n        const roomKeys = getKeysWithPrefix(this.store, keyEndToEndRoom(''));\n        const results = {};\n        for (const k of roomKeys) {\n            const unprefixedKey = k.slice(keyEndToEndRoom('').length);\n            results[unprefixedKey] = getJsonItem(this.store, k);\n        }\n        return results;\n    },\n\n    removeAllEndToEndRooms: function() {\n        removeByPrefix(this.store, keyEndToEndRoom(''));\n    },\n\n    setLocalTrustedBackupPubKey: function(pubkey) {\n        this.store.setItem(KEY_END_TO_END_TRUSTED_BACKUP_PUBKEY, pubkey);\n    },\n\n    // XXX: This store is deprecated really, but added this as a temporary\n    // thing until cross-signing lands.\n    getLocalTrustedBackupPubKey: function() {\n        return this.store.getItem(KEY_END_TO_END_TRUSTED_BACKUP_PUBKEY);\n    },\n};\n\nconst KEY_END_TO_END_ACCOUNT = E2E_PREFIX + \"account\";\nconst KEY_END_TO_END_DEVICE_SYNC_TOKEN = E2E_PREFIX + \"device_sync_token\";\nconst KEY_END_TO_END_DEVICE_LIST_TRACKING_STATUS = E2E_PREFIX + \"device_tracking\";\nconst KEY_END_TO_END_TRUSTED_BACKUP_PUBKEY = E2E_PREFIX + \"trusted_backup_pubkey\";\n\nfunction keyEndToEndDevicesForUser(userId) {\n    return E2E_PREFIX + \"devices/\" + userId;\n}\n\nfunction keyEndToEndSessions(deviceKey) {\n    return E2E_PREFIX + \"sessions/\" + deviceKey;\n}\n\nfunction keyEndToEndInboundGroupSession(senderKey, sessionId) {\n    return E2E_PREFIX + \"inboundgroupsessions/\" + senderKey + \"/\" + sessionId;\n}\n\nfunction keyEndToEndRoom(roomId) {\n    return E2E_PREFIX + \"rooms/\" + roomId;\n}\n\nfunction getJsonItem(store, key) {\n    try {\n        // if the key is absent, store.getItem() returns null, and\n        // JSON.parse(null) === null, so this returns null.\n        return JSON.parse(store.getItem(key));\n    } catch (e) {\n        debuglog(\"Failed to get key %s: %s\", key, e);\n        debuglog(e.stack);\n    }\n    return null;\n}\n\nfunction getKeysWithPrefix(store, prefix) {\n    const results = [];\n    for (let i = 0; i < store.length; ++i) {\n        const key = store.key(i);\n        if (key.startsWith(prefix)) results.push(key);\n    }\n    return results;\n}\n\nfunction removeByPrefix(store, prefix) {\n    const toRemove = [];\n    for (let i = 0; i < store.length; ++i) {\n        const key = store.key(i);\n        if (key.startsWith(prefix)) toRemove.push(key);\n    }\n    for (const key of toRemove) {\n        store.removeItem(key);\n    }\n}\n\nfunction debuglog(...args) {\n    if (DEBUG) {\n        logger.log(...args);\n    }\n}\n",
    "/*\nCopyright 2015 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * This is an internal module.\n * @module store/stub\n */\n\nimport { EventType } from \"../@types/event\";\nimport { Room } from \"../models/room\";\nimport { User } from \"../models/user\";\nimport { IEvent, MatrixEvent } from \"../models/event\";\nimport { Filter } from \"../filter\";\nimport { ISavedSync, IStore } from \"./index\";\nimport { RoomSummary } from \"../models/room-summary\";\nimport { ISyncResponse } from \"../sync-accumulator\";\n\n/**\n * Construct a stub store. This does no-ops on most store methods.\n * @constructor\n */\nexport class StubStore implements IStore {\n    public readonly accountData = {}; // stub\n    private fromToken: string = null;\n\n    /** @return {Promise<boolean>} whether or not the database was newly created in this session. */\n    public isNewlyCreated(): Promise<boolean> {\n        return Promise.resolve(true);\n    }\n\n    /**\n     * Get the sync token.\n     * @return {string}\n     */\n    public getSyncToken(): string | null {\n        return this.fromToken;\n    }\n\n    /**\n     * Set the sync token.\n     * @param {string} token\n     */\n    public setSyncToken(token: string) {\n        this.fromToken = token;\n    }\n\n    /**\n     * No-op.\n     * @param {Room} room\n     */\n    public storeRoom(room: Room) {}\n\n    /**\n     * No-op.\n     * @param {string} roomId\n     * @return {null}\n     */\n    public getRoom(roomId: string): Room | null {\n        return null;\n    }\n\n    /**\n     * No-op.\n     * @return {Array} An empty array.\n     */\n    public getRooms(): Room[] {\n        return [];\n    }\n\n    /**\n     * Permanently delete a room.\n     * @param {string} roomId\n     */\n    public removeRoom(roomId: string) {\n        return;\n    }\n\n    /**\n     * No-op.\n     * @return {Array} An empty array.\n     */\n    public getRoomSummaries(): RoomSummary[] {\n        return [];\n    }\n\n    /**\n     * No-op.\n     * @param {User} user\n     */\n    public storeUser(user: User) {}\n\n    /**\n     * No-op.\n     * @param {string} userId\n     * @return {null}\n     */\n    public getUser(userId: string): User | null {\n        return null;\n    }\n\n    /**\n     * No-op.\n     * @return {User[]}\n     */\n    public getUsers(): User[] {\n        return [];\n    }\n\n    /**\n     * No-op.\n     * @param {Room} room\n     * @param {integer} limit\n     * @return {Array}\n     */\n    public scrollback(room: Room, limit: number): MatrixEvent[] {\n        return [];\n    }\n\n    /**\n     * Store events for a room.\n     * @param {Room} room The room to store events for.\n     * @param {Array<MatrixEvent>} events The events to store.\n     * @param {string} token The token associated with these events.\n     * @param {boolean} toStart True if these are paginated results.\n     */\n    public storeEvents(room: Room, events: MatrixEvent[], token: string, toStart: boolean) {}\n\n    /**\n     * Store a filter.\n     * @param {Filter} filter\n     */\n    public storeFilter(filter: Filter) {}\n\n    /**\n     * Retrieve a filter.\n     * @param {string} userId\n     * @param {string} filterId\n     * @return {?Filter} A filter or null.\n     */\n    public getFilter(userId: string, filterId: string): Filter | null {\n        return null;\n    }\n\n    /**\n     * Retrieve a filter ID with the given name.\n     * @param {string} filterName The filter name.\n     * @return {?string} The filter ID or null.\n     */\n    public getFilterIdByName(filterName: string): string | null {\n        return null;\n    }\n\n    /**\n     * Set a filter name to ID mapping.\n     * @param {string} filterName\n     * @param {string} filterId\n     */\n    public setFilterIdByName(filterName: string, filterId: string) {}\n\n    /**\n     * Store user-scoped account data events\n     * @param {Array<MatrixEvent>} events The events to store.\n     */\n    public storeAccountDataEvents(events: MatrixEvent[]) {}\n\n    /**\n     * Get account data event by event type\n     * @param {string} eventType The event type being queried\n     */\n    public getAccountData(eventType: EventType | string): MatrixEvent | undefined {\n        return undefined;\n    }\n\n    /**\n     * setSyncData does nothing as there is no backing data store.\n     *\n     * @param {Object} syncData The sync data\n     * @return {Promise} An immediately resolved promise.\n     */\n    public setSyncData(syncData: ISyncResponse): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * We never want to save because we have nothing to save to.\n     *\n     * @return {boolean} If the store wants to save\n     */\n    public wantsSave(): boolean {\n        return false;\n    }\n\n    /**\n     * Save does nothing as there is no backing data store.\n     */\n    public save() {}\n\n    /**\n     * Startup does nothing.\n     * @return {Promise} An immediately resolved promise.\n     */\n    public startup(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * @return {Promise} Resolves with a sync response to restore the\n     * client state to where it was at the last save, or null if there\n     * is no saved sync data.\n     */\n    public getSavedSync(): Promise<ISavedSync> {\n        return Promise.resolve(null);\n    }\n\n    /**\n     * @return {Promise} If there is a saved sync, the nextBatch token\n     * for this sync, otherwise null.\n     */\n    public getSavedSyncToken(): Promise<string | null> {\n        return Promise.resolve(null);\n    }\n\n    /**\n     * Delete all data from this store. Does nothing since this store\n     * doesn't store anything.\n     * @return {Promise} An immediately resolved promise.\n     */\n    public deleteAllData(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    public getOutOfBandMembers(): Promise<IEvent[]> {\n        return Promise.resolve(null);\n    }\n\n    public setOutOfBandMembers(roomId: string, membershipEvents: IEvent[]): Promise<void> {\n        return Promise.resolve();\n    }\n\n    public clearOutOfBandMembers(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    public getClientOptions(): Promise<object> {\n        return Promise.resolve({});\n    }\n\n    public storeClientOptions(options: object): Promise<void> {\n        return Promise.resolve();\n    }\n}\n",
    "/*\nCopyright 2017 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * This is an internal module. See {@link SyncAccumulator} for the public class.\n * @module sync-accumulator\n */\n\nimport { logger } from './logger';\nimport { deepCopy } from \"./utils\";\nimport { IContent, IUnsigned } from \"./models/event\";\nimport { IRoomSummary } from \"./models/room-summary\";\nimport { EventType } from \"./@types/event\";\n\ninterface IOpts {\n    maxTimelineEntries?: number;\n}\n\nexport interface IMinimalEvent {\n    content: IContent;\n    type: EventType | string;\n    unsigned?: IUnsigned;\n}\n\nexport interface IEphemeral {\n    events: IMinimalEvent[];\n}\n\n/* eslint-disable camelcase */\ninterface IUnreadNotificationCounts {\n    highlight_count?: number;\n    notification_count?: number;\n}\n\nexport interface IRoomEvent extends IMinimalEvent {\n    event_id: string;\n    sender: string;\n    origin_server_ts: number;\n    unsigned?: IUnsigned;\n    /** @deprecated - legacy field */\n    age?: number;\n}\n\nexport interface IStateEvent extends IRoomEvent {\n    prev_content?: IContent;\n    state_key: string;\n}\n\ninterface IState {\n    events: IStateEvent[];\n}\n\nexport interface ITimeline {\n    events: Array<IRoomEvent | IStateEvent>;\n    limited?: boolean;\n    prev_batch: string;\n}\n\nexport interface IJoinedRoom {\n    summary: IRoomSummary;\n    state: IState;\n    timeline: ITimeline;\n    ephemeral: IEphemeral;\n    account_data: IAccountData;\n    unread_notifications: IUnreadNotificationCounts;\n}\n\nexport interface IStrippedState {\n    content: IContent;\n    state_key: string;\n    type: EventType | string;\n    sender: string;\n}\n\nexport interface IInviteState {\n    events: IStrippedState[];\n}\n\nexport interface IInvitedRoom {\n    invite_state: IInviteState;\n}\n\nexport interface ILeftRoom {\n    state: IState;\n    timeline: ITimeline;\n    account_data: IAccountData;\n}\n\nexport interface IRooms {\n    [Category.Join]: Record<string, IJoinedRoom>;\n    [Category.Invite]: Record<string, IInvitedRoom>;\n    [Category.Leave]: Record<string, ILeftRoom>;\n}\n\ninterface IPresence {\n    events: IMinimalEvent[];\n}\n\ninterface IAccountData {\n    events: IMinimalEvent[];\n}\n\ninterface IToDeviceEvent {\n    content: IContent;\n    sender: string;\n    type: string;\n}\n\ninterface IToDevice {\n    events: IToDeviceEvent[];\n}\n\ninterface IDeviceLists {\n    changed: string[];\n    left: string[];\n}\n\nexport interface ISyncResponse {\n    next_batch: string;\n    rooms: IRooms;\n    presence?: IPresence;\n    account_data: IAccountData;\n    to_device?: IToDevice;\n    device_lists?: IDeviceLists;\n    device_one_time_keys_count?: Record<string, number>;\n}\n/* eslint-enable camelcase */\n\nexport enum Category {\n    Invite = \"invite\",\n    Leave = \"leave\",\n    Join = \"join\",\n}\n\ninterface IRoom {\n    _currentState: { [eventType: string]: { [stateKey: string]: IStateEvent } };\n    _timeline: {\n        event: IRoomEvent | IStateEvent;\n        token: string | null;\n    }[];\n    _summary: Partial<IRoomSummary>;\n    _accountData: { [eventType: string]: IMinimalEvent };\n    _unreadNotifications: Partial<IUnreadNotificationCounts>;\n    _readReceipts: {\n        [userId: string]: {\n            data: IMinimalEvent;\n            eventId: string;\n        };\n    };\n}\n\nexport interface ISyncData {\n    nextBatch: string;\n    accountData: IMinimalEvent[];\n    roomsData: IRooms;\n}\n\n/**\n * The purpose of this class is to accumulate /sync responses such that a\n * complete \"initial\" JSON response can be returned which accurately represents\n * the sum total of the /sync responses accumulated to date. It only handles\n * room data: that is, everything under the \"rooms\" top-level key.\n *\n * This class is used when persisting room data so a complete /sync response can\n * be loaded from disk and incremental syncs can be performed on the server,\n * rather than asking the server to do an initial sync on startup.\n */\nexport class SyncAccumulator {\n    private accountData: Record<string, IMinimalEvent> = {}; // $event_type: Object\n    private inviteRooms: Record<string, IInvitedRoom> = {}; // $roomId: { ... sync 'invite' json data ... }\n    private joinRooms: { [roomId: string]: IRoom } = {};\n    // the /sync token which corresponds to the last time rooms were\n    // accumulated. We remember this so that any caller can obtain a\n    // coherent /sync response and know at what point they should be\n    // streaming from without losing events.\n    private nextBatch: string = null;\n\n    /**\n     * @param {Object} opts\n     * @param {Number=} opts.maxTimelineEntries The ideal maximum number of\n     * timeline entries to keep in the sync response. This is best-effort, as\n     * clients do not always have a back-pagination token for each event, so\n     * it's possible there may be slightly *less* than this value. There will\n     * never be more. This cannot be 0 or else it makes it impossible to scroll\n     * back in a room. Default: 50.\n     */\n    constructor(private readonly opts: IOpts = {}) {\n        this.opts.maxTimelineEntries = this.opts.maxTimelineEntries || 50;\n    }\n\n    public accumulate(syncResponse: ISyncResponse, fromDatabase = false): void {\n        this.accumulateRooms(syncResponse, fromDatabase);\n        this.accumulateAccountData(syncResponse);\n        this.nextBatch = syncResponse.next_batch;\n    }\n\n    private accumulateAccountData(syncResponse: ISyncResponse): void {\n        if (!syncResponse.account_data || !syncResponse.account_data.events) {\n            return;\n        }\n        // Clobbers based on event type.\n        syncResponse.account_data.events.forEach((e) => {\n            this.accountData[e.type] = e;\n        });\n    }\n\n    /**\n     * Accumulate incremental /sync room data.\n     * @param {Object} syncResponse the complete /sync JSON\n     * @param {boolean} fromDatabase True if the sync response is one saved to the database\n     */\n    private accumulateRooms(syncResponse: ISyncResponse, fromDatabase = false): void {\n        if (!syncResponse.rooms) {\n            return;\n        }\n        if (syncResponse.rooms.invite) {\n            Object.keys(syncResponse.rooms.invite).forEach((roomId) => {\n                this.accumulateRoom(roomId, Category.Invite, syncResponse.rooms.invite[roomId], fromDatabase);\n            });\n        }\n        if (syncResponse.rooms.join) {\n            Object.keys(syncResponse.rooms.join).forEach((roomId) => {\n                this.accumulateRoom(roomId, Category.Join, syncResponse.rooms.join[roomId], fromDatabase);\n            });\n        }\n        if (syncResponse.rooms.leave) {\n            Object.keys(syncResponse.rooms.leave).forEach((roomId) => {\n                this.accumulateRoom(roomId, Category.Leave, syncResponse.rooms.leave[roomId], fromDatabase);\n            });\n        }\n    }\n\n    private accumulateRoom(roomId: string, category: Category.Invite, data: IInvitedRoom, fromDatabase: boolean): void;\n    private accumulateRoom(roomId: string, category: Category.Join, data: IJoinedRoom, fromDatabase: boolean): void;\n    private accumulateRoom(roomId: string, category: Category.Leave, data: ILeftRoom, fromDatabase: boolean): void;\n    private accumulateRoom(roomId: string, category: Category, data: any, fromDatabase = false): void {\n        // Valid /sync state transitions\n        //       +--------+ <======+            1: Accept an invite\n        //   +== | INVITE |        | (5)        2: Leave a room\n        //   |   +--------+ =====+ |            3: Join a public room previously\n        //   |(1)            (4) | |               left (handle as if new room)\n        //   V         (2)       V |            4: Reject an invite\n        // +------+ ========> +--------+         5: Invite to a room previously\n        // | JOIN |    (3)    | LEAVE* |            left (handle as if new room)\n        // +------+ <======== +--------+\n        //\n        // * equivalent to \"no state\"\n        switch (category) {\n            case Category.Invite: // (5)\n                this.accumulateInviteState(roomId, data as IInvitedRoom);\n                break;\n\n            case Category.Join:\n                if (this.inviteRooms[roomId]) { // (1)\n                    // was previously invite, now join. We expect /sync to give\n                    // the entire state and timeline on 'join', so delete previous\n                    // invite state\n                    delete this.inviteRooms[roomId];\n                }\n                // (3)\n                this.accumulateJoinState(roomId, data as IJoinedRoom, fromDatabase);\n                break;\n\n            case Category.Leave:\n                if (this.inviteRooms[roomId]) { // (4)\n                    delete this.inviteRooms[roomId];\n                } else { // (2)\n                    delete this.joinRooms[roomId];\n                }\n                break;\n\n            default:\n                logger.error(\"Unknown cateogory: \", category);\n        }\n    }\n\n    private accumulateInviteState(roomId: string, data: IInvitedRoom): void {\n        if (!data.invite_state || !data.invite_state.events) { // no new data\n            return;\n        }\n        if (!this.inviteRooms[roomId]) {\n            this.inviteRooms[roomId] = {\n                invite_state: data.invite_state,\n            };\n            return;\n        }\n        // accumulate extra keys for invite->invite transitions\n        // clobber based on event type / state key\n        // We expect invite_state to be small, so just loop over the events\n        const currentData = this.inviteRooms[roomId];\n        data.invite_state.events.forEach((e) => {\n            let hasAdded = false;\n            for (let i = 0; i < currentData.invite_state.events.length; i++) {\n                const current = currentData.invite_state.events[i];\n                if (current.type === e.type && current.state_key == e.state_key) {\n                    currentData.invite_state.events[i] = e; // update\n                    hasAdded = true;\n                }\n            }\n            if (!hasAdded) {\n                currentData.invite_state.events.push(e);\n            }\n        });\n    }\n\n    // Accumulate timeline and state events in a room.\n    private accumulateJoinState(roomId: string, data: IJoinedRoom, fromDatabase = false): void {\n        // We expect this function to be called a lot (every /sync) so we want\n        // this to be fast. /sync stores events in an array but we often want\n        // to clobber based on type/state_key. Rather than convert arrays to\n        // maps all the time, just keep private maps which contain\n        // the actual current accumulated sync state, and array-ify it when\n        // getJSON() is called.\n\n        // State resolution:\n        // The 'state' key is the delta from the previous sync (or start of time\n        // if no token was supplied), to the START of the timeline. To obtain\n        // the current state, we need to \"roll forward\" state by reading the\n        // timeline. We want to store the current state so we can drop events\n        // out the end of the timeline based on opts.maxTimelineEntries.\n        //\n        //      'state'     'timeline'     current state\n        // |-------x<======================>x\n        //          T   I   M   E\n        //\n        // When getJSON() is called, we 'roll back' the current state by the\n        // number of entries in the timeline to work out what 'state' should be.\n\n        // Back-pagination:\n        // On an initial /sync, the server provides a back-pagination token for\n        // the start of the timeline. When /sync deltas come down, they also\n        // include back-pagination tokens for the start of the timeline. This\n        // means not all events in the timeline have back-pagination tokens, as\n        // it is only the ones at the START of the timeline which have them.\n        // In order for us to have a valid timeline (and back-pagination token\n        // to match), we need to make sure that when we remove old timeline\n        // events, that we roll forward to an event which has a back-pagination\n        // token. This means we can't keep a strict sliding-window based on\n        // opts.maxTimelineEntries, and we may have a few less. We should never\n        // have more though, provided that the /sync limit is less than or equal\n        // to opts.maxTimelineEntries.\n\n        if (!this.joinRooms[roomId]) {\n            // Create truly empty objects so event types of 'hasOwnProperty' and co\n            // don't cause this code to break.\n            this.joinRooms[roomId] = {\n                _currentState: Object.create(null),\n                _timeline: [],\n                _accountData: Object.create(null),\n                _unreadNotifications: {},\n                _summary: {},\n                _readReceipts: {},\n            };\n        }\n        const currentData = this.joinRooms[roomId];\n\n        if (data.account_data && data.account_data.events) {\n            // clobber based on type\n            data.account_data.events.forEach((e) => {\n                currentData._accountData[e.type] = e;\n            });\n        }\n\n        // these probably clobber, spec is unclear.\n        if (data.unread_notifications) {\n            currentData._unreadNotifications = data.unread_notifications;\n        }\n        if (data.summary) {\n            const HEROES_KEY = \"m.heroes\";\n            const INVITED_COUNT_KEY = \"m.invited_member_count\";\n            const JOINED_COUNT_KEY = \"m.joined_member_count\";\n\n            const acc = currentData._summary;\n            const sum = data.summary;\n            acc[HEROES_KEY] = sum[HEROES_KEY] || acc[HEROES_KEY];\n            acc[JOINED_COUNT_KEY] = sum[JOINED_COUNT_KEY] || acc[JOINED_COUNT_KEY];\n            acc[INVITED_COUNT_KEY] = sum[INVITED_COUNT_KEY] || acc[INVITED_COUNT_KEY];\n        }\n\n        if (data.ephemeral && data.ephemeral.events) {\n            data.ephemeral.events.forEach((e) => {\n                // We purposefully do not persist m.typing events.\n                // Technically you could refresh a browser before the timer on a\n                // typing event is up, so it'll look like you aren't typing when\n                // you really still are. However, the alternative is worse. If\n                // we do persist typing events, it will look like people are\n                // typing forever until someone really does start typing (which\n                // will prompt Synapse to send down an actual m.typing event to\n                // clobber the one we persisted).\n                if (e.type !== \"m.receipt\" || !e.content) {\n                    // This means we'll drop unknown ephemeral events but that\n                    // seems okay.\n                    return;\n                }\n                // Handle m.receipt events. They clobber based on:\n                //   (user_id, receipt_type)\n                // but they are keyed in the event as:\n                //   content:{ $event_id: { $receipt_type: { $user_id: {json} }}}\n                // so store them in the former so we can accumulate receipt deltas\n                // quickly and efficiently (we expect a lot of them). Fold the\n                // receipt type into the key name since we only have 1 at the\n                // moment (m.read) and nested JSON objects are slower and more\n                // of a hassle to work with. We'll inflate this back out when\n                // getJSON() is called.\n                Object.keys(e.content).forEach((eventId) => {\n                    if (!e.content[eventId][\"m.read\"]) {\n                        return;\n                    }\n                    Object.keys(e.content[eventId][\"m.read\"]).forEach((userId) => {\n                        // clobber on user ID\n                        currentData._readReceipts[userId] = {\n                            data: e.content[eventId][\"m.read\"][userId],\n                            eventId: eventId,\n                        };\n                    });\n                });\n            });\n        }\n\n        // if we got a limited sync, we need to remove all timeline entries or else\n        // we will have gaps in the timeline.\n        if (data.timeline && data.timeline.limited) {\n            currentData._timeline = [];\n        }\n\n        // Work out the current state. The deltas need to be applied in the order:\n        // - existing state which didn't come down /sync.\n        // - State events under the 'state' key.\n        // - State events in the 'timeline'.\n        if (data.state && data.state.events) {\n            data.state.events.forEach((e) => {\n                setState(currentData._currentState, e);\n            });\n        }\n        if (data.timeline && data.timeline.events) {\n            data.timeline.events.forEach((e, index) => {\n                // this nops if 'e' isn't a state event\n                setState(currentData._currentState, e);\n                // append the event to the timeline. The back-pagination token\n                // corresponds to the first event in the timeline\n                let transformedEvent: IRoomEvent & { _localTs?: number };\n                if (!fromDatabase) {\n                    transformedEvent = Object.assign({}, e);\n                    if (transformedEvent.unsigned !== undefined) {\n                        transformedEvent.unsigned = Object.assign({}, transformedEvent.unsigned);\n                    }\n                    const age = e.unsigned ? e.unsigned.age : e.age;\n                    if (age !== undefined) transformedEvent._localTs = Date.now() - age;\n                } else {\n                    transformedEvent = e;\n                }\n\n                currentData._timeline.push({\n                    event: transformedEvent,\n                    token: index === 0 ? data.timeline.prev_batch : null,\n                });\n            });\n        }\n\n        // attempt to prune the timeline by jumping between events which have\n        // pagination tokens.\n        if (currentData._timeline.length > this.opts.maxTimelineEntries) {\n            const startIndex = (\n                currentData._timeline.length - this.opts.maxTimelineEntries\n            );\n            for (let i = startIndex; i < currentData._timeline.length; i++) {\n                if (currentData._timeline[i].token) {\n                    // keep all events after this, including this one\n                    currentData._timeline = currentData._timeline.slice(\n                        i, currentData._timeline.length,\n                    );\n                    break;\n                }\n            }\n        }\n    }\n\n    /**\n     * Return everything under the 'rooms' key from a /sync response which\n     * represents all room data that should be stored. This should be paired\n     * with the sync token which represents the most recent /sync response\n     * provided to accumulate().\n     * @param {boolean} forDatabase True to generate a sync to be saved to storage\n     * @return {Object} An object with a \"nextBatch\", \"roomsData\" and \"accountData\"\n     * keys.\n     * The \"nextBatch\" key is a string which represents at what point in the\n     * /sync stream the accumulator reached. This token should be used when\n     * restarting a /sync stream at startup. Failure to do so can lead to missing\n     * events. The \"roomsData\" key is an Object which represents the entire\n     * /sync response from the 'rooms' key onwards. The \"accountData\" key is\n     * a list of raw events which represent global account data.\n     */\n    public getJSON(forDatabase = false): ISyncData {\n        const data: IRooms = {\n            join: {},\n            invite: {},\n            // always empty. This is set by /sync when a room was previously\n            // in 'invite' or 'join'. On fresh startup, the client won't know\n            // about any previous room being in 'invite' or 'join' so we can\n            // just omit mentioning it at all, even if it has previously come\n            // down /sync.\n            // The notable exception is when a client is kicked or banned:\n            // we may want to hold onto that room so the client can clearly see\n            // why their room has disappeared. We don't persist it though because\n            // it is unclear *when* we can safely remove the room from the DB.\n            // Instead, we assume that if you're loading from the DB, you've\n            // refreshed the page, which means you've seen the kick/ban already.\n            leave: {},\n        };\n        Object.keys(this.inviteRooms).forEach((roomId) => {\n            data.invite[roomId] = this.inviteRooms[roomId];\n        });\n        Object.keys(this.joinRooms).forEach((roomId) => {\n            const roomData = this.joinRooms[roomId];\n            const roomJson = {\n                ephemeral: { events: [] },\n                account_data: { events: [] },\n                state: { events: [] },\n                timeline: {\n                    events: [],\n                    prev_batch: null,\n                },\n                unread_notifications: roomData._unreadNotifications,\n                summary: roomData._summary as IRoomSummary,\n            };\n            // Add account data\n            Object.keys(roomData._accountData).forEach((evType) => {\n                roomJson.account_data.events.push(roomData._accountData[evType]);\n            });\n\n            // Add receipt data\n            const receiptEvent = {\n                type: \"m.receipt\",\n                room_id: roomId,\n                content: {\n                    // $event_id: { \"m.read\": { $user_id: $json } }\n                },\n            };\n            Object.keys(roomData._readReceipts).forEach((userId) => {\n                const receiptData = roomData._readReceipts[userId];\n                if (!receiptEvent.content[receiptData.eventId]) {\n                    receiptEvent.content[receiptData.eventId] = {\n                        \"m.read\": {},\n                    };\n                }\n                receiptEvent.content[receiptData.eventId][\"m.read\"][userId] = (\n                    receiptData.data\n                );\n            });\n            // add only if we have some receipt data\n            if (Object.keys(receiptEvent.content).length > 0) {\n                roomJson.ephemeral.events.push(receiptEvent);\n            }\n\n            // Add timeline data\n            roomData._timeline.forEach((msgData) => {\n                if (!roomJson.timeline.prev_batch) {\n                    // the first event we add to the timeline MUST match up to\n                    // the prev_batch token.\n                    if (!msgData.token) {\n                        return; // this shouldn't happen as we prune constantly.\n                    }\n                    roomJson.timeline.prev_batch = msgData.token;\n                }\n\n                let transformedEvent: (IRoomEvent | IStateEvent) & { _localTs?: number };\n                if (!forDatabase && msgData.event[\"_localTs\"]) {\n                    // This means we have to copy each event so we can fix it up to\n                    // set a correct 'age' parameter whilst keeping the local timestamp\n                    // on our stored event. If this turns out to be a bottleneck, it could\n                    // be optimised either by doing this in the main process after the data\n                    // has been structured-cloned to go between the worker & main process,\n                    // or special-casing data from saved syncs to read the local timestamp\n                    // directly rather than turning it into age to then immediately be\n                    // transformed back again into a local timestamp.\n                    transformedEvent = Object.assign({}, msgData.event);\n                    if (transformedEvent.unsigned !== undefined) {\n                        transformedEvent.unsigned = Object.assign({}, transformedEvent.unsigned);\n                    }\n                    delete transformedEvent._localTs;\n                    transformedEvent.unsigned = transformedEvent.unsigned || {};\n                    transformedEvent.unsigned.age = Date.now() - msgData.event[\"_localTs\"];\n                } else {\n                    transformedEvent = msgData.event;\n                }\n                roomJson.timeline.events.push(transformedEvent);\n            });\n\n            // Add state data: roll back current state to the start of timeline,\n            // by \"reverse clobbering\" from the end of the timeline to the start.\n            // Convert maps back into arrays.\n            const rollBackState = Object.create(null);\n            for (let i = roomJson.timeline.events.length - 1; i >=0; i--) {\n                const timelineEvent = roomJson.timeline.events[i];\n                if (timelineEvent.state_key === null ||\n                        timelineEvent.state_key === undefined) {\n                    continue; // not a state event\n                }\n                // since we're going back in time, we need to use the previous\n                // state value else we'll break causality. We don't have the\n                // complete previous state event, so we need to create one.\n                const prevStateEvent = deepCopy(timelineEvent);\n                if (prevStateEvent.unsigned) {\n                    if (prevStateEvent.unsigned.prev_content) {\n                        prevStateEvent.content = prevStateEvent.unsigned.prev_content;\n                    }\n                    if (prevStateEvent.unsigned.prev_sender) {\n                        prevStateEvent.sender = prevStateEvent.unsigned.prev_sender;\n                    }\n                }\n                setState(rollBackState, prevStateEvent);\n            }\n            Object.keys(roomData._currentState).forEach((evType) => {\n                Object.keys(roomData._currentState[evType]).forEach((stateKey) => {\n                    let ev = roomData._currentState[evType][stateKey];\n                    if (rollBackState[evType] && rollBackState[evType][stateKey]) {\n                        // use the reverse clobbered event instead.\n                        ev = rollBackState[evType][stateKey];\n                    }\n                    roomJson.state.events.push(ev);\n                });\n            });\n            data.join[roomId] = roomJson;\n        });\n\n        // Add account data\n        const accData: IMinimalEvent[] = [];\n        Object.keys(this.accountData).forEach((evType) => {\n            accData.push(this.accountData[evType]);\n        });\n\n        return {\n            nextBatch: this.nextBatch,\n            roomsData: data,\n            accountData: accData,\n        };\n    }\n\n    public getNextBatchToken(): string {\n        return this.nextBatch;\n    }\n}\n\nfunction setState(eventMap: Record<string, Record<string, IStateEvent>>, event: IRoomEvent | IStateEvent): void {\n    if ((event as IStateEvent).state_key === null || (event as IStateEvent).state_key === undefined || !event.type) {\n        return;\n    }\n    if (!eventMap[event.type]) {\n        eventMap[event.type] = Object.create(null);\n    }\n    eventMap[event.type][(event as IStateEvent).state_key] = event as IStateEvent;\n}\n",
    "/*\nCopyright 2015 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/*\n * TODO:\n * This class mainly serves to take all the syncing logic out of client.js and\n * into a separate file. It's all very fluid, and this class gut wrenches a lot\n * of MatrixClient props (e.g. http). Given we want to support WebSockets as\n * an alternative syncing API, we may want to have a proper syncing interface\n * for HTTP and WS at some point.\n */\n\nimport { User, UserEvent } from \"./models/user\";\nimport { NotificationCountType, Room, RoomEvent } from \"./models/room\";\nimport * as utils from \"./utils\";\nimport { IDeferred } from \"./utils\";\nimport { Filter } from \"./filter\";\nimport { EventTimeline } from \"./models/event-timeline\";\nimport { PushProcessor } from \"./pushprocessor\";\nimport { logger } from './logger';\nimport { InvalidStoreError } from './errors';\nimport { ClientEvent, IStoredClientOpts, MatrixClient, PendingEventOrdering } from \"./client\";\nimport {\n    IEphemeral,\n    IInvitedRoom,\n    IInviteState,\n    IJoinedRoom,\n    ILeftRoom,\n    IMinimalEvent,\n    IRoomEvent,\n    IStateEvent,\n    IStrippedState,\n    ISyncResponse,\n    ITimeline,\n} from \"./sync-accumulator\";\nimport { MatrixEvent } from \"./models/event\";\nimport { MatrixError, Method } from \"./http-api\";\nimport { ISavedSync } from \"./store\";\nimport { EventType } from \"./@types/event\";\nimport { IPushRules } from \"./@types/PushRules\";\nimport { RoomStateEvent } from \"./models/room-state\";\nimport { RoomMemberEvent } from \"./models/room-member\";\nimport { BeaconEvent } from \"./models/beacon\";\n\nconst DEBUG = true;\n\n// /sync requests allow you to set a timeout= but the request may continue\n// beyond that and wedge forever, so we need to track how long we are willing\n// to keep open the connection. This constant is *ADDED* to the timeout= value\n// to determine the max time we're willing to wait.\nconst BUFFER_PERIOD_MS = 80 * 1000;\n\n// Number of consecutive failed syncs that will lead to a syncState of ERROR as opposed\n// to RECONNECTING. This is needed to inform the client of server issues when the\n// keepAlive is successful but the server /sync fails.\nconst FAILED_SYNC_ERROR_THRESHOLD = 3;\n\nexport enum SyncState {\n    Error = \"ERROR\",\n    Prepared = \"PREPARED\",\n    Stopped = \"STOPPED\",\n    Syncing = \"SYNCING\",\n    Catchup = \"CATCHUP\",\n    Reconnecting = \"RECONNECTING\",\n}\n\nfunction getFilterName(userId: string, suffix?: string): string {\n    // scope this on the user ID because people may login on many accounts\n    // and they all need to be stored!\n    return \"FILTER_SYNC_\" + userId + (suffix ? \"_\" + suffix : \"\");\n}\n\nfunction debuglog(...params) {\n    if (!DEBUG) {\n        return;\n    }\n    logger.log(...params);\n}\n\ninterface ISyncOptions {\n    filterId?: string;\n    hasSyncedBefore?: boolean;\n}\n\nexport interface ISyncStateData {\n    error?: MatrixError;\n    oldSyncToken?: string;\n    nextSyncToken?: string;\n    catchingUp?: boolean;\n    fromCache?: boolean;\n}\n\nenum SetPresence {\n    Offline = \"offline\",\n    Online = \"online\",\n    Unavailable = \"unavailable\",\n}\n\ninterface ISyncParams {\n    filter?: string;\n    timeout: number;\n    since?: string;\n    // eslint-disable-next-line camelcase\n    full_state?: boolean;\n    // eslint-disable-next-line camelcase\n    set_presence?: SetPresence;\n    _cacheBuster?: string | number; // not part of the API itself\n}\n\n// http-api mangles an abort method onto its promises\ninterface IRequestPromise<T> extends Promise<T> {\n    abort(): void;\n}\n\ntype WrappedRoom<T> = T & {\n    room: Room;\n    isBrandNewRoom: boolean;\n};\n\n/**\n * <b>Internal class - unstable.</b>\n * Construct an entity which is able to sync with a homeserver.\n * @constructor\n * @param {MatrixClient} client The matrix client instance to use.\n * @param {Object} opts Config options\n * @param {module:crypto=} opts.crypto Crypto manager\n * @param {Function=} opts.canResetEntireTimeline A function which is called\n * with a room ID and returns a boolean. It should return 'true' if the SDK can\n * SAFELY remove events from this room. It may not be safe to remove events if\n * there are other references to the timelines for this room.\n * Default: returns false.\n * @param {Boolean=} opts.disablePresence True to perform syncing without automatically\n * updating presence.\n */\nexport class SyncApi {\n    private _peekRoom: Room = null;\n    private currentSyncRequest: IRequestPromise<ISyncResponse> = null;\n    private syncState: SyncState = null;\n    private syncStateData: ISyncStateData = null; // additional data (eg. error object for failed sync)\n    private catchingUp = false;\n    private running = false;\n    private keepAliveTimer: number = null;\n    private connectionReturnedDefer: IDeferred<boolean> = null;\n    private notifEvents: MatrixEvent[] = []; // accumulator of sync events in the current sync response\n    private failedSyncCount = 0; // Number of consecutive failed /sync requests\n    private storeIsInvalid = false; // flag set if the store needs to be cleared before we can start\n\n    constructor(private readonly client: MatrixClient, private readonly opts: Partial<IStoredClientOpts> = {}) {\n        this.opts.initialSyncLimit = this.opts.initialSyncLimit ?? 8;\n        this.opts.resolveInvitesToProfiles = this.opts.resolveInvitesToProfiles || false;\n        this.opts.pollTimeout = this.opts.pollTimeout || (30 * 1000);\n        this.opts.pendingEventOrdering = this.opts.pendingEventOrdering || PendingEventOrdering.Chronological;\n        this.opts.experimentalThreadSupport = this.opts.experimentalThreadSupport === true;\n\n        if (!opts.canResetEntireTimeline) {\n            opts.canResetEntireTimeline = (roomId: string) => {\n                return false;\n            };\n        }\n\n        if (client.getNotifTimelineSet()) {\n            client.reEmitter.reEmit(client.getNotifTimelineSet(), [\n                RoomEvent.Timeline,\n                RoomEvent.TimelineReset,\n            ]);\n        }\n    }\n\n    /**\n     * @param {string} roomId\n     * @return {Room}\n     */\n    public createRoom(roomId: string): Room {\n        const client = this.client;\n        const {\n            timelineSupport,\n            unstableClientRelationAggregation,\n        } = client;\n        const room = new Room(roomId, client, client.getUserId(), {\n            lazyLoadMembers: this.opts.lazyLoadMembers,\n            pendingEventOrdering: this.opts.pendingEventOrdering,\n            timelineSupport,\n            unstableClientRelationAggregation,\n        });\n        client.reEmitter.reEmit(room, [\n            RoomEvent.Name,\n            RoomEvent.Redaction,\n            RoomEvent.RedactionCancelled,\n            RoomEvent.Receipt,\n            RoomEvent.Tags,\n            RoomEvent.LocalEchoUpdated,\n            RoomEvent.AccountData,\n            RoomEvent.MyMembership,\n            RoomEvent.Timeline,\n            RoomEvent.TimelineReset,\n        ]);\n        this.registerStateListeners(room);\n        return room;\n    }\n\n    /**\n     * @param {Room} room\n     * @private\n     */\n    private registerStateListeners(room: Room): void {\n        const client = this.client;\n        // we need to also re-emit room state and room member events, so hook it up\n        // to the client now. We need to add a listener for RoomState.members in\n        // order to hook them correctly. (TODO: find a better way?)\n        client.reEmitter.reEmit(room.currentState, [\n            RoomStateEvent.Events,\n            RoomStateEvent.Members,\n            RoomStateEvent.NewMember,\n            RoomStateEvent.Update,\n            BeaconEvent.New,\n            BeaconEvent.Update,\n            BeaconEvent.Destroy,\n            BeaconEvent.LivenessChange,\n        ]);\n\n        room.currentState.on(RoomStateEvent.NewMember, function(event, state, member) {\n            member.user = client.getUser(member.userId);\n            client.reEmitter.reEmit(member, [\n                RoomMemberEvent.Name,\n                RoomMemberEvent.Typing,\n                RoomMemberEvent.PowerLevel,\n                RoomMemberEvent.Membership,\n            ]);\n        });\n    }\n\n    /**\n     * @param {Room} room\n     * @private\n     */\n    private deregisterStateListeners(room: Room): void {\n        // could do with a better way of achieving this.\n        room.currentState.removeAllListeners(RoomStateEvent.Events);\n        room.currentState.removeAllListeners(RoomStateEvent.Members);\n        room.currentState.removeAllListeners(RoomStateEvent.NewMember);\n    }\n\n    /**\n     * Sync rooms the user has left.\n     * @return {Promise} Resolved when they've been added to the store.\n     */\n    public syncLeftRooms() {\n        const client = this.client;\n\n        // grab a filter with limit=1 and include_leave=true\n        const filter = new Filter(this.client.credentials.userId);\n        filter.setTimelineLimit(1);\n        filter.setIncludeLeaveRooms(true);\n\n        const localTimeoutMs = this.opts.pollTimeout + BUFFER_PERIOD_MS;\n        const qps: ISyncParams = {\n            timeout: 0, // don't want to block since this is a single isolated req\n        };\n\n        return client.getOrCreateFilter(\n            getFilterName(client.credentials.userId, \"LEFT_ROOMS\"), filter,\n        ).then(function(filterId) {\n            qps.filter = filterId;\n            return client.http.authedRequest<any>( // TODO types\n                undefined, Method.Get, \"/sync\", qps as any, undefined, localTimeoutMs,\n            );\n        }).then(async (data) => {\n            let leaveRooms = [];\n            if (data.rooms?.leave) {\n                leaveRooms = this.mapSyncResponseToRoomArray(data.rooms.leave);\n            }\n            return Promise.all(leaveRooms.map(async (leaveObj) => {\n                const room = leaveObj.room;\n                if (!leaveObj.isBrandNewRoom) {\n                    // the intention behind syncLeftRooms is to add in rooms which were\n                    // *omitted* from the initial /sync. Rooms the user were joined to\n                    // but then left whilst the app is running will appear in this list\n                    // and we do not want to bother with them since they will have the\n                    // current state already (and may get dupe messages if we add\n                    // yet more timeline events!), so skip them.\n                    // NB: When we persist rooms to localStorage this will be more\n                    //     complicated...\n                    return;\n                }\n                leaveObj.timeline = leaveObj.timeline || {};\n                const events = this.mapSyncEventsFormat(leaveObj.timeline, room);\n\n                const stateEvents = this.mapSyncEventsFormat(leaveObj.state, room);\n\n                // set the back-pagination token. Do this *before* adding any\n                // events so that clients can start back-paginating.\n                room.getLiveTimeline().setPaginationToken(leaveObj.timeline.prev_batch, EventTimeline.BACKWARDS);\n\n                await this.processRoomEvents(room, stateEvents, events);\n\n                room.recalculate();\n                client.store.storeRoom(room);\n                client.emit(ClientEvent.Room, room);\n\n                this.processEventsForNotifs(room, events);\n                return room;\n            }));\n        });\n    }\n\n    /**\n     * Peek into a room. This will result in the room in question being synced so it\n     * is accessible via getRooms(). Live updates for the room will be provided.\n     * @param {string} roomId The room ID to peek into.\n     * @return {Promise} A promise which resolves once the room has been added to the\n     * store.\n     */\n    public peek(roomId: string): Promise<Room> {\n        if (this._peekRoom && this._peekRoom.roomId === roomId) {\n            return Promise.resolve(this._peekRoom);\n        }\n\n        const client = this.client;\n        this._peekRoom = this.createRoom(roomId);\n        return this.client.roomInitialSync(roomId, 20).then((response) => {\n            // make sure things are init'd\n            response.messages = response.messages || { chunk: [] };\n            response.messages.chunk = response.messages.chunk || [];\n            response.state = response.state || [];\n\n            // FIXME: Mostly duplicated from processRoomEvents but not entirely\n            // because \"state\" in this API is at the BEGINNING of the chunk\n            const oldStateEvents = utils.deepCopy(response.state)\n                .map(client.getEventMapper());\n            const stateEvents = response.state.map(client.getEventMapper());\n            const messages = response.messages.chunk.map(client.getEventMapper());\n\n            // XXX: copypasted from /sync until we kill off this minging v1 API stuff)\n            // handle presence events (User objects)\n            if (response.presence && Array.isArray(response.presence)) {\n                response.presence.map(client.getEventMapper()).forEach(\n                    function(presenceEvent) {\n                        let user = client.store.getUser(presenceEvent.getContent().user_id);\n                        if (user) {\n                            user.setPresenceEvent(presenceEvent);\n                        } else {\n                            user = createNewUser(client, presenceEvent.getContent().user_id);\n                            user.setPresenceEvent(presenceEvent);\n                            client.store.storeUser(user);\n                        }\n                        client.emit(ClientEvent.Event, presenceEvent);\n                    });\n            }\n\n            // set the pagination token before adding the events in case people\n            // fire off pagination requests in response to the Room.timeline\n            // events.\n            if (response.messages.start) {\n                this._peekRoom.oldState.paginationToken = response.messages.start;\n            }\n\n            // set the state of the room to as it was after the timeline executes\n            this._peekRoom.oldState.setStateEvents(oldStateEvents);\n            this._peekRoom.currentState.setStateEvents(stateEvents);\n\n            this.resolveInvites(this._peekRoom);\n            this._peekRoom.recalculate();\n\n            // roll backwards to diverge old state. addEventsToTimeline\n            // will overwrite the pagination token, so make sure it overwrites\n            // it with the right thing.\n            this._peekRoom.addEventsToTimeline(messages.reverse(), true,\n                this._peekRoom.getLiveTimeline(),\n                response.messages.start);\n\n            client.store.storeRoom(this._peekRoom);\n            client.emit(ClientEvent.Room, this._peekRoom);\n\n            this.peekPoll(this._peekRoom);\n            return this._peekRoom;\n        });\n    }\n\n    /**\n     * Stop polling for updates in the peeked room. NOPs if there is no room being\n     * peeked.\n     */\n    public stopPeeking(): void {\n        this._peekRoom = null;\n    }\n\n    /**\n     * Do a peek room poll.\n     * @param {Room} peekRoom\n     * @param {string?} token from= token\n     */\n    private peekPoll(peekRoom: Room, token?: string): void {\n        if (this._peekRoom !== peekRoom) {\n            debuglog(\"Stopped peeking in room %s\", peekRoom.roomId);\n            return;\n        }\n\n        // FIXME: gut wrenching; hard-coded timeout values\n        // TODO types\n        this.client.http.authedRequest<any>(undefined, Method.Get, \"/events\", {\n            room_id: peekRoom.roomId,\n            timeout: String(30 * 1000),\n            from: token,\n        }, undefined, 50 * 1000).then((res) => {\n            if (this._peekRoom !== peekRoom) {\n                debuglog(\"Stopped peeking in room %s\", peekRoom.roomId);\n                return;\n            }\n            // We have a problem that we get presence both from /events and /sync\n            // however, /sync only returns presence for users in rooms\n            // you're actually joined to.\n            // in order to be sure to get presence for all of the users in the\n            // peeked room, we handle presence explicitly here. This may result\n            // in duplicate presence events firing for some users, which is a\n            // performance drain, but such is life.\n            // XXX: copypasted from /sync until we can kill this minging v1 stuff.\n\n            res.chunk.filter(function(e) {\n                return e.type === \"m.presence\";\n            }).map(this.client.getEventMapper()).forEach((presenceEvent) => {\n                let user = this.client.store.getUser(presenceEvent.getContent().user_id);\n                if (user) {\n                    user.setPresenceEvent(presenceEvent);\n                } else {\n                    user = createNewUser(this.client, presenceEvent.getContent().user_id);\n                    user.setPresenceEvent(presenceEvent);\n                    this.client.store.storeUser(user);\n                }\n                this.client.emit(ClientEvent.Event, presenceEvent);\n            });\n\n            // strip out events which aren't for the given room_id (e.g presence)\n            // and also ephemeral events (which we're assuming is anything without\n            // and event ID because the /events API doesn't separate them).\n            const events = res.chunk.filter(function(e) {\n                return e.room_id === peekRoom.roomId && e.event_id;\n            }).map(this.client.getEventMapper());\n\n            peekRoom.addLiveEvents(events);\n            this.peekPoll(peekRoom, res.end);\n        }, (err) => {\n            logger.error(\"[%s] Peek poll failed: %s\", peekRoom.roomId, err);\n            setTimeout(() => {\n                this.peekPoll(peekRoom, token);\n            }, 30 * 1000);\n        });\n    }\n\n    /**\n     * Returns the current state of this sync object\n     * @see module:client~MatrixClient#event:\"sync\"\n     * @return {?String}\n     */\n    public getSyncState(): SyncState {\n        return this.syncState;\n    }\n\n    /**\n     * Returns the additional data object associated with\n     * the current sync state, or null if there is no\n     * such data.\n     * Sync errors, if available, are put in the 'error' key of\n     * this object.\n     * @return {?Object}\n     */\n    public getSyncStateData(): ISyncStateData {\n        return this.syncStateData;\n    }\n\n    public async recoverFromSyncStartupError(savedSyncPromise: Promise<void>, err: MatrixError): Promise<void> {\n        // Wait for the saved sync to complete - we send the pushrules and filter requests\n        // before the saved sync has finished so they can run in parallel, but only process\n        // the results after the saved sync is done. Equivalently, we wait for it to finish\n        // before reporting failures from these functions.\n        await savedSyncPromise;\n        const keepaliveProm = this.startKeepAlives();\n        this.updateSyncState(SyncState.Error, { error: err });\n        await keepaliveProm;\n    }\n\n    /**\n     * Is the lazy loading option different than in previous session?\n     * @param {boolean} lazyLoadMembers current options for lazy loading\n     * @return {boolean} whether or not the option has changed compared to the previous session */\n    private async wasLazyLoadingToggled(lazyLoadMembers = false): Promise<boolean> {\n        // assume it was turned off before\n        // if we don't know any better\n        let lazyLoadMembersBefore = false;\n        const isStoreNewlyCreated = await this.client.store.isNewlyCreated();\n        if (!isStoreNewlyCreated) {\n            const prevClientOptions = await this.client.store.getClientOptions();\n            if (prevClientOptions) {\n                lazyLoadMembersBefore = !!prevClientOptions.lazyLoadMembers;\n            }\n            return lazyLoadMembersBefore !== lazyLoadMembers;\n        }\n        return false;\n    }\n\n    private shouldAbortSync(error: MatrixError): boolean {\n        if (error.errcode === \"M_UNKNOWN_TOKEN\") {\n            // The logout already happened, we just need to stop.\n            logger.warn(\"Token no longer valid - assuming logout\");\n            this.stop();\n            this.updateSyncState(SyncState.Error, { error });\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Main entry point\n     */\n    public sync(): void {\n        const client = this.client;\n\n        this.running = true;\n\n        if (global.window && global.window.addEventListener) {\n            global.window.addEventListener(\"online\", this.onOnline, false);\n        }\n\n        let savedSyncPromise = Promise.resolve();\n        let savedSyncToken = null;\n\n        // We need to do one-off checks before we can begin the /sync loop.\n        // These are:\n        //   1) We need to get push rules so we can check if events should bing as we get\n        //      them from /sync.\n        //   2) We need to get/create a filter which we can use for /sync.\n        //   3) We need to check the lazy loading option matches what was used in the\n        //       stored sync. If it doesn't, we can't use the stored sync.\n\n        const getPushRules = async () => {\n            try {\n                debuglog(\"Getting push rules...\");\n                const result = await client.getPushRules();\n                debuglog(\"Got push rules\");\n\n                client.pushRules = result;\n            } catch (err) {\n                logger.error(\"Getting push rules failed\", err);\n                if (this.shouldAbortSync(err)) return;\n                // wait for saved sync to complete before doing anything else,\n                // otherwise the sync state will end up being incorrect\n                debuglog(\"Waiting for saved sync before retrying push rules...\");\n                await this.recoverFromSyncStartupError(savedSyncPromise, err);\n                getPushRules();\n                return;\n            }\n            checkLazyLoadStatus(); // advance to the next stage\n        };\n\n        const buildDefaultFilter = () => {\n            const filter = new Filter(client.credentials.userId);\n            filter.setTimelineLimit(this.opts.initialSyncLimit);\n            return filter;\n        };\n\n        const checkLazyLoadStatus = async () => {\n            debuglog(\"Checking lazy load status...\");\n            if (this.opts.lazyLoadMembers && client.isGuest()) {\n                this.opts.lazyLoadMembers = false;\n            }\n            if (this.opts.lazyLoadMembers) {\n                debuglog(\"Checking server lazy load support...\");\n                const supported = await client.doesServerSupportLazyLoading();\n                if (supported) {\n                    debuglog(\"Enabling lazy load on sync filter...\");\n                    if (!this.opts.filter) {\n                        this.opts.filter = buildDefaultFilter();\n                    }\n                    this.opts.filter.setLazyLoadMembers(true);\n                } else {\n                    debuglog(\"LL: lazy loading requested but not supported \" +\n                        \"by server, so disabling\");\n                    this.opts.lazyLoadMembers = false;\n                }\n            }\n            // need to vape the store when enabling LL and wasn't enabled before\n            debuglog(\"Checking whether lazy loading has changed in store...\");\n            const shouldClear = await this.wasLazyLoadingToggled(this.opts.lazyLoadMembers);\n            if (shouldClear) {\n                this.storeIsInvalid = true;\n                const reason = InvalidStoreError.TOGGLED_LAZY_LOADING;\n                const error = new InvalidStoreError(reason, !!this.opts.lazyLoadMembers);\n                this.updateSyncState(SyncState.Error, { error });\n                // bail out of the sync loop now: the app needs to respond to this error.\n                // we leave the state as 'ERROR' which isn't great since this normally means\n                // we're retrying. The client must be stopped before clearing the stores anyway\n                // so the app should stop the client, clear the store and start it again.\n                logger.warn(\"InvalidStoreError: store is not usable: stopping sync.\");\n                return;\n            }\n            if (this.opts.lazyLoadMembers && this.opts.crypto) {\n                this.opts.crypto.enableLazyLoading();\n            }\n            try {\n                debuglog(\"Storing client options...\");\n                await this.client.storeClientOptions();\n                debuglog(\"Stored client options\");\n            } catch (err) {\n                logger.error(\"Storing client options failed\", err);\n                throw err;\n            }\n\n            getFilter(); // Now get the filter and start syncing\n        };\n\n        const getFilter = async () => {\n            debuglog(\"Getting filter...\");\n            let filter;\n            if (this.opts.filter) {\n                filter = this.opts.filter;\n            } else {\n                filter = buildDefaultFilter();\n            }\n\n            let filterId;\n            try {\n                filterId = await client.getOrCreateFilter(getFilterName(client.credentials.userId), filter);\n            } catch (err) {\n                logger.error(\"Getting filter failed\", err);\n                if (this.shouldAbortSync(err)) return;\n                // wait for saved sync to complete before doing anything else,\n                // otherwise the sync state will end up being incorrect\n                debuglog(\"Waiting for saved sync before retrying filter...\");\n                await this.recoverFromSyncStartupError(savedSyncPromise, err);\n                getFilter();\n                return;\n            }\n            // reset the notifications timeline to prepare it to paginate from\n            // the current point in time.\n            // The right solution would be to tie /sync pagination tokens into\n            // /notifications API somehow.\n            client.resetNotifTimelineSet();\n\n            if (this.currentSyncRequest === null) {\n                // Send this first sync request here so we can then wait for the saved\n                // sync data to finish processing before we process the results of this one.\n                debuglog(\"Sending first sync request...\");\n                this.currentSyncRequest = this.doSyncRequest({ filterId }, savedSyncToken);\n            }\n\n            // Now wait for the saved sync to finish...\n            debuglog(\"Waiting for saved sync before starting sync processing...\");\n            await savedSyncPromise;\n            this.doSync({ filterId });\n        };\n\n        if (client.isGuest()) {\n            // no push rules for guests, no access to POST filter for guests.\n            this.doSync({});\n        } else {\n            // Pull the saved sync token out first, before the worker starts sending\n            // all the sync data which could take a while. This will let us send our\n            // first incremental sync request before we've processed our saved data.\n            debuglog(\"Getting saved sync token...\");\n            savedSyncPromise = client.store.getSavedSyncToken().then((tok) => {\n                debuglog(\"Got saved sync token\");\n                savedSyncToken = tok;\n                debuglog(\"Getting saved sync...\");\n                return client.store.getSavedSync();\n            }).then((savedSync) => {\n                debuglog(`Got reply from saved sync, exists? ${!!savedSync}`);\n                if (savedSync) {\n                    return this.syncFromCache(savedSync);\n                }\n            }).catch(err => {\n                logger.error(\"Getting saved sync failed\", err);\n            });\n            // Now start the first incremental sync request: this can also\n            // take a while so if we set it going now, we can wait for it\n            // to finish while we process our saved sync data.\n            getPushRules();\n        }\n    }\n\n    /**\n     * Stops the sync object from syncing.\n     */\n    public stop(): void {\n        debuglog(\"SyncApi.stop\");\n        // It is necessary to check for the existance of\n        // global.window AND global.window.removeEventListener.\n        // Some platforms (e.g. React Native) register global.window,\n        // but do not have global.window.removeEventListener.\n        if (global.window && global.window.removeEventListener) {\n            global.window.removeEventListener(\"online\", this.onOnline, false);\n        }\n        this.running = false;\n        if (this.currentSyncRequest) {\n            this.currentSyncRequest.abort();\n        }\n        if (this.keepAliveTimer) {\n            clearTimeout(this.keepAliveTimer);\n            this.keepAliveTimer = null;\n        }\n    }\n\n    /**\n     * Retry a backed off syncing request immediately. This should only be used when\n     * the user <b>explicitly</b> attempts to retry their lost connection.\n     * @return {boolean} True if this resulted in a request being retried.\n     */\n    public retryImmediately(): boolean {\n        if (!this.connectionReturnedDefer) {\n            return false;\n        }\n        this.startKeepAlives(0);\n        return true;\n    }\n    /**\n     * Process a single set of cached sync data.\n     * @param {Object} savedSync a saved sync that was persisted by a store. This\n     * should have been acquired via client.store.getSavedSync().\n     */\n    private async syncFromCache(savedSync: ISavedSync): Promise<void> {\n        debuglog(\"sync(): not doing HTTP hit, instead returning stored /sync data\");\n\n        const nextSyncToken = savedSync.nextBatch;\n\n        // Set sync token for future incremental syncing\n        this.client.store.setSyncToken(nextSyncToken);\n\n        // No previous sync, set old token to null\n        const syncEventData = {\n            oldSyncToken: null,\n            nextSyncToken,\n            catchingUp: false,\n            fromCache: true,\n        };\n\n        const data: ISyncResponse = {\n            next_batch: nextSyncToken,\n            rooms: savedSync.roomsData,\n            account_data: {\n                events: savedSync.accountData,\n            },\n        };\n\n        try {\n            await this.processSyncResponse(syncEventData, data);\n        } catch (e) {\n            logger.error(\"Error processing cached sync\", e);\n        }\n\n        // Don't emit a prepared if we've bailed because the store is invalid:\n        // in this case the client will not be usable until stopped & restarted\n        // so this would be useless and misleading.\n        if (!this.storeIsInvalid) {\n            this.updateSyncState(SyncState.Prepared, syncEventData);\n        }\n    }\n\n    /**\n     * Invoke me to do /sync calls\n     * @param {Object} syncOptions\n     * @param {string} syncOptions.filterId\n     * @param {boolean} syncOptions.hasSyncedBefore\n     */\n    private async doSync(syncOptions: ISyncOptions): Promise<void> {\n        const client = this.client;\n\n        if (!this.running) {\n            debuglog(\"Sync no longer running: exiting.\");\n            if (this.connectionReturnedDefer) {\n                this.connectionReturnedDefer.reject();\n                this.connectionReturnedDefer = null;\n            }\n            this.updateSyncState(SyncState.Stopped);\n            return;\n        }\n\n        const syncToken = client.store.getSyncToken();\n\n        let data;\n        try {\n            //debuglog('Starting sync since=' + syncToken);\n            if (this.currentSyncRequest === null) {\n                this.currentSyncRequest = this.doSyncRequest(syncOptions, syncToken);\n            }\n            data = await this.currentSyncRequest;\n        } catch (e) {\n            this.onSyncError(e, syncOptions);\n            return;\n        } finally {\n            this.currentSyncRequest = null;\n        }\n\n        //debuglog('Completed sync, next_batch=' + data.next_batch);\n\n        // set the sync token NOW *before* processing the events. We do this so\n        // if something barfs on an event we can skip it rather than constantly\n        // polling with the same token.\n        client.store.setSyncToken(data.next_batch);\n\n        // Reset after a successful sync\n        this.failedSyncCount = 0;\n\n        await client.store.setSyncData(data);\n\n        const syncEventData = {\n            oldSyncToken: syncToken,\n            nextSyncToken: data.next_batch,\n            catchingUp: this.catchingUp,\n        };\n\n        if (this.opts.crypto) {\n            // tell the crypto module we're about to process a sync\n            // response\n            await this.opts.crypto.onSyncWillProcess(syncEventData);\n        }\n\n        try {\n            await this.processSyncResponse(syncEventData, data);\n        } catch (e) {\n            // log the exception with stack if we have it, else fall back\n            // to the plain description\n            logger.error(\"Caught /sync error\", e);\n\n            // Emit the exception for client handling\n            this.client.emit(ClientEvent.SyncUnexpectedError, e);\n        }\n\n        // update this as it may have changed\n        syncEventData.catchingUp = this.catchingUp;\n\n        // emit synced events\n        if (!syncOptions.hasSyncedBefore) {\n            this.updateSyncState(SyncState.Prepared, syncEventData);\n            syncOptions.hasSyncedBefore = true;\n        }\n\n        // tell the crypto module to do its processing. It may block (to do a\n        // /keys/changes request).\n        if (this.opts.crypto) {\n            await this.opts.crypto.onSyncCompleted(syncEventData);\n        }\n\n        // keep emitting SYNCING -> SYNCING for clients who want to do bulk updates\n        this.updateSyncState(SyncState.Syncing, syncEventData);\n\n        if (client.store.wantsSave()) {\n            // We always save the device list (if it's dirty) before saving the sync data:\n            // this means we know the saved device list data is at least as fresh as the\n            // stored sync data which means we don't have to worry that we may have missed\n            // device changes. We can also skip the delay since we're not calling this very\n            // frequently (and we don't really want to delay the sync for it).\n            if (this.opts.crypto) {\n                await this.opts.crypto.saveDeviceList(0);\n            }\n\n            // tell databases that everything is now in a consistent state and can be saved.\n            client.store.save();\n        }\n\n        // Begin next sync\n        this.doSync(syncOptions);\n    }\n\n    private doSyncRequest(syncOptions: ISyncOptions, syncToken: string): IRequestPromise<ISyncResponse> {\n        const qps = this.getSyncParams(syncOptions, syncToken);\n        return this.client.http.authedRequest( // TODO types\n            undefined, Method.Get, \"/sync\", qps as any, undefined,\n            qps.timeout + BUFFER_PERIOD_MS,\n        );\n    }\n\n    private getSyncParams(syncOptions: ISyncOptions, syncToken: string): ISyncParams {\n        let pollTimeout = this.opts.pollTimeout;\n\n        if (this.getSyncState() !== 'SYNCING' || this.catchingUp) {\n            // unless we are happily syncing already, we want the server to return\n            // as quickly as possible, even if there are no events queued. This\n            // serves two purposes:\n            //\n            // * When the connection dies, we want to know asap when it comes back,\n            //   so that we can hide the error from the user. (We don't want to\n            //   have to wait for an event or a timeout).\n            //\n            // * We want to know if the server has any to_device messages queued up\n            //   for us. We do that by calling it with a zero timeout until it\n            //   doesn't give us any more to_device messages.\n            this.catchingUp = true;\n            pollTimeout = 0;\n        }\n\n        let filterId = syncOptions.filterId;\n        if (this.client.isGuest() && !filterId) {\n            filterId = this.getGuestFilter();\n        }\n\n        const qps: ISyncParams = {\n            filter: filterId,\n            timeout: pollTimeout,\n        };\n\n        if (this.opts.disablePresence) {\n            qps.set_presence = SetPresence.Offline;\n        }\n\n        if (syncToken) {\n            qps.since = syncToken;\n        } else {\n            // use a cachebuster for initialsyncs, to make sure that\n            // we don't get a stale sync\n            // (https://github.com/vector-im/vector-web/issues/1354)\n            qps._cacheBuster = Date.now();\n        }\n\n        if (this.getSyncState() == 'ERROR' || this.getSyncState() == 'RECONNECTING') {\n            // we think the connection is dead. If it comes back up, we won't know\n            // about it till /sync returns. If the timeout= is high, this could\n            // be a long time. Set it to 0 when doing retries so we don't have to wait\n            // for an event or a timeout before emiting the SYNCING event.\n            qps.timeout = 0;\n        }\n\n        return qps;\n    }\n\n    private onSyncError(err: MatrixError, syncOptions: ISyncOptions): void {\n        if (!this.running) {\n            debuglog(\"Sync no longer running: exiting\");\n            if (this.connectionReturnedDefer) {\n                this.connectionReturnedDefer.reject();\n                this.connectionReturnedDefer = null;\n            }\n            this.updateSyncState(SyncState.Stopped);\n            return;\n        }\n\n        logger.error(\"/sync error %s\", err);\n        logger.error(err);\n\n        if (this.shouldAbortSync(err)) {\n            return;\n        }\n\n        this.failedSyncCount++;\n        logger.log('Number of consecutive failed sync requests:', this.failedSyncCount);\n\n        debuglog(\"Starting keep-alive\");\n        // Note that we do *not* mark the sync connection as\n        // lost yet: we only do this if a keepalive poke\n        // fails, since long lived HTTP connections will\n        // go away sometimes and we shouldn't treat this as\n        // erroneous. We set the state to 'reconnecting'\n        // instead, so that clients can observe this state\n        // if they wish.\n        this.startKeepAlives().then((connDidFail) => {\n            // Only emit CATCHUP if we detected a connectivity error: if we didn't,\n            // it's quite likely the sync will fail again for the same reason and we\n            // want to stay in ERROR rather than keep flip-flopping between ERROR\n            // and CATCHUP.\n            if (connDidFail && this.getSyncState() === SyncState.Error) {\n                this.updateSyncState(SyncState.Catchup, {\n                    oldSyncToken: null,\n                    nextSyncToken: null,\n                    catchingUp: true,\n                });\n            }\n            this.doSync(syncOptions);\n        });\n\n        this.currentSyncRequest = null;\n        // Transition from RECONNECTING to ERROR after a given number of failed syncs\n        this.updateSyncState(\n            this.failedSyncCount >= FAILED_SYNC_ERROR_THRESHOLD ?\n                SyncState.Error : SyncState.Reconnecting,\n            { error: err },\n        );\n    }\n\n    /**\n     * Process data returned from a sync response and propagate it\n     * into the model objects\n     *\n     * @param {Object} syncEventData Object containing sync tokens associated with this sync\n     * @param {Object} data The response from /sync\n     */\n    private async processSyncResponse(syncEventData: ISyncStateData, data: ISyncResponse): Promise<void> {\n        const client = this.client;\n\n        // data looks like:\n        // {\n        //    next_batch: $token,\n        //    presence: { events: [] },\n        //    account_data: { events: [] },\n        //    device_lists: { changed: [\"@user:server\", ... ]},\n        //    to_device: { events: [] },\n        //    device_one_time_keys_count: { signed_curve25519: 42 },\n        //    rooms: {\n        //      invite: {\n        //        $roomid: {\n        //          invite_state: { events: [] }\n        //        }\n        //      },\n        //      join: {\n        //        $roomid: {\n        //          state: { events: [] },\n        //          timeline: { events: [], prev_batch: $token, limited: true },\n        //          ephemeral: { events: [] },\n        //          summary: {\n        //             m.heroes: [ $user_id ],\n        //             m.joined_member_count: $count,\n        //             m.invited_member_count: $count\n        //          },\n        //          account_data: { events: [] },\n        //          unread_notifications: {\n        //              highlight_count: 0,\n        //              notification_count: 0,\n        //          }\n        //        }\n        //      },\n        //      leave: {\n        //        $roomid: {\n        //          state: { events: [] },\n        //          timeline: { events: [], prev_batch: $token }\n        //        }\n        //      }\n        //    }\n        // }\n\n        // TODO-arch:\n        // - Each event we pass through needs to be emitted via 'event', can we\n        //   do this in one place?\n        // - The isBrandNewRoom boilerplate is boilerplatey.\n\n        // handle presence events (User objects)\n        if (data.presence && Array.isArray(data.presence.events)) {\n            data.presence.events.map(client.getEventMapper()).forEach(\n                function(presenceEvent) {\n                    let user = client.store.getUser(presenceEvent.getSender());\n                    if (user) {\n                        user.setPresenceEvent(presenceEvent);\n                    } else {\n                        user = createNewUser(client, presenceEvent.getSender());\n                        user.setPresenceEvent(presenceEvent);\n                        client.store.storeUser(user);\n                    }\n                    client.emit(ClientEvent.Event, presenceEvent);\n                });\n        }\n\n        // handle non-room account_data\n        if (data.account_data && Array.isArray(data.account_data.events)) {\n            const events = data.account_data.events.map(client.getEventMapper());\n            const prevEventsMap = events.reduce((m, c) => {\n                m[c.getId()] = client.store.getAccountData(c.getType());\n                return m;\n            }, {});\n            client.store.storeAccountDataEvents(events);\n            events.forEach(\n                function(accountDataEvent) {\n                    // Honour push rules that come down the sync stream but also\n                    // honour push rules that were previously cached. Base rules\n                    // will be updated when we receive push rules via getPushRules\n                    // (see sync) before syncing over the network.\n                    if (accountDataEvent.getType() === EventType.PushRules) {\n                        const rules = accountDataEvent.getContent<IPushRules>();\n                        client.pushRules = PushProcessor.rewriteDefaultRules(rules);\n                    }\n                    const prevEvent = prevEventsMap[accountDataEvent.getId()];\n                    client.emit(ClientEvent.AccountData, accountDataEvent, prevEvent);\n                    return accountDataEvent;\n                },\n            );\n        }\n\n        // handle to-device events\n        if (Array.isArray(data.to_device?.events) && data.to_device.events.length > 0) {\n            const cancelledKeyVerificationTxns = [];\n            data.to_device.events\n                .map(client.getEventMapper())\n                .map((toDeviceEvent) => { // map is a cheap inline forEach\n                    // We want to flag m.key.verification.start events as cancelled\n                    // if there's an accompanying m.key.verification.cancel event, so\n                    // we pull out the transaction IDs from the cancellation events\n                    // so we can flag the verification events as cancelled in the loop\n                    // below.\n                    if (toDeviceEvent.getType() === \"m.key.verification.cancel\") {\n                        const txnId = toDeviceEvent.getContent()['transaction_id'];\n                        if (txnId) {\n                            cancelledKeyVerificationTxns.push(txnId);\n                        }\n                    }\n\n                    // as mentioned above, .map is a cheap inline forEach, so return\n                    // the unmodified event.\n                    return toDeviceEvent;\n                })\n                .forEach(\n                    function(toDeviceEvent) {\n                        const content = toDeviceEvent.getContent();\n                        if (\n                            toDeviceEvent.getType() == \"m.room.message\" &&\n                            content.msgtype == \"m.bad.encrypted\"\n                        ) {\n                            // the mapper already logged a warning.\n                            logger.log(\n                                'Ignoring undecryptable to-device event from ' +\n                                toDeviceEvent.getSender(),\n                            );\n                            return;\n                        }\n\n                        if (toDeviceEvent.getType() === \"m.key.verification.start\"\n                            || toDeviceEvent.getType() === \"m.key.verification.request\") {\n                            const txnId = content['transaction_id'];\n                            if (cancelledKeyVerificationTxns.includes(txnId)) {\n                                toDeviceEvent.flagCancelled();\n                            }\n                        }\n\n                        client.emit(ClientEvent.ToDeviceEvent, toDeviceEvent);\n                    },\n                );\n        } else {\n            // no more to-device events: we can stop polling with a short timeout.\n            this.catchingUp = false;\n        }\n\n        // the returned json structure is a bit crap, so make it into a\n        // nicer form (array) after applying sanity to make sure we don't fail\n        // on missing keys (on the off chance)\n        let inviteRooms: WrappedRoom<IInvitedRoom>[] = [];\n        let joinRooms: WrappedRoom<IJoinedRoom>[] = [];\n        let leaveRooms: WrappedRoom<ILeftRoom>[] = [];\n\n        if (data.rooms) {\n            if (data.rooms.invite) {\n                inviteRooms = this.mapSyncResponseToRoomArray(data.rooms.invite);\n            }\n            if (data.rooms.join) {\n                joinRooms = this.mapSyncResponseToRoomArray(data.rooms.join);\n            }\n            if (data.rooms.leave) {\n                leaveRooms = this.mapSyncResponseToRoomArray(data.rooms.leave);\n            }\n        }\n\n        this.notifEvents = [];\n\n        // Handle invites\n        await utils.promiseMapSeries(inviteRooms, async (inviteObj) => {\n            const room = inviteObj.room;\n            const stateEvents = this.mapSyncEventsFormat(inviteObj.invite_state, room);\n\n            await this.processRoomEvents(room, stateEvents);\n            if (inviteObj.isBrandNewRoom) {\n                room.recalculate();\n                client.store.storeRoom(room);\n                client.emit(ClientEvent.Room, room);\n            }\n            stateEvents.forEach(function(e) {\n                client.emit(ClientEvent.Event, e);\n            });\n        });\n\n        // Handle joins\n        await utils.promiseMapSeries(joinRooms, async (joinObj) => {\n            const room = joinObj.room;\n            const stateEvents = this.mapSyncEventsFormat(joinObj.state, room);\n            // Prevent events from being decrypted ahead of time\n            // this helps large account to speed up faster\n            // room::decryptCriticalEvent is in charge of decrypting all the events\n            // required for a client to function properly\n            const events = this.mapSyncEventsFormat(joinObj.timeline, room, false);\n            const ephemeralEvents = this.mapSyncEventsFormat(joinObj.ephemeral);\n            const accountDataEvents = this.mapSyncEventsFormat(joinObj.account_data);\n\n            const encrypted = client.isRoomEncrypted(room.roomId);\n            // we do this first so it's correct when any of the events fire\n            if (joinObj.unread_notifications) {\n                room.setUnreadNotificationCount(\n                    NotificationCountType.Total,\n                    joinObj.unread_notifications.notification_count,\n                );\n\n                // We track unread notifications ourselves in encrypted rooms, so don't\n                // bother setting it here. We trust our calculations better than the\n                // server's for this case, and therefore will assume that our non-zero\n                // count is accurate.\n                if (!encrypted\n                    || (encrypted && room.getUnreadNotificationCount(NotificationCountType.Highlight) <= 0)) {\n                    room.setUnreadNotificationCount(\n                        NotificationCountType.Highlight,\n                        joinObj.unread_notifications.highlight_count,\n                    );\n                }\n            }\n\n            joinObj.timeline = joinObj.timeline || {} as ITimeline;\n\n            if (joinObj.isBrandNewRoom) {\n                // set the back-pagination token. Do this *before* adding any\n                // events so that clients can start back-paginating.\n                room.getLiveTimeline().setPaginationToken(\n                    joinObj.timeline.prev_batch, EventTimeline.BACKWARDS);\n            } else if (joinObj.timeline.limited) {\n                let limited = true;\n\n                // we've got a limited sync, so we *probably* have a gap in the\n                // timeline, so should reset. But we might have been peeking or\n                // paginating and already have some of the events, in which\n                // case we just want to append any subsequent events to the end\n                // of the existing timeline.\n                //\n                // This is particularly important in the case that we already have\n                // *all* of the events in the timeline - in that case, if we reset\n                // the timeline, we'll end up with an entirely empty timeline,\n                // which we'll try to paginate but not get any new events (which\n                // will stop us linking the empty timeline into the chain).\n                //\n                for (let i = events.length - 1; i >= 0; i--) {\n                    const eventId = events[i].getId();\n                    if (room.getTimelineForEvent(eventId)) {\n                        debuglog(\"Already have event \" + eventId + \" in limited \" +\n                            \"sync - not resetting\");\n                        limited = false;\n\n                        // we might still be missing some of the events before i;\n                        // we don't want to be adding them to the end of the\n                        // timeline because that would put them out of order.\n                        events.splice(0, i);\n\n                        // XXX: there's a problem here if the skipped part of the\n                        // timeline modifies the state set in stateEvents, because\n                        // we'll end up using the state from stateEvents rather\n                        // than the later state from timelineEvents. We probably\n                        // need to wind stateEvents forward over the events we're\n                        // skipping.\n\n                        break;\n                    }\n                }\n\n                if (limited) {\n                    this.deregisterStateListeners(room);\n                    room.resetLiveTimeline(\n                        joinObj.timeline.prev_batch,\n                        this.opts.canResetEntireTimeline(room.roomId) ?\n                            null : syncEventData.oldSyncToken,\n                    );\n\n                    // We have to assume any gap in any timeline is\n                    // reason to stop incrementally tracking notifications and\n                    // reset the timeline.\n                    client.resetNotifTimelineSet();\n\n                    this.registerStateListeners(room);\n                }\n            }\n\n            await this.processRoomEvents(room, stateEvents, events, syncEventData.fromCache);\n\n            // set summary after processing events,\n            // because it will trigger a name calculation\n            // which needs the room state to be up to date\n            if (joinObj.summary) {\n                room.setSummary(joinObj.summary);\n            }\n\n            // we deliberately don't add ephemeral events to the timeline\n            room.addEphemeralEvents(ephemeralEvents);\n\n            // we deliberately don't add accountData to the timeline\n            room.addAccountData(accountDataEvents);\n\n            room.recalculate();\n            if (joinObj.isBrandNewRoom) {\n                client.store.storeRoom(room);\n                client.emit(ClientEvent.Room, room);\n            }\n\n            this.processEventsForNotifs(room, events);\n\n            const processRoomEvent = async (e) => {\n                client.emit(ClientEvent.Event, e);\n                if (e.isState() && e.getType() == \"m.room.encryption\" && this.opts.crypto) {\n                    await this.opts.crypto.onCryptoEvent(e);\n                }\n                if (e.isState() && e.getType() === \"im.vector.user_status\") {\n                    let user = client.store.getUser(e.getStateKey());\n                    if (user) {\n                        user.unstable_updateStatusMessage(e);\n                    } else {\n                        user = createNewUser(client, e.getStateKey());\n                        user.unstable_updateStatusMessage(e);\n                        client.store.storeUser(user);\n                    }\n                }\n            };\n\n            await utils.promiseMapSeries(stateEvents, processRoomEvent);\n            await utils.promiseMapSeries(events, processRoomEvent);\n            ephemeralEvents.forEach(function(e) {\n                client.emit(ClientEvent.Event, e);\n            });\n            accountDataEvents.forEach(function(e) {\n                client.emit(ClientEvent.Event, e);\n            });\n\n            // Decrypt only the last message in all rooms to make sure we can generate a preview\n            // And decrypt all events after the recorded read receipt to ensure an accurate\n            // notification count\n            room.decryptCriticalEvents();\n        });\n\n        // Handle leaves (e.g. kicked rooms)\n        await utils.promiseMapSeries(leaveRooms, async (leaveObj) => {\n            const room = leaveObj.room;\n            const stateEvents = this.mapSyncEventsFormat(leaveObj.state, room);\n            const events = this.mapSyncEventsFormat(leaveObj.timeline, room);\n            const accountDataEvents = this.mapSyncEventsFormat(leaveObj.account_data);\n\n            await this.processRoomEvents(room, stateEvents, events);\n            room.addAccountData(accountDataEvents);\n\n            room.recalculate();\n            if (leaveObj.isBrandNewRoom) {\n                client.store.storeRoom(room);\n                client.emit(ClientEvent.Room, room);\n            }\n\n            this.processEventsForNotifs(room, events);\n\n            stateEvents.forEach(function(e) {\n                client.emit(ClientEvent.Event, e);\n            });\n            events.forEach(function(e) {\n                client.emit(ClientEvent.Event, e);\n            });\n            accountDataEvents.forEach(function(e) {\n                client.emit(ClientEvent.Event, e);\n            });\n        });\n\n        // update the notification timeline, if appropriate.\n        // we only do this for live events, as otherwise we can't order them sanely\n        // in the timeline relative to ones paginated in by /notifications.\n        // XXX: we could fix this by making EventTimeline support chronological\n        // ordering... but it doesn't, right now.\n        if (syncEventData.oldSyncToken && this.notifEvents.length) {\n            this.notifEvents.sort(function(a, b) {\n                return a.getTs() - b.getTs();\n            });\n            this.notifEvents.forEach(function(event) {\n                client.getNotifTimelineSet().addLiveEvent(event);\n            });\n        }\n\n        // Handle device list updates\n        if (data.device_lists) {\n            if (this.opts.crypto) {\n                await this.opts.crypto.handleDeviceListChanges(syncEventData, data.device_lists);\n            } else {\n                // FIXME if we *don't* have a crypto module, we still need to\n                // invalidate the device lists. But that would require a\n                // substantial bit of rework :/.\n            }\n        }\n\n        // Handle one_time_keys_count\n        if (this.opts.crypto && data.device_one_time_keys_count) {\n            const currentCount = data.device_one_time_keys_count.signed_curve25519 || 0;\n            this.opts.crypto.updateOneTimeKeyCount(currentCount);\n        }\n        if (this.opts.crypto &&\n            (data[\"device_unused_fallback_key_types\"] ||\n                data[\"org.matrix.msc2732.device_unused_fallback_key_types\"])) {\n            // The presence of device_unused_fallback_key_types indicates that the\n            // server supports fallback keys. If there's no unused\n            // signed_curve25519 fallback key we need a new one.\n            const unusedFallbackKeys = data[\"device_unused_fallback_key_types\"] ||\n                data[\"org.matrix.msc2732.device_unused_fallback_key_types\"];\n            this.opts.crypto.setNeedsNewFallback(\n                unusedFallbackKeys instanceof Array &&\n                !unusedFallbackKeys.includes(\"signed_curve25519\"),\n            );\n        }\n    }\n\n    /**\n     * Starts polling the connectivity check endpoint\n     * @param {number} delay How long to delay until the first poll.\n     *        defaults to a short, randomised interval (to prevent\n     *        tightlooping if /versions succeeds but /sync etc. fail).\n     * @return {promise} which resolves once the connection returns\n     */\n    private startKeepAlives(delay?: number): Promise<boolean> {\n        if (delay === undefined) {\n            delay = 2000 + Math.floor(Math.random() * 5000);\n        }\n\n        if (this.keepAliveTimer !== null) {\n            clearTimeout(this.keepAliveTimer);\n        }\n        if (delay > 0) {\n            this.keepAliveTimer = setTimeout(this.pokeKeepAlive.bind(this), delay);\n        } else {\n            this.pokeKeepAlive();\n        }\n        if (!this.connectionReturnedDefer) {\n            this.connectionReturnedDefer = utils.defer();\n        }\n        return this.connectionReturnedDefer.promise;\n    }\n\n    /**\n     * Make a dummy call to /_matrix/client/versions, to see if the HS is\n     * reachable.\n     *\n     * On failure, schedules a call back to itself. On success, resolves\n     * this.connectionReturnedDefer.\n     *\n     * @param {boolean} connDidFail True if a connectivity failure has been detected. Optional.\n     */\n    private pokeKeepAlive(connDidFail = false): void {\n        const success = () => {\n            clearTimeout(this.keepAliveTimer);\n            if (this.connectionReturnedDefer) {\n                this.connectionReturnedDefer.resolve(connDidFail);\n                this.connectionReturnedDefer = null;\n            }\n        };\n\n        this.client.http.request(\n            undefined, // callback\n            Method.Get, \"/_matrix/client/versions\",\n            undefined, // queryParams\n            undefined, // data\n            {\n                prefix: '',\n                localTimeoutMs: 15 * 1000,\n            },\n        ).then(() => {\n            success();\n        }, (err) => {\n            if (err.httpStatus == 400 || err.httpStatus == 404) {\n                // treat this as a success because the server probably just doesn't\n                // support /versions: point is, we're getting a response.\n                // We wait a short time though, just in case somehow the server\n                // is in a mode where it 400s /versions responses and sync etc.\n                // responses fail, this will mean we don't hammer in a loop.\n                this.keepAliveTimer = setTimeout(success, 2000);\n            } else {\n                connDidFail = true;\n                this.keepAliveTimer = setTimeout(\n                    this.pokeKeepAlive.bind(this, connDidFail),\n                    5000 + Math.floor(Math.random() * 5000),\n                );\n                // A keepalive has failed, so we emit the\n                // error state (whether or not this is the\n                // first failure).\n                // Note we do this after setting the timer:\n                // this lets the unit tests advance the mock\n                // clock when they get the error.\n                this.updateSyncState(SyncState.Error, { error: err });\n            }\n        });\n    }\n\n    /**\n     * @param {Object} obj\n     * @return {Object[]}\n     */\n    private mapSyncResponseToRoomArray<T extends ILeftRoom | IJoinedRoom | IInvitedRoom>(\n        obj: Record<string, T>,\n    ): Array<WrappedRoom<T>> {\n        // Maps { roomid: {stuff}, roomid: {stuff} }\n        // to\n        // [{stuff+Room+isBrandNewRoom}, {stuff+Room+isBrandNewRoom}]\n        const client = this.client;\n        return Object.keys(obj).map((roomId) => {\n            const arrObj = obj[roomId] as T & { room: Room, isBrandNewRoom: boolean };\n            let room = client.store.getRoom(roomId);\n            let isBrandNewRoom = false;\n            if (!room) {\n                room = this.createRoom(roomId);\n                isBrandNewRoom = true;\n            }\n            arrObj.room = room;\n            arrObj.isBrandNewRoom = isBrandNewRoom;\n            return arrObj;\n        });\n    }\n\n    /**\n     * @param {Object} obj\n     * @param {Room} room\n     * @param {boolean} decrypt\n     * @return {MatrixEvent[]}\n     */\n    private mapSyncEventsFormat(\n        obj: IInviteState | ITimeline | IEphemeral,\n        room?: Room,\n        decrypt = true,\n    ): MatrixEvent[] {\n        if (!obj || !Array.isArray(obj.events)) {\n            return [];\n        }\n        const mapper = this.client.getEventMapper({ decrypt });\n        return (obj.events as Array<IStrippedState | IRoomEvent | IStateEvent | IMinimalEvent>).map(function(e) {\n            if (room) {\n                e[\"room_id\"] = room.roomId;\n            }\n            return mapper(e);\n        });\n    }\n\n    /**\n     * @param {Room} room\n     */\n    private resolveInvites(room: Room): void {\n        if (!room || !this.opts.resolveInvitesToProfiles) {\n            return;\n        }\n        const client = this.client;\n        // For each invited room member we want to give them a displayname/avatar url\n        // if they have one (the m.room.member invites don't contain this).\n        room.getMembersWithMembership(\"invite\").forEach(function(member) {\n            if (member._requestedProfileInfo) return;\n            member._requestedProfileInfo = true;\n            // try to get a cached copy first.\n            const user = client.getUser(member.userId);\n            let promise;\n            if (user) {\n                promise = Promise.resolve({\n                    avatar_url: user.avatarUrl,\n                    displayname: user.displayName,\n                });\n            } else {\n                promise = client.getProfileInfo(member.userId);\n            }\n            promise.then(function(info) {\n                // slightly naughty by doctoring the invite event but this means all\n                // the code paths remain the same between invite/join display name stuff\n                // which is a worthy trade-off for some minor pollution.\n                const inviteEvent = member.events.member;\n                if (inviteEvent.getContent().membership !== \"invite\") {\n                    // between resolving and now they have since joined, so don't clobber\n                    return;\n                }\n                inviteEvent.getContent().avatar_url = info.avatar_url;\n                inviteEvent.getContent().displayname = info.displayname;\n                // fire listeners\n                member.setMembershipEvent(inviteEvent, room.currentState);\n            }, function(err) {\n                // OH WELL.\n            });\n        });\n    }\n\n    /**\n     * @param {Room} room\n     * @param {MatrixEvent[]} stateEventList A list of state events. This is the state\n     * at the *START* of the timeline list if it is supplied.\n     * @param {MatrixEvent[]} [timelineEventList] A list of timeline events, including threaded. Lower index\n     * @param {boolean} fromCache whether the sync response came from cache\n     * is earlier in time. Higher index is later.\n     */\n    private async processRoomEvents(\n        room: Room,\n        stateEventList: MatrixEvent[],\n        timelineEventList?: MatrixEvent[],\n        fromCache = false,\n    ): Promise<void> {\n        // If there are no events in the timeline yet, initialise it with\n        // the given state events\n        const liveTimeline = room.getLiveTimeline();\n        const timelineWasEmpty = liveTimeline.getEvents().length == 0;\n        if (timelineWasEmpty) {\n            // Passing these events into initialiseState will freeze them, so we need\n            // to compute and cache the push actions for them now, otherwise sync dies\n            // with an attempt to assign to read only property.\n            // XXX: This is pretty horrible and is assuming all sorts of behaviour from\n            // these functions that it shouldn't be. We should probably either store the\n            // push actions cache elsewhere so we can freeze MatrixEvents, or otherwise\n            // find some solution where MatrixEvents are immutable but allow for a cache\n            // field.\n            for (const ev of stateEventList) {\n                this.client.getPushActionsForEvent(ev);\n            }\n            liveTimeline.initialiseState(stateEventList);\n        }\n\n        this.resolveInvites(room);\n\n        // recalculate the room name at this point as adding events to the timeline\n        // may make notifications appear which should have the right name.\n        // XXX: This looks suspect: we'll end up recalculating the room once here\n        // and then again after adding events (processSyncResponse calls it after\n        // calling us) even if no state events were added. It also means that if\n        // one of the room events in timelineEventList is something that needs\n        // a recalculation (like m.room.name) we won't recalculate until we've\n        // finished adding all the events, which will cause the notification to have\n        // the old room name rather than the new one.\n        room.recalculate();\n\n        // If the timeline wasn't empty, we process the state events here: they're\n        // defined as updates to the state before the start of the timeline, so this\n        // starts to roll the state forward.\n        // XXX: That's what we *should* do, but this can happen if we were previously\n        // peeking in a room, in which case we obviously do *not* want to add the\n        // state events here onto the end of the timeline. Historically, the js-sdk\n        // has just set these new state events on the old and new state. This seems\n        // very wrong because there could be events in the timeline that diverge the\n        // state, in which case this is going to leave things out of sync. However,\n        // for now I think it;s best to behave the same as the code has done previously.\n        if (!timelineWasEmpty) {\n            // XXX: As above, don't do this...\n            //room.addLiveEvents(stateEventList || []);\n            // Do this instead...\n            room.oldState.setStateEvents(stateEventList || []);\n            room.currentState.setStateEvents(stateEventList || []);\n        }\n\n        // Execute the timeline events. This will continue to diverge the current state\n        // if the timeline has any state events in it.\n        // This also needs to be done before running push rules on the events as they need\n        // to be decorated with sender etc.\n        room.addLiveEvents(timelineEventList || [], null, fromCache);\n        this.client.processBeaconEvents(room, timelineEventList);\n    }\n\n    /**\n     * Takes a list of timelineEvents and adds and adds to notifEvents\n     * as appropriate.\n     * This must be called after the room the events belong to has been stored.\n     *\n     * @param {Room} room\n     * @param {MatrixEvent[]} [timelineEventList] A list of timeline events. Lower index\n     * is earlier in time. Higher index is later.\n     */\n    private processEventsForNotifs(room: Room, timelineEventList: MatrixEvent[]): void {\n        // gather our notifications into this.notifEvents\n        if (this.client.getNotifTimelineSet()) {\n            for (let i = 0; i < timelineEventList.length; i++) {\n                const pushActions = this.client.getPushActionsForEvent(timelineEventList[i]);\n                if (pushActions && pushActions.notify &&\n                    pushActions.tweaks && pushActions.tweaks.highlight) {\n                    this.notifEvents.push(timelineEventList[i]);\n                }\n            }\n        }\n    }\n\n    /**\n     * @return {string}\n     */\n    private getGuestFilter(): string {\n        // Dev note: This used to be conditional to return a filter of 20 events maximum, but\n        // the condition never went to the other branch. This is now hardcoded.\n        return \"{}\";\n    }\n\n    /**\n     * Sets the sync state and emits an event to say so\n     * @param {String} newState The new state string\n     * @param {Object} data Object of additional data to emit in the event\n     */\n    private updateSyncState(newState: SyncState, data?: ISyncStateData): void {\n        const old = this.syncState;\n        this.syncState = newState;\n        this.syncStateData = data;\n        this.client.emit(ClientEvent.Sync, this.syncState, old, data);\n    }\n\n    /**\n     * Event handler for the 'online' event\n     * This event is generally unreliable and precise behaviour\n     * varies between browsers, so we poll for connectivity too,\n     * but this might help us reconnect a little faster.\n     */\n    private onOnline = (): void => {\n        debuglog(\"Browser thinks we are back online\");\n        this.startKeepAlives(0);\n    };\n}\n\nfunction createNewUser(client: MatrixClient, userId: string): User {\n    const user = new User(userId);\n    client.reEmitter.reEmit(user, [\n        UserEvent.AvatarUrl,\n        UserEvent.DisplayName,\n        UserEvent.Presence,\n        UserEvent.CurrentlyActive,\n        UserEvent.LastPresenceTs,\n    ]);\n    return user;\n}\n\n",
    "/*\nCopyright 2016 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/** @module timeline-window */\n\nimport { Direction, EventTimeline } from './models/event-timeline';\nimport { logger } from './logger';\nimport { MatrixClient } from \"./client\";\nimport { EventTimelineSet } from \"./models/event-timeline-set\";\nimport { MatrixEvent } from \"./models/event\";\n\n/**\n * @private\n */\nconst DEBUG = false;\n\n/**\n * @private\n */\nconst debuglog = DEBUG ? logger.log.bind(logger) : function() {};\n\n/**\n * the number of times we ask the server for more events before giving up\n *\n * @private\n */\nconst DEFAULT_PAGINATE_LOOP_LIMIT = 5;\n\ninterface IOpts {\n    windowLimit?: number;\n}\n\nexport class TimelineWindow {\n    private readonly windowLimit: number;\n    // these will be TimelineIndex objects; they delineate the 'start' and\n    // 'end' of the window.\n    //\n    // start.index is inclusive; end.index is exclusive.\n    private start?: TimelineIndex = null;\n    private end?: TimelineIndex = null;\n    private eventCount = 0;\n\n    /**\n     * Construct a TimelineWindow.\n     *\n     * <p>This abstracts the separate timelines in a Matrix {@link\n        * module:models/room|Room} into a single iterable thing. It keeps track of\n     * the start and endpoints of the window, which can be advanced with the help\n     * of pagination requests.\n     *\n     * <p>Before the window is useful, it must be initialised by calling {@link\n        * module:timeline-window~TimelineWindow#load|load}.\n     *\n     * <p>Note that the window will not automatically extend itself when new events\n     * are received from /sync; you should arrange to call {@link\n        * module:timeline-window~TimelineWindow#paginate|paginate} on {@link\n        * module:client~MatrixClient.event:\"Room.timeline\"|Room.timeline} events.\n     *\n     * @param {MatrixClient} client   MatrixClient to be used for context/pagination\n     *   requests.\n     *\n     * @param {EventTimelineSet} timelineSet  The timelineSet to track\n     *\n     * @param {Object} [opts] Configuration options for this window\n     *\n     * @param {number} [opts.windowLimit = 1000] maximum number of events to keep\n     *    in the window. If more events are retrieved via pagination requests,\n     *    excess events will be dropped from the other end of the window.\n     *\n     * @constructor\n     */\n    constructor(\n        private readonly client: MatrixClient,\n        private readonly timelineSet: EventTimelineSet,\n        opts: IOpts = {},\n    ) {\n        this.windowLimit = opts.windowLimit || 1000;\n    }\n\n    /**\n     * Initialise the window to point at a given event, or the live timeline\n     *\n     * @param {string} [initialEventId]   If given, the window will contain the\n     *    given event\n     * @param {number} [initialWindowSize = 20]   Size of the initial window\n     *\n     * @return {Promise}\n     */\n    public load(initialEventId?: string, initialWindowSize = 20): Promise<void> {\n        // given an EventTimeline, find the event we were looking for, and initialise our\n        // fields so that the event in question is in the middle of the window.\n        const initFields = (timeline: EventTimeline) => {\n            let eventIndex: number;\n\n            const events = timeline.getEvents();\n\n            if (!initialEventId) {\n                // we were looking for the live timeline: initialise to the end\n                eventIndex = events.length;\n            } else {\n                eventIndex = events.findIndex(e => e.getId() === initialEventId);\n\n                if (eventIndex < 0) {\n                    throw new Error(\"getEventTimeline result didn't include requested event\");\n                }\n            }\n\n            const endIndex = Math.min(events.length, eventIndex + Math.ceil(initialWindowSize / 2));\n            const startIndex = Math.max(0, endIndex - initialWindowSize);\n            this.start = new TimelineIndex(timeline, startIndex - timeline.getBaseIndex());\n            this.end = new TimelineIndex(timeline, endIndex - timeline.getBaseIndex());\n            this.eventCount = endIndex - startIndex;\n        };\n\n        // We avoid delaying the resolution of the promise by a reactor tick if we already have the data we need,\n        // which is important to keep room-switching feeling snappy.\n        if (initialEventId) {\n            const timeline = this.timelineSet.getTimelineForEvent(initialEventId);\n            if (timeline) {\n                // hot-path optimization to save a reactor tick by replicating the sync check getTimelineForEvent does.\n                initFields(timeline);\n                return Promise.resolve();\n            }\n\n            return this.client.getEventTimeline(this.timelineSet, initialEventId).then(initFields);\n        } else {\n            const tl = this.timelineSet.getLiveTimeline();\n            initFields(tl);\n            return Promise.resolve();\n        }\n    }\n\n    /**\n     * Get the TimelineIndex of the window in the given direction.\n     *\n     * @param {string} direction   EventTimeline.BACKWARDS to get the TimelineIndex\n     * at the start of the window; EventTimeline.FORWARDS to get the TimelineIndex at\n     * the end.\n     *\n     * @return {TimelineIndex} The requested timeline index if one exists, null\n     * otherwise.\n     */\n    public getTimelineIndex(direction: Direction): TimelineIndex {\n        if (direction == EventTimeline.BACKWARDS) {\n            return this.start;\n        } else if (direction == EventTimeline.FORWARDS) {\n            return this.end;\n        } else {\n            throw new Error(\"Invalid direction '\" + direction + \"'\");\n        }\n    }\n\n    /**\n     * Try to extend the window using events that are already in the underlying\n     * TimelineIndex.\n     *\n     * @param {string} direction   EventTimeline.BACKWARDS to try extending it\n     *   backwards; EventTimeline.FORWARDS to try extending it forwards.\n     * @param {number} size   number of events to try to extend by.\n     *\n     * @return {boolean} true if the window was extended, false otherwise.\n     */\n    public extend(direction: Direction, size: number): boolean {\n        const tl = this.getTimelineIndex(direction);\n\n        if (!tl) {\n            debuglog(\"TimelineWindow: no timeline yet\");\n            return false;\n        }\n\n        const count = (direction == EventTimeline.BACKWARDS) ?\n            tl.retreat(size) : tl.advance(size);\n\n        if (count) {\n            this.eventCount += count;\n            debuglog(\"TimelineWindow: increased cap by \" + count +\n                \" (now \" + this.eventCount + \")\");\n            // remove some events from the other end, if necessary\n            const excess = this.eventCount - this.windowLimit;\n            if (excess > 0) {\n                this.unpaginate(excess, direction != EventTimeline.BACKWARDS);\n            }\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Check if this window can be extended\n     *\n     * <p>This returns true if we either have more events, or if we have a\n     * pagination token which means we can paginate in that direction. It does not\n     * necessarily mean that there are more events available in that direction at\n     * this time.\n     *\n     * @param {string} direction   EventTimeline.BACKWARDS to check if we can\n     *   paginate backwards; EventTimeline.FORWARDS to check if we can go forwards\n     *\n     * @return {boolean} true if we can paginate in the given direction\n     */\n    public canPaginate(direction: Direction): boolean {\n        const tl = this.getTimelineIndex(direction);\n\n        if (!tl) {\n            debuglog(\"TimelineWindow: no timeline yet\");\n            return false;\n        }\n\n        if (direction == EventTimeline.BACKWARDS) {\n            if (tl.index > tl.minIndex()) {\n                return true;\n            }\n        } else {\n            if (tl.index < tl.maxIndex()) {\n                return true;\n            }\n        }\n\n        return Boolean(tl.timeline.getNeighbouringTimeline(direction) ||\n            tl.timeline.getPaginationToken(direction) !== null);\n    }\n\n    /**\n     * Attempt to extend the window\n     *\n     * @param {string} direction   EventTimeline.BACKWARDS to extend the window\n     *    backwards (towards older events); EventTimeline.FORWARDS to go forwards.\n     *\n     * @param {number} size   number of events to try to extend by. If fewer than this\n     *    number are immediately available, then we return immediately rather than\n     *    making an API call.\n     *\n     * @param {boolean} [makeRequest = true] whether we should make API calls to\n     *    fetch further events if we don't have any at all. (This has no effect if\n     *    the room already knows about additional events in the relevant direction,\n     *    even if there are fewer than 'size' of them, as we will just return those\n     *    we already know about.)\n     *\n     * @param {number} [requestLimit = 5] limit for the number of API requests we\n     *    should make.\n     *\n     * @return {Promise} Resolves to a boolean which is true if more events\n     *    were successfully retrieved.\n     */\n    public paginate(\n        direction: Direction,\n        size: number,\n        makeRequest = true,\n        requestLimit = DEFAULT_PAGINATE_LOOP_LIMIT,\n    ): Promise<boolean> {\n        // Either wind back the message cap (if there are enough events in the\n        // timeline to do so), or fire off a pagination request.\n        const tl = this.getTimelineIndex(direction);\n\n        if (!tl) {\n            debuglog(\"TimelineWindow: no timeline yet\");\n            return Promise.resolve(false);\n        }\n\n        if (tl.pendingPaginate) {\n            return tl.pendingPaginate;\n        }\n\n        // try moving the cap\n        if (this.extend(direction, size)) {\n            return Promise.resolve(true);\n        }\n\n        if (!makeRequest || requestLimit === 0) {\n            // todo: should we return something different to indicate that there\n            // might be more events out there, but we haven't found them yet?\n            return Promise.resolve(false);\n        }\n\n        // try making a pagination request\n        const token = tl.timeline.getPaginationToken(direction);\n        if (token === null) {\n            debuglog(\"TimelineWindow: no token\");\n            return Promise.resolve(false);\n        }\n\n        debuglog(\"TimelineWindow: starting request\");\n\n        const prom = this.client.paginateEventTimeline(tl.timeline, {\n            backwards: direction == EventTimeline.BACKWARDS,\n            limit: size,\n        }).finally(function() {\n            tl.pendingPaginate = null;\n        }).then((r) => {\n            debuglog(\"TimelineWindow: request completed with result \" + r);\n            if (!r) {\n                // end of timeline\n                return false;\n            }\n\n            // recurse to advance the index into the results.\n            //\n            // If we don't get any new events, we want to make sure we keep asking\n            // the server for events for as long as we have a valid pagination\n            // token. In particular, we want to know if we've actually hit the\n            // start of the timeline, or if we just happened to know about all of\n            // the events thanks to https://matrix.org/jira/browse/SYN-645.\n            //\n            // On the other hand, we necessarily want to wait forever for the\n            // server to make its mind up about whether there are other events,\n            // because it gives a bad user experience\n            // (https://github.com/vector-im/vector-web/issues/1204).\n            return this.paginate(direction, size, true, requestLimit - 1);\n        });\n        tl.pendingPaginate = prom;\n        return prom;\n    }\n\n    /**\n     * Remove `delta` events from the start or end of the timeline.\n     *\n     * @param {number}  delta           number of events to remove from the timeline\n     * @param {boolean} startOfTimeline if events should be removed from the start\n     *     of the timeline.\n     */\n    public unpaginate(delta: number, startOfTimeline: boolean): void {\n        const tl = startOfTimeline ? this.start : this.end;\n\n        // sanity-check the delta\n        if (delta > this.eventCount || delta < 0) {\n            throw new Error(\"Attemting to unpaginate \" + delta + \" events, but \" +\n                \"only have \" + this.eventCount + \" in the timeline\");\n        }\n\n        while (delta > 0) {\n            const count = startOfTimeline ? tl.advance(delta) : tl.retreat(delta);\n            if (count <= 0) {\n                // sadness. This shouldn't be possible.\n                throw new Error(\n                    \"Unable to unpaginate any further, but still have \" +\n                    this.eventCount + \" events\");\n            }\n\n            delta -= count;\n            this.eventCount -= count;\n            debuglog(\"TimelineWindow.unpaginate: dropped \" + count +\n                \" (now \" + this.eventCount + \")\");\n        }\n    }\n\n    /**\n     * Get a list of the events currently in the window\n     *\n     * @return {MatrixEvent[]} the events in the window\n     */\n    public getEvents(): MatrixEvent[] {\n        if (!this.start) {\n            // not yet loaded\n            return [];\n        }\n\n        const result = [];\n\n        // iterate through each timeline between this.start and this.end\n        // (inclusive).\n        let timeline = this.start.timeline;\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            const events = timeline.getEvents();\n\n            // For the first timeline in the chain, we want to start at\n            // this.start.index. For the last timeline in the chain, we want to\n            // stop before this.end.index. Otherwise, we want to copy all of the\n            // events in the timeline.\n            //\n            // (Note that both this.start.index and this.end.index are relative\n            // to their respective timelines' BaseIndex).\n            //\n            let startIndex = 0;\n            let endIndex = events.length;\n            if (timeline === this.start.timeline) {\n                startIndex = this.start.index + timeline.getBaseIndex();\n            }\n            if (timeline === this.end.timeline) {\n                endIndex = this.end.index + timeline.getBaseIndex();\n            }\n\n            for (let i = startIndex; i < endIndex; i++) {\n                result.push(events[i]);\n            }\n\n            // if we're not done, iterate to the next timeline.\n            if (timeline === this.end.timeline) {\n                break;\n            } else {\n                timeline = timeline.getNeighbouringTimeline(EventTimeline.FORWARDS);\n            }\n        }\n\n        return result;\n    }\n}\n\n/**\n * a thing which contains a timeline reference, and an index into it.\n *\n * @constructor\n * @param {EventTimeline} timeline\n * @param {number} index\n * @private\n */\nexport class TimelineIndex {\n    public pendingPaginate?: Promise<boolean>;\n\n    // index: the indexes are relative to BaseIndex, so could well be negative.\n    constructor(public timeline: EventTimeline, public index: number) {}\n\n    /**\n     * @return {number} the minimum possible value for the index in the current\n     *    timeline\n     */\n    public minIndex(): number {\n        return this.timeline.getBaseIndex() * -1;\n    }\n\n    /**\n     * @return {number} the maximum possible value for the index in the current\n     *    timeline (exclusive - ie, it actually returns one more than the index\n     *    of the last element).\n     */\n    public maxIndex(): number {\n        return this.timeline.getEvents().length - this.timeline.getBaseIndex();\n    }\n\n    /**\n     * Try move the index forward, or into the neighbouring timeline\n     *\n     * @param {number} delta  number of events to advance by\n     * @return {number} number of events successfully advanced by\n     */\n    public advance(delta: number): number {\n        if (!delta) {\n            return 0;\n        }\n\n        // first try moving the index in the current timeline. See if there is room\n        // to do so.\n        let cappedDelta;\n        if (delta < 0) {\n            // we want to wind the index backwards.\n            //\n            // (this.minIndex() - this.index) is a negative number whose magnitude\n            // is the amount of room we have to wind back the index in the current\n            // timeline. We cap delta to this quantity.\n            cappedDelta = Math.max(delta, this.minIndex() - this.index);\n            if (cappedDelta < 0) {\n                this.index += cappedDelta;\n                return cappedDelta;\n            }\n        } else {\n            // we want to wind the index forwards.\n            //\n            // (this.maxIndex() - this.index) is a (positive) number whose magnitude\n            // is the amount of room we have to wind forward the index in the current\n            // timeline. We cap delta to this quantity.\n            cappedDelta = Math.min(delta, this.maxIndex() - this.index);\n            if (cappedDelta > 0) {\n                this.index += cappedDelta;\n                return cappedDelta;\n            }\n        }\n\n        // the index is already at the start/end of the current timeline.\n        //\n        // next see if there is a neighbouring timeline to switch to.\n        const neighbour = this.timeline.getNeighbouringTimeline(\n            delta < 0 ? EventTimeline.BACKWARDS : EventTimeline.FORWARDS);\n        if (neighbour) {\n            this.timeline = neighbour;\n            if (delta < 0) {\n                this.index = this.maxIndex();\n            } else {\n                this.index = this.minIndex();\n            }\n\n            debuglog(\"paginate: switched to new neighbour\");\n\n            // recurse, using the next timeline\n            return this.advance(delta);\n        }\n\n        return 0;\n    }\n\n    /**\n     * Try move the index backwards, or into the neighbouring timeline\n     *\n     * @param {number} delta  number of events to retreat by\n     * @return {number} number of events successfully retreated by\n     */\n    public retreat(delta: number): number {\n        return this.advance(delta * -1) * -1;\n    }\n}\n",
    "/*\nCopyright 2015, 2016 OpenMarket Ltd\nCopyright 2019 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * This is an internal module.\n * @module utils\n */\n\nimport unhomoglyph from \"unhomoglyph\";\nimport promiseRetry from \"p-retry\";\n\nimport type NodeCrypto from \"crypto\";\nimport { MatrixEvent } from \".\";\nimport { M_TIMESTAMP } from \"./@types/location\";\n\n/**\n * Encode a dictionary of query parameters.\n * Omits any undefined/null values.\n * @param {Object} params A dict of key/values to encode e.g.\n * {\"foo\": \"bar\", \"baz\": \"taz\"}\n * @return {string} The encoded string e.g. foo=bar&baz=taz\n */\nexport function encodeParams(params: Record<string, string | number | boolean>): string {\n    const searchParams = new URLSearchParams();\n    for (const [key, val] of Object.entries(params)) {\n        if (val !== undefined && val !== null) {\n            searchParams.set(key, String(val));\n        }\n    }\n    return searchParams.toString();\n}\n\nexport type QueryDict = Record<string, string | string[]>;\n\n/**\n * Decode a query string in `application/x-www-form-urlencoded` format.\n * @param {string} query A query string to decode e.g.\n * foo=bar&via=server1&server2\n * @return {Object} The decoded object, if any keys occurred multiple times\n * then the value will be an array of strings, else it will be an array.\n * This behaviour matches Node's qs.parse but is built on URLSearchParams\n * for native web compatibility\n */\nexport function decodeParams(query: string): QueryDict {\n    const o: QueryDict = {};\n    const params = new URLSearchParams(query);\n    for (const key of params.keys()) {\n        const val = params.getAll(key);\n        o[key] = val.length === 1 ? val[0] : val;\n    }\n    return o;\n}\n\n/**\n * Encodes a URI according to a set of template variables. Variables will be\n * passed through encodeURIComponent.\n * @param {string} pathTemplate The path with template variables e.g. '/foo/$bar'.\n * @param {Object} variables The key/value pairs to replace the template\n * variables with. E.g. { \"$bar\": \"baz\" }.\n * @return {string} The result of replacing all template variables e.g. '/foo/baz'.\n */\nexport function encodeUri(pathTemplate: string,\n    variables: Record<string, string>): string {\n    for (const key in variables) {\n        if (!variables.hasOwnProperty(key)) {\n            continue;\n        }\n        pathTemplate = pathTemplate.replace(\n            key, encodeURIComponent(variables[key]),\n        );\n    }\n    return pathTemplate;\n}\n\n/**\n * The removeElement() method removes the first element in the array that\n * satisfies (returns true) the provided testing function.\n * @param {Array} array The array.\n * @param {Function} fn Function to execute on each value in the array, with the\n * function signature <code>fn(element, index, array)</code>. Return true to\n * remove this element and break.\n * @param {boolean} reverse True to search in reverse order.\n * @return {boolean} True if an element was removed.\n */\nexport function removeElement<T>(\n    array: T[],\n    fn: (t: T, i?: number, a?: T[]) => boolean,\n    reverse?: boolean,\n): boolean {\n    let i: number;\n    if (reverse) {\n        for (i = array.length - 1; i >= 0; i--) {\n            if (fn(array[i], i, array)) {\n                array.splice(i, 1);\n                return true;\n            }\n        }\n    } else {\n        for (i = 0; i < array.length; i++) {\n            if (fn(array[i], i, array)) {\n                array.splice(i, 1);\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * Checks if the given thing is a function.\n * @param {*} value The thing to check.\n * @return {boolean} True if it is a function.\n */\nexport function isFunction(value: any) {\n    return Object.prototype.toString.call(value) === \"[object Function]\";\n}\n\n/**\n * Checks that the given object has the specified keys.\n * @param {Object} obj The object to check.\n * @param {string[]} keys The list of keys that 'obj' must have.\n * @throws If the object is missing keys.\n */\n// note using 'keys' here would shadow the 'keys' function defined above\nexport function checkObjectHasKeys(obj: object, keys: string[]) {\n    for (let i = 0; i < keys.length; i++) {\n        if (!obj.hasOwnProperty(keys[i])) {\n            throw new Error(\"Missing required key: \" + keys[i]);\n        }\n    }\n}\n\n/**\n * Checks that the given object has no extra keys other than the specified ones.\n * @param {Object} obj The object to check.\n * @param {string[]} allowedKeys The list of allowed key names.\n * @throws If there are extra keys.\n */\nexport function checkObjectHasNoAdditionalKeys(obj: object, allowedKeys: string[]): void {\n    for (const key in obj) {\n        if (!obj.hasOwnProperty(key)) {\n            continue;\n        }\n        if (allowedKeys.indexOf(key) === -1) {\n            throw new Error(\"Unknown key: \" + key);\n        }\n    }\n}\n\n/**\n * Deep copy the given object. The object MUST NOT have circular references and\n * MUST NOT have functions.\n * @param {Object} obj The object to deep copy.\n * @return {Object} A copy of the object without any references to the original.\n */\nexport function deepCopy<T>(obj: T): T {\n    return JSON.parse(JSON.stringify(obj));\n}\n\n/**\n * Compare two objects for equality. The objects MUST NOT have circular references.\n *\n * @param {Object} x The first object to compare.\n * @param {Object} y The second object to compare.\n *\n * @return {boolean} true if the two objects are equal\n */\nexport function deepCompare(x: any, y: any): boolean {\n    // Inspired by\n    // http://stackoverflow.com/questions/1068834/object-comparison-in-javascript#1144249\n\n    // Compare primitives and functions.\n    // Also check if both arguments link to the same object.\n    if (x === y) {\n        return true;\n    }\n\n    if (typeof x !== typeof y) {\n        return false;\n    }\n\n    // special-case NaN (since NaN !== NaN)\n    if (typeof x === 'number' && isNaN(x) && isNaN(y)) {\n        return true;\n    }\n\n    // special-case null (since typeof null == 'object', but null.constructor\n    // throws)\n    if (x === null || y === null) {\n        return x === y;\n    }\n\n    // everything else is either an unequal primitive, or an object\n    if (!(x instanceof Object)) {\n        return false;\n    }\n\n    // check they are the same type of object\n    if (x.constructor !== y.constructor || x.prototype !== y.prototype) {\n        return false;\n    }\n\n    // special-casing for some special types of object\n    if (x instanceof RegExp || x instanceof Date) {\n        return x.toString() === y.toString();\n    }\n\n    // the object algorithm works for Array, but it's sub-optimal.\n    if (x instanceof Array) {\n        if (x.length !== y.length) {\n            return false;\n        }\n\n        for (let i = 0; i < x.length; i++) {\n            if (!deepCompare(x[i], y[i])) {\n                return false;\n            }\n        }\n    } else {\n        // disable jshint \"The body of a for in should be wrapped in an if\n        // statement\"\n        /* jshint -W089 */\n\n        // check that all of y's direct keys are in x\n        let p;\n        for (p in y) {\n            if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {\n                return false;\n            }\n        }\n\n        // finally, compare each of x's keys with y\n        for (p in y) { // eslint-disable-line guard-for-in\n            if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {\n                return false;\n            }\n            if (!deepCompare(x[p], y[p])) {\n                return false;\n            }\n        }\n    }\n    /* jshint +W089 */\n    return true;\n}\n\n// Dev note: This returns a tuple, but jsdoc doesn't like that. https://github.com/jsdoc/jsdoc/issues/1703\n/**\n * Creates an array of object properties/values (entries) then\n * sorts the result by key, recursively. The input object must\n * ensure it does not have loops. If the input is not an object\n * then it will be returned as-is.\n * @param {*} obj The object to get entries of\n * @returns {Array} The entries, sorted by key.\n */\nexport function deepSortedObjectEntries(obj: any): [string, any][] {\n    if (typeof(obj) !== \"object\") return obj;\n\n    // Apparently these are object types...\n    if (obj === null || obj === undefined || Array.isArray(obj)) return obj;\n\n    const pairs: [string, any][] = [];\n    for (const [k, v] of Object.entries(obj)) {\n        pairs.push([k, deepSortedObjectEntries(v)]);\n    }\n\n    // lexicographicCompare is faster than localeCompare, so let's use that.\n    pairs.sort((a, b) => lexicographicCompare(a[0], b[0]));\n\n    return pairs;\n}\n\n/**\n * Inherit the prototype methods from one constructor into another. This is a\n * port of the Node.js implementation with an Object.create polyfill.\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexport function inherits(ctor: Function, superCtor: Function) {\n    // Add util.inherits from Node.js\n    // Source:\n    // https://github.com/joyent/node/blob/master/lib/util.js\n    // Copyright Joyent, Inc. and other Node contributors.\n    //\n    // Permission is hereby granted, free of charge, to any person obtaining a\n    // copy of this software and associated documentation files (the\n    // \"Software\"), to deal in the Software without restriction, including\n    // without limitation the rights to use, copy, modify, merge, publish,\n    // distribute, sublicense, and/or sell copies of the Software, and to permit\n    // persons to whom the Software is furnished to do so, subject to the\n    // following conditions:\n    //\n    // The above copyright notice and this permission notice shall be included\n    // in all copies or substantial portions of the Software.\n    //\n    // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n    // USE OR OTHER DEALINGS IN THE SOFTWARE.\n    (ctor as any).super_ = superCtor;\n    ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n            value: ctor,\n            enumerable: false,\n            writable: true,\n            configurable: true,\n        },\n    });\n}\n\n/**\n * Polyfills inheritance for prototypes by allowing different kinds of\n * super types. Typically prototypes would use `SuperType.call(this, params)`\n * though this doesn't always work in some environments - this function\n * falls back to using `Object.assign()` to clone a constructed copy\n * of the super type onto `thisArg`.\n * @param {any} thisArg The child instance. Modified in place.\n * @param {any} SuperType The type to act as a super instance\n * @param {any} params Arguments to supply to the super type's constructor\n */\nexport function polyfillSuper(thisArg: any, SuperType: any, ...params: any[]) {\n    try {\n        SuperType.call(thisArg, ...params);\n    } catch (e) {\n        // fall back to Object.assign to just clone the thing\n        const fakeSuper = new SuperType(...params);\n        Object.assign(thisArg, fakeSuper);\n    }\n}\n\n/**\n * Returns whether the given value is a finite number without type-coercion\n *\n * @param {*} value the value to test\n * @return {boolean} whether or not value is a finite number without type-coercion\n */\nexport function isNumber(value: any): boolean {\n    return typeof value === 'number' && isFinite(value);\n}\n\n/**\n * Removes zero width chars, diacritics and whitespace from the string\n * Also applies an unhomoglyph on the string, to prevent similar looking chars\n * @param {string} str the string to remove hidden characters from\n * @return {string} a string with the hidden characters removed\n */\nexport function removeHiddenChars(str: string): string {\n    if (typeof str === \"string\") {\n        return unhomoglyph(str.normalize('NFD').replace(removeHiddenCharsRegex, ''));\n    }\n    return \"\";\n}\n\n/**\n * Removes the direction override characters from a string\n * @param {string} input\n * @returns string with chars removed\n */\nexport function removeDirectionOverrideChars(str: string): string {\n    if (typeof str === \"string\") {\n        return str.replace(/[\\u202d-\\u202e]/g, '');\n    }\n    return \"\";\n}\n\nexport function normalize(str: string): string {\n    // Note: we have to match the filter with the removeHiddenChars() because the\n    // function strips spaces and other characters (M becomes RN for example, in lowercase).\n    return removeHiddenChars(str.toLowerCase())\n        // Strip all punctuation\n        .replace(/[\\\\'!\"#$%&()*+,\\-./:;<=>?@[\\]^_`{|}~\\u2000-\\u206f\\u2e00-\\u2e7f]/g, \"\")\n        // We also doubly convert to lowercase to work around oddities of the library.\n        .toLowerCase();\n}\n\n// Regex matching bunch of unicode control characters and otherwise misleading/invisible characters.\n// Includes:\n// various width spaces U+2000 - U+200D\n// LTR and RTL marks U+200E and U+200F\n// LTR/RTL and other directional formatting marks U+202A - U+202F\n// Arabic Letter RTL mark U+061C\n// Combining characters U+0300 - U+036F\n// Zero width no-break space (BOM) U+FEFF\n// eslint-disable-next-line no-misleading-character-class\nconst removeHiddenCharsRegex = /[\\u2000-\\u200F\\u202A-\\u202F\\u0300-\\u036F\\uFEFF\\u061C\\s]/g;\n\nexport function escapeRegExp(string: string): string {\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n}\n\nexport function globToRegexp(glob: string, extended?: any): string {\n    extended = typeof(extended) === 'boolean' ? extended : true;\n    // From\n    // https://github.com/matrix-org/synapse/blob/abbee6b29be80a77e05730707602f3bbfc3f38cb/synapse/push/__init__.py#L132\n    // Because micromatch is about 130KB with dependencies,\n    // and minimatch is not much better.\n    let pat = escapeRegExp(glob);\n    pat = pat.replace(/\\\\\\*/g, '.*');\n    pat = pat.replace(/\\?/g, '.');\n    if (extended) {\n        pat = pat.replace(/\\\\\\[(!|)(.*)\\\\]/g, function(match, p1, p2, offset, string) {\n            const first = p1 && '^' || '';\n            const second = p2.replace(/\\\\-/, '-');\n            return '[' + first + second + ']';\n        });\n    }\n    return pat;\n}\n\nexport function ensureNoTrailingSlash(url: string): string {\n    if (url && url.endsWith(\"/\")) {\n        return url.slice(0, -1);\n    } else {\n        return url;\n    }\n}\n\n// Returns a promise which resolves with a given value after the given number of ms\nexport function sleep<T>(ms: number, value?: T): Promise<T> {\n    return new Promise((resolve => {\n        setTimeout(resolve, ms, value);\n    }));\n}\n\nexport function isNullOrUndefined(val: any): boolean {\n    return val === null || val === undefined;\n}\n\nexport interface IDeferred<T> {\n    resolve: (value: T | Promise<T>) => void;\n    reject: (reason?: any) => void;\n    promise: Promise<T>;\n}\n\n// Returns a Deferred\nexport function defer<T = void>(): IDeferred<T> {\n    let resolve;\n    let reject;\n\n    const promise = new Promise<T>((_resolve, _reject) => {\n        resolve = _resolve;\n        reject = _reject;\n    });\n\n    return { resolve, reject, promise };\n}\n\nexport async function promiseMapSeries<T>(\n    promises: T[],\n    fn: (t: T) => void,\n): Promise<void> {\n    for (const o of promises) {\n        await fn(await o);\n    }\n}\n\nexport function promiseTry<T>(fn: () => T | Promise<T>): Promise<T> {\n    return new Promise((resolve) => resolve(fn()));\n}\n\n// Creates and awaits all promises, running no more than `chunkSize` at the same time\nexport async function chunkPromises<T>(fns: (() => Promise<T>)[], chunkSize: number): Promise<T[]> {\n    const results: T[] = [];\n    for (let i = 0; i < fns.length; i += chunkSize) {\n        results.push(...(await Promise.all(fns.slice(i, i + chunkSize).map(fn => fn()))));\n    }\n    return results;\n}\n\n/**\n * Retries the function until it succeeds or is interrupted. The given function must return\n * a promise which throws/rejects on error, otherwise the retry will assume the request\n * succeeded. The promise chain returned will contain the successful promise. The given function\n * should always return a new promise.\n * @param {Function} promiseFn The function to call to get a fresh promise instance. Takes an\n * attempt count as an argument, for logging/debugging purposes.\n * @returns {Promise<T>} The promise for the retried operation.\n */\nexport function simpleRetryOperation<T>(promiseFn: (attempt: number) => Promise<T>): Promise<T> {\n    return promiseRetry((attempt: number) => {\n        return promiseFn(attempt);\n    }, {\n        forever: true,\n        factor: 2,\n        minTimeout: 3000, // ms\n        maxTimeout: 15000, // ms\n    });\n}\n\n// We need to be able to access the Node.js crypto library from within the\n// Matrix SDK without needing to `require(\"crypto\")`, which will fail in\n// browsers.  So `index.ts` will call `setCrypto` to store it, and when we need\n// it, we can call `getCrypto`.\nlet crypto: typeof NodeCrypto;\n\nexport function setCrypto(c: typeof NodeCrypto) {\n    crypto = c;\n}\n\nexport function getCrypto(): typeof NodeCrypto {\n    return crypto;\n}\n\n// String averaging inspired by https://stackoverflow.com/a/2510816\n// Dev note: We make the alphabet a string because it's easier to write syntactically\n// than arrays. Thankfully, strings implement the useful parts of the Array interface\n// anyhow.\n\n/**\n * The default alphabet used by string averaging in this SDK. This matches\n * all usefully printable ASCII characters (0x20-0x7E, inclusive).\n */\nexport const DEFAULT_ALPHABET = (() => {\n    let str = \"\";\n    for (let c = 0x20; c <= 0x7E; c++) {\n        str += String.fromCharCode(c);\n    }\n    return str;\n})();\n\n/**\n * Pads a string using the given alphabet as a base. The returned string will be\n * padded at the end with the first character in the alphabet.\n *\n * This is intended for use with string averaging.\n * @param {string} s The string to pad.\n * @param {number} n The length to pad to.\n * @param {string} alphabet The alphabet to use as a single string.\n * @returns {string} The padded string.\n */\nexport function alphabetPad(s: string, n: number, alphabet = DEFAULT_ALPHABET): string {\n    return s.padEnd(n, alphabet[0]);\n}\n\n/**\n * Converts a baseN number to a string, where N is the alphabet's length.\n *\n * This is intended for use with string averaging.\n * @param {bigint} n The baseN number.\n * @param {string} alphabet The alphabet to use as a single string.\n * @returns {string} The baseN number encoded as a string from the alphabet.\n */\nexport function baseToString(n: bigint, alphabet = DEFAULT_ALPHABET): string {\n    // Developer note: the stringToBase() function offsets the character set by 1 so that repeated\n    // characters (ie: \"aaaaaa\" in a..z) don't come out as zero. We have to reverse this here as\n    // otherwise we'll be wrong in our conversion. Undoing a +1 before an exponent isn't very fun\n    // though, so we rely on a lengthy amount of `x - 1` and integer division rules to reach a\n    // sane state. This also means we have to do rollover detection: see below.\n\n    const len = BigInt(alphabet.length);\n    if (n <= len) {\n        return alphabet[Number(n) - 1] ?? \"\";\n    }\n\n    let d = n / len;\n    let r = Number(n % len) - 1;\n\n    // Rollover detection: if the remainder is negative, it means that the string needs\n    // to roll over by 1 character downwards (ie: in a..z, the previous to \"aaa\" would be\n    // \"zz\").\n    if (r < 0) {\n        d -= BigInt(Math.abs(r)); // abs() is just to be clear what we're doing. Could also `+= r`.\n        r = Number(len) - 1;\n    }\n\n    return baseToString(d, alphabet) + alphabet[r];\n}\n\n/**\n * Converts a string to a baseN number, where N is the alphabet's length.\n *\n * This is intended for use with string averaging.\n * @param {string} s The string to convert to a number.\n * @param {string} alphabet The alphabet to use as a single string.\n * @returns {bigint} The baseN number.\n */\nexport function stringToBase(s: string, alphabet = DEFAULT_ALPHABET): bigint {\n    const len = BigInt(alphabet.length);\n\n    // In our conversion to baseN we do a couple performance optimizations to avoid using\n    // excess CPU and such. To create baseN numbers, the input string needs to be reversed\n    // so the exponents stack up appropriately, as the last character in the unreversed\n    // string has less impact than the first character (in \"abc\" the A is a lot more important\n    // for lexicographic sorts). We also do a trick with the character codes to optimize the\n    // alphabet lookup, avoiding an index scan of `alphabet.indexOf(reversedStr[i])` - we know\n    // that the alphabet and (theoretically) the input string are constrained on character sets\n    // and thus can do simple subtraction to end up with the same result.\n\n    // Developer caution: we carefully cast to BigInt here to avoid losing precision. We cannot\n    // rely on Math.pow() (for example) to be capable of handling our insane numbers.\n\n    let result = BigInt(0);\n    for (let i = s.length - 1, j = BigInt(0); i >= 0; i--, j++) {\n        const charIndex = s.charCodeAt(i) - alphabet.charCodeAt(0);\n\n        // We add 1 to the char index to offset the whole numbering scheme. We unpack this in\n        // the baseToString() function.\n        result += BigInt(1 + charIndex) * (len ** j);\n    }\n    return result;\n}\n\n/**\n * Averages two strings, returning the midpoint between them. This is accomplished by\n * converting both to baseN numbers (where N is the alphabet's length) then averaging\n * those before re-encoding as a string.\n * @param {string} a The first string.\n * @param {string} b The second string.\n * @param {string} alphabet The alphabet to use as a single string.\n * @returns {string} The midpoint between the strings, as a string.\n */\nexport function averageBetweenStrings(a: string, b: string, alphabet = DEFAULT_ALPHABET): string {\n    const padN = Math.max(a.length, b.length);\n    const baseA = stringToBase(alphabetPad(a, padN, alphabet), alphabet);\n    const baseB = stringToBase(alphabetPad(b, padN, alphabet), alphabet);\n    const avg = (baseA + baseB) / BigInt(2);\n\n    // Detect integer division conflicts. This happens when two numbers are divided too close so\n    // we lose a .5 precision. We need to add a padding character in these cases.\n    if (avg === baseA || avg == baseB) {\n        return baseToString(avg, alphabet) + alphabet[0];\n    }\n\n    return baseToString(avg, alphabet);\n}\n\n/**\n * Finds the next string using the alphabet provided. This is done by converting the\n * string to a baseN number, where N is the alphabet's length, then adding 1 before\n * converting back to a string.\n * @param {string} s The string to start at.\n * @param {string} alphabet The alphabet to use as a single string.\n * @returns {string} The string which follows the input string.\n */\nexport function nextString(s: string, alphabet = DEFAULT_ALPHABET): string {\n    return baseToString(stringToBase(s, alphabet) + BigInt(1), alphabet);\n}\n\n/**\n * Finds the previous string using the alphabet provided. This is done by converting the\n * string to a baseN number, where N is the alphabet's length, then subtracting 1 before\n * converting back to a string.\n * @param {string} s The string to start at.\n * @param {string} alphabet The alphabet to use as a single string.\n * @returns {string} The string which precedes the input string.\n */\nexport function prevString(s: string, alphabet = DEFAULT_ALPHABET): string {\n    return baseToString(stringToBase(s, alphabet) - BigInt(1), alphabet);\n}\n\n/**\n * Compares strings lexicographically as a sort-safe function.\n * @param {string} a The first (reference) string.\n * @param {string} b The second (compare) string.\n * @returns {number} Negative if the reference string is before the compare string;\n * positive if the reference string is after; and zero if equal.\n */\nexport function lexicographicCompare(a: string, b: string): number {\n    // Dev note: this exists because I'm sad that you can use math operators on strings, so I've\n    // hidden the operation in this function.\n    return (a < b) ? -1 : ((a === b) ? 0 : 1);\n}\n\nconst collator = new Intl.Collator();\n/**\n * Performant language-sensitive string comparison\n * @param a the first string to compare\n * @param b the second string to compare\n */\nexport function compare(a: string, b: string): number {\n    return collator.compare(a, b);\n}\n\n/**\n * This function is similar to Object.assign() but it assigns recursively and\n * allows you to ignore nullish values from the source\n *\n * @param {Object} target\n * @param {Object} source\n * @returns the target object\n */\nexport function recursivelyAssign(target: Object, source: Object, ignoreNullish = false): any {\n    for (const [sourceKey, sourceValue] of Object.entries(source)) {\n        if (target[sourceKey] instanceof Object && sourceValue) {\n            recursivelyAssign(target[sourceKey], sourceValue);\n            continue;\n        }\n        if ((sourceValue !== null && sourceValue !== undefined) || !ignoreNullish) {\n            target[sourceKey] = sourceValue;\n            continue;\n        }\n    }\n    return target;\n}\n\nfunction getContentTimestampWithFallback(event: MatrixEvent): number {\n    return M_TIMESTAMP.findIn<number>(event.getContent()) ?? -1;\n}\n\n/**\n * Sort events by their content m.ts property\n * Latest timestamp first\n */\nexport function sortEventsByLatestContentTimestamp(left: MatrixEvent, right: MatrixEvent): number {\n    return getContentTimestampWithFallback(right) - getContentTimestampWithFallback(left);\n}\n",
    "/*\nCopyright 2015, 2016 OpenMarket Ltd\nCopyright 2017 New Vector Ltd\nCopyright 2019, 2020 The Matrix.org Foundation C.I.C.\nCopyright 2021 - 2022 Šimon Brandner <simon.bra.ag@gmail.com>\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * This is an internal module. See {@link createNewMatrixCall} for the public API.\n * @module webrtc/call\n */\n\nimport { logger } from '../logger';\nimport * as utils from '../utils';\nimport { MatrixEvent } from '../models/event';\nimport { EventType } from '../@types/event';\nimport { RoomMember } from '../models/room-member';\nimport { randomString } from '../randomstring';\nimport {\n    MCallReplacesEvent,\n    MCallAnswer,\n    MCallInviteNegotiate,\n    CallCapabilities,\n    SDPStreamMetadataPurpose,\n    SDPStreamMetadata,\n    SDPStreamMetadataKey,\n    MCallSDPStreamMetadataChanged,\n    MCallSelectAnswer,\n    MCAllAssertedIdentity,\n    MCallCandidates,\n    MCallBase,\n    MCallHangupReject,\n} from './callEventTypes';\nimport { CallFeed } from './callFeed';\nimport { MatrixClient } from \"../client\";\nimport { ISendEventResponse } from \"../@types/requests\";\nimport { EventEmitterEvents, TypedEventEmitter } from \"../models/typed-event-emitter\";\n\n// events: hangup, error(err), replaced(call), state(state, oldState)\n\n/**\n * Fires whenever an error occurs when call.js encounters an issue with setting up the call.\n * <p>\n * The error given will have a code equal to either `MatrixCall.ERR_LOCAL_OFFER_FAILED` or\n * `MatrixCall.ERR_NO_USER_MEDIA`. `ERR_LOCAL_OFFER_FAILED` is emitted when the local client\n * fails to create an offer. `ERR_NO_USER_MEDIA` is emitted when the user has denied access\n * to their audio/video hardware.\n *\n * @event module:webrtc/call~MatrixCall#\"error\"\n * @param {Error} err The error raised by MatrixCall.\n * @example\n * matrixCall.on(\"error\", function(err){\n *   console.error(err.code, err);\n * });\n */\n\ninterface CallOpts {\n    roomId?: string;\n    client?: any; // Fix when client is TSified\n    forceTURN?: boolean;\n    turnServers?: Array<TurnServer>;\n}\n\ninterface TurnServer {\n    urls: Array<string>;\n    username?: string;\n    password?: string;\n    ttl?: number;\n}\n\ninterface AssertedIdentity {\n    id: string;\n    displayName: string;\n}\n\nexport enum CallState {\n    Fledgling = 'fledgling',\n    InviteSent = 'invite_sent',\n    WaitLocalMedia = 'wait_local_media',\n    CreateOffer = 'create_offer',\n    CreateAnswer = 'create_answer',\n    Connecting = 'connecting',\n    Connected = 'connected',\n    Ringing = 'ringing',\n    Ended = 'ended',\n}\n\nexport enum CallType {\n    Voice = 'voice',\n    Video = 'video',\n}\n\nexport enum CallDirection {\n    Inbound = 'inbound',\n    Outbound = 'outbound',\n}\n\nexport enum CallParty {\n    Local = 'local',\n    Remote = 'remote',\n}\n\nexport enum CallEvent {\n    Hangup = 'hangup',\n    State = 'state',\n    Error = 'error',\n    Replaced = 'replaced',\n\n    // The value of isLocalOnHold() has changed\n    LocalHoldUnhold = 'local_hold_unhold',\n    // The value of isRemoteOnHold() has changed\n    RemoteHoldUnhold = 'remote_hold_unhold',\n    // backwards compat alias for LocalHoldUnhold: remove in a major version bump\n    HoldUnhold = 'hold_unhold',\n    // Feeds have changed\n    FeedsChanged = 'feeds_changed',\n\n    AssertedIdentityChanged = 'asserted_identity_changed',\n\n    LengthChanged = 'length_changed',\n\n    DataChannel = 'datachannel',\n}\n\nexport enum CallErrorCode {\n    /** The user chose to end the call */\n    UserHangup = 'user_hangup',\n\n    /** An error code when the local client failed to create an offer. */\n    LocalOfferFailed = 'local_offer_failed',\n    /**\n     * An error code when there is no local mic/camera to use. This may be because\n     * the hardware isn't plugged in, or the user has explicitly denied access.\n     */\n    NoUserMedia = 'no_user_media',\n\n    /**\n     * Error code used when a call event failed to send\n     * because unknown devices were present in the room\n     */\n    UnknownDevices = 'unknown_devices',\n\n    /**\n     * Error code used when we fail to send the invite\n     * for some reason other than there being unknown devices\n     */\n    SendInvite = 'send_invite',\n\n    /**\n     * An answer could not be created\n     */\n    CreateAnswer = 'create_answer',\n\n    /**\n     * Error code used when we fail to send the answer\n     * for some reason other than there being unknown devices\n     */\n    SendAnswer = 'send_answer',\n\n    /**\n     * The session description from the other side could not be set\n     */\n    SetRemoteDescription = 'set_remote_description',\n\n    /**\n     * The session description from this side could not be set\n     */\n    SetLocalDescription = 'set_local_description',\n\n    /**\n     * A different device answered the call\n     */\n    AnsweredElsewhere = 'answered_elsewhere',\n\n    /**\n     * No media connection could be established to the other party\n     */\n    IceFailed = 'ice_failed',\n\n    /**\n     * The invite timed out whilst waiting for an answer\n     */\n    InviteTimeout = 'invite_timeout',\n\n    /**\n     * The call was replaced by another call\n     */\n    Replaced = 'replaced',\n\n    /**\n     * Signalling for the call could not be sent (other than the initial invite)\n     */\n    SignallingFailed = 'signalling_timeout',\n\n    /**\n     * The remote party is busy\n     */\n    UserBusy = 'user_busy',\n\n    /**\n     * We transferred the call off to somewhere else\n     */\n    Transfered = 'transferred',\n}\n\n/**\n * The version field that we set in m.call.* events\n */\nconst VOIP_PROTO_VERSION = 1;\n\n/** The fallback ICE server to use for STUN or TURN protocols. */\nconst FALLBACK_ICE_SERVER = 'stun:turn.matrix.org';\n\n/** The length of time a call can be ringing for. */\nconst CALL_TIMEOUT_MS = 60000;\n\nexport class CallError extends Error {\n    code: string;\n\n    constructor(code: CallErrorCode, msg: string, err: Error) {\n        // Still don't think there's any way to have proper nested errors\n        super(msg + \": \" + err);\n\n        this.code = code;\n    }\n}\n\nfunction genCallID(): string {\n    return Date.now().toString() + randomString(16);\n}\n\nexport type CallEventHandlerMap = {\n    [CallEvent.DataChannel]: (channel: RTCDataChannel) => void;\n    [CallEvent.FeedsChanged]: (feeds: CallFeed[]) => void;\n    [CallEvent.Replaced]: (newCall: MatrixCall) => void;\n    [CallEvent.Error]: (error: CallError) => void;\n    [CallEvent.RemoteHoldUnhold]: (onHold: boolean) => void;\n    [CallEvent.LocalHoldUnhold]: (onHold: boolean) => void;\n    [CallEvent.LengthChanged]: (length: number) => void;\n    [CallEvent.State]: (state: CallState, oldState?: CallState) => void;\n    [CallEvent.Hangup]: () => void;\n    [CallEvent.AssertedIdentityChanged]: () => void;\n    /* @deprecated */\n    [CallEvent.HoldUnhold]: (onHold: boolean) => void;\n};\n\n/**\n * Construct a new Matrix Call.\n * @constructor\n * @param {Object} opts Config options.\n * @param {string} opts.roomId The room ID for this call.\n * @param {Object} opts.webRtc The WebRTC globals from the browser.\n * @param {boolean} opts.forceTURN whether relay through TURN should be forced.\n * @param {Object} opts.URL The URL global.\n * @param {Array<Object>} opts.turnServers Optional. A list of TURN servers.\n * @param {MatrixClient} opts.client The Matrix Client instance to send events to.\n */\nexport class MatrixCall extends TypedEventEmitter<CallEvent, CallEventHandlerMap> {\n    public roomId: string;\n    public callId: string;\n    public state = CallState.Fledgling;\n    public hangupParty: CallParty;\n    public hangupReason: string;\n    public direction: CallDirection;\n    public ourPartyId: string;\n\n    private client: MatrixClient;\n    private forceTURN: boolean;\n    private turnServers: Array<TurnServer>;\n    // A queue for candidates waiting to go out.\n    // We try to amalgamate candidates into a single candidate message where\n    // possible\n    private candidateSendQueue: Array<RTCIceCandidate> = [];\n    private candidateSendTries = 0;\n    private sentEndOfCandidates = false;\n    private peerConn: RTCPeerConnection;\n    private feeds: Array<CallFeed> = [];\n    private usermediaSenders: Array<RTCRtpSender> = [];\n    private screensharingSenders: Array<RTCRtpSender> = [];\n    private inviteOrAnswerSent = false;\n    private waitForLocalAVStream: boolean;\n    private successor: MatrixCall;\n    private opponentMember: RoomMember;\n    private opponentVersion: number | string;\n    // The party ID of the other side: undefined if we haven't chosen a partner\n    // yet, null if we have but they didn't send a party ID.\n    private opponentPartyId: string;\n    private opponentCaps: CallCapabilities;\n    private inviteTimeout: number;\n\n    // The logic of when & if a call is on hold is nontrivial and explained in is*OnHold\n    // This flag represents whether we want the other party to be on hold\n    private remoteOnHold = false;\n\n    // the stats for the call at the point it ended. We can't get these after we\n    // tear the call down, so we just grab a snapshot before we stop the call.\n    // The typescript definitions have this type as 'any' :(\n    private callStatsAtEnd: any[];\n\n    // Perfect negotiation state: https://www.w3.org/TR/webrtc/#perfect-negotiation-example\n    private makingOffer = false;\n    private ignoreOffer: boolean;\n\n    // If candidates arrive before we've picked an opponent (which, in particular,\n    // will happen if the opponent sends candidates eagerly before the user answers\n    // the call) we buffer them up here so we can then add the ones from the party we pick\n    private remoteCandidateBuffer = new Map<string, RTCIceCandidate[]>();\n\n    private remoteAssertedIdentity: AssertedIdentity;\n\n    private remoteSDPStreamMetadata: SDPStreamMetadata;\n\n    private callLengthInterval: number;\n    private callLength = 0;\n\n    constructor(opts: CallOpts) {\n        super();\n        this.roomId = opts.roomId;\n        this.client = opts.client;\n        this.forceTURN = opts.forceTURN;\n        this.ourPartyId = this.client.deviceId;\n        // Array of Objects with urls, username, credential keys\n        this.turnServers = opts.turnServers || [];\n        if (this.turnServers.length === 0 && this.client.isFallbackICEServerAllowed()) {\n            this.turnServers.push({\n                urls: [FALLBACK_ICE_SERVER],\n            });\n        }\n        for (const server of this.turnServers) {\n            utils.checkObjectHasKeys(server, [\"urls\"]);\n        }\n        this.callId = genCallID();\n    }\n\n    /**\n     * Place a voice call to this room.\n     * @throws If you have not specified a listener for 'error' events.\n     */\n    public async placeVoiceCall(): Promise<void> {\n        await this.placeCall(true, false);\n    }\n\n    /**\n     * Place a video call to this room.\n     * @throws If you have not specified a listener for 'error' events.\n     */\n    public async placeVideoCall(): Promise<void> {\n        await this.placeCall(true, true);\n    }\n\n    /**\n     * Create a datachannel using this call's peer connection.\n     * @param label A human readable label for this datachannel\n     * @param options An object providing configuration options for the data channel.\n     */\n    public createDataChannel(label: string, options: RTCDataChannelInit) {\n        const dataChannel = this.peerConn.createDataChannel(label, options);\n        this.emit(CallEvent.DataChannel, dataChannel);\n        logger.debug(\"created data channel\");\n        return dataChannel;\n    }\n\n    public getOpponentMember(): RoomMember {\n        return this.opponentMember;\n    }\n\n    public opponentCanBeTransferred(): boolean {\n        return Boolean(this.opponentCaps && this.opponentCaps[\"m.call.transferee\"]);\n    }\n\n    public opponentSupportsDTMF(): boolean {\n        return Boolean(this.opponentCaps && this.opponentCaps[\"m.call.dtmf\"]);\n    }\n\n    public getRemoteAssertedIdentity(): AssertedIdentity {\n        return this.remoteAssertedIdentity;\n    }\n\n    public get type(): CallType {\n        return (this.hasLocalUserMediaVideoTrack || this.hasRemoteUserMediaVideoTrack)\n            ? CallType.Video\n            : CallType.Voice;\n    }\n\n    public get hasLocalUserMediaVideoTrack(): boolean {\n        return this.localUsermediaStream?.getVideoTracks().length > 0;\n    }\n\n    public get hasRemoteUserMediaVideoTrack(): boolean {\n        return this.getRemoteFeeds().some((feed) => {\n            return (\n                feed.purpose === SDPStreamMetadataPurpose.Usermedia &&\n                feed.stream.getVideoTracks().length > 0\n            );\n        });\n    }\n\n    public get hasLocalUserMediaAudioTrack(): boolean {\n        return this.localUsermediaStream?.getAudioTracks().length > 0;\n    }\n\n    public get hasRemoteUserMediaAudioTrack(): boolean {\n        return this.getRemoteFeeds().some((feed) => {\n            return (\n                feed.purpose === SDPStreamMetadataPurpose.Usermedia &&\n                feed.stream.getAudioTracks().length > 0\n            );\n        });\n    }\n\n    public get localUsermediaFeed(): CallFeed {\n        return this.getLocalFeeds().find((feed) => feed.purpose === SDPStreamMetadataPurpose.Usermedia);\n    }\n\n    public get localScreensharingFeed(): CallFeed {\n        return this.getLocalFeeds().find((feed) => feed.purpose === SDPStreamMetadataPurpose.Screenshare);\n    }\n\n    public get localUsermediaStream(): MediaStream {\n        return this.localUsermediaFeed?.stream;\n    }\n\n    public get localScreensharingStream(): MediaStream {\n        return this.localScreensharingFeed?.stream;\n    }\n\n    public get remoteUsermediaFeed(): CallFeed {\n        return this.getRemoteFeeds().find((feed) => feed.purpose === SDPStreamMetadataPurpose.Usermedia);\n    }\n\n    public get remoteScreensharingFeed(): CallFeed {\n        return this.getRemoteFeeds().find((feed) => feed.purpose === SDPStreamMetadataPurpose.Screenshare);\n    }\n\n    public get remoteUsermediaStream(): MediaStream {\n        return this.remoteUsermediaFeed?.stream;\n    }\n\n    public get remoteScreensharingStream(): MediaStream {\n        return this.remoteScreensharingFeed?.stream;\n    }\n\n    private getFeedByStreamId(streamId: string): CallFeed {\n        return this.getFeeds().find((feed) => feed.stream.id === streamId);\n    }\n\n    /**\n     * Returns an array of all CallFeeds\n     * @returns {Array<CallFeed>} CallFeeds\n     */\n    public getFeeds(): Array<CallFeed> {\n        return this.feeds;\n    }\n\n    /**\n     * Returns an array of all local CallFeeds\n     * @returns {Array<CallFeed>} local CallFeeds\n     */\n    public getLocalFeeds(): Array<CallFeed> {\n        return this.feeds.filter((feed) => feed.isLocal());\n    }\n\n    /**\n     * Returns an array of all remote CallFeeds\n     * @returns {Array<CallFeed>} remote CallFeeds\n     */\n    public getRemoteFeeds(): Array<CallFeed> {\n        return this.feeds.filter((feed) => !feed.isLocal());\n    }\n\n    /**\n     * Generates and returns localSDPStreamMetadata\n     * @returns {SDPStreamMetadata} localSDPStreamMetadata\n     */\n    private getLocalSDPStreamMetadata(): SDPStreamMetadata {\n        const metadata: SDPStreamMetadata = {};\n        for (const localFeed of this.getLocalFeeds()) {\n            metadata[localFeed.stream.id] = {\n                purpose: localFeed.purpose,\n                audio_muted: localFeed.isAudioMuted(),\n                video_muted: localFeed.isVideoMuted(),\n            };\n        }\n        logger.debug(\"Got local SDPStreamMetadata\", metadata);\n        return metadata;\n    }\n\n    /**\n     * Returns true if there are no incoming feeds,\n     * otherwise returns false\n     * @returns {boolean} no incoming feeds\n     */\n    public noIncomingFeeds(): boolean {\n        return !this.feeds.some((feed) => !feed.isLocal());\n    }\n\n    private pushRemoteFeed(stream: MediaStream): void {\n        // Fallback to old behavior if the other side doesn't support SDPStreamMetadata\n        if (!this.opponentSupportsSDPStreamMetadata()) {\n            this.pushRemoteFeedWithoutMetadata(stream);\n            return;\n        }\n\n        const userId = this.getOpponentMember().userId;\n        const purpose = this.remoteSDPStreamMetadata[stream.id].purpose;\n        const audioMuted = this.remoteSDPStreamMetadata[stream.id].audio_muted;\n        const videoMuted = this.remoteSDPStreamMetadata[stream.id].video_muted;\n\n        if (!purpose) {\n            logger.warn(`Ignoring stream with id ${stream.id} because we didn't get any metadata about it`);\n            return;\n        }\n\n        // Try to find a feed with the same purpose as the new stream,\n        // if we find it replace the old stream with the new one\n        const existingFeed = this.getRemoteFeeds().find((feed) => feed.purpose === purpose);\n        if (existingFeed) {\n            existingFeed.setNewStream(stream);\n        } else {\n            this.feeds.push(new CallFeed({\n                client: this.client,\n                roomId: this.roomId,\n                userId,\n                stream,\n                purpose,\n                audioMuted,\n                videoMuted,\n            }));\n            this.emit(CallEvent.FeedsChanged, this.feeds);\n        }\n\n        logger.info(`Pushed remote stream (id=\"${stream.id}\", active=\"${stream.active}\", purpose=${purpose})`);\n    }\n\n    /**\n     * This method is used ONLY if the other client doesn't support sending SDPStreamMetadata\n     */\n    private pushRemoteFeedWithoutMetadata(stream: MediaStream): void {\n        const userId = this.getOpponentMember().userId;\n        // We can guess the purpose here since the other client can only send one stream\n        const purpose = SDPStreamMetadataPurpose.Usermedia;\n        const oldRemoteStream = this.feeds.find((feed) => !feed.isLocal())?.stream;\n\n        // Note that we check by ID and always set the remote stream: Chrome appears\n        // to make new stream objects when transceiver directionality is changed and the 'active'\n        // status of streams change - Dave\n        // If we already have a stream, check this stream has the same id\n        if (oldRemoteStream && stream.id !== oldRemoteStream.id) {\n            logger.warn(`Ignoring new stream ID ${stream.id}: we already have stream ID ${oldRemoteStream.id}`);\n            return;\n        }\n\n        // Try to find a feed with the same stream id as the new stream,\n        // if we find it replace the old stream with the new one\n        const feed = this.getFeedByStreamId(stream.id);\n        if (feed) {\n            feed.setNewStream(stream);\n        } else {\n            this.feeds.push(new CallFeed({\n                client: this.client,\n                roomId: this.roomId,\n                audioMuted: false,\n                videoMuted: false,\n                userId,\n                stream,\n                purpose,\n            }));\n            this.emit(CallEvent.FeedsChanged, this.feeds);\n        }\n\n        logger.info(`Pushed remote stream (id=\"${stream.id}\", active=\"${stream.active}\")`);\n    }\n\n    private pushNewLocalFeed(stream: MediaStream, purpose: SDPStreamMetadataPurpose, addToPeerConnection = true): void {\n        const userId = this.client.getUserId();\n\n        // Tracks don't always start off enabled, eg. chrome will give a disabled\n        // audio track if you ask for user media audio and already had one that\n        // you'd set to disabled (presumably because it clones them internally).\n        setTracksEnabled(stream.getAudioTracks(), true);\n        setTracksEnabled(stream.getVideoTracks(), true);\n\n        // We try to replace an existing feed if there already is one with the same purpose\n        const existingFeed = this.getLocalFeeds().find((feed) => feed.purpose === purpose);\n        if (existingFeed) {\n            existingFeed.setNewStream(stream);\n        } else {\n            this.pushLocalFeed(\n                new CallFeed({\n                    client: this.client,\n                    roomId: this.roomId,\n                    audioMuted: false,\n                    videoMuted: false,\n                    userId,\n                    stream,\n                    purpose,\n                }),\n                addToPeerConnection,\n            );\n            this.emit(CallEvent.FeedsChanged, this.feeds);\n        }\n    }\n\n    /**\n     * Pushes supplied feed to the call\n     * @param {CallFeed} callFeed to push\n     * @param {boolean} addToPeerConnection whether to add the tracks to the peer connection\n     */\n    public pushLocalFeed(callFeed: CallFeed, addToPeerConnection = true): void {\n        this.feeds.push(callFeed);\n\n        if (addToPeerConnection) {\n            const senderArray = callFeed.purpose === SDPStreamMetadataPurpose.Usermedia ?\n                this.usermediaSenders : this.screensharingSenders;\n            // Empty the array\n            senderArray.splice(0, senderArray.length);\n\n            for (const track of callFeed.stream.getTracks()) {\n                logger.info(\n                    `Adding track (` +\n                    `id=\"${track.id}\", ` +\n                    `kind=\"${track.kind}\", ` +\n                    `streamId=\"${callFeed.stream.id}\", ` +\n                    `streamPurpose=\"${callFeed.purpose}\", ` +\n                    `enabled=${track.enabled}` +\n                    `) to peer connection`,\n                );\n                senderArray.push(this.peerConn.addTrack(track, callFeed.stream));\n            }\n        }\n\n        logger.info(\n            `Pushed local stream ` +\n            `(id=\"${callFeed.stream.id}\", ` +\n            `active=\"${callFeed.stream.active}\", ` +\n            `purpose=\"${callFeed.purpose}\")`,\n        );\n\n        this.emit(CallEvent.FeedsChanged, this.feeds);\n    }\n\n    /**\n     * Removes local call feed from the call and its tracks from the peer\n     * connection\n     * @param callFeed to remove\n     */\n    public removeLocalFeed(callFeed: CallFeed): void {\n        const senderArray = callFeed.purpose === SDPStreamMetadataPurpose.Usermedia\n            ? this.usermediaSenders\n            : this.screensharingSenders;\n\n        for (const sender of senderArray) {\n            this.peerConn.removeTrack(sender);\n        }\n        // Empty the array\n        senderArray.splice(0, senderArray.length);\n        this.deleteFeedByStream(callFeed.stream);\n    }\n\n    private deleteAllFeeds(): void {\n        for (const feed of this.feeds) {\n            feed.dispose();\n        }\n\n        this.feeds = [];\n        this.emit(CallEvent.FeedsChanged, this.feeds);\n    }\n\n    private deleteFeedByStream(stream: MediaStream): void {\n        logger.debug(`Removing feed with stream id ${stream.id}`);\n\n        const feed = this.getFeedByStreamId(stream.id);\n        if (!feed) {\n            logger.warn(`Didn't find the feed with stream id ${stream.id} to delete`);\n            return;\n        }\n\n        feed.dispose();\n        this.feeds.splice(this.feeds.indexOf(feed), 1);\n        this.emit(CallEvent.FeedsChanged, this.feeds);\n    }\n\n    // The typescript definitions have this type as 'any' :(\n    public async getCurrentCallStats(): Promise<any[]> {\n        if (this.callHasEnded()) {\n            return this.callStatsAtEnd;\n        }\n\n        return this.collectCallStats();\n    }\n\n    private async collectCallStats(): Promise<any[]> {\n        // This happens when the call fails before it starts.\n        // For example when we fail to get capture sources\n        if (!this.peerConn) return;\n\n        const statsReport = await this.peerConn.getStats();\n        const stats = [];\n        for (const item of statsReport) {\n            stats.push(item[1]);\n        }\n\n        return stats;\n    }\n\n    /**\n     * Configure this call from an invite event. Used by MatrixClient.\n     * @param {MatrixEvent} event The m.call.invite event\n     */\n    public async initWithInvite(event: MatrixEvent): Promise<void> {\n        const invite = event.getContent<MCallInviteNegotiate>();\n        this.direction = CallDirection.Inbound;\n\n        // make sure we have valid turn creds. Unless something's gone wrong, it should\n        // poll and keep the credentials valid so this should be instant.\n        const haveTurnCreds = await this.client.checkTurnServers();\n        if (!haveTurnCreds) {\n            logger.warn(\"Failed to get TURN credentials! Proceeding with call anyway...\");\n        }\n\n        const sdpStreamMetadata = invite[SDPStreamMetadataKey];\n        if (sdpStreamMetadata) {\n            this.updateRemoteSDPStreamMetadata(sdpStreamMetadata);\n        } else {\n            logger.debug(\"Did not get any SDPStreamMetadata! Can not send/receive multiple streams\");\n        }\n\n        this.peerConn = this.createPeerConnection();\n        // we must set the party ID before await-ing on anything: the call event\n        // handler will start giving us more call events (eg. candidates) so if\n        // we haven't set the party ID, we'll ignore them.\n        this.chooseOpponent(event);\n        try {\n            await this.peerConn.setRemoteDescription(invite.offer);\n            await this.addBufferedIceCandidates();\n        } catch (e) {\n            logger.debug(\"Failed to set remote description\", e);\n            this.terminate(CallParty.Local, CallErrorCode.SetRemoteDescription, false);\n            return;\n        }\n\n        const remoteStream = this.feeds.find((feed) => !feed.isLocal())?.stream;\n\n        // According to previous comments in this file, firefox at some point did not\n        // add streams until media started arriving on them. Testing latest firefox\n        // (81 at time of writing), this is no longer a problem, so let's do it the correct way.\n        if (!remoteStream || remoteStream.getTracks().length === 0) {\n            logger.error(\"No remote stream or no tracks after setting remote description!\");\n            this.terminate(CallParty.Local, CallErrorCode.SetRemoteDescription, false);\n            return;\n        }\n\n        this.setState(CallState.Ringing);\n\n        if (event.getLocalAge()) {\n            setTimeout(() => {\n                if (this.state == CallState.Ringing) {\n                    logger.debug(\"Call invite has expired. Hanging up.\");\n                    this.hangupParty = CallParty.Remote; // effectively\n                    this.setState(CallState.Ended);\n                    this.stopAllMedia();\n                    if (this.peerConn.signalingState != 'closed') {\n                        this.peerConn.close();\n                    }\n                    this.emit(CallEvent.Hangup);\n                }\n            }, invite.lifetime - event.getLocalAge());\n        }\n    }\n\n    /**\n     * Configure this call from a hangup or reject event. Used by MatrixClient.\n     * @param {MatrixEvent} event The m.call.hangup event\n     */\n    public initWithHangup(event: MatrixEvent): void {\n        // perverse as it may seem, sometimes we want to instantiate a call with a\n        // hangup message (because when getting the state of the room on load, events\n        // come in reverse order and we want to remember that a call has been hung up)\n        this.setState(CallState.Ended);\n    }\n\n    private shouldAnswerWithMediaType(\n        wantedValue: boolean | undefined, valueOfTheOtherSide: boolean | undefined, type: \"audio\" | \"video\",\n    ): boolean {\n        if (wantedValue && !valueOfTheOtherSide) {\n            // TODO: Figure out how to do this\n            logger.warn(`Unable to answer with ${type} because the other side isn't sending it either.`);\n            return false;\n        } else if (\n            !utils.isNullOrUndefined(wantedValue) &&\n            wantedValue !== valueOfTheOtherSide &&\n            !this.opponentSupportsSDPStreamMetadata()\n        ) {\n            logger.warn(\n                `Unable to answer with ${type}=${wantedValue} because the other side doesn't support it. ` +\n                `Answering with ${type}=${valueOfTheOtherSide}.`,\n            );\n            return valueOfTheOtherSide;\n        }\n        return wantedValue ?? valueOfTheOtherSide;\n    }\n\n    /**\n     * Answer a call.\n     */\n    public async answer(audio?: boolean, video?: boolean): Promise<void> {\n        if (this.inviteOrAnswerSent) return;\n        // TODO: Figure out how to do this\n        if (audio === false && video === false) throw new Error(\"You CANNOT answer a call without media\");\n\n        logger.debug(`Answering call ${this.callId}`);\n\n        if (!this.localUsermediaStream && !this.waitForLocalAVStream) {\n            const prevState = this.state;\n            const answerWithAudio = this.shouldAnswerWithMediaType(audio, this.hasRemoteUserMediaAudioTrack, \"audio\");\n            const answerWithVideo = this.shouldAnswerWithMediaType(video, this.hasRemoteUserMediaVideoTrack, \"video\");\n\n            this.setState(CallState.WaitLocalMedia);\n            this.waitForLocalAVStream = true;\n\n            try {\n                const stream = await this.client.getMediaHandler().getUserMediaStream(\n                    answerWithAudio, answerWithVideo,\n                );\n                this.waitForLocalAVStream = false;\n                const usermediaFeed = new CallFeed({\n                    client: this.client,\n                    roomId: this.roomId,\n                    userId: this.client.getUserId(),\n                    stream,\n                    purpose: SDPStreamMetadataPurpose.Usermedia,\n                    audioMuted: false,\n                    videoMuted: false,\n                });\n\n                const feeds = [usermediaFeed];\n\n                if (this.localScreensharingFeed) {\n                    feeds.push(this.localScreensharingFeed);\n                }\n\n                this.answerWithCallFeeds(feeds);\n            } catch (e) {\n                if (answerWithVideo) {\n                    // Try to answer without video\n                    logger.warn(\"Failed to getUserMedia(), trying to getUserMedia() without video\");\n                    this.setState(prevState);\n                    this.waitForLocalAVStream = false;\n                    await this.answer(answerWithAudio, false);\n                } else {\n                    this.getUserMediaFailed(e);\n                    return;\n                }\n            }\n        } else if (this.waitForLocalAVStream) {\n            this.setState(CallState.WaitLocalMedia);\n        }\n    }\n\n    public answerWithCallFeeds(callFeeds: CallFeed[]): void {\n        if (this.inviteOrAnswerSent) return;\n\n        logger.debug(`Answering call ${this.callId}`);\n\n        this.gotCallFeedsForAnswer(callFeeds);\n    }\n\n    /**\n     * Replace this call with a new call, e.g. for glare resolution. Used by\n     * MatrixClient.\n     * @param {MatrixCall} newCall The new call.\n     */\n    public replacedBy(newCall: MatrixCall): void {\n        if (this.state === CallState.WaitLocalMedia) {\n            logger.debug(\"Telling new call to wait for local media\");\n            newCall.waitForLocalAVStream = true;\n        } else if ([CallState.CreateOffer, CallState.InviteSent].includes(this.state)) {\n            logger.debug(\"Handing local stream to new call\");\n            newCall.gotCallFeedsForAnswer(this.getLocalFeeds());\n        }\n        this.successor = newCall;\n        this.emit(CallEvent.Replaced, newCall);\n        this.hangup(CallErrorCode.Replaced, true);\n    }\n\n    /**\n     * Hangup a call.\n     * @param {string} reason The reason why the call is being hung up.\n     * @param {boolean} suppressEvent True to suppress emitting an event.\n     */\n    public hangup(reason: CallErrorCode, suppressEvent: boolean): void {\n        if (this.callHasEnded()) return;\n\n        logger.debug(\"Ending call \" + this.callId);\n        this.terminate(CallParty.Local, reason, !suppressEvent);\n        // We don't want to send hangup here if we didn't even get to sending an invite\n        if (this.state === CallState.WaitLocalMedia) return;\n        const content = {};\n        // Don't send UserHangup reason to older clients\n        if ((this.opponentVersion && this.opponentVersion >= 1) || reason !== CallErrorCode.UserHangup) {\n            content[\"reason\"] = reason;\n        }\n        this.sendVoipEvent(EventType.CallHangup, content);\n    }\n\n    /**\n     * Reject a call\n     * This used to be done by calling hangup, but is a separate method and protocol\n     * event as of MSC2746.\n     */\n    public reject(): void {\n        if (this.state !== CallState.Ringing) {\n            throw Error(\"Call must be in 'ringing' state to reject!\");\n        }\n\n        if (this.opponentVersion < 1) {\n            logger.info(\n                `Opponent version is less than 1 (${this.opponentVersion}): sending hangup instead of reject`,\n            );\n            this.hangup(CallErrorCode.UserHangup, true);\n            return;\n        }\n\n        logger.debug(\"Rejecting call: \" + this.callId);\n        this.terminate(CallParty.Local, CallErrorCode.UserHangup, true);\n        this.sendVoipEvent(EventType.CallReject, {});\n    }\n\n    /**\n     * Adds an audio and/or video track - upgrades the call\n     * @param {boolean} audio should add an audio track\n     * @param {boolean} video should add an video track\n     */\n    private async upgradeCall(\n        audio: boolean, video: boolean,\n    ): Promise<void> {\n        // We don't do call downgrades\n        if (!audio && !video) return;\n        if (!this.opponentSupportsSDPStreamMetadata()) return;\n\n        try {\n            const getAudio = audio || this.hasLocalUserMediaAudioTrack;\n            const getVideo = video || this.hasLocalUserMediaVideoTrack;\n\n            // updateLocalUsermediaStream() will take the tracks, use them as\n            // replacement and throw the stream away, so it isn't reusable\n            const stream = await this.client.getMediaHandler().getUserMediaStream(getAudio, getVideo, false);\n            await this.updateLocalUsermediaStream(stream, audio, video);\n        } catch (error) {\n            logger.error(\"Failed to upgrade the call\", error);\n            this.emit(CallEvent.Error,\n                new CallError(CallErrorCode.NoUserMedia, \"Failed to get camera access: \", error),\n            );\n        }\n    }\n\n    /**\n     * Returns true if this.remoteSDPStreamMetadata is defined, otherwise returns false\n     * @returns {boolean} can screenshare\n     */\n    public opponentSupportsSDPStreamMetadata(): boolean {\n        return Boolean(this.remoteSDPStreamMetadata);\n    }\n\n    /**\n     * If there is a screensharing stream returns true, otherwise returns false\n     * @returns {boolean} is screensharing\n     */\n    public isScreensharing(): boolean {\n        return Boolean(this.localScreensharingStream);\n    }\n\n    /**\n     * Starts/stops screensharing\n     * @param enabled the desired screensharing state\n     * @param {string} desktopCapturerSourceId optional id of the desktop capturer source to use\n     * @returns {boolean} new screensharing state\n     */\n    public async setScreensharingEnabled(\n        enabled: boolean, desktopCapturerSourceId?: string,\n    ): Promise<boolean> {\n        // Skip if there is nothing to do\n        if (enabled && this.isScreensharing()) {\n            logger.warn(`There is already a screensharing stream - there is nothing to do!`);\n            return true;\n        } else if (!enabled && !this.isScreensharing()) {\n            logger.warn(`There already isn't a screensharing stream - there is nothing to do!`);\n            return false;\n        }\n\n        // Fallback to replaceTrack()\n        if (!this.opponentSupportsSDPStreamMetadata()) {\n            return await this.setScreensharingEnabledWithoutMetadataSupport(enabled, desktopCapturerSourceId);\n        }\n\n        logger.debug(`Set screensharing enabled? ${enabled}`);\n        if (enabled) {\n            try {\n                const stream = await this.client.getMediaHandler().getScreensharingStream(desktopCapturerSourceId);\n                if (!stream) return false;\n                this.pushNewLocalFeed(stream, SDPStreamMetadataPurpose.Screenshare);\n                return true;\n            } catch (err) {\n                logger.error(\"Failed to get screen-sharing stream:\", err);\n                return false;\n            }\n        } else {\n            for (const sender of this.screensharingSenders) {\n                this.peerConn.removeTrack(sender);\n            }\n            this.client.getMediaHandler().stopScreensharingStream(this.localScreensharingStream);\n            this.deleteFeedByStream(this.localScreensharingStream);\n            return false;\n        }\n    }\n\n    /**\n     * Starts/stops screensharing\n     * Should be used ONLY if the opponent doesn't support SDPStreamMetadata\n     * @param enabled the desired screensharing state\n     * @param {string} desktopCapturerSourceId optional id of the desktop capturer source to use\n     * @returns {boolean} new screensharing state\n     */\n    private async setScreensharingEnabledWithoutMetadataSupport(\n        enabled: boolean, desktopCapturerSourceId?: string,\n    ): Promise<boolean> {\n        logger.debug(`Set screensharing enabled? ${enabled} using replaceTrack()`);\n        if (enabled) {\n            try {\n                const stream = await this.client.getMediaHandler().getScreensharingStream(desktopCapturerSourceId);\n                if (!stream) return false;\n\n                const track = stream.getTracks().find((track) => {\n                    return track.kind === \"video\";\n                });\n                const sender = this.usermediaSenders.find((sender) => {\n                    return sender.track?.kind === \"video\";\n                });\n                sender.replaceTrack(track);\n\n                this.pushNewLocalFeed(stream, SDPStreamMetadataPurpose.Screenshare, false);\n\n                return true;\n            } catch (err) {\n                logger.error(\"Failed to get screen-sharing stream:\", err);\n                return false;\n            }\n        } else {\n            const track = this.localUsermediaStream.getTracks().find((track) => {\n                return track.kind === \"video\";\n            });\n            const sender = this.usermediaSenders.find((sender) => {\n                return sender.track?.kind === \"video\";\n            });\n            sender.replaceTrack(track);\n\n            this.client.getMediaHandler().stopScreensharingStream(this.localScreensharingStream);\n            this.deleteFeedByStream(this.localScreensharingStream);\n\n            return false;\n        }\n    }\n\n    /**\n     * Replaces/adds the tracks from the passed stream to the localUsermediaStream\n     * @param {MediaStream} stream to use a replacement for the local usermedia stream\n     */\n    public async updateLocalUsermediaStream(\n        stream: MediaStream, forceAudio = false, forceVideo = false,\n    ): Promise<void> {\n        const callFeed = this.localUsermediaFeed;\n        const audioEnabled = forceAudio || (!callFeed.isAudioMuted() && !this.remoteOnHold);\n        const videoEnabled = forceVideo || (!callFeed.isVideoMuted() && !this.remoteOnHold);\n        setTracksEnabled(stream.getAudioTracks(), audioEnabled);\n        setTracksEnabled(stream.getVideoTracks(), videoEnabled);\n\n        // We want to keep the same stream id, so we replace the tracks rather than the whole stream\n        for (const track of this.localUsermediaStream.getTracks()) {\n            this.localUsermediaStream.removeTrack(track);\n            track.stop();\n        }\n        for (const track of stream.getTracks()) {\n            this.localUsermediaStream.addTrack(track);\n        }\n\n        const newSenders = [];\n\n        for (const track of stream.getTracks()) {\n            const oldSender = this.usermediaSenders.find((sender) => sender.track?.kind === track.kind);\n            let newSender: RTCRtpSender;\n\n            if (oldSender) {\n                logger.info(\n                    `Replacing track (` +\n                    `id=\"${track.id}\", ` +\n                    `kind=\"${track.kind}\", ` +\n                    `streamId=\"${stream.id}\", ` +\n                    `streamPurpose=\"${callFeed.purpose}\"` +\n                    `) to peer connection`,\n                );\n                await oldSender.replaceTrack(track);\n                newSender = oldSender;\n            } else {\n                logger.info(\n                    `Adding track (` +\n                    `id=\"${track.id}\", ` +\n                    `kind=\"${track.kind}\", ` +\n                    `streamId=\"${stream.id}\", ` +\n                    `streamPurpose=\"${callFeed.purpose}\"` +\n                    `) to peer connection`,\n                );\n                newSender = this.peerConn.addTrack(track, this.localUsermediaStream);\n            }\n\n            newSenders.push(newSender);\n        }\n\n        this.usermediaSenders = newSenders;\n    }\n\n    /**\n     * Set whether our outbound video should be muted or not.\n     * @param {boolean} muted True to mute the outbound video.\n     * @returns the new mute state\n     */\n    public async setLocalVideoMuted(muted: boolean): Promise<boolean> {\n        if (!await this.client.getMediaHandler().hasVideoDevice()) {\n            return this.isLocalVideoMuted();\n        }\n\n        if (!this.hasLocalUserMediaVideoTrack && !muted) {\n            await this.upgradeCall(false, true);\n            return this.isLocalVideoMuted();\n        }\n        this.localUsermediaFeed?.setVideoMuted(muted);\n        this.updateMuteStatus();\n        return this.isLocalVideoMuted();\n    }\n\n    /**\n     * Check if local video is muted.\n     *\n     * If there are multiple video tracks, <i>all</i> of the tracks need to be muted\n     * for this to return true. This means if there are no video tracks, this will\n     * return true.\n     * @return {Boolean} True if the local preview video is muted, else false\n     * (including if the call is not set up yet).\n     */\n    public isLocalVideoMuted(): boolean {\n        return this.localUsermediaFeed?.isVideoMuted();\n    }\n\n    /**\n     * Set whether the microphone should be muted or not.\n     * @param {boolean} muted True to mute the mic.\n     * @returns the new mute state\n     */\n    public async setMicrophoneMuted(muted: boolean): Promise<boolean> {\n        if (!await this.client.getMediaHandler().hasAudioDevice()) {\n            return this.isMicrophoneMuted();\n        }\n\n        if (!this.hasLocalUserMediaAudioTrack && !muted) {\n            await this.upgradeCall(true, false);\n            return this.isMicrophoneMuted();\n        }\n        this.localUsermediaFeed?.setAudioMuted(muted);\n        this.updateMuteStatus();\n        return this.isMicrophoneMuted();\n    }\n\n    /**\n     * Check if the microphone is muted.\n     *\n     * If there are multiple audio tracks, <i>all</i> of the tracks need to be muted\n     * for this to return true. This means if there are no audio tracks, this will\n     * return true.\n     * @return {Boolean} True if the mic is muted, else false (including if the call\n     * is not set up yet).\n     */\n    public isMicrophoneMuted(): boolean {\n        return this.localUsermediaFeed?.isAudioMuted();\n    }\n\n    /**\n     * @returns true if we have put the party on the other side of the call on hold\n     * (that is, we are signalling to them that we are not listening)\n     */\n    public isRemoteOnHold(): boolean {\n        return this.remoteOnHold;\n    }\n\n    public setRemoteOnHold(onHold: boolean): void {\n        if (this.isRemoteOnHold() === onHold) return;\n        this.remoteOnHold = onHold;\n\n        for (const transceiver of this.peerConn.getTransceivers()) {\n            // We don't send hold music or anything so we're not actually\n            // sending anything, but sendrecv is fairly standard for hold and\n            // it makes it a lot easier to figure out who's put who on hold.\n            transceiver.direction = onHold ? 'sendonly' : 'sendrecv';\n        }\n        this.updateMuteStatus();\n\n        this.emit(CallEvent.RemoteHoldUnhold, this.remoteOnHold);\n    }\n\n    /**\n     * Indicates whether we are 'on hold' to the remote party (ie. if true,\n     * they cannot hear us).\n     * @returns true if the other party has put us on hold\n     */\n    public isLocalOnHold(): boolean {\n        if (this.state !== CallState.Connected) return false;\n\n        let callOnHold = true;\n\n        // We consider a call to be on hold only if *all* the tracks are on hold\n        // (is this the right thing to do?)\n        for (const transceiver of this.peerConn.getTransceivers()) {\n            const trackOnHold = ['inactive', 'recvonly'].includes(transceiver.currentDirection);\n\n            if (!trackOnHold) callOnHold = false;\n        }\n\n        return callOnHold;\n    }\n\n    /**\n     * Sends a DTMF digit to the other party\n     * @param digit The digit (nb. string - '#' and '*' are dtmf too)\n     */\n    public sendDtmfDigit(digit: string): void {\n        for (const sender of this.peerConn.getSenders()) {\n            if (sender.track.kind === 'audio' && sender.dtmf) {\n                sender.dtmf.insertDTMF(digit);\n                return;\n            }\n        }\n\n        throw new Error(\"Unable to find a track to send DTMF on\");\n    }\n\n    private updateMuteStatus(): void {\n        this.sendVoipEvent(EventType.CallSDPStreamMetadataChangedPrefix, {\n            [SDPStreamMetadataKey]: this.getLocalSDPStreamMetadata(),\n        });\n\n        const micShouldBeMuted = this.isMicrophoneMuted() || this.remoteOnHold;\n        const vidShouldBeMuted = this.isLocalVideoMuted() || this.remoteOnHold;\n\n        setTracksEnabled(this.localUsermediaStream.getAudioTracks(), !micShouldBeMuted);\n        setTracksEnabled(this.localUsermediaStream.getVideoTracks(), !vidShouldBeMuted);\n    }\n\n    private gotCallFeedsForInvite(callFeeds: CallFeed[]): void {\n        if (this.successor) {\n            this.successor.gotCallFeedsForAnswer(callFeeds);\n            return;\n        }\n        if (this.callHasEnded()) {\n            this.stopAllMedia();\n            return;\n        }\n\n        for (const feed of callFeeds) {\n            this.pushLocalFeed(feed);\n        }\n\n        this.setState(CallState.CreateOffer);\n\n        logger.debug(\"gotUserMediaForInvite\");\n        // Now we wait for the negotiationneeded event\n    }\n\n    private async sendAnswer(): Promise<void> {\n        const answerContent = {\n            answer: {\n                sdp: this.peerConn.localDescription.sdp,\n                // type is now deprecated as of Matrix VoIP v1, but\n                // required to still be sent for backwards compat\n                type: this.peerConn.localDescription.type,\n            },\n            [SDPStreamMetadataKey]: this.getLocalSDPStreamMetadata(),\n        } as MCallAnswer;\n\n        answerContent.capabilities = {\n            'm.call.transferee': this.client.supportsCallTransfer,\n            'm.call.dtmf': false,\n        };\n\n        // We have just taken the local description from the peerConn which will\n        // contain all the local candidates added so far, so we can discard any candidates\n        // we had queued up because they'll be in the answer.\n        logger.info(`Discarding ${this.candidateSendQueue.length} candidates that will be sent in answer`);\n        this.candidateSendQueue = [];\n\n        try {\n            await this.sendVoipEvent(EventType.CallAnswer, answerContent);\n            // If this isn't the first time we've tried to send the answer,\n            // we may have candidates queued up, so send them now.\n            this.inviteOrAnswerSent = true;\n        } catch (error) {\n            // We've failed to answer: back to the ringing state\n            this.setState(CallState.Ringing);\n            this.client.cancelPendingEvent(error.event);\n\n            let code = CallErrorCode.SendAnswer;\n            let message = \"Failed to send answer\";\n            if (error.name == 'UnknownDeviceError') {\n                code = CallErrorCode.UnknownDevices;\n                message = \"Unknown devices present in the room\";\n            }\n            this.emit(CallEvent.Error, new CallError(code, message, error));\n            throw error;\n        }\n\n        // error handler re-throws so this won't happen on error, but\n        // we don't want the same error handling on the candidate queue\n        this.sendCandidateQueue();\n    }\n\n    private async gotCallFeedsForAnswer(callFeeds: CallFeed[]): Promise<void> {\n        if (this.callHasEnded()) return;\n\n        this.waitForLocalAVStream = false;\n\n        for (const feed of callFeeds) {\n            this.pushLocalFeed(feed);\n        }\n\n        this.setState(CallState.CreateAnswer);\n\n        let myAnswer;\n        try {\n            this.getRidOfRTXCodecs();\n            myAnswer = await this.peerConn.createAnswer();\n        } catch (err) {\n            logger.debug(\"Failed to create answer: \", err);\n            this.terminate(CallParty.Local, CallErrorCode.CreateAnswer, true);\n            return;\n        }\n\n        try {\n            await this.peerConn.setLocalDescription(myAnswer);\n            this.setState(CallState.Connecting);\n\n            // Allow a short time for initial candidates to be gathered\n            await new Promise(resolve => {\n                setTimeout(resolve, 200);\n            });\n\n            this.sendAnswer();\n        } catch (err) {\n            logger.debug(\"Error setting local description!\", err);\n            this.terminate(CallParty.Local, CallErrorCode.SetLocalDescription, true);\n            return;\n        }\n    }\n\n    /**\n     * Internal\n     * @param {Object} event\n     */\n    private gotLocalIceCandidate = (event: RTCPeerConnectionIceEvent): Promise<void> => {\n        if (event.candidate) {\n            logger.debug(\n                \"Call \" + this.callId + \" got local ICE \" + event.candidate.sdpMid + \" candidate: \" +\n                event.candidate.candidate,\n            );\n\n            if (this.callHasEnded()) return;\n\n            // As with the offer, note we need to make a copy of this object, not\n            // pass the original: that broke in Chrome ~m43.\n            if (event.candidate.candidate !== '' || !this.sentEndOfCandidates) {\n                this.queueCandidate(event.candidate);\n\n                if (event.candidate.candidate === '') this.sentEndOfCandidates = true;\n            }\n        }\n    };\n\n    private onIceGatheringStateChange = (event: Event): void => {\n        logger.debug(\"ice gathering state changed to \" + this.peerConn.iceGatheringState);\n        if (this.peerConn.iceGatheringState === 'complete' && !this.sentEndOfCandidates) {\n            // If we didn't get an empty-string candidate to signal the end of candidates,\n            // create one ourselves now gathering has finished.\n            // We cast because the interface lists all the properties as required but we\n            // only want to send 'candidate'\n            // XXX: We probably want to send either sdpMid or sdpMLineIndex, as it's not strictly\n            // correct to have a candidate that lacks both of these. We'd have to figure out what\n            // previous candidates had been sent with and copy them.\n            const c = {\n                candidate: '',\n            } as RTCIceCandidate;\n            this.queueCandidate(c);\n            this.sentEndOfCandidates = true;\n        }\n    };\n\n    public async onRemoteIceCandidatesReceived(ev: MatrixEvent): Promise<void> {\n        if (this.callHasEnded()) {\n            //debuglog(\"Ignoring remote ICE candidate because call has ended\");\n            return;\n        }\n\n        const content = ev.getContent<MCallCandidates>();\n        const candidates = content.candidates;\n        if (!candidates) {\n            logger.info(\"Ignoring candidates event with no candidates!\");\n            return;\n        }\n\n        const fromPartyId = content.version === 0 ? null : content.party_id || null;\n\n        if (this.opponentPartyId === undefined) {\n            // we haven't picked an opponent yet so save the candidates\n            logger.info(`Buffering ${candidates.length} candidates until we pick an opponent`);\n            const bufferedCandidates = this.remoteCandidateBuffer.get(fromPartyId) || [];\n            bufferedCandidates.push(...candidates);\n            this.remoteCandidateBuffer.set(fromPartyId, bufferedCandidates);\n            return;\n        }\n\n        if (!this.partyIdMatches(content)) {\n            logger.info(\n                `Ignoring candidates from party ID ${content.party_id}: ` +\n                `we have chosen party ID ${this.opponentPartyId}`,\n            );\n\n            return;\n        }\n\n        await this.addIceCandidates(candidates);\n    }\n\n    /**\n     * Used by MatrixClient.\n     * @param {Object} msg\n     */\n    public async onAnswerReceived(event: MatrixEvent): Promise<void> {\n        const content = event.getContent<MCallAnswer>();\n        logger.debug(`Got answer for call ID ${this.callId} from party ID ${content.party_id}`);\n\n        if (this.callHasEnded()) {\n            logger.debug(`Ignoring answer because call ID ${this.callId} has ended`);\n            return;\n        }\n\n        if (this.opponentPartyId !== undefined) {\n            logger.info(\n                `Ignoring answer from party ID ${content.party_id}: ` +\n                `we already have an answer/reject from ${this.opponentPartyId}`,\n            );\n            return;\n        }\n\n        this.chooseOpponent(event);\n        await this.addBufferedIceCandidates();\n\n        this.setState(CallState.Connecting);\n\n        const sdpStreamMetadata = content[SDPStreamMetadataKey];\n        if (sdpStreamMetadata) {\n            this.updateRemoteSDPStreamMetadata(sdpStreamMetadata);\n        } else {\n            logger.warn(\"Did not get any SDPStreamMetadata! Can not send/receive multiple streams\");\n        }\n\n        try {\n            await this.peerConn.setRemoteDescription(content.answer);\n        } catch (e) {\n            logger.debug(\"Failed to set remote description\", e);\n            this.terminate(CallParty.Local, CallErrorCode.SetRemoteDescription, false);\n            return;\n        }\n\n        // If the answer we selected has a party_id, send a select_answer event\n        // We do this after setting the remote description since otherwise we'd block\n        // call setup on it\n        if (this.opponentPartyId !== null) {\n            try {\n                await this.sendVoipEvent(EventType.CallSelectAnswer, {\n                    selected_party_id: this.opponentPartyId,\n                });\n            } catch (err) {\n                // This isn't fatal, and will just mean that if another party has raced to answer\n                // the call, they won't know they got rejected, so we carry on & don't retry.\n                logger.warn(\"Failed to send select_answer event\", err);\n            }\n        }\n    }\n\n    public async onSelectAnswerReceived(event: MatrixEvent): Promise<void> {\n        if (this.direction !== CallDirection.Inbound) {\n            logger.warn(\"Got select_answer for an outbound call: ignoring\");\n            return;\n        }\n\n        const selectedPartyId = event.getContent<MCallSelectAnswer>().selected_party_id;\n\n        if (selectedPartyId === undefined || selectedPartyId === null) {\n            logger.warn(\"Got nonsensical select_answer with null/undefined selected_party_id: ignoring\");\n            return;\n        }\n\n        if (selectedPartyId !== this.ourPartyId) {\n            logger.info(`Got select_answer for party ID ${selectedPartyId}: we are party ID ${this.ourPartyId}.`);\n            // The other party has picked somebody else's answer\n            this.terminate(CallParty.Remote, CallErrorCode.AnsweredElsewhere, true);\n        }\n    }\n\n    public async onNegotiateReceived(event: MatrixEvent): Promise<void> {\n        const content = event.getContent<MCallInviteNegotiate>();\n        const description = content.description;\n        if (!description || !description.sdp || !description.type) {\n            logger.info(\"Ignoring invalid m.call.negotiate event\");\n            return;\n        }\n        // Politeness always follows the direction of the call: in a glare situation,\n        // we pick either the inbound or outbound call, so one side will always be\n        // inbound and one outbound\n        const polite = this.direction === CallDirection.Inbound;\n\n        // Here we follow the perfect negotiation logic from\n        // https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Perfect_negotiation\n        const offerCollision = (\n            (description.type === 'offer') &&\n            (this.makingOffer || this.peerConn.signalingState !== 'stable')\n        );\n\n        this.ignoreOffer = !polite && offerCollision;\n        if (this.ignoreOffer) {\n            logger.info(\"Ignoring colliding negotiate event because we're impolite\");\n            return;\n        }\n\n        const prevLocalOnHold = this.isLocalOnHold();\n\n        const sdpStreamMetadata = content[SDPStreamMetadataKey];\n        if (sdpStreamMetadata) {\n            this.updateRemoteSDPStreamMetadata(sdpStreamMetadata);\n        } else {\n            logger.warn(\"Received negotiation event without SDPStreamMetadata!\");\n        }\n\n        try {\n            await this.peerConn.setRemoteDescription(description);\n\n            if (description.type === 'offer') {\n                this.getRidOfRTXCodecs();\n                const localDescription = await this.peerConn.createAnswer();\n                await this.peerConn.setLocalDescription(localDescription);\n\n                this.sendVoipEvent(EventType.CallNegotiate, {\n                    description: this.peerConn.localDescription,\n                    [SDPStreamMetadataKey]: this.getLocalSDPStreamMetadata(),\n                });\n            }\n        } catch (err) {\n            logger.warn(\"Failed to complete negotiation\", err);\n        }\n\n        const newLocalOnHold = this.isLocalOnHold();\n        if (prevLocalOnHold !== newLocalOnHold) {\n            this.emit(CallEvent.LocalHoldUnhold, newLocalOnHold);\n            // also this one for backwards compat\n            this.emit(CallEvent.HoldUnhold, newLocalOnHold);\n        }\n    }\n\n    private updateRemoteSDPStreamMetadata(metadata: SDPStreamMetadata): void {\n        this.remoteSDPStreamMetadata = utils.recursivelyAssign(this.remoteSDPStreamMetadata || {}, metadata, true);\n        for (const feed of this.getRemoteFeeds()) {\n            const streamId = feed.stream.id;\n            feed.setAudioMuted(this.remoteSDPStreamMetadata[streamId]?.audio_muted);\n            feed.setVideoMuted(this.remoteSDPStreamMetadata[streamId]?.video_muted);\n            feed.purpose = this.remoteSDPStreamMetadata[streamId]?.purpose;\n        }\n    }\n\n    public onSDPStreamMetadataChangedReceived(event: MatrixEvent): void {\n        const content = event.getContent<MCallSDPStreamMetadataChanged>();\n        const metadata = content[SDPStreamMetadataKey];\n        this.updateRemoteSDPStreamMetadata(metadata);\n    }\n\n    public async onAssertedIdentityReceived(event: MatrixEvent): Promise<void> {\n        const content = event.getContent<MCAllAssertedIdentity>();\n        if (!content.asserted_identity) return;\n\n        this.remoteAssertedIdentity = {\n            id: content.asserted_identity.id,\n            displayName: content.asserted_identity.display_name,\n        };\n        this.emit(CallEvent.AssertedIdentityChanged);\n    }\n\n    private callHasEnded(): boolean {\n        // This exists as workaround to typescript trying to be clever and erroring\n        // when putting if (this.state === CallState.Ended) return; twice in the same\n        // function, even though that function is async.\n        return this.state === CallState.Ended;\n    }\n\n    private gotLocalOffer = async (description: RTCSessionDescriptionInit): Promise<void> => {\n        logger.debug(\"Created offer: \", description);\n\n        if (this.callHasEnded()) {\n            logger.debug(\"Ignoring newly created offer on call ID \" + this.callId +\n                \" because the call has ended\");\n            return;\n        }\n\n        try {\n            await this.peerConn.setLocalDescription(description);\n        } catch (err) {\n            logger.debug(\"Error setting local description!\", err);\n            this.terminate(CallParty.Local, CallErrorCode.SetLocalDescription, true);\n            return;\n        }\n\n        if (this.peerConn.iceGatheringState === 'gathering') {\n            // Allow a short time for initial candidates to be gathered\n            await new Promise(resolve => {\n                setTimeout(resolve, 200);\n            });\n        }\n\n        if (this.callHasEnded()) return;\n\n        const eventType = this.state === CallState.CreateOffer ? EventType.CallInvite : EventType.CallNegotiate;\n\n        const content = {\n            lifetime: CALL_TIMEOUT_MS,\n        } as MCallInviteNegotiate;\n\n        // clunky because TypeScript can't follow the types through if we use an expression as the key\n        if (this.state === CallState.CreateOffer) {\n            content.offer = this.peerConn.localDescription;\n        } else {\n            content.description = this.peerConn.localDescription;\n        }\n\n        content.capabilities = {\n            'm.call.transferee': this.client.supportsCallTransfer,\n            'm.call.dtmf': false,\n        };\n\n        content[SDPStreamMetadataKey] = this.getLocalSDPStreamMetadata();\n\n        // Get rid of any candidates waiting to be sent: they'll be included in the local\n        // description we just got and will send in the offer.\n        logger.info(`Discarding ${this.candidateSendQueue.length} candidates that will be sent in offer`);\n        this.candidateSendQueue = [];\n\n        try {\n            await this.sendVoipEvent(eventType, content);\n        } catch (error) {\n            logger.error(\"Failed to send invite\", error);\n            if (error.event) this.client.cancelPendingEvent(error.event);\n\n            let code = CallErrorCode.SignallingFailed;\n            let message = \"Signalling failed\";\n            if (this.state === CallState.CreateOffer) {\n                code = CallErrorCode.SendInvite;\n                message = \"Failed to send invite\";\n            }\n            if (error.name == 'UnknownDeviceError') {\n                code = CallErrorCode.UnknownDevices;\n                message = \"Unknown devices present in the room\";\n            }\n\n            this.emit(CallEvent.Error, new CallError(code, message, error));\n            this.terminate(CallParty.Local, code, false);\n\n            // no need to carry on & send the candidate queue, but we also\n            // don't want to rethrow the error\n            return;\n        }\n\n        this.sendCandidateQueue();\n        if (this.state === CallState.CreateOffer) {\n            this.inviteOrAnswerSent = true;\n            this.setState(CallState.InviteSent);\n            this.inviteTimeout = setTimeout(() => {\n                this.inviteTimeout = null;\n                if (this.state === CallState.InviteSent) {\n                    this.hangup(CallErrorCode.InviteTimeout, false);\n                }\n            }, CALL_TIMEOUT_MS);\n        }\n    };\n\n    private getLocalOfferFailed = (err: Error): void => {\n        logger.error(\"Failed to get local offer\", err);\n\n        this.emit(\n            CallEvent.Error,\n            new CallError(\n                CallErrorCode.LocalOfferFailed,\n                \"Failed to get local offer!\", err,\n            ),\n        );\n        this.terminate(CallParty.Local, CallErrorCode.LocalOfferFailed, false);\n    };\n\n    private getUserMediaFailed = (err: Error): void => {\n        if (this.successor) {\n            this.successor.getUserMediaFailed(err);\n            return;\n        }\n\n        logger.warn(\"Failed to get user media - ending call\", err);\n\n        this.emit(\n            CallEvent.Error,\n            new CallError(\n                CallErrorCode.NoUserMedia,\n                \"Couldn't start capturing media! Is your microphone set up and \" +\n                \"does this app have permission?\", err,\n            ),\n        );\n        this.terminate(CallParty.Local, CallErrorCode.NoUserMedia, false);\n    };\n\n    private onIceConnectionStateChanged = (): void => {\n        if (this.callHasEnded()) {\n            return; // because ICE can still complete as we're ending the call\n        }\n        logger.debug(\n            \"Call ID \" + this.callId + \": ICE connection state changed to: \" + this.peerConn.iceConnectionState,\n        );\n        // ideally we'd consider the call to be connected when we get media but\n        // chrome doesn't implement any of the 'onstarted' events yet\n        if (this.peerConn.iceConnectionState == 'connected') {\n            this.setState(CallState.Connected);\n\n            if (!this.callLengthInterval) {\n                this.callLengthInterval = setInterval(() => {\n                    this.callLength++;\n                    this.emit(CallEvent.LengthChanged, this.callLength);\n                }, 1000);\n            }\n        } else if (this.peerConn.iceConnectionState == 'failed') {\n            this.hangup(CallErrorCode.IceFailed, false);\n        }\n    };\n\n    private onSignallingStateChanged = (): void => {\n        logger.debug(\n            \"call \" + this.callId + \": Signalling state changed to: \" +\n            this.peerConn.signalingState,\n        );\n    };\n\n    private onTrack = (ev: RTCTrackEvent): void => {\n        if (ev.streams.length === 0) {\n            logger.warn(`Streamless ${ev.track.kind} found: ignoring.`);\n            return;\n        }\n\n        const stream = ev.streams[0];\n        this.pushRemoteFeed(stream);\n        stream.addEventListener(\"removetrack\", () => {\n            if (stream.getTracks().length === 0) {\n                logger.info(`Stream ID ${stream.id} has no tracks remaining - removing`);\n                this.deleteFeedByStream(stream);\n            }\n        });\n    };\n\n    private onDataChannel = (ev: RTCDataChannelEvent): void => {\n        this.emit(CallEvent.DataChannel, ev.channel);\n    };\n\n    /**\n     * This method removes all video/rtx codecs from screensharing video\n     * transceivers. This is necessary since they can cause problems. Without\n     * this the following steps should produce an error:\n     *   Chromium calls Firefox\n     *   Firefox answers\n     *   Firefox starts screen-sharing\n     *   Chromium starts screen-sharing\n     *   Call crashes for Chromium with:\n     *       [96685:23:0518/162603.933321:ERROR:webrtc_video_engine.cc(3296)] RTX codec (PT=97) mapped to PT=96 which is not in the codec list.\n     *       [96685:23:0518/162603.933377:ERROR:webrtc_video_engine.cc(1171)] GetChangedRecvParameters called without any video codecs.\n     *       [96685:23:0518/162603.933430:ERROR:sdp_offer_answer.cc(4302)] Failed to set local video description recv parameters for m-section with mid='2'. (INVALID_PARAMETER)\n     */\n    private getRidOfRTXCodecs(): void {\n        // RTCRtpReceiver.getCapabilities and RTCRtpSender.getCapabilities don't seem to be supported on FF\n        if (!RTCRtpReceiver.getCapabilities || !RTCRtpSender.getCapabilities) return;\n\n        const recvCodecs = RTCRtpReceiver.getCapabilities(\"video\").codecs;\n        const sendCodecs = RTCRtpSender.getCapabilities(\"video\").codecs;\n        const codecs = [...sendCodecs, ...recvCodecs];\n\n        for (const codec of codecs) {\n            if (codec.mimeType === \"video/rtx\") {\n                const rtxCodecIndex = codecs.indexOf(codec);\n                codecs.splice(rtxCodecIndex, 1);\n            }\n        }\n\n        for (const trans of this.peerConn.getTransceivers()) {\n            if (\n                this.screensharingSenders.includes(trans.sender) &&\n                    (\n                        trans.sender.track?.kind === \"video\" ||\n                        trans.receiver.track?.kind === \"video\"\n                    )\n            ) {\n                trans.setCodecPreferences(codecs);\n            }\n        }\n    }\n\n    private onNegotiationNeeded = async (): Promise<void> => {\n        logger.info(\"Negotiation is needed!\");\n\n        if (this.state !== CallState.CreateOffer && this.opponentVersion === 0) {\n            logger.info(\"Opponent does not support renegotiation: ignoring negotiationneeded event\");\n            return;\n        }\n\n        this.makingOffer = true;\n        try {\n            this.getRidOfRTXCodecs();\n            const myOffer = await this.peerConn.createOffer();\n            await this.gotLocalOffer(myOffer);\n        } catch (e) {\n            this.getLocalOfferFailed(e);\n            return;\n        } finally {\n            this.makingOffer = false;\n        }\n    };\n\n    public onHangupReceived = (msg: MCallHangupReject): void => {\n        logger.debug(\"Hangup received for call ID \" + this.callId);\n\n        // party ID must match (our chosen partner hanging up the call) or be undefined (we haven't chosen\n        // a partner yet but we're treating the hangup as a reject as per VoIP v0)\n        if (this.partyIdMatches(msg) || this.state === CallState.Ringing) {\n            // default reason is user_hangup\n            this.terminate(CallParty.Remote, msg.reason || CallErrorCode.UserHangup, true);\n        } else {\n            logger.info(`Ignoring message from party ID ${msg.party_id}: our partner is ${this.opponentPartyId}`);\n        }\n    };\n\n    public onRejectReceived = (msg: MCallHangupReject): void => {\n        logger.debug(\"Reject received for call ID \" + this.callId);\n\n        // No need to check party_id for reject because if we'd received either\n        // an answer or reject, we wouldn't be in state InviteSent\n\n        const shouldTerminate = (\n            // reject events also end the call if it's ringing: it's another of\n            // our devices rejecting the call.\n            ([CallState.InviteSent, CallState.Ringing].includes(this.state)) ||\n            // also if we're in the init state and it's an inbound call, since\n            // this means we just haven't entered the ringing state yet\n            this.state === CallState.Fledgling && this.direction === CallDirection.Inbound\n        );\n\n        if (shouldTerminate) {\n            this.terminate(CallParty.Remote, msg.reason || CallErrorCode.UserHangup, true);\n        } else {\n            logger.debug(`Call is in state: ${this.state}: ignoring reject`);\n        }\n    };\n\n    public onAnsweredElsewhere = (msg: MCallAnswer): void => {\n        logger.debug(\"Call ID \" + this.callId + \" answered elsewhere\");\n        this.terminate(CallParty.Remote, CallErrorCode.AnsweredElsewhere, true);\n    };\n\n    private setState(state: CallState): void {\n        const oldState = this.state;\n        this.state = state;\n        this.emit(CallEvent.State, state, oldState);\n    }\n\n    /**\n     * Internal\n     * @param {string} eventType\n     * @param {Object} content\n     * @return {Promise}\n     */\n    private sendVoipEvent(eventType: string, content: object): Promise<ISendEventResponse> {\n        return this.client.sendEvent(this.roomId, eventType, Object.assign({}, content, {\n            version: VOIP_PROTO_VERSION,\n            call_id: this.callId,\n            party_id: this.ourPartyId,\n        }));\n    }\n\n    private queueCandidate(content: RTCIceCandidate): void {\n        // We partially de-trickle candidates by waiting for `delay` before sending them\n        // amalgamated, in order to avoid sending too many m.call.candidates events and hitting\n        // rate limits in Matrix.\n        // In practice, it'd be better to remove rate limits for m.call.*\n\n        // N.B. this deliberately lets you queue and send blank candidates, which MSC2746\n        // currently proposes as the way to indicate that candidate gathering is complete.\n        // This will hopefully be changed to an explicit rather than implicit notification\n        // shortly.\n        this.candidateSendQueue.push(content);\n\n        // Don't send the ICE candidates yet if the call is in the ringing state: this\n        // means we tried to pick (ie. started generating candidates) and then failed to\n        // send the answer and went back to the ringing state. Queue up the candidates\n        // to send if we successfully send the answer.\n        // Equally don't send if we haven't yet sent the answer because we can send the\n        // first batch of candidates along with the answer\n        if (this.state === CallState.Ringing || !this.inviteOrAnswerSent) return;\n\n        // MSC2746 recommends these values (can be quite long when calling because the\n        // callee will need a while to answer the call)\n        const delay = this.direction === CallDirection.Inbound ? 500 : 2000;\n\n        if (this.candidateSendTries === 0) {\n            setTimeout(() => {\n                this.sendCandidateQueue();\n            }, delay);\n        }\n    }\n\n    /*\n     * Transfers this call to another user\n     */\n    public async transfer(targetUserId: string): Promise<void> {\n        // Fetch the target user's global profile info: their room avatar / displayname\n        // could be different in whatever room we share with them.\n        const profileInfo = await this.client.getProfileInfo(targetUserId);\n\n        const replacementId = genCallID();\n\n        const body = {\n            replacement_id: genCallID(),\n            target_user: {\n                id: targetUserId,\n                display_name: profileInfo.displayname,\n                avatar_url: profileInfo.avatar_url,\n            },\n            create_call: replacementId,\n        } as MCallReplacesEvent;\n\n        await this.sendVoipEvent(EventType.CallReplaces, body);\n\n        await this.terminate(CallParty.Local, CallErrorCode.Transfered, true);\n    }\n\n    /*\n     * Transfers this call to the target call, effectively 'joining' the\n     * two calls (so the remote parties on each call are connected together).\n     */\n    public async transferToCall(transferTargetCall?: MatrixCall): Promise<void> {\n        const targetProfileInfo = await this.client.getProfileInfo(transferTargetCall.getOpponentMember().userId);\n        const transfereeProfileInfo = await this.client.getProfileInfo(this.getOpponentMember().userId);\n\n        const newCallId = genCallID();\n\n        const bodyToTransferTarget = {\n            // the replacements on each side have their own ID, and it's distinct from the\n            // ID of the new call (but we can use the same function to generate it)\n            replacement_id: genCallID(),\n            target_user: {\n                id: this.getOpponentMember().userId,\n                display_name: transfereeProfileInfo.displayname,\n                avatar_url: transfereeProfileInfo.avatar_url,\n            },\n            await_call: newCallId,\n        } as MCallReplacesEvent;\n\n        await transferTargetCall.sendVoipEvent(EventType.CallReplaces, bodyToTransferTarget);\n\n        const bodyToTransferee = {\n            replacement_id: genCallID(),\n            target_user: {\n                id: transferTargetCall.getOpponentMember().userId,\n                display_name: targetProfileInfo.displayname,\n                avatar_url: targetProfileInfo.avatar_url,\n            },\n            create_call: newCallId,\n        } as MCallReplacesEvent;\n\n        await this.sendVoipEvent(EventType.CallReplaces, bodyToTransferee);\n\n        await this.terminate(CallParty.Local, CallErrorCode.Transfered, true);\n        await transferTargetCall.terminate(CallParty.Local, CallErrorCode.Transfered, true);\n    }\n\n    private async terminate(hangupParty: CallParty, hangupReason: CallErrorCode, shouldEmit: boolean): Promise<void> {\n        if (this.callHasEnded()) return;\n\n        this.callStatsAtEnd = await this.collectCallStats();\n\n        if (this.inviteTimeout) {\n            clearTimeout(this.inviteTimeout);\n            this.inviteTimeout = null;\n        }\n        if (this.callLengthInterval) {\n            clearInterval(this.callLengthInterval);\n            this.callLengthInterval = null;\n        }\n\n        // Order is important here: first we stopAllMedia() and only then we can deleteAllFeeds()\n        // We don't stop media if the call was replaced as we want to re-use streams in the successor\n        if (hangupReason !== CallErrorCode.Replaced) this.stopAllMedia();\n        this.deleteAllFeeds();\n\n        this.hangupParty = hangupParty;\n        this.hangupReason = hangupReason;\n        this.setState(CallState.Ended);\n        if (this.peerConn && this.peerConn.signalingState !== 'closed') {\n            this.peerConn.close();\n        }\n        if (shouldEmit) {\n            this.emit(CallEvent.Hangup);\n        }\n    }\n\n    private stopAllMedia(): void {\n        logger.debug(\"Stopping all media for call\", this.callId);\n\n        for (const feed of this.feeds) {\n            if (feed.isLocal() && feed.purpose === SDPStreamMetadataPurpose.Usermedia) {\n                this.client.getMediaHandler().stopUserMediaStream(feed.stream);\n            } else if (feed.isLocal() && feed.purpose === SDPStreamMetadataPurpose.Screenshare) {\n                this.client.getMediaHandler().stopScreensharingStream(feed.stream);\n            } else {\n                logger.debug(\"Stopping remote stream\", feed.stream.id);\n                for (const track of feed.stream.getTracks()) {\n                    track.stop();\n                }\n            }\n        }\n    }\n\n    private checkForErrorListener(): void {\n        if (this.listeners(EventEmitterEvents.Error).length === 0) {\n            throw new Error(\n                \"You MUST attach an error listener using call.on('error', function() {})\",\n            );\n        }\n    }\n\n    private async sendCandidateQueue(): Promise<void> {\n        if (this.candidateSendQueue.length === 0) {\n            return;\n        }\n\n        const candidates = this.candidateSendQueue;\n        this.candidateSendQueue = [];\n        ++this.candidateSendTries;\n        const content = {\n            candidates: candidates,\n        };\n        logger.debug(\"Attempting to send \" + candidates.length + \" candidates\");\n        try {\n            await this.sendVoipEvent(EventType.CallCandidates, content);\n            // reset our retry count if we have successfully sent our candidates\n            // otherwise queueCandidate() will refuse to try to flush the queue\n            this.candidateSendTries = 0;\n        } catch (error) {\n            // don't retry this event: we'll send another one later as we might\n            // have more candidates by then.\n            if (error.event) this.client.cancelPendingEvent(error.event);\n\n            // put all the candidates we failed to send back in the queue\n            this.candidateSendQueue.push(...candidates);\n\n            if (this.candidateSendTries > 5) {\n                logger.debug(\n                    \"Failed to send candidates on attempt \" + this.candidateSendTries +\n                    \". Giving up on this call.\", error,\n                );\n\n                const code = CallErrorCode.SignallingFailed;\n                const message = \"Signalling failed\";\n\n                this.emit(CallEvent.Error, new CallError(code, message, error));\n                this.hangup(code, false);\n\n                return;\n            }\n\n            const delayMs = 500 * Math.pow(2, this.candidateSendTries);\n            ++this.candidateSendTries;\n            logger.debug(\"Failed to send candidates. Retrying in \" + delayMs + \"ms\", error);\n            setTimeout(() => {\n                this.sendCandidateQueue();\n            }, delayMs);\n        }\n    }\n\n    /**\n     * Place a call to this room.\n     * @throws if you have not specified a listener for 'error' events.\n     * @throws if have passed audio=false.\n     */\n    public async placeCall(audio: boolean, video: boolean): Promise<void> {\n        if (!audio) {\n            throw new Error(\"You CANNOT start a call without audio\");\n        }\n        this.setState(CallState.WaitLocalMedia);\n\n        try {\n            const stream = await this.client.getMediaHandler().getUserMediaStream(audio, video);\n\n            // make sure all the tracks are enabled (same as pushNewLocalFeed -\n            // we probably ought to just have one code path for adding streams)\n            setTracksEnabled(stream.getAudioTracks(), true);\n            setTracksEnabled(stream.getVideoTracks(), true);\n\n            const callFeed = new CallFeed({\n                client: this.client,\n                roomId: this.roomId,\n                userId: this.client.getUserId(),\n                stream,\n                purpose: SDPStreamMetadataPurpose.Usermedia,\n                audioMuted: false,\n                videoMuted: false,\n            });\n            await this.placeCallWithCallFeeds([callFeed]);\n        } catch (e) {\n            this.getUserMediaFailed(e);\n            return;\n        }\n    }\n\n    /**\n     * Place a call to this room with call feed.\n     * @param {CallFeed[]} callFeeds to use\n     * @throws if you have not specified a listener for 'error' events.\n     * @throws if have passed audio=false.\n     */\n    public async placeCallWithCallFeeds(callFeeds: CallFeed[]): Promise<void> {\n        this.checkForErrorListener();\n        this.direction = CallDirection.Outbound;\n\n        // XXX Find a better way to do this\n        this.client.callEventHandler.calls.set(this.callId, this);\n\n        // make sure we have valid turn creds. Unless something's gone wrong, it should\n        // poll and keep the credentials valid so this should be instant.\n        const haveTurnCreds = await this.client.checkTurnServers();\n        if (!haveTurnCreds) {\n            logger.warn(\"Failed to get TURN credentials! Proceeding with call anyway...\");\n        }\n\n        // create the peer connection now so it can be gathering candidates while we get user\n        // media (assuming a candidate pool size is configured)\n        this.peerConn = this.createPeerConnection();\n        this.gotCallFeedsForInvite(callFeeds);\n    }\n\n    private createPeerConnection(): RTCPeerConnection {\n        const pc = new window.RTCPeerConnection({\n            iceTransportPolicy: this.forceTURN ? 'relay' : undefined,\n            iceServers: this.turnServers,\n            iceCandidatePoolSize: this.client.iceCandidatePoolSize,\n        });\n\n        // 'connectionstatechange' would be better, but firefox doesn't implement that.\n        pc.addEventListener('iceconnectionstatechange', this.onIceConnectionStateChanged);\n        pc.addEventListener('signalingstatechange', this.onSignallingStateChanged);\n        pc.addEventListener('icecandidate', this.gotLocalIceCandidate);\n        pc.addEventListener('icegatheringstatechange', this.onIceGatheringStateChange);\n        pc.addEventListener('track', this.onTrack);\n        pc.addEventListener('negotiationneeded', this.onNegotiationNeeded);\n        pc.addEventListener('datachannel', this.onDataChannel);\n\n        return pc;\n    }\n\n    private partyIdMatches(msg: MCallBase): boolean {\n        // They must either match or both be absent (in which case opponentPartyId will be null)\n        // Also we ignore party IDs on the invite/offer if the version is 0, so we must do the same\n        // here and use null if the version is 0 (woe betide any opponent sending messages in the\n        // same call with different versions)\n        const msgPartyId = msg.version === 0 ? null : msg.party_id || null;\n        return msgPartyId === this.opponentPartyId;\n    }\n\n    // Commits to an opponent for the call\n    // ev: An invite or answer event\n    private chooseOpponent(ev: MatrixEvent): void {\n        // I choo-choo-choose you\n        const msg = ev.getContent<MCallInviteNegotiate | MCallAnswer>();\n\n        logger.debug(`Choosing party ID ${msg.party_id} for call ID ${this.callId}`);\n\n        this.opponentVersion = msg.version;\n        if (this.opponentVersion === 0) {\n            // set to null to indicate that we've chosen an opponent, but because\n            // they're v0 they have no party ID (even if they sent one, we're ignoring it)\n            this.opponentPartyId = null;\n        } else {\n            // set to their party ID, or if they're naughty and didn't send one despite\n            // not being v0, set it to null to indicate we picked an opponent with no\n            // party ID\n            this.opponentPartyId = msg.party_id || null;\n        }\n        this.opponentCaps = msg.capabilities || {} as CallCapabilities;\n        this.opponentMember = ev.sender;\n    }\n\n    private async addBufferedIceCandidates(): Promise<void> {\n        const bufferedCandidates = this.remoteCandidateBuffer.get(this.opponentPartyId);\n        if (bufferedCandidates) {\n            logger.info(`Adding ${bufferedCandidates.length} buffered candidates for opponent ${this.opponentPartyId}`);\n            await this.addIceCandidates(bufferedCandidates);\n        }\n        this.remoteCandidateBuffer = null;\n    }\n\n    private async addIceCandidates(candidates: RTCIceCandidate[]): Promise<void> {\n        for (const candidate of candidates) {\n            if (\n                (candidate.sdpMid === null || candidate.sdpMid === undefined) &&\n                (candidate.sdpMLineIndex === null || candidate.sdpMLineIndex === undefined)\n            ) {\n                logger.debug(\"Ignoring remote ICE candidate with no sdpMid or sdpMLineIndex\");\n                continue;\n            }\n            logger.debug(\n                \"Call \" + this.callId + \" got remote ICE \" + candidate.sdpMid + \" candidate: \" + candidate.candidate,\n            );\n            try {\n                await this.peerConn.addIceCandidate(candidate);\n            } catch (err) {\n                if (!this.ignoreOffer) {\n                    logger.info(\"Failed to add remote ICE candidate\", err);\n                }\n            }\n        }\n    }\n\n    public get hasPeerConnection(): boolean {\n        return Boolean(this.peerConn);\n    }\n}\n\nfunction setTracksEnabled(tracks: Array<MediaStreamTrack>, enabled: boolean): void {\n    for (let i = 0; i < tracks.length; i++) {\n        tracks[i].enabled = enabled;\n    }\n}\n\n/**\n * DEPRECATED\n * Use client.createCall()\n *\n * Create a new Matrix call for the browser.\n * @param {MatrixClient} client The client instance to use.\n * @param {string} roomId The room the call is in.\n * @param {Object?} options DEPRECATED optional options map.\n * @param {boolean} options.forceTURN DEPRECATED whether relay through TURN should be\n * forced. This option is deprecated - use opts.forceTURN when creating the matrix client\n * since it's only possible to set this option on outbound calls.\n * @return {MatrixCall} the call or null if the browser doesn't support calling.\n */\nexport function createNewMatrixCall(client: any, roomId: string, options?: CallOpts): MatrixCall {\n    // typeof prevents Node from erroring on an undefined reference\n    if (typeof(window) === 'undefined' || typeof(document) === 'undefined') {\n        // NB. We don't log here as apps try to create a call object as a test for\n        // whether calls are supported, so we shouldn't fill the logs up.\n        return null;\n    }\n\n    // Firefox throws on so little as accessing the RTCPeerConnection when operating in\n    // a secure mode. There's some information at https://bugzilla.mozilla.org/show_bug.cgi?id=1542616\n    // though the concern is that the browser throwing a SecurityError will brick the\n    // client creation process.\n    try {\n        const supported = Boolean(\n            window.RTCPeerConnection || window.RTCSessionDescription ||\n            window.RTCIceCandidate || navigator.mediaDevices,\n        );\n        if (!supported) {\n            // Adds a lot of noise to test runs, so disable logging there.\n            if (process.env.NODE_ENV !== \"test\") {\n                logger.error(\"WebRTC is not supported in this browser / environment\");\n            }\n            return null;\n        }\n    } catch (e) {\n        logger.error(\"Exception thrown when trying to access WebRTC\", e);\n        return null;\n    }\n\n    const optionsForceTURN = options ? options.forceTURN : false;\n\n    const opts = {\n        client: client,\n        roomId: roomId,\n        turnServers: client.getTurnServers(),\n        // call level options\n        forceTURN: client.forceTURN || optionsForceTURN,\n    };\n    const call = new MatrixCall(opts);\n\n    client.reEmitter.reEmit(call, Object.values(CallEvent));\n\n    return call;\n}\n",
    "/*\nCopyright 2020 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { MatrixEvent, MatrixEventEvent } from '../models/event';\nimport { logger } from '../logger';\nimport { CallDirection, CallErrorCode, CallState, createNewMatrixCall, MatrixCall } from './call';\nimport { EventType } from '../@types/event';\nimport { ClientEvent, MatrixClient } from '../client';\nimport { MCallAnswer, MCallHangupReject } from \"./callEventTypes\";\nimport { SyncState } from \"../sync\";\nimport { RoomEvent } from \"../models/room\";\n\n// Don't ring unless we'd be ringing for at least 3 seconds: the user needs some\n// time to press the 'accept' button\nconst RING_GRACE_PERIOD = 3000;\n\nexport enum CallEventHandlerEvent {\n    Incoming = \"Call.incoming\",\n}\n\nexport type CallEventHandlerEventHandlerMap = {\n    [CallEventHandlerEvent.Incoming]: (call: MatrixCall) => void;\n};\n\nexport class CallEventHandler {\n    client: MatrixClient;\n    calls: Map<string, MatrixCall>;\n    callEventBuffer: MatrixEvent[];\n    candidateEventsByCall: Map<string, Array<MatrixEvent>>;\n\n    constructor(client: MatrixClient) {\n        this.client = client;\n        this.calls = new Map<string, MatrixCall>();\n        // The sync code always emits one event at a time, so it will patiently\n        // wait for us to finish processing a call invite before delivering the\n        // next event, even if that next event is a hangup. We therefore accumulate\n        // all our call events and then process them on the 'sync' event, ie.\n        // each time a sync has completed. This way, we can avoid emitting incoming\n        // call events if we get both the invite and answer/hangup in the same sync.\n        // This happens quite often, eg. replaying sync from storage, catchup sync\n        // after loading and after we've been offline for a bit.\n        this.callEventBuffer = [];\n        this.candidateEventsByCall = new Map<string, Array<MatrixEvent>>();\n    }\n\n    public start() {\n        this.client.on(ClientEvent.Sync, this.evaluateEventBuffer);\n        this.client.on(RoomEvent.Timeline, this.onRoomTimeline);\n    }\n\n    public stop() {\n        this.client.removeListener(ClientEvent.Sync, this.evaluateEventBuffer);\n        this.client.removeListener(RoomEvent.Timeline, this.onRoomTimeline);\n    }\n\n    private evaluateEventBuffer = async () => {\n        if (this.client.getSyncState() === SyncState.Syncing) {\n            await Promise.all(this.callEventBuffer.map(event => {\n                this.client.decryptEventIfNeeded(event);\n            }));\n\n            const ignoreCallIds = new Set<String>();\n            // inspect the buffer and mark all calls which have been answered\n            // or hung up before passing them to the call event handler.\n            for (const ev of this.callEventBuffer) {\n                if (ev.getType() === EventType.CallAnswer ||\n                        ev.getType() === EventType.CallHangup) {\n                    ignoreCallIds.add(ev.getContent().call_id);\n                }\n            }\n            // now loop through the buffer chronologically and inject them\n            for (const e of this.callEventBuffer) {\n                if (\n                    e.getType() === EventType.CallInvite &&\n                    ignoreCallIds.has(e.getContent().call_id)\n                ) {\n                    // This call has previously been answered or hung up: ignore it\n                    continue;\n                }\n                try {\n                    await this.handleCallEvent(e);\n                } catch (e) {\n                    logger.error(\"Caught exception handling call event\", e);\n                }\n            }\n            this.callEventBuffer = [];\n        }\n    };\n\n    private onRoomTimeline = (event: MatrixEvent) => {\n        this.client.decryptEventIfNeeded(event);\n        // any call events or ones that might be once they're decrypted\n        if (this.eventIsACall(event) || event.isBeingDecrypted()) {\n            // queue up for processing once all events from this sync have been\n            // processed (see above).\n            this.callEventBuffer.push(event);\n        }\n\n        if (event.isBeingDecrypted() || event.isDecryptionFailure()) {\n            // add an event listener for once the event is decrypted.\n            event.once(MatrixEventEvent.Decrypted, async () => {\n                if (!this.eventIsACall(event)) return;\n\n                if (this.callEventBuffer.includes(event)) {\n                    // we were waiting for that event to decrypt, so recheck the buffer\n                    this.evaluateEventBuffer();\n                } else {\n                    // This one wasn't buffered so just run the event handler for it\n                    // straight away\n                    try {\n                        await this.handleCallEvent(event);\n                    } catch (e) {\n                        logger.error(\"Caught exception handling call event\", e);\n                    }\n                }\n            });\n        }\n    };\n\n    private eventIsACall(event: MatrixEvent): boolean {\n        const type = event.getType();\n        /**\n         * Unstable prefixes:\n         *   - org.matrix.call. : MSC3086 https://github.com/matrix-org/matrix-doc/pull/3086\n         */\n        return type.startsWith(\"m.call.\") || type.startsWith(\"org.matrix.call.\");\n    }\n\n    private async handleCallEvent(event: MatrixEvent) {\n        const content = event.getContent();\n        const type = event.getType() as EventType;\n        const weSentTheEvent = event.getSender() === this.client.credentials.userId;\n        let call = content.call_id ? this.calls.get(content.call_id) : undefined;\n        //console.info(\"RECV %s content=%s\", type, JSON.stringify(content));\n\n        if (type === EventType.CallInvite) {\n            // ignore invites you send\n            if (weSentTheEvent) return;\n            // expired call\n            if (event.getLocalAge() > content.lifetime - RING_GRACE_PERIOD) return;\n            // stale/old invite event\n            if (call && call.state === CallState.Ended) return;\n\n            if (call) {\n                logger.log(\n                    `WARN: Already have a MatrixCall with id ${content.call_id} but got an ` +\n                    `invite. Clobbering.`,\n                );\n            }\n\n            const timeUntilTurnCresExpire = this.client.getTurnServersExpiry() - Date.now();\n            logger.info(\"Current turn creds expire in \" + timeUntilTurnCresExpire + \" ms\");\n            call = createNewMatrixCall(\n                this.client,\n                event.getRoomId(),\n                { forceTURN: this.client.forceTURN },\n            );\n            if (!call) {\n                logger.log(\n                    \"Incoming call ID \" + content.call_id + \" but this client \" +\n                    \"doesn't support WebRTC\",\n                );\n                // don't hang up the call: there could be other clients\n                // connected that do support WebRTC and declining the\n                // the call on their behalf would be really annoying.\n                return;\n            }\n\n            call.callId = content.call_id;\n            await call.initWithInvite(event);\n            this.calls.set(call.callId, call);\n\n            // if we stashed candidate events for that call ID, play them back now\n            if (this.candidateEventsByCall.get(call.callId)) {\n                for (const ev of this.candidateEventsByCall.get(call.callId)) {\n                    call.onRemoteIceCandidatesReceived(ev);\n                }\n            }\n\n            // Were we trying to call that user (room)?\n            let existingCall;\n            for (const thisCall of this.calls.values()) {\n                const isCalling = [CallState.WaitLocalMedia, CallState.CreateOffer, CallState.InviteSent].includes(\n                    thisCall.state,\n                );\n\n                if (\n                    call.roomId === thisCall.roomId &&\n                    thisCall.direction === CallDirection.Outbound &&\n                    isCalling\n                ) {\n                    existingCall = thisCall;\n                    break;\n                }\n            }\n\n            if (existingCall) {\n                // If we've only got to wait_local_media or create_offer and\n                // we've got an invite, pick the incoming call because we know\n                // we haven't sent our invite yet otherwise, pick whichever\n                // call has the lowest call ID (by string comparison)\n                if (\n                    existingCall.state === CallState.WaitLocalMedia ||\n                    existingCall.state === CallState.CreateOffer ||\n                    existingCall.callId > call.callId\n                ) {\n                    logger.log(\n                        \"Glare detected: answering incoming call \" + call.callId +\n                        \" and canceling outgoing call \" + existingCall.callId,\n                    );\n                    existingCall.replacedBy(call);\n                    call.answer();\n                } else {\n                    logger.log(\n                        \"Glare detected: rejecting incoming call \" + call.callId +\n                        \" and keeping outgoing call \" + existingCall.callId,\n                    );\n                    call.hangup(CallErrorCode.Replaced, true);\n                }\n            } else {\n                this.client.emit(CallEventHandlerEvent.Incoming, call);\n            }\n            return;\n        } else if (type === EventType.CallCandidates) {\n            if (weSentTheEvent) return;\n\n            if (!call) {\n                // store the candidates; we may get a call eventually.\n                if (!this.candidateEventsByCall.has(content.call_id)) {\n                    this.candidateEventsByCall.set(content.call_id, []);\n                }\n                this.candidateEventsByCall.get(content.call_id).push(event);\n            } else {\n                call.onRemoteIceCandidatesReceived(event);\n            }\n            return;\n        } else if ([EventType.CallHangup, EventType.CallReject].includes(type)) {\n            // Note that we also observe our own hangups here so we can see\n            // if we've already rejected a call that would otherwise be valid\n            if (!call) {\n                // if not live, store the fact that the call has ended because\n                // we're probably getting events backwards so\n                // the hangup will come before the invite\n                call = createNewMatrixCall(this.client, event.getRoomId());\n                if (call) {\n                    call.callId = content.call_id;\n                    call.initWithHangup(event);\n                    this.calls.set(content.call_id, call);\n                }\n            } else {\n                if (call.state !== CallState.Ended) {\n                    if (type === EventType.CallHangup) {\n                        call.onHangupReceived(content as MCallHangupReject);\n                    } else {\n                        call.onRejectReceived(content as MCallHangupReject);\n                    }\n\n                    // @ts-expect-error typescript thinks the state can't be 'ended' because we're\n                    // inside the if block where it wasn't, but it could have changed because\n                    // on[Hangup|Reject]Received are side-effecty.\n                    if (call.state === CallState.Ended) this.calls.delete(content.call_id);\n                }\n            }\n            return;\n        }\n\n        // The following events need a call and a peer connection\n        if (!call || !call.hasPeerConnection) {\n            logger.warn(\"Discarding an event, we don't have a call/peerConn\", type);\n            return;\n        }\n        // Ignore remote echo\n        if (event.getContent().party_id === call.ourPartyId) return;\n\n        switch (type) {\n            case EventType.CallAnswer:\n                if (weSentTheEvent) {\n                    if (call.state === CallState.Ringing) {\n                        call.onAnsweredElsewhere(content as MCallAnswer);\n                    }\n                } else {\n                    call.onAnswerReceived(event);\n                }\n                break;\n            case EventType.CallSelectAnswer:\n                call.onSelectAnswerReceived(event);\n                break;\n\n            case EventType.CallNegotiate:\n                call.onNegotiateReceived(event);\n                break;\n\n            case EventType.CallAssertedIdentity:\n            case EventType.CallAssertedIdentityPrefix:\n                call.onAssertedIdentityReceived(event);\n                break;\n\n            case EventType.CallSDPStreamMetadataChanged:\n            case EventType.CallSDPStreamMetadataChangedPrefix:\n                call.onSDPStreamMetadataChangedReceived(event);\n                break;\n        }\n    }\n}\n",
    "// allow non-camelcase as these are events type that go onto the wire\n/* eslint-disable camelcase */\n\nimport { CallErrorCode } from \"./call\";\n\n// TODO: Change to \"sdp_stream_metadata\" when MSC3077 is merged\nexport const SDPStreamMetadataKey = \"org.matrix.msc3077.sdp_stream_metadata\";\n\nexport enum SDPStreamMetadataPurpose {\n    Usermedia = \"m.usermedia\",\n    Screenshare = \"m.screenshare\",\n}\n\nexport interface SDPStreamMetadataObject {\n    purpose: SDPStreamMetadataPurpose;\n    audio_muted: boolean;\n    video_muted: boolean;\n}\n\nexport interface SDPStreamMetadata {\n    [key: string]: SDPStreamMetadataObject;\n}\n\nexport interface CallCapabilities {\n    'm.call.transferee': boolean;\n    'm.call.dtmf': boolean;\n}\n\nexport interface CallReplacesTarget {\n    id: string;\n    display_name: string;\n    avatar_url: string;\n}\n\nexport interface MCallBase {\n    call_id: string;\n    version: string | number;\n    party_id?: string;\n}\n\nexport interface MCallAnswer extends MCallBase {\n    answer: RTCSessionDescription;\n    capabilities?: CallCapabilities;\n    [SDPStreamMetadataKey]: SDPStreamMetadata;\n}\n\nexport interface MCallSelectAnswer extends MCallBase {\n    selected_party_id: string;\n}\n\nexport interface MCallInviteNegotiate extends MCallBase {\n    offer: RTCSessionDescription;\n    description: RTCSessionDescription;\n    lifetime: number;\n    capabilities?: CallCapabilities;\n    [SDPStreamMetadataKey]: SDPStreamMetadata;\n}\n\nexport interface MCallSDPStreamMetadataChanged extends MCallBase {\n    [SDPStreamMetadataKey]: SDPStreamMetadata;\n}\n\nexport interface MCallReplacesEvent extends MCallBase {\n    replacement_id: string;\n    target_user: CallReplacesTarget;\n    create_call: string;\n    await_call: string;\n    target_room: string;\n}\n\nexport interface MCAllAssertedIdentity extends MCallBase {\n    asserted_identity: {\n        id: string;\n        display_name: string;\n        avatar_url: string;\n    };\n}\n\nexport interface MCallCandidates extends MCallBase {\n    candidates: RTCIceCandidate[];\n}\n\nexport interface MCallHangupReject extends MCallBase {\n    reason?: CallErrorCode;\n}\n\n/* eslint-enable camelcase */\n",
    "/*\nCopyright 2021 Šimon Brandner <simon.bra.ag@gmail.com>\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { SDPStreamMetadataPurpose } from \"./callEventTypes\";\nimport { MatrixClient } from \"../client\";\nimport { RoomMember } from \"../models/room-member\";\nimport { TypedEventEmitter } from \"../models/typed-event-emitter\";\n\nconst POLLING_INTERVAL = 200; // ms\nexport const SPEAKING_THRESHOLD = -60; // dB\nconst SPEAKING_SAMPLE_COUNT = 8; // samples\n\nexport interface ICallFeedOpts {\n    client: MatrixClient;\n    roomId: string;\n    userId: string;\n    stream: MediaStream;\n    purpose: SDPStreamMetadataPurpose;\n    /**\n     * Whether or not the remote SDPStreamMetadata says audio is muted\n     */\n    audioMuted: boolean;\n    /**\n     * Whether or not the remote SDPStreamMetadata says video is muted\n     */\n    videoMuted: boolean;\n}\n\nexport enum CallFeedEvent {\n    NewStream = \"new_stream\",\n    MuteStateChanged = \"mute_state_changed\",\n    VolumeChanged = \"volume_changed\",\n    Speaking = \"speaking\",\n}\n\ntype EventHandlerMap = {\n    [CallFeedEvent.NewStream]: (stream: MediaStream) => void;\n    [CallFeedEvent.MuteStateChanged]: (audioMuted: boolean, videoMuted: boolean) => void;\n    [CallFeedEvent.VolumeChanged]: (volume: number) => void;\n    [CallFeedEvent.Speaking]: (speaking: boolean) => void;\n};\n\nexport class CallFeed extends TypedEventEmitter<CallFeedEvent, EventHandlerMap> {\n    public stream: MediaStream;\n    public userId: string;\n    public purpose: SDPStreamMetadataPurpose;\n    public speakingVolumeSamples: number[];\n\n    private client: MatrixClient;\n    private roomId: string;\n    private audioMuted: boolean;\n    private videoMuted: boolean;\n    private measuringVolumeActivity = false;\n    private audioContext: AudioContext;\n    private analyser: AnalyserNode;\n    private frequencyBinCount: Float32Array;\n    private speakingThreshold = SPEAKING_THRESHOLD;\n    private speaking = false;\n    private volumeLooperTimeout: number;\n\n    constructor(opts: ICallFeedOpts) {\n        super();\n\n        this.client = opts.client;\n        this.roomId = opts.roomId;\n        this.userId = opts.userId;\n        this.purpose = opts.purpose;\n        this.audioMuted = opts.audioMuted;\n        this.videoMuted = opts.videoMuted;\n        this.speakingVolumeSamples = new Array(SPEAKING_SAMPLE_COUNT).fill(-Infinity);\n\n        this.updateStream(null, opts.stream);\n\n        if (this.hasAudioTrack) {\n            this.initVolumeMeasuring();\n        }\n    }\n\n    private get hasAudioTrack(): boolean {\n        return this.stream.getAudioTracks().length > 0;\n    }\n\n    private updateStream(oldStream: MediaStream, newStream: MediaStream): void {\n        if (newStream === oldStream) return;\n\n        if (oldStream) {\n            oldStream.removeEventListener(\"addtrack\", this.onAddTrack);\n            this.measureVolumeActivity(false);\n        }\n        if (newStream) {\n            this.stream = newStream;\n            newStream.addEventListener(\"addtrack\", this.onAddTrack);\n\n            if (this.hasAudioTrack) {\n                this.initVolumeMeasuring();\n            } else {\n                this.measureVolumeActivity(false);\n            }\n        }\n\n        this.emit(CallFeedEvent.NewStream, this.stream);\n    }\n\n    private initVolumeMeasuring(): void {\n        const AudioContext = window.AudioContext || window.webkitAudioContext;\n        if (!this.hasAudioTrack || !AudioContext) return;\n\n        this.audioContext = new AudioContext();\n\n        this.analyser = this.audioContext.createAnalyser();\n        this.analyser.fftSize = 512;\n        this.analyser.smoothingTimeConstant = 0.1;\n\n        const mediaStreamAudioSourceNode = this.audioContext.createMediaStreamSource(this.stream);\n        mediaStreamAudioSourceNode.connect(this.analyser);\n\n        this.frequencyBinCount = new Float32Array(this.analyser.frequencyBinCount);\n    }\n\n    private onAddTrack = (): void => {\n        this.emit(CallFeedEvent.NewStream, this.stream);\n    };\n\n    /**\n     * Returns callRoom member\n     * @returns member of the callRoom\n     */\n    public getMember(): RoomMember {\n        const callRoom = this.client.getRoom(this.roomId);\n        return callRoom.getMember(this.userId);\n    }\n\n    /**\n     * Returns true if CallFeed is local, otherwise returns false\n     * @returns {boolean} is local?\n     */\n    public isLocal(): boolean {\n        return this.userId === this.client.getUserId();\n    }\n\n    /**\n     * Returns true if audio is muted or if there are no audio\n     * tracks, otherwise returns false\n     * @returns {boolean} is audio muted?\n     */\n    public isAudioMuted(): boolean {\n        return this.stream.getAudioTracks().length === 0 || this.audioMuted;\n    }\n\n    /**\n     * Returns true video is muted or if there are no video\n     * tracks, otherwise returns false\n     * @returns {boolean} is video muted?\n     */\n    public isVideoMuted(): boolean {\n        // We assume only one video track\n        return this.stream.getVideoTracks().length === 0 || this.videoMuted;\n    }\n\n    public isSpeaking(): boolean {\n        return this.speaking;\n    }\n\n    /**\n     * Replaces the current MediaStream with a new one.\n     * This method should be only used by MatrixCall.\n     * @param newStream new stream with which to replace the current one\n     */\n    public setNewStream(newStream: MediaStream): void {\n        this.updateStream(this.stream, newStream);\n    }\n\n    /**\n     * Set feed's internal audio mute state\n     * @param muted is the feed's audio muted?\n     */\n    public setAudioMuted(muted: boolean): void {\n        this.audioMuted = muted;\n        this.speakingVolumeSamples.fill(-Infinity);\n        this.emit(CallFeedEvent.MuteStateChanged, this.audioMuted, this.videoMuted);\n    }\n\n    /**\n     * Set feed's internal video mute state\n     * @param muted is the feed's video muted?\n     */\n    public setVideoMuted(muted: boolean): void {\n        this.videoMuted = muted;\n        this.emit(CallFeedEvent.MuteStateChanged, this.audioMuted, this.videoMuted);\n    }\n\n    /**\n     * Starts emitting volume_changed events where the emitter value is in decibels\n     * @param enabled emit volume changes\n     */\n    public measureVolumeActivity(enabled: boolean): void {\n        if (enabled) {\n            if (!this.audioContext || !this.analyser || !this.frequencyBinCount || !this.hasAudioTrack) return;\n\n            this.measuringVolumeActivity = true;\n            this.volumeLooper();\n        } else {\n            this.measuringVolumeActivity = false;\n            this.speakingVolumeSamples.fill(-Infinity);\n            this.emit(CallFeedEvent.VolumeChanged, -Infinity);\n        }\n    }\n\n    public setSpeakingThreshold(threshold: number) {\n        this.speakingThreshold = threshold;\n    }\n\n    private volumeLooper = () => {\n        if (!this.analyser) return;\n\n        if (!this.measuringVolumeActivity) return;\n\n        this.analyser.getFloatFrequencyData(this.frequencyBinCount);\n\n        let maxVolume = -Infinity;\n        for (let i = 0; i < this.frequencyBinCount.length; i++) {\n            if (this.frequencyBinCount[i] > maxVolume) {\n                maxVolume = this.frequencyBinCount[i];\n            }\n        }\n\n        this.speakingVolumeSamples.shift();\n        this.speakingVolumeSamples.push(maxVolume);\n\n        this.emit(CallFeedEvent.VolumeChanged, maxVolume);\n\n        let newSpeaking = false;\n\n        for (let i = 0; i < this.speakingVolumeSamples.length; i++) {\n            const volume = this.speakingVolumeSamples[i];\n\n            if (volume > this.speakingThreshold) {\n                newSpeaking = true;\n                break;\n            }\n        }\n\n        if (this.speaking !== newSpeaking) {\n            this.speaking = newSpeaking;\n            this.emit(CallFeedEvent.Speaking, this.speaking);\n        }\n\n        this.volumeLooperTimeout = setTimeout(this.volumeLooper, POLLING_INTERVAL);\n    };\n\n    public dispose(): void {\n        clearTimeout(this.volumeLooperTimeout);\n    }\n}\n",
    "/*\nCopyright 2015, 2016 OpenMarket Ltd\nCopyright 2017 New Vector Ltd\nCopyright 2019, 2020 The Matrix.org Foundation C.I.C.\nCopyright 2021 - 2022 Šimon Brandner <simon.bra.ag@gmail.com>\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { logger } from \"../logger\";\nimport { MatrixClient } from \"../client\";\nimport { CallState } from \"./call\";\n\nexport class MediaHandler {\n    private audioInput: string;\n    private videoInput: string;\n    private localUserMediaStream?: MediaStream;\n    public userMediaStreams: MediaStream[] = [];\n    public screensharingStreams: MediaStream[] = [];\n\n    constructor(private client: MatrixClient) { }\n\n    /**\n     * Set an audio input device to use for MatrixCalls\n     * @param {string} deviceId the identifier for the device\n     * undefined treated as unset\n     */\n    public async setAudioInput(deviceId: string): Promise<void> {\n        logger.info(\"LOG setting audio input to\", deviceId);\n\n        if (this.audioInput === deviceId) return;\n\n        this.audioInput = deviceId;\n        await this.updateLocalUsermediaStreams();\n    }\n\n    /**\n     * Set a video input device to use for MatrixCalls\n     * @param {string} deviceId the identifier for the device\n     * undefined treated as unset\n     */\n    public async setVideoInput(deviceId: string): Promise<void> {\n        logger.info(\"LOG setting video input to\", deviceId);\n\n        if (this.videoInput === deviceId) return;\n\n        this.videoInput = deviceId;\n        await this.updateLocalUsermediaStreams();\n    }\n\n    /**\n     * Requests new usermedia streams and replace the old ones\n     */\n    public async updateLocalUsermediaStreams(): Promise<void> {\n        if (this.userMediaStreams.length === 0) return;\n\n        const callMediaStreamParams: Map<string, { audio: boolean, video: boolean }> = new Map();\n        for (const call of this.client.callEventHandler.calls.values()) {\n            callMediaStreamParams.set(call.callId, {\n                audio: call.hasLocalUserMediaAudioTrack,\n                video: call.hasLocalUserMediaVideoTrack,\n            });\n        }\n\n        for (const call of this.client.callEventHandler.calls.values()) {\n            if (call.state === CallState.Ended || !callMediaStreamParams.has(call.callId)) continue;\n\n            const { audio, video } = callMediaStreamParams.get(call.callId);\n\n            // This stream won't be reusable as we will replace the tracks of the old stream\n            const stream = await this.getUserMediaStream(audio, video, false);\n\n            await call.updateLocalUsermediaStream(stream);\n        }\n    }\n\n    public async hasAudioDevice(): Promise<boolean> {\n        const devices = await navigator.mediaDevices.enumerateDevices();\n        return devices.filter(device => device.kind === \"audioinput\").length > 0;\n    }\n\n    public async hasVideoDevice(): Promise<boolean> {\n        const devices = await navigator.mediaDevices.enumerateDevices();\n        return devices.filter(device => device.kind === \"videoinput\").length > 0;\n    }\n\n    /**\n     * @param audio should have an audio track\n     * @param video should have a video track\n     * @param reusable is allowed to be reused by the MediaHandler\n     * @returns {MediaStream} based on passed parameters\n     */\n    public async getUserMediaStream(audio: boolean, video: boolean, reusable = true): Promise<MediaStream> {\n        const shouldRequestAudio = audio && await this.hasAudioDevice();\n        const shouldRequestVideo = video && await this.hasVideoDevice();\n\n        let stream: MediaStream;\n\n        if (\n            !this.localUserMediaStream ||\n            (this.localUserMediaStream.getAudioTracks().length === 0 && shouldRequestAudio) ||\n            (this.localUserMediaStream.getVideoTracks().length === 0 && shouldRequestVideo) ||\n            (this.localUserMediaStream.getAudioTracks()[0]?.getSettings()?.deviceId !== this.audioInput) ||\n            (this.localUserMediaStream.getVideoTracks()[0]?.getSettings()?.deviceId !== this.videoInput)\n        ) {\n            const constraints = this.getUserMediaContraints(shouldRequestAudio, shouldRequestVideo);\n            logger.log(\"Getting user media with constraints\", constraints);\n            stream = await navigator.mediaDevices.getUserMedia(constraints);\n\n            for (const track of stream.getTracks()) {\n                const settings = track.getSettings();\n\n                if (track.kind === \"audio\") {\n                    this.audioInput = settings.deviceId;\n                } else if (track.kind === \"video\") {\n                    this.videoInput = settings.deviceId;\n                }\n            }\n\n            if (reusable) {\n                this.localUserMediaStream = stream;\n            }\n        } else {\n            stream = this.localUserMediaStream.clone();\n\n            if (!shouldRequestAudio) {\n                for (const track of stream.getAudioTracks()) {\n                    stream.removeTrack(track);\n                }\n            }\n\n            if (!shouldRequestVideo) {\n                for (const track of stream.getVideoTracks()) {\n                    stream.removeTrack(track);\n                }\n            }\n        }\n\n        if (reusable) {\n            this.userMediaStreams.push(stream);\n        }\n\n        return stream;\n    }\n\n    /**\n     * Stops all tracks on the provided usermedia stream\n     */\n    public stopUserMediaStream(mediaStream: MediaStream) {\n        logger.debug(\"Stopping usermedia stream\", mediaStream.id);\n        for (const track of mediaStream.getTracks()) {\n            track.stop();\n        }\n\n        const index = this.userMediaStreams.indexOf(mediaStream);\n\n        if (index !== -1) {\n            logger.debug(\"Splicing usermedia stream out stream array\", mediaStream.id);\n            this.userMediaStreams.splice(index, 1);\n        }\n\n        if (this.localUserMediaStream === mediaStream) {\n            this.localUserMediaStream = undefined;\n        }\n    }\n\n    /**\n     * @param desktopCapturerSourceId sourceId for Electron DesktopCapturer\n     * @param reusable is allowed to be reused by the MediaHandler\n     * @returns {MediaStream} based on passed parameters\n     */\n    public async getScreensharingStream(desktopCapturerSourceId: string, reusable = true): Promise<MediaStream | null> {\n        let stream: MediaStream;\n\n        if (this.screensharingStreams.length === 0) {\n            const screenshareConstraints = this.getScreenshareContraints(desktopCapturerSourceId);\n            if (!screenshareConstraints) return null;\n\n            if (desktopCapturerSourceId) {\n                // We are using Electron\n                logger.debug(\"Getting screensharing stream using getUserMedia()\", desktopCapturerSourceId);\n                stream = await navigator.mediaDevices.getUserMedia(screenshareConstraints);\n            } else {\n                // We are not using Electron\n                logger.debug(\"Getting screensharing stream using getDisplayMedia()\");\n                stream = await navigator.mediaDevices.getDisplayMedia(screenshareConstraints);\n            }\n        } else {\n            const matchingStream = this.screensharingStreams[this.screensharingStreams.length - 1];\n            logger.log(\"Cloning screensharing stream\", matchingStream.id);\n            stream = matchingStream.clone();\n        }\n\n        if (reusable) {\n            this.screensharingStreams.push(stream);\n        }\n\n        return stream;\n    }\n\n    /**\n     * Stops all tracks on the provided screensharing stream\n     */\n    public stopScreensharingStream(mediaStream: MediaStream) {\n        logger.debug(\"Stopping screensharing stream\", mediaStream.id);\n        for (const track of mediaStream.getTracks()) {\n            track.stop();\n        }\n\n        const index = this.screensharingStreams.indexOf(mediaStream);\n\n        if (index !== -1) {\n            logger.debug(\"Splicing screensharing stream out stream array\", mediaStream.id);\n            this.screensharingStreams.splice(index, 1);\n        }\n    }\n\n    /**\n     * Stops all local media tracks\n     */\n    public stopAllStreams() {\n        for (const stream of this.userMediaStreams) {\n            for (const track of stream.getTracks()) {\n                track.stop();\n            }\n        }\n\n        for (const stream of this.screensharingStreams) {\n            for (const track of stream.getTracks()) {\n                track.stop();\n            }\n        }\n\n        this.userMediaStreams = [];\n        this.screensharingStreams = [];\n        this.localUserMediaStream = undefined;\n    }\n\n    private getUserMediaContraints(audio: boolean, video: boolean): MediaStreamConstraints {\n        const isWebkit = !!navigator.webkitGetUserMedia;\n\n        return {\n            audio: audio\n                ? {\n                    deviceId: this.audioInput ? { ideal: this.audioInput } : undefined,\n                }\n                : false,\n            video: video\n                ? {\n                    deviceId: this.videoInput ? { ideal: this.videoInput } : undefined,\n                    /* We want 640x360.  Chrome will give it only if we ask exactly,\n                   FF refuses entirely if we ask exactly, so have to ask for ideal\n                   instead\n                   XXX: Is this still true?\n                 */\n                    width: isWebkit ? { exact: 640 } : { ideal: 640 },\n                    height: isWebkit ? { exact: 360 } : { ideal: 360 },\n                }\n                : false,\n        };\n    }\n\n    private getScreenshareContraints(desktopCapturerSourceId?: string): DesktopCapturerConstraints {\n        if (desktopCapturerSourceId) {\n            logger.debug(\"Using desktop capturer source\", desktopCapturerSourceId);\n            return {\n                audio: false,\n                video: {\n                    mandatory: {\n                        chromeMediaSource: \"desktop\",\n                        chromeMediaSourceId: desktopCapturerSourceId,\n                    },\n                },\n            };\n        } else {\n            logger.debug(\"Not using desktop capturer source\");\n            return {\n                audio: false,\n                video: true,\n            };\n        }\n    }\n}\n"
  ]
}